<?php
/**
 * User
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @description Represents a User Account.  As well as basic details about the user it also includes details of Employers that the user account can access.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'category' => '\SynergiTech\Staffology\Model\UserCategory',
        'emailAddress' => 'string',
        'pendingEmailAddress' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'salutation' => 'string',
        'userIdentifier' => 'string',
        'photo' => 'string',
        'photoSasUrl' => 'string',
        'role' => '\SynergiTech\Staffology\Model\UserRole',
        'jobType' => '\SynergiTech\Staffology\Model\UserJobType',
        'jobTitle' => 'string',
        'telephoneNumber' => 'string',
        'businessName' => 'string',
        'industry' => '\SynergiTech\Staffology\Model\UserIndustry',
        'address' => '\SynergiTech\Staffology\Model\Address',
        'statedEmployeeCount' => 'int',
        'emailVerified' => 'bool',
        'emailVerificationKey' => 'string',
        'gdprOptin' => 'bool',
        'inviteCode' => 'string',
        'registrationIp' => 'string',
        'registrationDate' => '\DateTime',
        'lastLogin' => '\DateTime',
        'isActivated' => 'bool',
        'authorization' => '\SynergiTech\Staffology\Model\UserAuthorization',
        'isSuperAdmin' => 'bool',
        'canUseBureauFeatures' => 'bool',
        'canUseBetaFeatures' => 'bool',
        'canUseReportWriter' => 'bool',
        'canUseRefactoredAeRoutines' => 'bool',
        'isBilledInNetSuite' => 'bool',
        'tenant' => '\SynergiTech\Staffology\Model\Tenant',
        'requestDdSetup' => 'bool',
        'disabled' => 'bool',
        'canCreateEmployers' => 'bool',
        'disabledReason' => 'string',
        'directDebitMandate' => '\SynergiTech\Staffology\Model\DirectDebitMandate',
        'displayPrefs' => '\SynergiTech\Staffology\Model\UserDisplayPreferences',
        'showBills' => 'bool',
        'accountingCustomerId' => 'string',
        'pricingTableId' => 'string',
        'utmInfo' => '\SynergiTech\Staffology\Model\UtmInfo',
        'firstBillableActivityDate' => '\DateTime',
        'bureauNotificationEmailAddress' => 'string',
        'monthlyMinimum' => '\SynergiTech\Staffology\Model\MonthlyMinimum',
        'apiMailingEnabled' => 'bool',
        'loginDisabled' => 'bool',
        'isBureauMember' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'category' => null,
        'emailAddress' => 'email',
        'pendingEmailAddress' => 'email',
        'firstName' => null,
        'lastName' => null,
        'salutation' => null,
        'userIdentifier' => null,
        'photo' => null,
        'photoSasUrl' => null,
        'role' => null,
        'jobType' => null,
        'jobTitle' => null,
        'telephoneNumber' => null,
        'businessName' => null,
        'industry' => null,
        'address' => null,
        'statedEmployeeCount' => 'int32',
        'emailVerified' => null,
        'emailVerificationKey' => 'uuid',
        'gdprOptin' => null,
        'inviteCode' => null,
        'registrationIp' => null,
        'registrationDate' => 'date',
        'lastLogin' => 'date',
        'isActivated' => null,
        'authorization' => null,
        'isSuperAdmin' => null,
        'canUseBureauFeatures' => null,
        'canUseBetaFeatures' => null,
        'canUseReportWriter' => null,
        'canUseRefactoredAeRoutines' => null,
        'isBilledInNetSuite' => null,
        'tenant' => null,
        'requestDdSetup' => null,
        'disabled' => null,
        'canCreateEmployers' => null,
        'disabledReason' => null,
        'directDebitMandate' => null,
        'displayPrefs' => null,
        'showBills' => null,
        'accountingCustomerId' => null,
        'pricingTableId' => 'uuid',
        'utmInfo' => null,
        'firstBillableActivityDate' => 'date',
        'bureauNotificationEmailAddress' => 'email',
        'monthlyMinimum' => null,
        'apiMailingEnabled' => null,
        'loginDisabled' => null,
        'isBureauMember' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'category' => false,
        'emailAddress' => true,
        'pendingEmailAddress' => true,
        'firstName' => true,
        'lastName' => true,
        'salutation' => true,
        'userIdentifier' => true,
        'photo' => true,
        'photoSasUrl' => true,
        'role' => false,
        'jobType' => false,
        'jobTitle' => true,
        'telephoneNumber' => true,
        'businessName' => true,
        'industry' => false,
        'address' => false,
        'statedEmployeeCount' => true,
        'emailVerified' => false,
        'emailVerificationKey' => false,
        'gdprOptin' => false,
        'inviteCode' => true,
        'registrationIp' => true,
        'registrationDate' => false,
        'lastLogin' => true,
        'isActivated' => false,
        'authorization' => false,
        'isSuperAdmin' => false,
        'canUseBureauFeatures' => false,
        'canUseBetaFeatures' => false,
        'canUseReportWriter' => false,
        'canUseRefactoredAeRoutines' => false,
        'isBilledInNetSuite' => false,
        'tenant' => false,
        'requestDdSetup' => false,
        'disabled' => false,
        'canCreateEmployers' => false,
        'disabledReason' => true,
        'directDebitMandate' => false,
        'displayPrefs' => false,
        'showBills' => true,
        'accountingCustomerId' => true,
        'pricingTableId' => true,
        'utmInfo' => false,
        'firstBillableActivityDate' => true,
        'bureauNotificationEmailAddress' => true,
        'monthlyMinimum' => false,
        'apiMailingEnabled' => false,
        'loginDisabled' => false,
        'isBureauMember' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'category' => 'category',
        'emailAddress' => 'emailAddress',
        'pendingEmailAddress' => 'pendingEmailAddress',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'salutation' => 'salutation',
        'userIdentifier' => 'userIdentifier',
        'photo' => 'photo',
        'photoSasUrl' => 'photoSasUrl',
        'role' => 'role',
        'jobType' => 'jobType',
        'jobTitle' => 'jobTitle',
        'telephoneNumber' => 'telephoneNumber',
        'businessName' => 'businessName',
        'industry' => 'industry',
        'address' => 'address',
        'statedEmployeeCount' => 'statedEmployeeCount',
        'emailVerified' => 'emailVerified',
        'emailVerificationKey' => 'emailVerificationKey',
        'gdprOptin' => 'gdprOptin',
        'inviteCode' => 'inviteCode',
        'registrationIp' => 'registrationIp',
        'registrationDate' => 'registrationDate',
        'lastLogin' => 'lastLogin',
        'isActivated' => 'isActivated',
        'authorization' => 'authorization',
        'isSuperAdmin' => 'isSuperAdmin',
        'canUseBureauFeatures' => 'canUseBureauFeatures',
        'canUseBetaFeatures' => 'canUseBetaFeatures',
        'canUseReportWriter' => 'canUseReportWriter',
        'canUseRefactoredAeRoutines' => 'canUseRefactoredAeRoutines',
        'isBilledInNetSuite' => 'isBilledInNetSuite',
        'tenant' => 'tenant',
        'requestDdSetup' => 'requestDdSetup',
        'disabled' => 'disabled',
        'canCreateEmployers' => 'canCreateEmployers',
        'disabledReason' => 'disabledReason',
        'directDebitMandate' => 'directDebitMandate',
        'displayPrefs' => 'displayPrefs',
        'showBills' => 'showBills',
        'accountingCustomerId' => 'accountingCustomerId',
        'pricingTableId' => 'pricingTableId',
        'utmInfo' => 'utmInfo',
        'firstBillableActivityDate' => 'firstBillableActivityDate',
        'bureauNotificationEmailAddress' => 'bureauNotificationEmailAddress',
        'monthlyMinimum' => 'monthlyMinimum',
        'apiMailingEnabled' => 'apiMailingEnabled',
        'loginDisabled' => 'loginDisabled',
        'isBureauMember' => 'isBureauMember',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'category' => 'setCategory',
        'emailAddress' => 'setEmailAddress',
        'pendingEmailAddress' => 'setPendingEmailAddress',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'salutation' => 'setSalutation',
        'userIdentifier' => 'setUserIdentifier',
        'photo' => 'setPhoto',
        'photoSasUrl' => 'setPhotoSasUrl',
        'role' => 'setRole',
        'jobType' => 'setJobType',
        'jobTitle' => 'setJobTitle',
        'telephoneNumber' => 'setTelephoneNumber',
        'businessName' => 'setBusinessName',
        'industry' => 'setIndustry',
        'address' => 'setAddress',
        'statedEmployeeCount' => 'setStatedEmployeeCount',
        'emailVerified' => 'setEmailVerified',
        'emailVerificationKey' => 'setEmailVerificationKey',
        'gdprOptin' => 'setGdprOptin',
        'inviteCode' => 'setInviteCode',
        'registrationIp' => 'setRegistrationIp',
        'registrationDate' => 'setRegistrationDate',
        'lastLogin' => 'setLastLogin',
        'isActivated' => 'setIsActivated',
        'authorization' => 'setAuthorization',
        'isSuperAdmin' => 'setIsSuperAdmin',
        'canUseBureauFeatures' => 'setCanUseBureauFeatures',
        'canUseBetaFeatures' => 'setCanUseBetaFeatures',
        'canUseReportWriter' => 'setCanUseReportWriter',
        'canUseRefactoredAeRoutines' => 'setCanUseRefactoredAeRoutines',
        'isBilledInNetSuite' => 'setIsBilledInNetSuite',
        'tenant' => 'setTenant',
        'requestDdSetup' => 'setRequestDdSetup',
        'disabled' => 'setDisabled',
        'canCreateEmployers' => 'setCanCreateEmployers',
        'disabledReason' => 'setDisabledReason',
        'directDebitMandate' => 'setDirectDebitMandate',
        'displayPrefs' => 'setDisplayPrefs',
        'showBills' => 'setShowBills',
        'accountingCustomerId' => 'setAccountingCustomerId',
        'pricingTableId' => 'setPricingTableId',
        'utmInfo' => 'setUtmInfo',
        'firstBillableActivityDate' => 'setFirstBillableActivityDate',
        'bureauNotificationEmailAddress' => 'setBureauNotificationEmailAddress',
        'monthlyMinimum' => 'setMonthlyMinimum',
        'apiMailingEnabled' => 'setApiMailingEnabled',
        'loginDisabled' => 'setLoginDisabled',
        'isBureauMember' => 'setIsBureauMember',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'category' => 'getCategory',
        'emailAddress' => 'getEmailAddress',
        'pendingEmailAddress' => 'getPendingEmailAddress',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'salutation' => 'getSalutation',
        'userIdentifier' => 'getUserIdentifier',
        'photo' => 'getPhoto',
        'photoSasUrl' => 'getPhotoSasUrl',
        'role' => 'getRole',
        'jobType' => 'getJobType',
        'jobTitle' => 'getJobTitle',
        'telephoneNumber' => 'getTelephoneNumber',
        'businessName' => 'getBusinessName',
        'industry' => 'getIndustry',
        'address' => 'getAddress',
        'statedEmployeeCount' => 'getStatedEmployeeCount',
        'emailVerified' => 'getEmailVerified',
        'emailVerificationKey' => 'getEmailVerificationKey',
        'gdprOptin' => 'getGdprOptin',
        'inviteCode' => 'getInviteCode',
        'registrationIp' => 'getRegistrationIp',
        'registrationDate' => 'getRegistrationDate',
        'lastLogin' => 'getLastLogin',
        'isActivated' => 'getIsActivated',
        'authorization' => 'getAuthorization',
        'isSuperAdmin' => 'getIsSuperAdmin',
        'canUseBureauFeatures' => 'getCanUseBureauFeatures',
        'canUseBetaFeatures' => 'getCanUseBetaFeatures',
        'canUseReportWriter' => 'getCanUseReportWriter',
        'canUseRefactoredAeRoutines' => 'getCanUseRefactoredAeRoutines',
        'isBilledInNetSuite' => 'getIsBilledInNetSuite',
        'tenant' => 'getTenant',
        'requestDdSetup' => 'getRequestDdSetup',
        'disabled' => 'getDisabled',
        'canCreateEmployers' => 'getCanCreateEmployers',
        'disabledReason' => 'getDisabledReason',
        'directDebitMandate' => 'getDirectDebitMandate',
        'displayPrefs' => 'getDisplayPrefs',
        'showBills' => 'getShowBills',
        'accountingCustomerId' => 'getAccountingCustomerId',
        'pricingTableId' => 'getPricingTableId',
        'utmInfo' => 'getUtmInfo',
        'firstBillableActivityDate' => 'getFirstBillableActivityDate',
        'bureauNotificationEmailAddress' => 'getBureauNotificationEmailAddress',
        'monthlyMinimum' => 'getMonthlyMinimum',
        'apiMailingEnabled' => 'getApiMailingEnabled',
        'loginDisabled' => 'getLoginDisabled',
        'isBureauMember' => 'getIsBureauMember',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('emailAddress', $data ?? [], null);
        $this->setIfExists('pendingEmailAddress', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('userIdentifier', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('photoSasUrl', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('jobType', $data ?? [], null);
        $this->setIfExists('jobTitle', $data ?? [], null);
        $this->setIfExists('telephoneNumber', $data ?? [], null);
        $this->setIfExists('businessName', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('statedEmployeeCount', $data ?? [], null);
        $this->setIfExists('emailVerified', $data ?? [], null);
        $this->setIfExists('emailVerificationKey', $data ?? [], null);
        $this->setIfExists('gdprOptin', $data ?? [], null);
        $this->setIfExists('inviteCode', $data ?? [], null);
        $this->setIfExists('registrationIp', $data ?? [], null);
        $this->setIfExists('registrationDate', $data ?? [], null);
        $this->setIfExists('lastLogin', $data ?? [], null);
        $this->setIfExists('isActivated', $data ?? [], null);
        $this->setIfExists('authorization', $data ?? [], null);
        $this->setIfExists('isSuperAdmin', $data ?? [], null);
        $this->setIfExists('canUseBureauFeatures', $data ?? [], null);
        $this->setIfExists('canUseBetaFeatures', $data ?? [], null);
        $this->setIfExists('canUseReportWriter', $data ?? [], null);
        $this->setIfExists('canUseRefactoredAeRoutines', $data ?? [], null);
        $this->setIfExists('isBilledInNetSuite', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('requestDdSetup', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('canCreateEmployers', $data ?? [], null);
        $this->setIfExists('disabledReason', $data ?? [], null);
        $this->setIfExists('directDebitMandate', $data ?? [], null);
        $this->setIfExists('displayPrefs', $data ?? [], null);
        $this->setIfExists('showBills', $data ?? [], null);
        $this->setIfExists('accountingCustomerId', $data ?? [], null);
        $this->setIfExists('pricingTableId', $data ?? [], null);
        $this->setIfExists('utmInfo', $data ?? [], null);
        $this->setIfExists('firstBillableActivityDate', $data ?? [], null);
        $this->setIfExists('bureauNotificationEmailAddress', $data ?? [], null);
        $this->setIfExists('monthlyMinimum', $data ?? [], null);
        $this->setIfExists('apiMailingEnabled', $data ?? [], null);
        $this->setIfExists('loginDisabled', $data ?? [], null);
        $this->setIfExists('isBureauMember', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['emailAddress']) && (mb_strlen($this->container['emailAddress']) > 150)) {
            $invalidProperties[] = "invalid value for 'emailAddress', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['pendingEmailAddress']) && (mb_strlen($this->container['pendingEmailAddress']) > 150)) {
            $invalidProperties[] = "invalid value for 'pendingEmailAddress', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['firstName']) && (mb_strlen($this->container['firstName']) > 150)) {
            $invalidProperties[] = "invalid value for 'firstName', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['lastName']) && (mb_strlen($this->container['lastName']) > 150)) {
            $invalidProperties[] = "invalid value for 'lastName', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['salutation']) && (mb_strlen($this->container['salutation']) > 35)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['salutation']) && !preg_match("/^[A-Za-z '\\-]{1,35}$/", $this->container['salutation'])) {
            $invalidProperties[] = "invalid value for 'salutation', must be conform to the pattern /^[A-Za-z '\\-]{1,35}$/.";
        }

        if (!is_null($this->container['userIdentifier']) && (mb_strlen($this->container['userIdentifier']) > 150)) {
            $invalidProperties[] = "invalid value for 'userIdentifier', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['photo']) && (mb_strlen($this->container['photo']) > 1000)) {
            $invalidProperties[] = "invalid value for 'photo', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['jobTitle']) && (mb_strlen($this->container['jobTitle']) > 150)) {
            $invalidProperties[] = "invalid value for 'jobTitle', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['telephoneNumber']) && (mb_strlen($this->container['telephoneNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'telephoneNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['businessName']) && (mb_strlen($this->container['businessName']) > 160)) {
            $invalidProperties[] = "invalid value for 'businessName', the character length must be smaller than or equal to 160.";
        }

        if (!is_null($this->container['businessName']) && !preg_match("/^[A-Za-z0-9 ,;:'£()\\-\\.\\@\\$\\&]{1,160}$/", $this->container['businessName'])) {
            $invalidProperties[] = "invalid value for 'businessName', must be conform to the pattern /^[A-Za-z0-9 ,;:'£()\\-\\.\\@\\$\\&]{1,160}$/.";
        }

        if (!is_null($this->container['registrationIp']) && (mb_strlen($this->container['registrationIp']) > 20)) {
            $invalidProperties[] = "invalid value for 'registrationIp', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['bureauNotificationEmailAddress']) && (mb_strlen($this->container['bureauNotificationEmailAddress']) > 150)) {
            $invalidProperties[] = "invalid value for 'bureauNotificationEmailAddress', the character length must be smaller than or equal to 150.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return \SynergiTech\Staffology\Model\UserCategory|null
     */
    public function getCategory(): ?\SynergiTech\Staffology\Model\UserCategory
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \SynergiTech\Staffology\Model\UserCategory|null $category category
     *
     * @return $this
     */
    public function setCategory(?\SynergiTech\Staffology\Model\UserCategory $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string|null
     */
    public function getEmailAddress(): ?string
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string|null $emailAddress emailAddress
     *
     * @return $this
     */
    public function setEmailAddress(?string $emailAddress): static
    {
        if (is_null($emailAddress)) {
            array_push($this->openAPINullablesSetToNull, 'emailAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($emailAddress) && (mb_strlen($emailAddress) > 150)) {
            throw new InvalidArgumentException('invalid length for $emailAddress when calling User., must be smaller than or equal to 150.');
        }

        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets pendingEmailAddress
     *
     * @return string|null
     */
    public function getPendingEmailAddress(): ?string
    {
        return $this->container['pendingEmailAddress'];
    }

    /**
     * Sets pendingEmailAddress
     *
     * @param string|null $pendingEmailAddress If the user has requested to change their email address then the   address it'll be changed to after verification will be shown here.
     *
     * @return $this
     */
    public function setPendingEmailAddress(?string $pendingEmailAddress): static
    {
        if (is_null($pendingEmailAddress)) {
            array_push($this->openAPINullablesSetToNull, 'pendingEmailAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pendingEmailAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pendingEmailAddress) && (mb_strlen($pendingEmailAddress) > 150)) {
            throw new InvalidArgumentException('invalid length for $pendingEmailAddress when calling User., must be smaller than or equal to 150.');
        }

        $this->container['pendingEmailAddress'] = $pendingEmailAddress;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return $this
     */
    public function setFirstName(?string $firstName): static
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($firstName) && (mb_strlen($firstName) > 150)) {
            throw new InvalidArgumentException('invalid length for $firstName when calling User., must be smaller than or equal to 150.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return $this
     */
    public function setLastName(?string $lastName): static
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($lastName) && (mb_strlen($lastName) > 150)) {
            throw new InvalidArgumentException('invalid length for $lastName when calling User., must be smaller than or equal to 150.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation(): ?string
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return $this
     */
    public function setSalutation(?string $salutation): static
    {
        if (is_null($salutation)) {
            array_push($this->openAPINullablesSetToNull, 'salutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($salutation) && (mb_strlen($salutation) > 35)) {
            throw new InvalidArgumentException('invalid length for $salutation when calling User., must be smaller than or equal to 35.');
        }
        if (!is_null($salutation) && (!preg_match("/^[A-Za-z '\\-]{1,35}$/", ObjectSerializer::toString($salutation)))) {
            throw new InvalidArgumentException("invalid value for \$salutation when calling User., must conform to the pattern /^[A-Za-z '\\-]{1,35}$/.");
        }

        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets userIdentifier
     *
     * @return string|null
     */
    public function getUserIdentifier(): ?string
    {
        return $this->container['userIdentifier'];
    }

    /**
     * Sets userIdentifier
     *
     * @param string|null $userIdentifier userIdentifier
     *
     * @return $this
     */
    public function setUserIdentifier(?string $userIdentifier): static
    {
        if (is_null($userIdentifier)) {
            array_push($this->openAPINullablesSetToNull, 'userIdentifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userIdentifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($userIdentifier) && (mb_strlen($userIdentifier) > 150)) {
            throw new InvalidArgumentException('invalid length for $userIdentifier when calling User., must be smaller than or equal to 150.');
        }

        $this->container['userIdentifier'] = $userIdentifier;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return string|null
     */
    public function getPhoto(): ?string
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param string|null $photo photo
     *
     * @return $this
     */
    public function setPhoto(?string $photo): static
    {
        if (is_null($photo)) {
            array_push($this->openAPINullablesSetToNull, 'photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($photo) && (mb_strlen($photo) > 1000)) {
            throw new InvalidArgumentException('invalid length for $photo when calling User., must be smaller than or equal to 1000.');
        }

        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets photoSasUrl
     *
     * @return string|null
     */
    public function getPhotoSasUrl(): ?string
    {
        return $this->container['photoSasUrl'];
    }

    /**
     * Sets photoSasUrl
     *
     * @param string|null $photoSasUrl photoSasUrl
     *
     * @return $this
     */
    public function setPhotoSasUrl(?string $photoSasUrl): static
    {
        if (is_null($photoSasUrl)) {
            array_push($this->openAPINullablesSetToNull, 'photoSasUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photoSasUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photoSasUrl'] = $photoSasUrl;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \SynergiTech\Staffology\Model\UserRole|null
     */
    public function getRole(): ?\SynergiTech\Staffology\Model\UserRole
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \SynergiTech\Staffology\Model\UserRole|null $role role
     *
     * @return $this
     */
    public function setRole(?\SynergiTech\Staffology\Model\UserRole $role): static
    {
        if (is_null($role)) {
            throw new InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets jobType
     *
     * @return \SynergiTech\Staffology\Model\UserJobType|null
     */
    public function getJobType(): ?\SynergiTech\Staffology\Model\UserJobType
    {
        return $this->container['jobType'];
    }

    /**
     * Sets jobType
     *
     * @param \SynergiTech\Staffology\Model\UserJobType|null $jobType jobType
     *
     * @return $this
     */
    public function setJobType(?\SynergiTech\Staffology\Model\UserJobType $jobType): static
    {
        if (is_null($jobType)) {
            throw new InvalidArgumentException('non-nullable jobType cannot be null');
        }
        $this->container['jobType'] = $jobType;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return string|null
     */
    public function getJobTitle(): ?string
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     *
     * @param string|null $jobTitle jobTitle
     *
     * @return $this
     */
    public function setJobTitle(?string $jobTitle): static
    {
        if (is_null($jobTitle)) {
            array_push($this->openAPINullablesSetToNull, 'jobTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobTitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($jobTitle) && (mb_strlen($jobTitle) > 150)) {
            throw new InvalidArgumentException('invalid length for $jobTitle when calling User., must be smaller than or equal to 150.');
        }

        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets telephoneNumber
     *
     * @return string|null
     */
    public function getTelephoneNumber(): ?string
    {
        return $this->container['telephoneNumber'];
    }

    /**
     * Sets telephoneNumber
     *
     * @param string|null $telephoneNumber telephoneNumber
     *
     * @return $this
     */
    public function setTelephoneNumber(?string $telephoneNumber): static
    {
        if (is_null($telephoneNumber)) {
            array_push($this->openAPINullablesSetToNull, 'telephoneNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telephoneNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($telephoneNumber) && (mb_strlen($telephoneNumber) > 20)) {
            throw new InvalidArgumentException('invalid length for $telephoneNumber when calling User., must be smaller than or equal to 20.');
        }

        $this->container['telephoneNumber'] = $telephoneNumber;

        return $this;
    }

    /**
     * Gets businessName
     *
     * @return string|null
     */
    public function getBusinessName(): ?string
    {
        return $this->container['businessName'];
    }

    /**
     * Sets businessName
     *
     * @param string|null $businessName businessName
     *
     * @return $this
     */
    public function setBusinessName(?string $businessName): static
    {
        if (is_null($businessName)) {
            array_push($this->openAPINullablesSetToNull, 'businessName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($businessName) && (mb_strlen($businessName) > 160)) {
            throw new InvalidArgumentException('invalid length for $businessName when calling User., must be smaller than or equal to 160.');
        }
        if (!is_null($businessName) && (!preg_match("/^[A-Za-z0-9 ,;:'£()\\-\\.\\@\\$\\&]{1,160}$/", ObjectSerializer::toString($businessName)))) {
            throw new InvalidArgumentException("invalid value for \$businessName when calling User., must conform to the pattern /^[A-Za-z0-9 ,;:'£()\\-\\.\\@\\$\\&]{1,160}$/.");
        }

        $this->container['businessName'] = $businessName;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return \SynergiTech\Staffology\Model\UserIndustry|null
     */
    public function getIndustry(): ?\SynergiTech\Staffology\Model\UserIndustry
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param \SynergiTech\Staffology\Model\UserIndustry|null $industry industry
     *
     * @return $this
     */
    public function setIndustry(?\SynergiTech\Staffology\Model\UserIndustry $industry): static
    {
        if (is_null($industry)) {
            throw new InvalidArgumentException('non-nullable industry cannot be null');
        }
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \SynergiTech\Staffology\Model\Address|null
     */
    public function getAddress(): ?\SynergiTech\Staffology\Model\Address
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Staffology\Model\Address|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Staffology\Model\Address $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets statedEmployeeCount
     *
     * @return int|null
     */
    public function getStatedEmployeeCount(): ?int
    {
        return $this->container['statedEmployeeCount'];
    }

    /**
     * Sets statedEmployeeCount
     *
     * @param int|null $statedEmployeeCount statedEmployeeCount
     *
     * @return $this
     */
    public function setStatedEmployeeCount(?int $statedEmployeeCount): static
    {
        if (is_null($statedEmployeeCount)) {
            array_push($this->openAPINullablesSetToNull, 'statedEmployeeCount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statedEmployeeCount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statedEmployeeCount'] = $statedEmployeeCount;

        return $this;
    }

    /**
     * Gets emailVerified
     *
     * @return bool|null
     */
    public function getEmailVerified(): ?bool
    {
        return $this->container['emailVerified'];
    }

    /**
     * Sets emailVerified
     *
     * @param bool|null $emailVerified emailVerified
     *
     * @return $this
     */
    public function setEmailVerified(?bool $emailVerified): static
    {
        if (is_null($emailVerified)) {
            throw new InvalidArgumentException('non-nullable emailVerified cannot be null');
        }
        $this->container['emailVerified'] = $emailVerified;

        return $this;
    }

    /**
     * Gets emailVerificationKey
     *
     * @return string|null
     */
    public function getEmailVerificationKey(): ?string
    {
        return $this->container['emailVerificationKey'];
    }

    /**
     * Sets emailVerificationKey
     *
     * @param string|null $emailVerificationKey emailVerificationKey
     *
     * @return $this
     */
    public function setEmailVerificationKey(?string $emailVerificationKey): static
    {
        if (is_null($emailVerificationKey)) {
            throw new InvalidArgumentException('non-nullable emailVerificationKey cannot be null');
        }
        $this->container['emailVerificationKey'] = $emailVerificationKey;

        return $this;
    }

    /**
     * Gets gdprOptin
     *
     * @return bool|null
     */
    public function getGdprOptin(): ?bool
    {
        return $this->container['gdprOptin'];
    }

    /**
     * Sets gdprOptin
     *
     * @param bool|null $gdprOptin gdprOptin
     *
     * @return $this
     */
    public function setGdprOptin(?bool $gdprOptin): static
    {
        if (is_null($gdprOptin)) {
            throw new InvalidArgumentException('non-nullable gdprOptin cannot be null');
        }
        $this->container['gdprOptin'] = $gdprOptin;

        return $this;
    }

    /**
     * Gets inviteCode
     *
     * @return string|null
     */
    public function getInviteCode(): ?string
    {
        return $this->container['inviteCode'];
    }

    /**
     * Sets inviteCode
     *
     * @param string|null $inviteCode inviteCode
     *
     * @return $this
     */
    public function setInviteCode(?string $inviteCode): static
    {
        if (is_null($inviteCode)) {
            array_push($this->openAPINullablesSetToNull, 'inviteCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inviteCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inviteCode'] = $inviteCode;

        return $this;
    }

    /**
     * Gets registrationIp
     *
     * @return string|null
     */
    public function getRegistrationIp(): ?string
    {
        return $this->container['registrationIp'];
    }

    /**
     * Sets registrationIp
     *
     * @param string|null $registrationIp registrationIp
     *
     * @return $this
     */
    public function setRegistrationIp(?string $registrationIp): static
    {
        if (is_null($registrationIp)) {
            array_push($this->openAPINullablesSetToNull, 'registrationIp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registrationIp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($registrationIp) && (mb_strlen($registrationIp) > 20)) {
            throw new InvalidArgumentException('invalid length for $registrationIp when calling User., must be smaller than or equal to 20.');
        }

        $this->container['registrationIp'] = $registrationIp;

        return $this;
    }

    /**
     * Gets registrationDate
     *
     * @return \DateTime|null
     */
    public function getRegistrationDate(): ?\DateTime
    {
        return $this->container['registrationDate'];
    }

    /**
     * Sets registrationDate
     *
     * @param \DateTime|null $registrationDate registrationDate
     *
     * @return $this
     */
    public function setRegistrationDate(?\DateTime $registrationDate): static
    {
        if (is_null($registrationDate)) {
            throw new InvalidArgumentException('non-nullable registrationDate cannot be null');
        }
        $this->container['registrationDate'] = $registrationDate;

        return $this;
    }

    /**
     * Gets lastLogin
     *
     * @return \DateTime|null
     */
    public function getLastLogin(): ?\DateTime
    {
        return $this->container['lastLogin'];
    }

    /**
     * Sets lastLogin
     *
     * @param \DateTime|null $lastLogin lastLogin
     *
     * @return $this
     */
    public function setLastLogin(?\DateTime $lastLogin): static
    {
        if (is_null($lastLogin)) {
            array_push($this->openAPINullablesSetToNull, 'lastLogin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastLogin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastLogin'] = $lastLogin;

        return $this;
    }

    /**
     * Gets isActivated
     *
     * @return bool|null
     */
    public function getIsActivated(): ?bool
    {
        return $this->container['isActivated'];
    }

    /**
     * Sets isActivated
     *
     * @param bool|null $isActivated isActivated
     *
     * @return $this
     */
    public function setIsActivated(?bool $isActivated): static
    {
        if (is_null($isActivated)) {
            throw new InvalidArgumentException('non-nullable isActivated cannot be null');
        }
        $this->container['isActivated'] = $isActivated;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return \SynergiTech\Staffology\Model\UserAuthorization|null
     */
    public function getAuthorization(): ?\SynergiTech\Staffology\Model\UserAuthorization
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param \SynergiTech\Staffology\Model\UserAuthorization|null $authorization authorization
     *
     * @return $this
     */
    public function setAuthorization(?\SynergiTech\Staffology\Model\UserAuthorization $authorization): static
    {
        if (is_null($authorization)) {
            throw new InvalidArgumentException('non-nullable authorization cannot be null');
        }
        $this->container['authorization'] = $authorization;

        return $this;
    }

    /**
     * Gets isSuperAdmin
     *
     * @return bool|null
     */
    public function getIsSuperAdmin(): ?bool
    {
        return $this->container['isSuperAdmin'];
    }

    /**
     * Sets isSuperAdmin
     *
     * @param bool|null $isSuperAdmin isSuperAdmin
     *
     * @return $this
     */
    public function setIsSuperAdmin(?bool $isSuperAdmin): static
    {
        if (is_null($isSuperAdmin)) {
            throw new InvalidArgumentException('non-nullable isSuperAdmin cannot be null');
        }
        $this->container['isSuperAdmin'] = $isSuperAdmin;

        return $this;
    }

    /**
     * Gets canUseBureauFeatures
     *
     * @return bool|null
     */
    public function getCanUseBureauFeatures(): ?bool
    {
        return $this->container['canUseBureauFeatures'];
    }

    /**
     * Sets canUseBureauFeatures
     *
     * @param bool|null $canUseBureauFeatures canUseBureauFeatures
     *
     * @return $this
     */
    public function setCanUseBureauFeatures(?bool $canUseBureauFeatures): static
    {
        if (is_null($canUseBureauFeatures)) {
            throw new InvalidArgumentException('non-nullable canUseBureauFeatures cannot be null');
        }
        $this->container['canUseBureauFeatures'] = $canUseBureauFeatures;

        return $this;
    }

    /**
     * Gets canUseBetaFeatures
     *
     * @return bool|null
     */
    public function getCanUseBetaFeatures(): ?bool
    {
        return $this->container['canUseBetaFeatures'];
    }

    /**
     * Sets canUseBetaFeatures
     *
     * @param bool|null $canUseBetaFeatures canUseBetaFeatures
     *
     * @return $this
     */
    public function setCanUseBetaFeatures(?bool $canUseBetaFeatures): static
    {
        if (is_null($canUseBetaFeatures)) {
            throw new InvalidArgumentException('non-nullable canUseBetaFeatures cannot be null');
        }
        $this->container['canUseBetaFeatures'] = $canUseBetaFeatures;

        return $this;
    }

    /**
     * Gets canUseReportWriter
     *
     * @return bool|null
     */
    public function getCanUseReportWriter(): ?bool
    {
        return $this->container['canUseReportWriter'];
    }

    /**
     * Sets canUseReportWriter
     *
     * @param bool|null $canUseReportWriter Indicates whether the user has permission to use the report writer feature.
     *
     * @return $this
     */
    public function setCanUseReportWriter(?bool $canUseReportWriter): static
    {
        if (is_null($canUseReportWriter)) {
            throw new InvalidArgumentException('non-nullable canUseReportWriter cannot be null');
        }
        $this->container['canUseReportWriter'] = $canUseReportWriter;

        return $this;
    }

    /**
     * Gets canUseRefactoredAeRoutines
     *
     * @return bool|null
     */
    public function getCanUseRefactoredAeRoutines(): ?bool
    {
        return $this->container['canUseRefactoredAeRoutines'];
    }

    /**
     * Sets canUseRefactoredAeRoutines
     *
     * @param bool|null $canUseRefactoredAeRoutines canUseRefactoredAeRoutines
     *
     * @return $this
     */
    public function setCanUseRefactoredAeRoutines(?bool $canUseRefactoredAeRoutines): static
    {
        if (is_null($canUseRefactoredAeRoutines)) {
            throw new InvalidArgumentException('non-nullable canUseRefactoredAeRoutines cannot be null');
        }
        $this->container['canUseRefactoredAeRoutines'] = $canUseRefactoredAeRoutines;

        return $this;
    }

    /**
     * Gets isBilledInNetSuite
     *
     * @return bool|null
     */
    public function getIsBilledInNetSuite(): ?bool
    {
        return $this->container['isBilledInNetSuite'];
    }

    /**
     * Sets isBilledInNetSuite
     *
     * @param bool|null $isBilledInNetSuite isBilledInNetSuite
     *
     * @return $this
     */
    public function setIsBilledInNetSuite(?bool $isBilledInNetSuite): static
    {
        if (is_null($isBilledInNetSuite)) {
            throw new InvalidArgumentException('non-nullable isBilledInNetSuite cannot be null');
        }
        $this->container['isBilledInNetSuite'] = $isBilledInNetSuite;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return \SynergiTech\Staffology\Model\Tenant|null
     */
    public function getTenant(): ?\SynergiTech\Staffology\Model\Tenant
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param \SynergiTech\Staffology\Model\Tenant|null $tenant tenant
     *
     * @return $this
     */
    public function setTenant(?\SynergiTech\Staffology\Model\Tenant $tenant): static
    {
        if (is_null($tenant)) {
            throw new InvalidArgumentException('non-nullable tenant cannot be null');
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets requestDdSetup
     *
     * @return bool|null
     */
    public function getRequestDdSetup(): ?bool
    {
        return $this->container['requestDdSetup'];
    }

    /**
     * Sets requestDdSetup
     *
     * @param bool|null $requestDdSetup [readonly] If true then the user is required to set up a direct debit mandate
     *
     * @return $this
     */
    public function setRequestDdSetup(?bool $requestDdSetup): static
    {
        if (is_null($requestDdSetup)) {
            throw new InvalidArgumentException('non-nullable requestDdSetup cannot be null');
        }
        $this->container['requestDdSetup'] = $requestDdSetup;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled(): ?bool
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled [readonly] If true then any employers the owner managed will not be able to run new payruns.  DisabledReason will give a reason why the account is disabled
     *
     * @return $this
     */
    public function setDisabled(?bool $disabled): static
    {
        if (is_null($disabled)) {
            throw new InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets canCreateEmployers
     *
     * @return bool|null
     */
    public function getCanCreateEmployers(): ?bool
    {
        return $this->container['canCreateEmployers'];
    }

    /**
     * Sets canCreateEmployers
     *
     * @param bool|null $canCreateEmployers [readonly] If false then the user cannot create new employers.  This can be turned on or off by the tenant admin.
     *
     * @return $this
     */
    public function setCanCreateEmployers(?bool $canCreateEmployers): static
    {
        if (is_null($canCreateEmployers)) {
            throw new InvalidArgumentException('non-nullable canCreateEmployers cannot be null');
        }
        $this->container['canCreateEmployers'] = $canCreateEmployers;

        return $this;
    }

    /**
     * Gets disabledReason
     *
     * @return string|null
     */
    public function getDisabledReason(): ?string
    {
        return $this->container['disabledReason'];
    }

    /**
     * Sets disabledReason
     *
     * @param string|null $disabledReason disabledReason
     *
     * @return $this
     */
    public function setDisabledReason(?string $disabledReason): static
    {
        if (is_null($disabledReason)) {
            array_push($this->openAPINullablesSetToNull, 'disabledReason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disabledReason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disabledReason'] = $disabledReason;

        return $this;
    }

    /**
     * Gets directDebitMandate
     *
     * @return \SynergiTech\Staffology\Model\DirectDebitMandate|null
     */
    public function getDirectDebitMandate(): ?\SynergiTech\Staffology\Model\DirectDebitMandate
    {
        return $this->container['directDebitMandate'];
    }

    /**
     * Sets directDebitMandate
     *
     * @param \SynergiTech\Staffology\Model\DirectDebitMandate|null $directDebitMandate directDebitMandate
     *
     * @return $this
     */
    public function setDirectDebitMandate(?\SynergiTech\Staffology\Model\DirectDebitMandate $directDebitMandate): static
    {
        if (is_null($directDebitMandate)) {
            throw new InvalidArgumentException('non-nullable directDebitMandate cannot be null');
        }
        $this->container['directDebitMandate'] = $directDebitMandate;

        return $this;
    }

    /**
     * Gets displayPrefs
     *
     * @return \SynergiTech\Staffology\Model\UserDisplayPreferences|null
     */
    public function getDisplayPrefs(): ?\SynergiTech\Staffology\Model\UserDisplayPreferences
    {
        return $this->container['displayPrefs'];
    }

    /**
     * Sets displayPrefs
     *
     * @param \SynergiTech\Staffology\Model\UserDisplayPreferences|null $displayPrefs displayPrefs
     *
     * @return $this
     */
    public function setDisplayPrefs(?\SynergiTech\Staffology\Model\UserDisplayPreferences $displayPrefs): static
    {
        if (is_null($displayPrefs)) {
            throw new InvalidArgumentException('non-nullable displayPrefs cannot be null');
        }
        $this->container['displayPrefs'] = $displayPrefs;

        return $this;
    }

    /**
     * Gets showBills
     *
     * @return bool|null
     */
    public function getShowBills(): ?bool
    {
        return $this->container['showBills'];
    }

    /**
     * Sets showBills
     *
     * @param bool|null $showBills [readonly] Whether or not the user can see bills. This will be false if the Tenant manages billing and the user is not an admin for the Tenant
     *
     * @return $this
     */
    public function setShowBills(?bool $showBills): static
    {
        if (is_null($showBills)) {
            array_push($this->openAPINullablesSetToNull, 'showBills');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('showBills', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['showBills'] = $showBills;

        return $this;
    }

    /**
     * Gets accountingCustomerId
     *
     * @return string|null
     */
    public function getAccountingCustomerId(): ?string
    {
        return $this->container['accountingCustomerId'];
    }

    /**
     * Sets accountingCustomerId
     *
     * @param string|null $accountingCustomerId [readonly] Used internally to manage billing
     *
     * @return $this
     */
    public function setAccountingCustomerId(?string $accountingCustomerId): static
    {
        if (is_null($accountingCustomerId)) {
            array_push($this->openAPINullablesSetToNull, 'accountingCustomerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountingCustomerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountingCustomerId'] = $accountingCustomerId;

        return $this;
    }

    /**
     * Gets pricingTableId
     *
     * @return string|null
     */
    public function getPricingTableId(): ?string
    {
        return $this->container['pricingTableId'];
    }

    /**
     * Sets pricingTableId
     *
     * @param string|null $pricingTableId pricingTableId
     *
     * @return $this
     */
    public function setPricingTableId(?string $pricingTableId): static
    {
        if (is_null($pricingTableId)) {
            array_push($this->openAPINullablesSetToNull, 'pricingTableId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricingTableId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pricingTableId'] = $pricingTableId;

        return $this;
    }

    /**
     * Gets utmInfo
     *
     * @return \SynergiTech\Staffology\Model\UtmInfo|null
     */
    public function getUtmInfo(): ?\SynergiTech\Staffology\Model\UtmInfo
    {
        return $this->container['utmInfo'];
    }

    /**
     * Sets utmInfo
     *
     * @param \SynergiTech\Staffology\Model\UtmInfo|null $utmInfo utmInfo
     *
     * @return $this
     */
    public function setUtmInfo(?\SynergiTech\Staffology\Model\UtmInfo $utmInfo): static
    {
        if (is_null($utmInfo)) {
            throw new InvalidArgumentException('non-nullable utmInfo cannot be null');
        }
        $this->container['utmInfo'] = $utmInfo;

        return $this;
    }

    /**
     * Gets firstBillableActivityDate
     *
     * @return \DateTime|null
     */
    public function getFirstBillableActivityDate(): ?\DateTime
    {
        return $this->container['firstBillableActivityDate'];
    }

    /**
     * Sets firstBillableActivityDate
     *
     * @param \DateTime|null $firstBillableActivityDate firstBillableActivityDate
     *
     * @return $this
     */
    public function setFirstBillableActivityDate(?\DateTime $firstBillableActivityDate): static
    {
        if (is_null($firstBillableActivityDate)) {
            array_push($this->openAPINullablesSetToNull, 'firstBillableActivityDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstBillableActivityDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstBillableActivityDate'] = $firstBillableActivityDate;

        return $this;
    }

    /**
     * Gets bureauNotificationEmailAddress
     *
     * @return string|null
     */
    public function getBureauNotificationEmailAddress(): ?string
    {
        return $this->container['bureauNotificationEmailAddress'];
    }

    /**
     * Sets bureauNotificationEmailAddress
     *
     * @param string|null $bureauNotificationEmailAddress If an email address is provided here then Bureau-related notifications will go to this address instead of the EmailAddress
     *
     * @return $this
     */
    public function setBureauNotificationEmailAddress(?string $bureauNotificationEmailAddress): static
    {
        if (is_null($bureauNotificationEmailAddress)) {
            array_push($this->openAPINullablesSetToNull, 'bureauNotificationEmailAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bureauNotificationEmailAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bureauNotificationEmailAddress) && (mb_strlen($bureauNotificationEmailAddress) > 150)) {
            throw new InvalidArgumentException('invalid length for $bureauNotificationEmailAddress when calling User., must be smaller than or equal to 150.');
        }

        $this->container['bureauNotificationEmailAddress'] = $bureauNotificationEmailAddress;

        return $this;
    }

    /**
     * Gets monthlyMinimum
     *
     * @return \SynergiTech\Staffology\Model\MonthlyMinimum|null
     */
    public function getMonthlyMinimum(): ?\SynergiTech\Staffology\Model\MonthlyMinimum
    {
        return $this->container['monthlyMinimum'];
    }

    /**
     * Sets monthlyMinimum
     *
     * @param \SynergiTech\Staffology\Model\MonthlyMinimum|null $monthlyMinimum monthlyMinimum
     *
     * @return $this
     */
    public function setMonthlyMinimum(?\SynergiTech\Staffology\Model\MonthlyMinimum $monthlyMinimum): static
    {
        if (is_null($monthlyMinimum)) {
            throw new InvalidArgumentException('non-nullable monthlyMinimum cannot be null');
        }
        $this->container['monthlyMinimum'] = $monthlyMinimum;

        return $this;
    }

    /**
     * Gets apiMailingEnabled
     *
     * @return bool|null
     */
    public function getApiMailingEnabled(): ?bool
    {
        return $this->container['apiMailingEnabled'];
    }

    /**
     * Sets apiMailingEnabled
     *
     * @param bool|null $apiMailingEnabled Flag to keep the user up-to-date with any API changes and inform about upcoming breaking changes.
     *
     * @return $this
     */
    public function setApiMailingEnabled(?bool $apiMailingEnabled): static
    {
        if (is_null($apiMailingEnabled)) {
            throw new InvalidArgumentException('non-nullable apiMailingEnabled cannot be null');
        }
        $this->container['apiMailingEnabled'] = $apiMailingEnabled;

        return $this;
    }

    /**
     * Gets loginDisabled
     *
     * @return bool|null
     */
    public function getLoginDisabled(): ?bool
    {
        return $this->container['loginDisabled'];
    }

    /**
     * Sets loginDisabled
     *
     * @param bool|null $loginDisabled [readonly] If true then the user will not have login permissions
     *
     * @return $this
     */
    public function setLoginDisabled(?bool $loginDisabled): static
    {
        if (is_null($loginDisabled)) {
            throw new InvalidArgumentException('non-nullable loginDisabled cannot be null');
        }
        $this->container['loginDisabled'] = $loginDisabled;

        return $this;
    }

    /**
     * Gets isBureauMember
     *
     * @return bool|null
     */
    public function getIsBureauMember(): ?bool
    {
        return $this->container['isBureauMember'];
    }

    /**
     * Sets isBureauMember
     *
     * @param bool|null $isBureauMember Indicates whether the user is a bureau member.
     *
     * @return $this
     */
    public function setIsBureauMember(?bool $isBureauMember): static
    {
        if (is_null($isBureauMember)) {
            throw new InvalidArgumentException('non-nullable isBureauMember cannot be null');
        }
        $this->container['isBureauMember'] = $isBureauMember;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


