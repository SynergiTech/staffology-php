<?php
/**
 * WorkerGroup
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * WorkerGroup Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class WorkerGroup implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WorkerGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'contributionLevelType' => '\SynergiTech\Staffology\Model\PensionContributionLevelType',
        'employeeContribution' => 'float',
        'employeeContributionIsPercentage' => 'bool',
        'employerContribution' => 'float',
        'employerContributionIsPercentage' => 'bool',
        'employerContributionTopUpPercentage' => 'float',
        'employerContributionIncludesNiSaving' => 'bool',
        'employerContributionNiSavingPercentage' => 'float',
        'isAvc' => 'bool',
        'additionalVoluntaryContribution' => 'float',
        'avcIsPercentage' => 'bool',
        'employerContributionNiSaving' => 'float',
        'customThreshold' => 'bool',
        'lowerLimit' => 'float',
        'upperLimit' => 'float',
        'papdisGroup' => 'string',
        'papdisSubGroup' => 'string',
        'localAuthorityNumber' => 'string',
        'schoolEmployerType' => 'string',
        'matIdentifier' => 'string',
        'matUniqueNumber' => 'string',
        'employerReference' => 'string',
        'lgpsFund' => '\SynergiTech\Staffology\Model\LgpsFund',
        'workerGroupId' => 'string',
        'assumedPensionablePay' => '\SynergiTech\Staffology\Model\AssumedPensionablePay',
        'pensionablePayDefinition' => '\SynergiTech\Staffology\Model\PensionablePayDefinition',
        'payslipDescription' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'contributionLevelType' => null,
        'employeeContribution' => 'double',
        'employeeContributionIsPercentage' => null,
        'employerContribution' => 'double',
        'employerContributionIsPercentage' => null,
        'employerContributionTopUpPercentage' => 'double',
        'employerContributionIncludesNiSaving' => null,
        'employerContributionNiSavingPercentage' => 'double',
        'isAvc' => null,
        'additionalVoluntaryContribution' => 'double',
        'avcIsPercentage' => null,
        'employerContributionNiSaving' => 'double',
        'customThreshold' => null,
        'lowerLimit' => 'double',
        'upperLimit' => 'double',
        'papdisGroup' => null,
        'papdisSubGroup' => null,
        'localAuthorityNumber' => null,
        'schoolEmployerType' => null,
        'matIdentifier' => null,
        'matUniqueNumber' => null,
        'employerReference' => null,
        'lgpsFund' => null,
        'workerGroupId' => 'uuid',
        'assumedPensionablePay' => null,
        'pensionablePayDefinition' => null,
        'payslipDescription' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'contributionLevelType' => false,
        'employeeContribution' => false,
        'employeeContributionIsPercentage' => false,
        'employerContribution' => false,
        'employerContributionIsPercentage' => false,
        'employerContributionTopUpPercentage' => false,
        'employerContributionIncludesNiSaving' => false,
        'employerContributionNiSavingPercentage' => false,
        'isAvc' => false,
        'additionalVoluntaryContribution' => true,
        'avcIsPercentage' => true,
        'employerContributionNiSaving' => false,
        'customThreshold' => false,
        'lowerLimit' => false,
        'upperLimit' => false,
        'papdisGroup' => true,
        'papdisSubGroup' => true,
        'localAuthorityNumber' => true,
        'schoolEmployerType' => true,
        'matIdentifier' => true,
        'matUniqueNumber' => true,
        'employerReference' => true,
        'lgpsFund' => false,
        'workerGroupId' => false,
        'assumedPensionablePay' => false,
        'pensionablePayDefinition' => false,
        'payslipDescription' => true,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'contributionLevelType' => 'contributionLevelType',
        'employeeContribution' => 'employeeContribution',
        'employeeContributionIsPercentage' => 'employeeContributionIsPercentage',
        'employerContribution' => 'employerContribution',
        'employerContributionIsPercentage' => 'employerContributionIsPercentage',
        'employerContributionTopUpPercentage' => 'employerContributionTopUpPercentage',
        'employerContributionIncludesNiSaving' => 'employerContributionIncludesNiSaving',
        'employerContributionNiSavingPercentage' => 'employerContributionNiSavingPercentage',
        'isAvc' => 'isAvc',
        'additionalVoluntaryContribution' => 'additionalVoluntaryContribution',
        'avcIsPercentage' => 'avcIsPercentage',
        'employerContributionNiSaving' => 'employerContributionNiSaving',
        'customThreshold' => 'customThreshold',
        'lowerLimit' => 'lowerLimit',
        'upperLimit' => 'upperLimit',
        'papdisGroup' => 'papdisGroup',
        'papdisSubGroup' => 'papdisSubGroup',
        'localAuthorityNumber' => 'localAuthorityNumber',
        'schoolEmployerType' => 'schoolEmployerType',
        'matIdentifier' => 'matIdentifier',
        'matUniqueNumber' => 'matUniqueNumber',
        'employerReference' => 'employerReference',
        'lgpsFund' => 'lgpsFund',
        'workerGroupId' => 'workerGroupId',
        'assumedPensionablePay' => 'assumedPensionablePay',
        'pensionablePayDefinition' => 'pensionablePayDefinition',
        'payslipDescription' => 'payslipDescription',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'contributionLevelType' => 'setContributionLevelType',
        'employeeContribution' => 'setEmployeeContribution',
        'employeeContributionIsPercentage' => 'setEmployeeContributionIsPercentage',
        'employerContribution' => 'setEmployerContribution',
        'employerContributionIsPercentage' => 'setEmployerContributionIsPercentage',
        'employerContributionTopUpPercentage' => 'setEmployerContributionTopUpPercentage',
        'employerContributionIncludesNiSaving' => 'setEmployerContributionIncludesNiSaving',
        'employerContributionNiSavingPercentage' => 'setEmployerContributionNiSavingPercentage',
        'isAvc' => 'setIsAvc',
        'additionalVoluntaryContribution' => 'setAdditionalVoluntaryContribution',
        'avcIsPercentage' => 'setAvcIsPercentage',
        'employerContributionNiSaving' => 'setEmployerContributionNiSaving',
        'customThreshold' => 'setCustomThreshold',
        'lowerLimit' => 'setLowerLimit',
        'upperLimit' => 'setUpperLimit',
        'papdisGroup' => 'setPapdisGroup',
        'papdisSubGroup' => 'setPapdisSubGroup',
        'localAuthorityNumber' => 'setLocalAuthorityNumber',
        'schoolEmployerType' => 'setSchoolEmployerType',
        'matIdentifier' => 'setMatIdentifier',
        'matUniqueNumber' => 'setMatUniqueNumber',
        'employerReference' => 'setEmployerReference',
        'lgpsFund' => 'setLgpsFund',
        'workerGroupId' => 'setWorkerGroupId',
        'assumedPensionablePay' => 'setAssumedPensionablePay',
        'pensionablePayDefinition' => 'setPensionablePayDefinition',
        'payslipDescription' => 'setPayslipDescription',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'contributionLevelType' => 'getContributionLevelType',
        'employeeContribution' => 'getEmployeeContribution',
        'employeeContributionIsPercentage' => 'getEmployeeContributionIsPercentage',
        'employerContribution' => 'getEmployerContribution',
        'employerContributionIsPercentage' => 'getEmployerContributionIsPercentage',
        'employerContributionTopUpPercentage' => 'getEmployerContributionTopUpPercentage',
        'employerContributionIncludesNiSaving' => 'getEmployerContributionIncludesNiSaving',
        'employerContributionNiSavingPercentage' => 'getEmployerContributionNiSavingPercentage',
        'isAvc' => 'getIsAvc',
        'additionalVoluntaryContribution' => 'getAdditionalVoluntaryContribution',
        'avcIsPercentage' => 'getAvcIsPercentage',
        'employerContributionNiSaving' => 'getEmployerContributionNiSaving',
        'customThreshold' => 'getCustomThreshold',
        'lowerLimit' => 'getLowerLimit',
        'upperLimit' => 'getUpperLimit',
        'papdisGroup' => 'getPapdisGroup',
        'papdisSubGroup' => 'getPapdisSubGroup',
        'localAuthorityNumber' => 'getLocalAuthorityNumber',
        'schoolEmployerType' => 'getSchoolEmployerType',
        'matIdentifier' => 'getMatIdentifier',
        'matUniqueNumber' => 'getMatUniqueNumber',
        'employerReference' => 'getEmployerReference',
        'lgpsFund' => 'getLgpsFund',
        'workerGroupId' => 'getWorkerGroupId',
        'assumedPensionablePay' => 'getAssumedPensionablePay',
        'pensionablePayDefinition' => 'getPensionablePayDefinition',
        'payslipDescription' => 'getPayslipDescription',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('contributionLevelType', $data ?? [], null);
        $this->setIfExists('employeeContribution', $data ?? [], null);
        $this->setIfExists('employeeContributionIsPercentage', $data ?? [], null);
        $this->setIfExists('employerContribution', $data ?? [], null);
        $this->setIfExists('employerContributionIsPercentage', $data ?? [], null);
        $this->setIfExists('employerContributionTopUpPercentage', $data ?? [], null);
        $this->setIfExists('employerContributionIncludesNiSaving', $data ?? [], null);
        $this->setIfExists('employerContributionNiSavingPercentage', $data ?? [], null);
        $this->setIfExists('isAvc', $data ?? [], null);
        $this->setIfExists('additionalVoluntaryContribution', $data ?? [], null);
        $this->setIfExists('avcIsPercentage', $data ?? [], null);
        $this->setIfExists('employerContributionNiSaving', $data ?? [], null);
        $this->setIfExists('customThreshold', $data ?? [], null);
        $this->setIfExists('lowerLimit', $data ?? [], null);
        $this->setIfExists('upperLimit', $data ?? [], null);
        $this->setIfExists('papdisGroup', $data ?? [], null);
        $this->setIfExists('papdisSubGroup', $data ?? [], null);
        $this->setIfExists('localAuthorityNumber', $data ?? [], null);
        $this->setIfExists('schoolEmployerType', $data ?? [], null);
        $this->setIfExists('matIdentifier', $data ?? [], null);
        $this->setIfExists('matUniqueNumber', $data ?? [], null);
        $this->setIfExists('employerReference', $data ?? [], null);
        $this->setIfExists('lgpsFund', $data ?? [], null);
        $this->setIfExists('workerGroupId', $data ?? [], null);
        $this->setIfExists('assumedPensionablePay', $data ?? [], null);
        $this->setIfExists('pensionablePayDefinition', $data ?? [], null);
        $this->setIfExists('payslipDescription', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 150)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['papdisGroup']) && (mb_strlen($this->container['papdisGroup']) > 40)) {
            $invalidProperties[] = "invalid value for 'papdisGroup', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['papdisSubGroup']) && (mb_strlen($this->container['papdisSubGroup']) > 40)) {
            $invalidProperties[] = "invalid value for 'papdisSubGroup', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['localAuthorityNumber']) && (mb_strlen($this->container['localAuthorityNumber']) > 3)) {
            $invalidProperties[] = "invalid value for 'localAuthorityNumber', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['localAuthorityNumber']) && !preg_match("/^(\\d{3})$/", $this->container['localAuthorityNumber'])) {
            $invalidProperties[] = "invalid value for 'localAuthorityNumber', must be conform to the pattern /^(\\d{3})$/.";
        }

        if (!is_null($this->container['schoolEmployerType']) && (mb_strlen($this->container['schoolEmployerType']) > 4)) {
            $invalidProperties[] = "invalid value for 'schoolEmployerType', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['schoolEmployerType']) && !preg_match("/^(\\d{4})$/", $this->container['schoolEmployerType'])) {
            $invalidProperties[] = "invalid value for 'schoolEmployerType', must be conform to the pattern /^(\\d{4})$/.";
        }

        if (!is_null($this->container['matIdentifier']) && (mb_strlen($this->container['matIdentifier']) > 3)) {
            $invalidProperties[] = "invalid value for 'matIdentifier', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['matIdentifier']) && !preg_match("/^(\\d{3}|)$/", $this->container['matIdentifier'])) {
            $invalidProperties[] = "invalid value for 'matIdentifier', must be conform to the pattern /^(\\d{3}|)$/.";
        }

        if (!is_null($this->container['matUniqueNumber']) && (mb_strlen($this->container['matUniqueNumber']) > 4)) {
            $invalidProperties[] = "invalid value for 'matUniqueNumber', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['matUniqueNumber']) && !preg_match("/^(\\d{4}|)$/", $this->container['matUniqueNumber'])) {
            $invalidProperties[] = "invalid value for 'matUniqueNumber', must be conform to the pattern /^(\\d{4}|)$/.";
        }

        if (!is_null($this->container['payslipDescription']) && (mb_strlen($this->container['payslipDescription']) > 100)) {
            $invalidProperties[] = "invalid value for 'payslipDescription', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 150)) {
            throw new InvalidArgumentException('invalid length for $name when calling WorkerGroup., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new InvalidArgumentException('invalid length for $name when calling WorkerGroup., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contributionLevelType
     *
     * @return \SynergiTech\Staffology\Model\PensionContributionLevelType|null
     */
    public function getContributionLevelType(): ?\SynergiTech\Staffology\Model\PensionContributionLevelType
    {
        return $this->container['contributionLevelType'];
    }

    /**
     * Sets contributionLevelType
     *
     * @param \SynergiTech\Staffology\Model\PensionContributionLevelType|null $contributionLevelType contributionLevelType
     *
     * @return $this
     */
    public function setContributionLevelType(?\SynergiTech\Staffology\Model\PensionContributionLevelType $contributionLevelType): static
    {
        if (is_null($contributionLevelType)) {
            throw new InvalidArgumentException('non-nullable contributionLevelType cannot be null');
        }
        $this->container['contributionLevelType'] = $contributionLevelType;

        return $this;
    }

    /**
     * Gets employeeContribution
     *
     * @return float|null
     */
    public function getEmployeeContribution(): ?float
    {
        return $this->container['employeeContribution'];
    }

    /**
     * Sets employeeContribution
     *
     * @param float|null $employeeContribution employeeContribution
     *
     * @return $this
     */
    public function setEmployeeContribution(?float $employeeContribution): static
    {
        if (is_null($employeeContribution)) {
            throw new InvalidArgumentException('non-nullable employeeContribution cannot be null');
        }
        $this->container['employeeContribution'] = $employeeContribution;

        return $this;
    }

    /**
     * Gets employeeContributionIsPercentage
     *
     * @return bool|null
     */
    public function getEmployeeContributionIsPercentage(): ?bool
    {
        return $this->container['employeeContributionIsPercentage'];
    }

    /**
     * Sets employeeContributionIsPercentage
     *
     * @param bool|null $employeeContributionIsPercentage employeeContributionIsPercentage
     *
     * @return $this
     */
    public function setEmployeeContributionIsPercentage(?bool $employeeContributionIsPercentage): static
    {
        if (is_null($employeeContributionIsPercentage)) {
            throw new InvalidArgumentException('non-nullable employeeContributionIsPercentage cannot be null');
        }
        $this->container['employeeContributionIsPercentage'] = $employeeContributionIsPercentage;

        return $this;
    }

    /**
     * Gets employerContribution
     *
     * @return float|null
     */
    public function getEmployerContribution(): ?float
    {
        return $this->container['employerContribution'];
    }

    /**
     * Sets employerContribution
     *
     * @param float|null $employerContribution employerContribution
     *
     * @return $this
     */
    public function setEmployerContribution(?float $employerContribution): static
    {
        if (is_null($employerContribution)) {
            throw new InvalidArgumentException('non-nullable employerContribution cannot be null');
        }
        $this->container['employerContribution'] = $employerContribution;

        return $this;
    }

    /**
     * Gets employerContributionIsPercentage
     *
     * @return bool|null
     */
    public function getEmployerContributionIsPercentage(): ?bool
    {
        return $this->container['employerContributionIsPercentage'];
    }

    /**
     * Sets employerContributionIsPercentage
     *
     * @param bool|null $employerContributionIsPercentage employerContributionIsPercentage
     *
     * @return $this
     */
    public function setEmployerContributionIsPercentage(?bool $employerContributionIsPercentage): static
    {
        if (is_null($employerContributionIsPercentage)) {
            throw new InvalidArgumentException('non-nullable employerContributionIsPercentage cannot be null');
        }
        $this->container['employerContributionIsPercentage'] = $employerContributionIsPercentage;

        return $this;
    }

    /**
     * Gets employerContributionTopUpPercentage
     *
     * @return float|null
     */
    public function getEmployerContributionTopUpPercentage(): ?float
    {
        return $this->container['employerContributionTopUpPercentage'];
    }

    /**
     * Sets employerContributionTopUpPercentage
     *
     * @param float|null $employerContributionTopUpPercentage Increase Employer Contribution by this percentage of the Employee Contribution
     *
     * @return $this
     */
    public function setEmployerContributionTopUpPercentage(?float $employerContributionTopUpPercentage): static
    {
        if (is_null($employerContributionTopUpPercentage)) {
            throw new InvalidArgumentException('non-nullable employerContributionTopUpPercentage cannot be null');
        }
        $this->container['employerContributionTopUpPercentage'] = $employerContributionTopUpPercentage;

        return $this;
    }

    /**
     * Gets employerContributionIncludesNiSaving
     *
     * @return bool|null
     */
    public function getEmployerContributionIncludesNiSaving(): ?bool
    {
        return $this->container['employerContributionIncludesNiSaving'];
    }

    /**
     * Sets employerContributionIncludesNiSaving
     *
     * @param bool|null $employerContributionIncludesNiSaving Employer Contribution includes the Employers NI saving
     *
     * @return $this
     */
    public function setEmployerContributionIncludesNiSaving(?bool $employerContributionIncludesNiSaving): static
    {
        if (is_null($employerContributionIncludesNiSaving)) {
            throw new InvalidArgumentException('non-nullable employerContributionIncludesNiSaving cannot be null');
        }
        $this->container['employerContributionIncludesNiSaving'] = $employerContributionIncludesNiSaving;

        return $this;
    }

    /**
     * Gets employerContributionNiSavingPercentage
     *
     * @return float|null
     */
    public function getEmployerContributionNiSavingPercentage(): ?float
    {
        return $this->container['employerContributionNiSavingPercentage'];
    }

    /**
     * Sets employerContributionNiSavingPercentage
     *
     * @param float|null $employerContributionNiSavingPercentage Increase Employer Contribution by this percentage of the Employers NI saving
     *
     * @return $this
     */
    public function setEmployerContributionNiSavingPercentage(?float $employerContributionNiSavingPercentage): static
    {
        if (is_null($employerContributionNiSavingPercentage)) {
            throw new InvalidArgumentException('non-nullable employerContributionNiSavingPercentage cannot be null');
        }
        $this->container['employerContributionNiSavingPercentage'] = $employerContributionNiSavingPercentage;

        return $this;
    }

    /**
     * Gets isAvc
     *
     * @return bool|null
     */
    public function getIsAvc(): ?bool
    {
        return $this->container['isAvc'];
    }

    /**
     * Sets isAvc
     *
     * @param bool|null $isAvc Determines whether the workergroup uses additonal voluntary contributions.  This property will automatically be set to true for the following Contribution Level Types: TpFasterAccrual, TpAdditionalPensionContributions, TpActuariallyAdjustedBenefits, TpFamilyBenefits, tpPastAddedYears, tpHigherSalaries, tpPreston, tpElectedFurtherEmployment, LgpsAdditionalPensionContributions, LgpsSharedAdditionalPensionContributions, LgpsAdditionalRegularContributions, LgpsAddedYearsContributions, LgpsSharedAdditionalPensionLumpSump, LgpsPartTimeBuyBack, PrudentialAVC.
     *
     * @return $this
     */
    public function setIsAvc(?bool $isAvc): static
    {
        if (is_null($isAvc)) {
            throw new InvalidArgumentException('non-nullable isAvc cannot be null');
        }
        $this->container['isAvc'] = $isAvc;

        return $this;
    }

    /**
     * Gets additionalVoluntaryContribution
     *
     * @return float|null
     */
    public function getAdditionalVoluntaryContribution(): ?float
    {
        return $this->container['additionalVoluntaryContribution'];
    }

    /**
     * Sets additionalVoluntaryContribution
     *
     * @param float|null $additionalVoluntaryContribution Any additional voluntary amount the employee contributes towards the pension. Could be a percentage or a fixed amount depending on AvcIsPercentage.
     *
     * @return $this
     */
    public function setAdditionalVoluntaryContribution(?float $additionalVoluntaryContribution): static
    {
        if (is_null($additionalVoluntaryContribution)) {
            array_push($this->openAPINullablesSetToNull, 'additionalVoluntaryContribution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalVoluntaryContribution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalVoluntaryContribution'] = $additionalVoluntaryContribution;

        return $this;
    }

    /**
     * Gets avcIsPercentage
     *
     * @return bool|null
     */
    public function getAvcIsPercentage(): ?bool
    {
        return $this->container['avcIsPercentage'];
    }

    /**
     * Sets avcIsPercentage
     *
     * @param bool|null $avcIsPercentage Determines whether the Value of the Additional Voluntary Contribution is a fixed amount or a percentage,
     *
     * @return $this
     */
    public function setAvcIsPercentage(?bool $avcIsPercentage): static
    {
        if (is_null($avcIsPercentage)) {
            array_push($this->openAPINullablesSetToNull, 'avcIsPercentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avcIsPercentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avcIsPercentage'] = $avcIsPercentage;

        return $this;
    }

    /**
     * Gets employerContributionNiSaving
     *
     * @return float|null
     */
    public function getEmployerContributionNiSaving(): ?float
    {
        return $this->container['employerContributionNiSaving'];
    }

    /**
     * Sets employerContributionNiSaving
     *
     * @param float|null $employerContributionNiSaving Employers NI Saving
     *
     * @return $this
     */
    public function setEmployerContributionNiSaving(?float $employerContributionNiSaving): static
    {
        if (is_null($employerContributionNiSaving)) {
            throw new InvalidArgumentException('non-nullable employerContributionNiSaving cannot be null');
        }
        $this->container['employerContributionNiSaving'] = $employerContributionNiSaving;

        return $this;
    }

    /**
     * Gets customThreshold
     *
     * @return bool|null
     */
    public function getCustomThreshold(): ?bool
    {
        return $this->container['customThreshold'];
    }

    /**
     * Sets customThreshold
     *
     * @param bool|null $customThreshold customThreshold
     *
     * @return $this
     */
    public function setCustomThreshold(?bool $customThreshold): static
    {
        if (is_null($customThreshold)) {
            throw new InvalidArgumentException('non-nullable customThreshold cannot be null');
        }
        $this->container['customThreshold'] = $customThreshold;

        return $this;
    }

    /**
     * Gets lowerLimit
     *
     * @return float|null
     */
    public function getLowerLimit(): ?float
    {
        return $this->container['lowerLimit'];
    }

    /**
     * Sets lowerLimit
     *
     * @param float|null $lowerLimit lowerLimit
     *
     * @return $this
     */
    public function setLowerLimit(?float $lowerLimit): static
    {
        if (is_null($lowerLimit)) {
            throw new InvalidArgumentException('non-nullable lowerLimit cannot be null');
        }
        $this->container['lowerLimit'] = $lowerLimit;

        return $this;
    }

    /**
     * Gets upperLimit
     *
     * @return float|null
     */
    public function getUpperLimit(): ?float
    {
        return $this->container['upperLimit'];
    }

    /**
     * Sets upperLimit
     *
     * @param float|null $upperLimit upperLimit
     *
     * @return $this
     */
    public function setUpperLimit(?float $upperLimit): static
    {
        if (is_null($upperLimit)) {
            throw new InvalidArgumentException('non-nullable upperLimit cannot be null');
        }
        $this->container['upperLimit'] = $upperLimit;

        return $this;
    }

    /**
     * Gets papdisGroup
     *
     * @return string|null
     */
    public function getPapdisGroup(): ?string
    {
        return $this->container['papdisGroup'];
    }

    /**
     * Sets papdisGroup
     *
     * @param string|null $papdisGroup papdisGroup
     *
     * @return $this
     */
    public function setPapdisGroup(?string $papdisGroup): static
    {
        if (is_null($papdisGroup)) {
            array_push($this->openAPINullablesSetToNull, 'papdisGroup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('papdisGroup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($papdisGroup) && (mb_strlen($papdisGroup) > 40)) {
            throw new InvalidArgumentException('invalid length for $papdisGroup when calling WorkerGroup., must be smaller than or equal to 40.');
        }

        $this->container['papdisGroup'] = $papdisGroup;

        return $this;
    }

    /**
     * Gets papdisSubGroup
     *
     * @return string|null
     */
    public function getPapdisSubGroup(): ?string
    {
        return $this->container['papdisSubGroup'];
    }

    /**
     * Sets papdisSubGroup
     *
     * @param string|null $papdisSubGroup papdisSubGroup
     *
     * @return $this
     */
    public function setPapdisSubGroup(?string $papdisSubGroup): static
    {
        if (is_null($papdisSubGroup)) {
            array_push($this->openAPINullablesSetToNull, 'papdisSubGroup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('papdisSubGroup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($papdisSubGroup) && (mb_strlen($papdisSubGroup) > 40)) {
            throw new InvalidArgumentException('invalid length for $papdisSubGroup when calling WorkerGroup., must be smaller than or equal to 40.');
        }

        $this->container['papdisSubGroup'] = $papdisSubGroup;

        return $this;
    }

    /**
     * Gets localAuthorityNumber
     *
     * @return string|null
     */
    public function getLocalAuthorityNumber(): ?string
    {
        return $this->container['localAuthorityNumber'];
    }

    /**
     * Sets localAuthorityNumber
     *
     * @param string|null $localAuthorityNumber Only applicable if ContributionLevelType is TeachersPensionEnglandAndWales
     *
     * @return $this
     */
    public function setLocalAuthorityNumber(?string $localAuthorityNumber): static
    {
        if (is_null($localAuthorityNumber)) {
            array_push($this->openAPINullablesSetToNull, 'localAuthorityNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localAuthorityNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($localAuthorityNumber) && (mb_strlen($localAuthorityNumber) > 3)) {
            throw new InvalidArgumentException('invalid length for $localAuthorityNumber when calling WorkerGroup., must be smaller than or equal to 3.');
        }
        if (!is_null($localAuthorityNumber) && (!preg_match("/^(\\d{3})$/", ObjectSerializer::toString($localAuthorityNumber)))) {
            throw new InvalidArgumentException("invalid value for \$localAuthorityNumber when calling WorkerGroup., must conform to the pattern /^(\\d{3})$/.");
        }

        $this->container['localAuthorityNumber'] = $localAuthorityNumber;

        return $this;
    }

    /**
     * Gets schoolEmployerType
     *
     * @return string|null
     */
    public function getSchoolEmployerType(): ?string
    {
        return $this->container['schoolEmployerType'];
    }

    /**
     * Sets schoolEmployerType
     *
     * @param string|null $schoolEmployerType Only applicable if ContributionLevelType is TeachersPensionEnglandAndWales
     *
     * @return $this
     */
    public function setSchoolEmployerType(?string $schoolEmployerType): static
    {
        if (is_null($schoolEmployerType)) {
            array_push($this->openAPINullablesSetToNull, 'schoolEmployerType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolEmployerType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($schoolEmployerType) && (mb_strlen($schoolEmployerType) > 4)) {
            throw new InvalidArgumentException('invalid length for $schoolEmployerType when calling WorkerGroup., must be smaller than or equal to 4.');
        }
        if (!is_null($schoolEmployerType) && (!preg_match("/^(\\d{4})$/", ObjectSerializer::toString($schoolEmployerType)))) {
            throw new InvalidArgumentException("invalid value for \$schoolEmployerType when calling WorkerGroup., must conform to the pattern /^(\\d{4})$/.");
        }

        $this->container['schoolEmployerType'] = $schoolEmployerType;

        return $this;
    }

    /**
     * Gets matIdentifier
     *
     * @return string|null
     */
    public function getMatIdentifier(): ?string
    {
        return $this->container['matIdentifier'];
    }

    /**
     * Sets matIdentifier
     *
     * @param string|null $matIdentifier Only applicable if ContributionLevelType is TeachersPensionEnglandAndWales
     *
     * @return $this
     */
    public function setMatIdentifier(?string $matIdentifier): static
    {
        if (is_null($matIdentifier)) {
            array_push($this->openAPINullablesSetToNull, 'matIdentifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matIdentifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($matIdentifier) && (mb_strlen($matIdentifier) > 3)) {
            throw new InvalidArgumentException('invalid length for $matIdentifier when calling WorkerGroup., must be smaller than or equal to 3.');
        }
        if (!is_null($matIdentifier) && (!preg_match("/^(\\d{3}|)$/", ObjectSerializer::toString($matIdentifier)))) {
            throw new InvalidArgumentException("invalid value for \$matIdentifier when calling WorkerGroup., must conform to the pattern /^(\\d{3}|)$/.");
        }

        $this->container['matIdentifier'] = $matIdentifier;

        return $this;
    }

    /**
     * Gets matUniqueNumber
     *
     * @return string|null
     */
    public function getMatUniqueNumber(): ?string
    {
        return $this->container['matUniqueNumber'];
    }

    /**
     * Sets matUniqueNumber
     *
     * @param string|null $matUniqueNumber Only applicable if ContributionLevelType is TeachersPensionEnglandAndWales
     *
     * @return $this
     */
    public function setMatUniqueNumber(?string $matUniqueNumber): static
    {
        if (is_null($matUniqueNumber)) {
            array_push($this->openAPINullablesSetToNull, 'matUniqueNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matUniqueNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($matUniqueNumber) && (mb_strlen($matUniqueNumber) > 4)) {
            throw new InvalidArgumentException('invalid length for $matUniqueNumber when calling WorkerGroup., must be smaller than or equal to 4.');
        }
        if (!is_null($matUniqueNumber) && (!preg_match("/^(\\d{4}|)$/", ObjectSerializer::toString($matUniqueNumber)))) {
            throw new InvalidArgumentException("invalid value for \$matUniqueNumber when calling WorkerGroup., must conform to the pattern /^(\\d{4}|)$/.");
        }

        $this->container['matUniqueNumber'] = $matUniqueNumber;

        return $this;
    }

    /**
     * Gets employerReference
     *
     * @return string|null
     */
    public function getEmployerReference(): ?string
    {
        return $this->container['employerReference'];
    }

    /**
     * Sets employerReference
     *
     * @param string|null $employerReference employerReference
     *
     * @return $this
     */
    public function setEmployerReference(?string $employerReference): static
    {
        if (is_null($employerReference)) {
            array_push($this->openAPINullablesSetToNull, 'employerReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerReference'] = $employerReference;

        return $this;
    }

    /**
     * Gets lgpsFund
     *
     * @return \SynergiTech\Staffology\Model\LgpsFund|null
     */
    public function getLgpsFund(): ?\SynergiTech\Staffology\Model\LgpsFund
    {
        return $this->container['lgpsFund'];
    }

    /**
     * Sets lgpsFund
     *
     * @param \SynergiTech\Staffology\Model\LgpsFund|null $lgpsFund lgpsFund
     *
     * @return $this
     */
    public function setLgpsFund(?\SynergiTech\Staffology\Model\LgpsFund $lgpsFund): static
    {
        if (is_null($lgpsFund)) {
            throw new InvalidArgumentException('non-nullable lgpsFund cannot be null');
        }
        $this->container['lgpsFund'] = $lgpsFund;

        return $this;
    }

    /**
     * Gets workerGroupId
     *
     * @return string|null
     */
    public function getWorkerGroupId(): ?string
    {
        return $this->container['workerGroupId'];
    }

    /**
     * Sets workerGroupId
     *
     * @param string|null $workerGroupId [readonly]
     *
     * @return $this
     */
    public function setWorkerGroupId(?string $workerGroupId): static
    {
        if (is_null($workerGroupId)) {
            throw new InvalidArgumentException('non-nullable workerGroupId cannot be null');
        }
        $this->container['workerGroupId'] = $workerGroupId;

        return $this;
    }

    /**
     * Gets assumedPensionablePay
     *
     * @return \SynergiTech\Staffology\Model\AssumedPensionablePay|null
     */
    public function getAssumedPensionablePay(): ?\SynergiTech\Staffology\Model\AssumedPensionablePay
    {
        return $this->container['assumedPensionablePay'];
    }

    /**
     * Sets assumedPensionablePay
     *
     * @param \SynergiTech\Staffology\Model\AssumedPensionablePay|null $assumedPensionablePay assumedPensionablePay
     *
     * @return $this
     */
    public function setAssumedPensionablePay(?\SynergiTech\Staffology\Model\AssumedPensionablePay $assumedPensionablePay): static
    {
        if (is_null($assumedPensionablePay)) {
            throw new InvalidArgumentException('non-nullable assumedPensionablePay cannot be null');
        }
        $this->container['assumedPensionablePay'] = $assumedPensionablePay;

        return $this;
    }

    /**
     * Gets pensionablePayDefinition
     *
     * @return \SynergiTech\Staffology\Model\PensionablePayDefinition|null
     */
    public function getPensionablePayDefinition(): ?\SynergiTech\Staffology\Model\PensionablePayDefinition
    {
        return $this->container['pensionablePayDefinition'];
    }

    /**
     * Sets pensionablePayDefinition
     *
     * @param \SynergiTech\Staffology\Model\PensionablePayDefinition|null $pensionablePayDefinition pensionablePayDefinition
     *
     * @return $this
     */
    public function setPensionablePayDefinition(?\SynergiTech\Staffology\Model\PensionablePayDefinition $pensionablePayDefinition): static
    {
        if (is_null($pensionablePayDefinition)) {
            throw new InvalidArgumentException('non-nullable pensionablePayDefinition cannot be null');
        }
        $this->container['pensionablePayDefinition'] = $pensionablePayDefinition;

        return $this;
    }

    /**
     * Gets payslipDescription
     *
     * @return string|null
     */
    public function getPayslipDescription(): ?string
    {
        return $this->container['payslipDescription'];
    }

    /**
     * Sets payslipDescription
     *
     * @param string|null $payslipDescription Used for overwriting the pension description that is displayed on the payslip
     *
     * @return $this
     */
    public function setPayslipDescription(?string $payslipDescription): static
    {
        if (is_null($payslipDescription)) {
            array_push($this->openAPINullablesSetToNull, 'payslipDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payslipDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payslipDescription) && (mb_strlen($payslipDescription) > 100)) {
            throw new InvalidArgumentException('invalid length for $payslipDescription when calling WorkerGroup., must be smaller than or equal to 100.');
        }

        $this->container['payslipDescription'] = $payslipDescription;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


