<?php
/**
 * OccupationalPolicy
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * OccupationalPolicy Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OccupationalPolicy implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OccupationalPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'policyName' => 'string',
        'type' => '\SynergiTech\Staffology\Model\OccupationalPolicyType',
        'entitlement' => '\SynergiTech\Staffology\Model\OccupationalPolicyEntitlement',
        'sicknessYear' => '\SynergiTech\Staffology\Model\OccupationalPolicySicknessYear',
        'policyStartMonth' => '\SynergiTech\Staffology\Model\CalendarMonth',
        'serviceBands' => '\SynergiTech\Staffology\Model\ServiceBand[]',
        'payCalculatedOn' => '\SynergiTech\Staffology\Model\OccupationalPolicyPayCalculatedOn',
        'payCodeSetUniqueId' => 'string',
        'useAggregatedServiceDate' => 'bool',
        'daysOrWeeksBeforeRecalculatingEntitlement' => 'int',
        'entitlementRecalculationBasis' => '\SynergiTech\Staffology\Model\OccupationalPolicyEntitlementRecalculationBasis',
        'ignorePreviousYearsSickness' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'policyName' => null,
        'type' => null,
        'entitlement' => null,
        'sicknessYear' => null,
        'policyStartMonth' => null,
        'serviceBands' => null,
        'payCalculatedOn' => null,
        'payCodeSetUniqueId' => 'uuid',
        'useAggregatedServiceDate' => null,
        'daysOrWeeksBeforeRecalculatingEntitlement' => 'int32',
        'entitlementRecalculationBasis' => null,
        'ignorePreviousYearsSickness' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'policyName' => false,
        'type' => false,
        'entitlement' => false,
        'sicknessYear' => false,
        'policyStartMonth' => false,
        'serviceBands' => true,
        'payCalculatedOn' => false,
        'payCodeSetUniqueId' => true,
        'useAggregatedServiceDate' => false,
        'daysOrWeeksBeforeRecalculatingEntitlement' => false,
        'entitlementRecalculationBasis' => false,
        'ignorePreviousYearsSickness' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'policyName' => 'policyName',
        'type' => 'type',
        'entitlement' => 'entitlement',
        'sicknessYear' => 'sicknessYear',
        'policyStartMonth' => 'policyStartMonth',
        'serviceBands' => 'serviceBands',
        'payCalculatedOn' => 'payCalculatedOn',
        'payCodeSetUniqueId' => 'payCodeSetUniqueId',
        'useAggregatedServiceDate' => 'useAggregatedServiceDate',
        'daysOrWeeksBeforeRecalculatingEntitlement' => 'daysOrWeeksBeforeRecalculatingEntitlement',
        'entitlementRecalculationBasis' => 'entitlementRecalculationBasis',
        'ignorePreviousYearsSickness' => 'ignorePreviousYearsSickness'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'policyName' => 'setPolicyName',
        'type' => 'setType',
        'entitlement' => 'setEntitlement',
        'sicknessYear' => 'setSicknessYear',
        'policyStartMonth' => 'setPolicyStartMonth',
        'serviceBands' => 'setServiceBands',
        'payCalculatedOn' => 'setPayCalculatedOn',
        'payCodeSetUniqueId' => 'setPayCodeSetUniqueId',
        'useAggregatedServiceDate' => 'setUseAggregatedServiceDate',
        'daysOrWeeksBeforeRecalculatingEntitlement' => 'setDaysOrWeeksBeforeRecalculatingEntitlement',
        'entitlementRecalculationBasis' => 'setEntitlementRecalculationBasis',
        'ignorePreviousYearsSickness' => 'setIgnorePreviousYearsSickness'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'policyName' => 'getPolicyName',
        'type' => 'getType',
        'entitlement' => 'getEntitlement',
        'sicknessYear' => 'getSicknessYear',
        'policyStartMonth' => 'getPolicyStartMonth',
        'serviceBands' => 'getServiceBands',
        'payCalculatedOn' => 'getPayCalculatedOn',
        'payCodeSetUniqueId' => 'getPayCodeSetUniqueId',
        'useAggregatedServiceDate' => 'getUseAggregatedServiceDate',
        'daysOrWeeksBeforeRecalculatingEntitlement' => 'getDaysOrWeeksBeforeRecalculatingEntitlement',
        'entitlementRecalculationBasis' => 'getEntitlementRecalculationBasis',
        'ignorePreviousYearsSickness' => 'getIgnorePreviousYearsSickness'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('policyName', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('entitlement', $data ?? [], null);
        $this->setIfExists('sicknessYear', $data ?? [], null);
        $this->setIfExists('policyStartMonth', $data ?? [], null);
        $this->setIfExists('serviceBands', $data ?? [], null);
        $this->setIfExists('payCalculatedOn', $data ?? [], null);
        $this->setIfExists('payCodeSetUniqueId', $data ?? [], null);
        $this->setIfExists('useAggregatedServiceDate', $data ?? [], null);
        $this->setIfExists('daysOrWeeksBeforeRecalculatingEntitlement', $data ?? [], null);
        $this->setIfExists('entitlementRecalculationBasis', $data ?? [], null);
        $this->setIfExists('ignorePreviousYearsSickness', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['policyName'] === null) {
            $invalidProperties[] = "'policyName' can't be null";
        }
        if ((mb_strlen($this->container['policyName']) > 50)) {
            $invalidProperties[] = "invalid value for 'policyName', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['policyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'policyName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['entitlement'] === null) {
            $invalidProperties[] = "'entitlement' can't be null";
        }
        if ($this->container['sicknessYear'] === null) {
            $invalidProperties[] = "'sicknessYear' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policyName
     *
     * @return string
     */
    public function getPolicyName(): string
    {
        return $this->container['policyName'];
    }

    /**
     * Sets policyName
     *
     * @param string $policyName The unique policy name
     *
     * @return $this
     */
    public function setPolicyName(string $policyName): static
    {
        if (is_null($policyName)) {
            throw new InvalidArgumentException('non-nullable policyName cannot be null');
        }
        if ((mb_strlen($policyName) > 50)) {
            throw new InvalidArgumentException('invalid length for $policyName when calling OccupationalPolicy., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($policyName) < 1)) {
            throw new InvalidArgumentException('invalid length for $policyName when calling OccupationalPolicy., must be bigger than or equal to 1.');
        }

        $this->container['policyName'] = $policyName;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\OccupationalPolicyType
     */
    public function getType(): \SynergiTech\Staffology\Model\OccupationalPolicyType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\OccupationalPolicyType $type type
     *
     * @return $this
     */
    public function setType(\SynergiTech\Staffology\Model\OccupationalPolicyType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets entitlement
     *
     * @return \SynergiTech\Staffology\Model\OccupationalPolicyEntitlement
     */
    public function getEntitlement(): \SynergiTech\Staffology\Model\OccupationalPolicyEntitlement
    {
        return $this->container['entitlement'];
    }

    /**
     * Sets entitlement
     *
     * @param \SynergiTech\Staffology\Model\OccupationalPolicyEntitlement $entitlement entitlement
     *
     * @return $this
     */
    public function setEntitlement(\SynergiTech\Staffology\Model\OccupationalPolicyEntitlement $entitlement): static
    {
        if (is_null($entitlement)) {
            throw new InvalidArgumentException('non-nullable entitlement cannot be null');
        }
        $this->container['entitlement'] = $entitlement;

        return $this;
    }

    /**
     * Gets sicknessYear
     *
     * @return \SynergiTech\Staffology\Model\OccupationalPolicySicknessYear
     */
    public function getSicknessYear(): \SynergiTech\Staffology\Model\OccupationalPolicySicknessYear
    {
        return $this->container['sicknessYear'];
    }

    /**
     * Sets sicknessYear
     *
     * @param \SynergiTech\Staffology\Model\OccupationalPolicySicknessYear $sicknessYear sicknessYear
     *
     * @return $this
     */
    public function setSicknessYear(\SynergiTech\Staffology\Model\OccupationalPolicySicknessYear $sicknessYear): static
    {
        if (is_null($sicknessYear)) {
            throw new InvalidArgumentException('non-nullable sicknessYear cannot be null');
        }
        $this->container['sicknessYear'] = $sicknessYear;

        return $this;
    }

    /**
     * Gets policyStartMonth
     *
     * @return \SynergiTech\Staffology\Model\CalendarMonth|null
     */
    public function getPolicyStartMonth(): ?\SynergiTech\Staffology\Model\CalendarMonth
    {
        return $this->container['policyStartMonth'];
    }

    /**
     * Sets policyStartMonth
     *
     * @param \SynergiTech\Staffology\Model\CalendarMonth|null $policyStartMonth policyStartMonth
     *
     * @return $this
     */
    public function setPolicyStartMonth(?\SynergiTech\Staffology\Model\CalendarMonth $policyStartMonth): static
    {
        if (is_null($policyStartMonth)) {
            throw new InvalidArgumentException('non-nullable policyStartMonth cannot be null');
        }
        $this->container['policyStartMonth'] = $policyStartMonth;

        return $this;
    }

    /**
     * Gets serviceBands
     *
     * @return \SynergiTech\Staffology\Model\ServiceBand[]|null
     */
    public function getServiceBands(): ?array
    {
        return $this->container['serviceBands'];
    }

    /**
     * Sets serviceBands
     *
     * @param \SynergiTech\Staffology\Model\ServiceBand[]|null $serviceBands Service Bands Json
     *
     * @return $this
     */
    public function setServiceBands(?array $serviceBands): static
    {
        if (is_null($serviceBands)) {
            array_push($this->openAPINullablesSetToNull, 'serviceBands');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceBands', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceBands'] = $serviceBands;

        return $this;
    }

    /**
     * Gets payCalculatedOn
     *
     * @return \SynergiTech\Staffology\Model\OccupationalPolicyPayCalculatedOn|null
     */
    public function getPayCalculatedOn(): ?\SynergiTech\Staffology\Model\OccupationalPolicyPayCalculatedOn
    {
        return $this->container['payCalculatedOn'];
    }

    /**
     * Sets payCalculatedOn
     *
     * @param \SynergiTech\Staffology\Model\OccupationalPolicyPayCalculatedOn|null $payCalculatedOn payCalculatedOn
     *
     * @return $this
     */
    public function setPayCalculatedOn(?\SynergiTech\Staffology\Model\OccupationalPolicyPayCalculatedOn $payCalculatedOn): static
    {
        if (is_null($payCalculatedOn)) {
            throw new InvalidArgumentException('non-nullable payCalculatedOn cannot be null');
        }
        $this->container['payCalculatedOn'] = $payCalculatedOn;

        return $this;
    }

    /**
     * Gets payCodeSetUniqueId
     *
     * @return string|null
     */
    public function getPayCodeSetUniqueId(): ?string
    {
        return $this->container['payCodeSetUniqueId'];
    }

    /**
     * Sets payCodeSetUniqueId
     *
     * @param string|null $payCodeSetUniqueId payCodeSetUniqueId
     *
     * @return $this
     */
    public function setPayCodeSetUniqueId(?string $payCodeSetUniqueId): static
    {
        if (is_null($payCodeSetUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'payCodeSetUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodeSetUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodeSetUniqueId'] = $payCodeSetUniqueId;

        return $this;
    }

    /**
     * Gets useAggregatedServiceDate
     *
     * @return bool|null
     */
    public function getUseAggregatedServiceDate(): ?bool
    {
        return $this->container['useAggregatedServiceDate'];
    }

    /**
     * Sets useAggregatedServiceDate
     *
     * @param bool|null $useAggregatedServiceDate useAggregatedServiceDate
     *
     * @return $this
     */
    public function setUseAggregatedServiceDate(?bool $useAggregatedServiceDate): static
    {
        if (is_null($useAggregatedServiceDate)) {
            throw new InvalidArgumentException('non-nullable useAggregatedServiceDate cannot be null');
        }
        $this->container['useAggregatedServiceDate'] = $useAggregatedServiceDate;

        return $this;
    }

    /**
     * Gets daysOrWeeksBeforeRecalculatingEntitlement
     *
     * @return int|null
     */
    public function getDaysOrWeeksBeforeRecalculatingEntitlement(): ?int
    {
        return $this->container['daysOrWeeksBeforeRecalculatingEntitlement'];
    }

    /**
     * Sets daysOrWeeksBeforeRecalculatingEntitlement
     *
     * @param int|null $daysOrWeeksBeforeRecalculatingEntitlement How many days or weeks an employee needs to return to work before new entitlements are used in calculations
     *
     * @return $this
     */
    public function setDaysOrWeeksBeforeRecalculatingEntitlement(?int $daysOrWeeksBeforeRecalculatingEntitlement): static
    {
        if (is_null($daysOrWeeksBeforeRecalculatingEntitlement)) {
            throw new InvalidArgumentException('non-nullable daysOrWeeksBeforeRecalculatingEntitlement cannot be null');
        }
        $this->container['daysOrWeeksBeforeRecalculatingEntitlement'] = $daysOrWeeksBeforeRecalculatingEntitlement;

        return $this;
    }

    /**
     * Gets entitlementRecalculationBasis
     *
     * @return \SynergiTech\Staffology\Model\OccupationalPolicyEntitlementRecalculationBasis|null
     */
    public function getEntitlementRecalculationBasis(): ?\SynergiTech\Staffology\Model\OccupationalPolicyEntitlementRecalculationBasis
    {
        return $this->container['entitlementRecalculationBasis'];
    }

    /**
     * Sets entitlementRecalculationBasis
     *
     * @param \SynergiTech\Staffology\Model\OccupationalPolicyEntitlementRecalculationBasis|null $entitlementRecalculationBasis entitlementRecalculationBasis
     *
     * @return $this
     */
    public function setEntitlementRecalculationBasis(?\SynergiTech\Staffology\Model\OccupationalPolicyEntitlementRecalculationBasis $entitlementRecalculationBasis): static
    {
        if (is_null($entitlementRecalculationBasis)) {
            throw new InvalidArgumentException('non-nullable entitlementRecalculationBasis cannot be null');
        }
        $this->container['entitlementRecalculationBasis'] = $entitlementRecalculationBasis;

        return $this;
    }

    /**
     * Gets ignorePreviousYearsSickness
     *
     * @return bool|null
     */
    public function getIgnorePreviousYearsSickness(): ?bool
    {
        return $this->container['ignorePreviousYearsSickness'];
    }

    /**
     * Sets ignorePreviousYearsSickness
     *
     * @param bool|null $ignorePreviousYearsSickness Defines whether any sickness that relates to a previous year's sickness entitlement should be included in the entitlement calculation,  or whether only sickness that is relevant to the current year's entitlement is taken into consideration
     *
     * @return $this
     */
    public function setIgnorePreviousYearsSickness(?bool $ignorePreviousYearsSickness): static
    {
        if (is_null($ignorePreviousYearsSickness)) {
            throw new InvalidArgumentException('non-nullable ignorePreviousYearsSickness cannot be null');
        }
        $this->container['ignorePreviousYearsSickness'] = $ignorePreviousYearsSickness;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


