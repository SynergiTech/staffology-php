<?php
/**
 * ContractAutoEnrolmentSettingsRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractAutoEnrolmentSettingsRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractAutoEnrolmentSettingsRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.AutoEnrolmentSettingsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'stagingDate' => '\DateTime',
        'cyclicalReenrolmentDate' => '\DateTime',
        'previousCyclicalReenrolmentDate' => '\DateTime',
        'defaultPension' => '\SynergiTech\Staffology\Model\ContractPensionSelectionRequest',
        'pensionSameAsDefault' => 'bool',
        'daysToDeferAssessment' => 'int',
        'deferByMonthsNotDays' => 'bool',
        'deferEnrolmentBy' => 'int',
        'deferEnrolmentByPeriodType' => '\SynergiTech\Staffology\Model\DeferalPeriodType',
        'includeNonPensionedEmployeesInSubmission' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'stagingDate' => 'date',
        'cyclicalReenrolmentDate' => 'date',
        'previousCyclicalReenrolmentDate' => 'date',
        'defaultPension' => null,
        'pensionSameAsDefault' => null,
        'daysToDeferAssessment' => 'int32',
        'deferByMonthsNotDays' => null,
        'deferEnrolmentBy' => 'int32',
        'deferEnrolmentByPeriodType' => null,
        'includeNonPensionedEmployeesInSubmission' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'stagingDate' => false,
        'cyclicalReenrolmentDate' => true,
        'previousCyclicalReenrolmentDate' => true,
        'defaultPension' => false,
        'pensionSameAsDefault' => false,
        'daysToDeferAssessment' => false,
        'deferByMonthsNotDays' => false,
        'deferEnrolmentBy' => false,
        'deferEnrolmentByPeriodType' => false,
        'includeNonPensionedEmployeesInSubmission' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'stagingDate' => 'stagingDate',
        'cyclicalReenrolmentDate' => 'cyclicalReenrolmentDate',
        'previousCyclicalReenrolmentDate' => 'previousCyclicalReenrolmentDate',
        'defaultPension' => 'defaultPension',
        'pensionSameAsDefault' => 'pensionSameAsDefault',
        'daysToDeferAssessment' => 'daysToDeferAssessment',
        'deferByMonthsNotDays' => 'deferByMonthsNotDays',
        'deferEnrolmentBy' => 'deferEnrolmentBy',
        'deferEnrolmentByPeriodType' => 'deferEnrolmentByPeriodType',
        'includeNonPensionedEmployeesInSubmission' => 'includeNonPensionedEmployeesInSubmission'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'stagingDate' => 'setStagingDate',
        'cyclicalReenrolmentDate' => 'setCyclicalReenrolmentDate',
        'previousCyclicalReenrolmentDate' => 'setPreviousCyclicalReenrolmentDate',
        'defaultPension' => 'setDefaultPension',
        'pensionSameAsDefault' => 'setPensionSameAsDefault',
        'daysToDeferAssessment' => 'setDaysToDeferAssessment',
        'deferByMonthsNotDays' => 'setDeferByMonthsNotDays',
        'deferEnrolmentBy' => 'setDeferEnrolmentBy',
        'deferEnrolmentByPeriodType' => 'setDeferEnrolmentByPeriodType',
        'includeNonPensionedEmployeesInSubmission' => 'setIncludeNonPensionedEmployeesInSubmission'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'stagingDate' => 'getStagingDate',
        'cyclicalReenrolmentDate' => 'getCyclicalReenrolmentDate',
        'previousCyclicalReenrolmentDate' => 'getPreviousCyclicalReenrolmentDate',
        'defaultPension' => 'getDefaultPension',
        'pensionSameAsDefault' => 'getPensionSameAsDefault',
        'daysToDeferAssessment' => 'getDaysToDeferAssessment',
        'deferByMonthsNotDays' => 'getDeferByMonthsNotDays',
        'deferEnrolmentBy' => 'getDeferEnrolmentBy',
        'deferEnrolmentByPeriodType' => 'getDeferEnrolmentByPeriodType',
        'includeNonPensionedEmployeesInSubmission' => 'getIncludeNonPensionedEmployeesInSubmission'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('stagingDate', $data ?? [], null);
        $this->setIfExists('cyclicalReenrolmentDate', $data ?? [], null);
        $this->setIfExists('previousCyclicalReenrolmentDate', $data ?? [], null);
        $this->setIfExists('defaultPension', $data ?? [], null);
        $this->setIfExists('pensionSameAsDefault', $data ?? [], null);
        $this->setIfExists('daysToDeferAssessment', $data ?? [], null);
        $this->setIfExists('deferByMonthsNotDays', $data ?? [], null);
        $this->setIfExists('deferEnrolmentBy', $data ?? [], null);
        $this->setIfExists('deferEnrolmentByPeriodType', $data ?? [], null);
        $this->setIfExists('includeNonPensionedEmployeesInSubmission', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets stagingDate
     *
     * @return \DateTime|null
     */
    public function getStagingDate(): ?\DateTime
    {
        return $this->container['stagingDate'];
    }

    /**
     * Sets stagingDate
     *
     * @param \DateTime|null $stagingDate stagingDate
     *
     * @return $this
     */
    public function setStagingDate(?\DateTime $stagingDate): static
    {
        if (is_null($stagingDate)) {
            throw new InvalidArgumentException('non-nullable stagingDate cannot be null');
        }
        $this->container['stagingDate'] = $stagingDate;

        return $this;
    }

    /**
     * Gets cyclicalReenrolmentDate
     *
     * @return \DateTime|null
     */
    public function getCyclicalReenrolmentDate(): ?\DateTime
    {
        return $this->container['cyclicalReenrolmentDate'];
    }

    /**
     * Sets cyclicalReenrolmentDate
     *
     * @param \DateTime|null $cyclicalReenrolmentDate cyclicalReenrolmentDate
     *
     * @return $this
     */
    public function setCyclicalReenrolmentDate(?\DateTime $cyclicalReenrolmentDate): static
    {
        if (is_null($cyclicalReenrolmentDate)) {
            array_push($this->openAPINullablesSetToNull, 'cyclicalReenrolmentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cyclicalReenrolmentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cyclicalReenrolmentDate'] = $cyclicalReenrolmentDate;

        return $this;
    }

    /**
     * Gets previousCyclicalReenrolmentDate
     *
     * @return \DateTime|null
     */
    public function getPreviousCyclicalReenrolmentDate(): ?\DateTime
    {
        return $this->container['previousCyclicalReenrolmentDate'];
    }

    /**
     * Sets previousCyclicalReenrolmentDate
     *
     * @param \DateTime|null $previousCyclicalReenrolmentDate previousCyclicalReenrolmentDate
     *
     * @return $this
     */
    public function setPreviousCyclicalReenrolmentDate(?\DateTime $previousCyclicalReenrolmentDate): static
    {
        if (is_null($previousCyclicalReenrolmentDate)) {
            array_push($this->openAPINullablesSetToNull, 'previousCyclicalReenrolmentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previousCyclicalReenrolmentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previousCyclicalReenrolmentDate'] = $previousCyclicalReenrolmentDate;

        return $this;
    }

    /**
     * Gets defaultPension
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionSelectionRequest|null
     */
    public function getDefaultPension(): ?\SynergiTech\Staffology\Model\ContractPensionSelectionRequest
    {
        return $this->container['defaultPension'];
    }

    /**
     * Sets defaultPension
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionSelectionRequest|null $defaultPension defaultPension
     *
     * @return $this
     */
    public function setDefaultPension(?\SynergiTech\Staffology\Model\ContractPensionSelectionRequest $defaultPension): static
    {
        if (is_null($defaultPension)) {
            throw new InvalidArgumentException('non-nullable defaultPension cannot be null');
        }
        $this->container['defaultPension'] = $defaultPension;

        return $this;
    }

    /**
     * Gets pensionSameAsDefault
     *
     * @return bool|null
     */
    public function getPensionSameAsDefault(): ?bool
    {
        return $this->container['pensionSameAsDefault'];
    }

    /**
     * Sets pensionSameAsDefault
     *
     * @param bool|null $pensionSameAsDefault pensionSameAsDefault
     *
     * @return $this
     */
    public function setPensionSameAsDefault(?bool $pensionSameAsDefault): static
    {
        if (is_null($pensionSameAsDefault)) {
            throw new InvalidArgumentException('non-nullable pensionSameAsDefault cannot be null');
        }
        $this->container['pensionSameAsDefault'] = $pensionSameAsDefault;

        return $this;
    }

    /**
     * Gets daysToDeferAssessment
     *
     * @return int|null
     */
    public function getDaysToDeferAssessment(): ?int
    {
        return $this->container['daysToDeferAssessment'];
    }

    /**
     * Sets daysToDeferAssessment
     *
     * @param int|null $daysToDeferAssessment The number of days, if any, to defer assessment of new employees.  You're allowed to defer assessment of new employees by up to 3 months.  This is the default value used when you create a new employee. It can be changed on a per-employee basis.
     *
     * @return $this
     */
    public function setDaysToDeferAssessment(?int $daysToDeferAssessment): static
    {
        if (is_null($daysToDeferAssessment)) {
            throw new InvalidArgumentException('non-nullable daysToDeferAssessment cannot be null');
        }
        $this->container['daysToDeferAssessment'] = $daysToDeferAssessment;

        return $this;
    }

    /**
     * Gets deferByMonthsNotDays
     *
     * @return bool|null
     */
    public function getDeferByMonthsNotDays(): ?bool
    {
        return $this->container['deferByMonthsNotDays'];
    }

    /**
     * Sets deferByMonthsNotDays
     *
     * @param bool|null $deferByMonthsNotDays If set to true then the value in DaysToDeferAssessment will be treated as a number of months, not a number of days
     *
     * @return $this
     */
    public function setDeferByMonthsNotDays(?bool $deferByMonthsNotDays): static
    {
        if (is_null($deferByMonthsNotDays)) {
            throw new InvalidArgumentException('non-nullable deferByMonthsNotDays cannot be null');
        }
        $this->container['deferByMonthsNotDays'] = $deferByMonthsNotDays;

        return $this;
    }

    /**
     * Gets deferEnrolmentBy
     *
     * @return int|null
     */
    public function getDeferEnrolmentBy(): ?int
    {
        return $this->container['deferEnrolmentBy'];
    }

    /**
     * Sets deferEnrolmentBy
     *
     * @param int|null $deferEnrolmentBy The number of days )or weeks, or months), if any, to defer enrolment of employees that are Eligible Jobholders.  For example, if this is set to 30 days then if an employee meets the criteria for enrolment then they'll only be enrolled if they still meet the criteria 30 days later
     *
     * @return $this
     */
    public function setDeferEnrolmentBy(?int $deferEnrolmentBy): static
    {
        if (is_null($deferEnrolmentBy)) {
            throw new InvalidArgumentException('non-nullable deferEnrolmentBy cannot be null');
        }
        $this->container['deferEnrolmentBy'] = $deferEnrolmentBy;

        return $this;
    }

    /**
     * Gets deferEnrolmentByPeriodType
     *
     * @return \SynergiTech\Staffology\Model\DeferalPeriodType|null
     */
    public function getDeferEnrolmentByPeriodType(): ?\SynergiTech\Staffology\Model\DeferalPeriodType
    {
        return $this->container['deferEnrolmentByPeriodType'];
    }

    /**
     * Sets deferEnrolmentByPeriodType
     *
     * @param \SynergiTech\Staffology\Model\DeferalPeriodType|null $deferEnrolmentByPeriodType deferEnrolmentByPeriodType
     *
     * @return $this
     */
    public function setDeferEnrolmentByPeriodType(?\SynergiTech\Staffology\Model\DeferalPeriodType $deferEnrolmentByPeriodType): static
    {
        if (is_null($deferEnrolmentByPeriodType)) {
            throw new InvalidArgumentException('non-nullable deferEnrolmentByPeriodType cannot be null');
        }
        $this->container['deferEnrolmentByPeriodType'] = $deferEnrolmentByPeriodType;

        return $this;
    }

    /**
     * Gets includeNonPensionedEmployeesInSubmission
     *
     * @return bool|null
     */
    public function getIncludeNonPensionedEmployeesInSubmission(): ?bool
    {
        return $this->container['includeNonPensionedEmployeesInSubmission'];
    }

    /**
     * Sets includeNonPensionedEmployeesInSubmission
     *
     * @param bool|null $includeNonPensionedEmployeesInSubmission Whether or not to include details of non-pensioned employees in your submissions to this provider
     *
     * @return $this
     */
    public function setIncludeNonPensionedEmployeesInSubmission(?bool $includeNonPensionedEmployeesInSubmission): static
    {
        if (is_null($includeNonPensionedEmployeesInSubmission)) {
            throw new InvalidArgumentException('non-nullable includeNonPensionedEmployeesInSubmission cannot be null');
        }
        $this->container['includeNonPensionedEmployeesInSubmission'] = $includeNonPensionedEmployeesInSubmission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


