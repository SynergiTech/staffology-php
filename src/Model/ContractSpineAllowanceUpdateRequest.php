<?php
/**
 * ContractSpineAllowanceUpdateRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractSpineAllowanceUpdateRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractSpineAllowanceUpdateRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.SpineAllowanceUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'uniqueId' => 'string',
        'allowanceName' => 'string',
        'allowanceType' => '\SynergiTech\Staffology\Model\AllowanceType',
        'allowanceUsualAnnualValue' => 'float',
        'allowanceRangeLowerValue' => 'float',
        'allowanceRangeUpperValue' => 'float',
        'allowanceEffectiveDate' => '\DateTime',
        'allowanceAlwaysFTE' => 'bool',
        'payCode' => 'string',
        'payCodeTitle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'uniqueId' => 'uuid',
        'allowanceName' => null,
        'allowanceType' => null,
        'allowanceUsualAnnualValue' => 'double',
        'allowanceRangeLowerValue' => 'double',
        'allowanceRangeUpperValue' => 'double',
        'allowanceEffectiveDate' => 'date',
        'allowanceAlwaysFTE' => null,
        'payCode' => null,
        'payCodeTitle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'uniqueId' => false,
        'allowanceName' => true,
        'allowanceType' => false,
        'allowanceUsualAnnualValue' => false,
        'allowanceRangeLowerValue' => false,
        'allowanceRangeUpperValue' => false,
        'allowanceEffectiveDate' => false,
        'allowanceAlwaysFTE' => false,
        'payCode' => true,
        'payCodeTitle' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'uniqueId' => 'uniqueId',
        'allowanceName' => 'allowanceName',
        'allowanceType' => 'allowanceType',
        'allowanceUsualAnnualValue' => 'allowanceUsualAnnualValue',
        'allowanceRangeLowerValue' => 'allowanceRangeLowerValue',
        'allowanceRangeUpperValue' => 'allowanceRangeUpperValue',
        'allowanceEffectiveDate' => 'allowanceEffectiveDate',
        'allowanceAlwaysFTE' => 'allowanceAlwaysFTE',
        'payCode' => 'payCode',
        'payCodeTitle' => 'payCodeTitle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'uniqueId' => 'setUniqueId',
        'allowanceName' => 'setAllowanceName',
        'allowanceType' => 'setAllowanceType',
        'allowanceUsualAnnualValue' => 'setAllowanceUsualAnnualValue',
        'allowanceRangeLowerValue' => 'setAllowanceRangeLowerValue',
        'allowanceRangeUpperValue' => 'setAllowanceRangeUpperValue',
        'allowanceEffectiveDate' => 'setAllowanceEffectiveDate',
        'allowanceAlwaysFTE' => 'setAllowanceAlwaysFTE',
        'payCode' => 'setPayCode',
        'payCodeTitle' => 'setPayCodeTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'uniqueId' => 'getUniqueId',
        'allowanceName' => 'getAllowanceName',
        'allowanceType' => 'getAllowanceType',
        'allowanceUsualAnnualValue' => 'getAllowanceUsualAnnualValue',
        'allowanceRangeLowerValue' => 'getAllowanceRangeLowerValue',
        'allowanceRangeUpperValue' => 'getAllowanceRangeUpperValue',
        'allowanceEffectiveDate' => 'getAllowanceEffectiveDate',
        'allowanceAlwaysFTE' => 'getAllowanceAlwaysFTE',
        'payCode' => 'getPayCode',
        'payCodeTitle' => 'getPayCodeTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('uniqueId', $data ?? [], null);
        $this->setIfExists('allowanceName', $data ?? [], null);
        $this->setIfExists('allowanceType', $data ?? [], null);
        $this->setIfExists('allowanceUsualAnnualValue', $data ?? [], null);
        $this->setIfExists('allowanceRangeLowerValue', $data ?? [], null);
        $this->setIfExists('allowanceRangeUpperValue', $data ?? [], null);
        $this->setIfExists('allowanceEffectiveDate', $data ?? [], null);
        $this->setIfExists('allowanceAlwaysFTE', $data ?? [], null);
        $this->setIfExists('payCode', $data ?? [], null);
        $this->setIfExists('payCodeTitle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uniqueId
     *
     * @return string|null
     */
    public function getUniqueId(): ?string
    {
        return $this->container['uniqueId'];
    }

    /**
     * Sets uniqueId
     *
     * @param string|null $uniqueId Spine Allowance identifier
     *
     * @return $this
     */
    public function setUniqueId(?string $uniqueId): static
    {
        if (is_null($uniqueId)) {
            throw new InvalidArgumentException('non-nullable uniqueId cannot be null');
        }
        $this->container['uniqueId'] = $uniqueId;

        return $this;
    }

    /**
     * Gets allowanceName
     *
     * @return string|null
     */
    public function getAllowanceName(): ?string
    {
        return $this->container['allowanceName'];
    }

    /**
     * Sets allowanceName
     *
     * @param string|null $allowanceName Name of Allowance
     *
     * @return $this
     */
    public function setAllowanceName(?string $allowanceName): static
    {
        if (is_null($allowanceName)) {
            array_push($this->openAPINullablesSetToNull, 'allowanceName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowanceName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowanceName'] = $allowanceName;

        return $this;
    }

    /**
     * Gets allowanceType
     *
     * @return \SynergiTech\Staffology\Model\AllowanceType|null
     */
    public function getAllowanceType(): ?\SynergiTech\Staffology\Model\AllowanceType
    {
        return $this->container['allowanceType'];
    }

    /**
     * Sets allowanceType
     *
     * @param \SynergiTech\Staffology\Model\AllowanceType|null $allowanceType allowanceType
     *
     * @return $this
     */
    public function setAllowanceType(?\SynergiTech\Staffology\Model\AllowanceType $allowanceType): static
    {
        if (is_null($allowanceType)) {
            throw new InvalidArgumentException('non-nullable allowanceType cannot be null');
        }
        $this->container['allowanceType'] = $allowanceType;

        return $this;
    }

    /**
     * Gets allowanceUsualAnnualValue
     *
     * @return float|null
     */
    public function getAllowanceUsualAnnualValue(): ?float
    {
        return $this->container['allowanceUsualAnnualValue'];
    }

    /**
     * Sets allowanceUsualAnnualValue
     *
     * @param float|null $allowanceUsualAnnualValue Value of Allowance Usual Annual
     *
     * @return $this
     */
    public function setAllowanceUsualAnnualValue(?float $allowanceUsualAnnualValue): static
    {
        if (is_null($allowanceUsualAnnualValue)) {
            throw new InvalidArgumentException('non-nullable allowanceUsualAnnualValue cannot be null');
        }
        $this->container['allowanceUsualAnnualValue'] = $allowanceUsualAnnualValue;

        return $this;
    }

    /**
     * Gets allowanceRangeLowerValue
     *
     * @return float|null
     */
    public function getAllowanceRangeLowerValue(): ?float
    {
        return $this->container['allowanceRangeLowerValue'];
    }

    /**
     * Sets allowanceRangeLowerValue
     *
     * @param float|null $allowanceRangeLowerValue Value of Allowance Range Lower
     *
     * @return $this
     */
    public function setAllowanceRangeLowerValue(?float $allowanceRangeLowerValue): static
    {
        if (is_null($allowanceRangeLowerValue)) {
            throw new InvalidArgumentException('non-nullable allowanceRangeLowerValue cannot be null');
        }
        $this->container['allowanceRangeLowerValue'] = $allowanceRangeLowerValue;

        return $this;
    }

    /**
     * Gets allowanceRangeUpperValue
     *
     * @return float|null
     */
    public function getAllowanceRangeUpperValue(): ?float
    {
        return $this->container['allowanceRangeUpperValue'];
    }

    /**
     * Sets allowanceRangeUpperValue
     *
     * @param float|null $allowanceRangeUpperValue Value of Allowance Range Upper
     *
     * @return $this
     */
    public function setAllowanceRangeUpperValue(?float $allowanceRangeUpperValue): static
    {
        if (is_null($allowanceRangeUpperValue)) {
            throw new InvalidArgumentException('non-nullable allowanceRangeUpperValue cannot be null');
        }
        $this->container['allowanceRangeUpperValue'] = $allowanceRangeUpperValue;

        return $this;
    }

    /**
     * Gets allowanceEffectiveDate
     *
     * @return \DateTime|null
     */
    public function getAllowanceEffectiveDate(): ?\DateTime
    {
        return $this->container['allowanceEffectiveDate'];
    }

    /**
     * Sets allowanceEffectiveDate
     *
     * @param \DateTime|null $allowanceEffectiveDate Allowance Effective Date
     *
     * @return $this
     */
    public function setAllowanceEffectiveDate(?\DateTime $allowanceEffectiveDate): static
    {
        if (is_null($allowanceEffectiveDate)) {
            throw new InvalidArgumentException('non-nullable allowanceEffectiveDate cannot be null');
        }
        $this->container['allowanceEffectiveDate'] = $allowanceEffectiveDate;

        return $this;
    }

    /**
     * Gets allowanceAlwaysFTE
     *
     * @return bool|null
     */
    public function getAllowanceAlwaysFTE(): ?bool
    {
        return $this->container['allowanceAlwaysFTE'];
    }

    /**
     * Sets allowanceAlwaysFTE
     *
     * @param bool|null $allowanceAlwaysFTE Allowance Always FTE or Not
     *
     * @return $this
     */
    public function setAllowanceAlwaysFTE(?bool $allowanceAlwaysFTE): static
    {
        if (is_null($allowanceAlwaysFTE)) {
            throw new InvalidArgumentException('non-nullable allowanceAlwaysFTE cannot be null');
        }
        $this->container['allowanceAlwaysFTE'] = $allowanceAlwaysFTE;

        return $this;
    }

    /**
     * Gets payCode
     *
     * @return string|null
     */
    public function getPayCode(): ?string
    {
        return $this->container['payCode'];
    }

    /**
     * Sets payCode
     *
     * @param string|null $payCode Pay Code
     *
     * @return $this
     */
    public function setPayCode(?string $payCode): static
    {
        if (is_null($payCode)) {
            array_push($this->openAPINullablesSetToNull, 'payCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCode'] = $payCode;

        return $this;
    }

    /**
     * Gets payCodeTitle
     *
     * @return string|null
     */
    public function getPayCodeTitle(): ?string
    {
        return $this->container['payCodeTitle'];
    }

    /**
     * Sets payCodeTitle
     *
     * @param string|null $payCodeTitle Pay Code Title
     *
     * @return $this
     */
    public function setPayCodeTitle(?string $payCodeTitle): static
    {
        if (is_null($payCodeTitle)) {
            array_push($this->openAPINullablesSetToNull, 'payCodeTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodeTitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodeTitle'] = $payCodeTitle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


