<?php
/**
 * PayCode
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayCode Class Doc Comment
 *
 * @description Each PayLine has a Code. The Code will match the Code property of a PayCode.  The PayCode that is used determines how the amount is treated with regards to tax, NI and pensions
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayCode implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayCode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'code' => 'string',
        'defaultValue' => 'float',
        'isDeduction' => 'bool',
        'isNiable' => 'bool',
        'isTaxable' => 'bool',
        'isPensionable' => 'bool',
        'isAttachable' => 'bool',
        'isRealTimeClass1aNiable' => 'bool',
        'isNotContributingToHolidayPay' => 'bool',
        'isQualifyingEarningsForAe' => 'bool',
        'isNotTierable' => 'bool',
        'isTcpTcls' => 'bool',
        'isTcpPp' => 'bool',
        'isTcpOp' => 'bool',
        'flexibleDrawdown' => '\SynergiTech\Staffology\Model\FlexibleDrawdown',
        'isAutoAdjust' => 'bool',
        'calculationType' => '\SynergiTech\Staffology\Model\PayCodeCalculationType',
        'multiplierType' => '\SynergiTech\Staffology\Model\PayCodeMultiplierType',
        'dailyRateMultiplier' => 'float',
        'hourlyRateMultiplier' => 'float',
        'isSystemCode' => 'bool',
        'isControlCode' => 'bool',
        'isNotional' => 'bool',
        'isStandAloneLumpSum' => 'bool',
        'isPensionExcessLumpSum' => 'bool',
        'payee' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'code' => null,
        'defaultValue' => 'double',
        'isDeduction' => null,
        'isNiable' => null,
        'isTaxable' => null,
        'isPensionable' => null,
        'isAttachable' => null,
        'isRealTimeClass1aNiable' => null,
        'isNotContributingToHolidayPay' => null,
        'isQualifyingEarningsForAe' => null,
        'isNotTierable' => null,
        'isTcpTcls' => null,
        'isTcpPp' => null,
        'isTcpOp' => null,
        'flexibleDrawdown' => null,
        'isAutoAdjust' => null,
        'calculationType' => null,
        'multiplierType' => null,
        'dailyRateMultiplier' => 'double',
        'hourlyRateMultiplier' => 'double',
        'isSystemCode' => null,
        'isControlCode' => null,
        'isNotional' => null,
        'isStandAloneLumpSum' => null,
        'isPensionExcessLumpSum' => null,
        'payee' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => false,
        'code' => false,
        'defaultValue' => true,
        'isDeduction' => false,
        'isNiable' => false,
        'isTaxable' => false,
        'isPensionable' => false,
        'isAttachable' => false,
        'isRealTimeClass1aNiable' => false,
        'isNotContributingToHolidayPay' => false,
        'isQualifyingEarningsForAe' => true,
        'isNotTierable' => false,
        'isTcpTcls' => false,
        'isTcpPp' => false,
        'isTcpOp' => false,
        'flexibleDrawdown' => false,
        'isAutoAdjust' => false,
        'calculationType' => false,
        'multiplierType' => false,
        'dailyRateMultiplier' => false,
        'hourlyRateMultiplier' => false,
        'isSystemCode' => false,
        'isControlCode' => false,
        'isNotional' => false,
        'isStandAloneLumpSum' => false,
        'isPensionExcessLumpSum' => false,
        'payee' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'code' => 'code',
        'defaultValue' => 'defaultValue',
        'isDeduction' => 'isDeduction',
        'isNiable' => 'isNiable',
        'isTaxable' => 'isTaxable',
        'isPensionable' => 'isPensionable',
        'isAttachable' => 'isAttachable',
        'isRealTimeClass1aNiable' => 'isRealTimeClass1aNiable',
        'isNotContributingToHolidayPay' => 'isNotContributingToHolidayPay',
        'isQualifyingEarningsForAe' => 'isQualifyingEarningsForAe',
        'isNotTierable' => 'isNotTierable',
        'isTcpTcls' => 'isTcp_Tcls',
        'isTcpPp' => 'isTcp_Pp',
        'isTcpOp' => 'isTcp_Op',
        'flexibleDrawdown' => 'flexibleDrawdown',
        'isAutoAdjust' => 'isAutoAdjust',
        'calculationType' => 'calculationType',
        'multiplierType' => 'multiplierType',
        'dailyRateMultiplier' => 'dailyRateMultiplier',
        'hourlyRateMultiplier' => 'hourlyRateMultiplier',
        'isSystemCode' => 'isSystemCode',
        'isControlCode' => 'isControlCode',
        'isNotional' => 'isNotional',
        'isStandAloneLumpSum' => 'isStandAloneLumpSum',
        'isPensionExcessLumpSum' => 'isPensionExcessLumpSum',
        'payee' => 'payee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'code' => 'setCode',
        'defaultValue' => 'setDefaultValue',
        'isDeduction' => 'setIsDeduction',
        'isNiable' => 'setIsNiable',
        'isTaxable' => 'setIsTaxable',
        'isPensionable' => 'setIsPensionable',
        'isAttachable' => 'setIsAttachable',
        'isRealTimeClass1aNiable' => 'setIsRealTimeClass1aNiable',
        'isNotContributingToHolidayPay' => 'setIsNotContributingToHolidayPay',
        'isQualifyingEarningsForAe' => 'setIsQualifyingEarningsForAe',
        'isNotTierable' => 'setIsNotTierable',
        'isTcpTcls' => 'setIsTcpTcls',
        'isTcpPp' => 'setIsTcpPp',
        'isTcpOp' => 'setIsTcpOp',
        'flexibleDrawdown' => 'setFlexibleDrawdown',
        'isAutoAdjust' => 'setIsAutoAdjust',
        'calculationType' => 'setCalculationType',
        'multiplierType' => 'setMultiplierType',
        'dailyRateMultiplier' => 'setDailyRateMultiplier',
        'hourlyRateMultiplier' => 'setHourlyRateMultiplier',
        'isSystemCode' => 'setIsSystemCode',
        'isControlCode' => 'setIsControlCode',
        'isNotional' => 'setIsNotional',
        'isStandAloneLumpSum' => 'setIsStandAloneLumpSum',
        'isPensionExcessLumpSum' => 'setIsPensionExcessLumpSum',
        'payee' => 'setPayee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'code' => 'getCode',
        'defaultValue' => 'getDefaultValue',
        'isDeduction' => 'getIsDeduction',
        'isNiable' => 'getIsNiable',
        'isTaxable' => 'getIsTaxable',
        'isPensionable' => 'getIsPensionable',
        'isAttachable' => 'getIsAttachable',
        'isRealTimeClass1aNiable' => 'getIsRealTimeClass1aNiable',
        'isNotContributingToHolidayPay' => 'getIsNotContributingToHolidayPay',
        'isQualifyingEarningsForAe' => 'getIsQualifyingEarningsForAe',
        'isNotTierable' => 'getIsNotTierable',
        'isTcpTcls' => 'getIsTcpTcls',
        'isTcpPp' => 'getIsTcpPp',
        'isTcpOp' => 'getIsTcpOp',
        'flexibleDrawdown' => 'getFlexibleDrawdown',
        'isAutoAdjust' => 'getIsAutoAdjust',
        'calculationType' => 'getCalculationType',
        'multiplierType' => 'getMultiplierType',
        'dailyRateMultiplier' => 'getDailyRateMultiplier',
        'hourlyRateMultiplier' => 'getHourlyRateMultiplier',
        'isSystemCode' => 'getIsSystemCode',
        'isControlCode' => 'getIsControlCode',
        'isNotional' => 'getIsNotional',
        'isStandAloneLumpSum' => 'getIsStandAloneLumpSum',
        'isPensionExcessLumpSum' => 'getIsPensionExcessLumpSum',
        'payee' => 'getPayee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('defaultValue', $data ?? [], null);
        $this->setIfExists('isDeduction', $data ?? [], null);
        $this->setIfExists('isNiable', $data ?? [], null);
        $this->setIfExists('isTaxable', $data ?? [], null);
        $this->setIfExists('isPensionable', $data ?? [], null);
        $this->setIfExists('isAttachable', $data ?? [], null);
        $this->setIfExists('isRealTimeClass1aNiable', $data ?? [], null);
        $this->setIfExists('isNotContributingToHolidayPay', $data ?? [], null);
        $this->setIfExists('isQualifyingEarningsForAe', $data ?? [], null);
        $this->setIfExists('isNotTierable', $data ?? [], null);
        $this->setIfExists('isTcpTcls', $data ?? [], null);
        $this->setIfExists('isTcpPp', $data ?? [], null);
        $this->setIfExists('isTcpOp', $data ?? [], null);
        $this->setIfExists('flexibleDrawdown', $data ?? [], null);
        $this->setIfExists('isAutoAdjust', $data ?? [], null);
        $this->setIfExists('calculationType', $data ?? [], null);
        $this->setIfExists('multiplierType', $data ?? [], null);
        $this->setIfExists('dailyRateMultiplier', $data ?? [], null);
        $this->setIfExists('hourlyRateMultiplier', $data ?? [], null);
        $this->setIfExists('isSystemCode', $data ?? [], null);
        $this->setIfExists('isControlCode', $data ?? [], null);
        $this->setIfExists('isNotional', $data ?? [], null);
        $this->setIfExists('isStandAloneLumpSum', $data ?? [], null);
        $this->setIfExists('isPensionExcessLumpSum', $data ?? [], null);
        $this->setIfExists('payee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 100)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 20)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle(): string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle(string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 100)) {
            throw new InvalidArgumentException('invalid length for $title when calling PayCode., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($title) < 1)) {
            throw new InvalidArgumentException('invalid length for $title when calling PayCode., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode(): string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode(string $code): static
    {
        if (is_null($code)) {
            throw new InvalidArgumentException('non-nullable code cannot be null');
        }
        if ((mb_strlen($code) > 20)) {
            throw new InvalidArgumentException('invalid length for $code when calling PayCode., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($code) < 1)) {
            throw new InvalidArgumentException('invalid length for $code when calling PayCode., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets defaultValue
     *
     * @return float|null
     */
    public function getDefaultValue(): ?float
    {
        return $this->container['defaultValue'];
    }

    /**
     * Sets defaultValue
     *
     * @param float|null $defaultValue If a non-zero value is provided then when this code is selected in our UI the value will be automatically filled.
     *
     * @return $this
     */
    public function setDefaultValue(?float $defaultValue): static
    {
        if (is_null($defaultValue)) {
            array_push($this->openAPINullablesSetToNull, 'defaultValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultValue'] = $defaultValue;

        return $this;
    }

    /**
     * Gets isDeduction
     *
     * @return bool|null
     */
    public function getIsDeduction(): ?bool
    {
        return $this->container['isDeduction'];
    }

    /**
     * Sets isDeduction
     *
     * @param bool|null $isDeduction If set to true then a PayLine using this code will be treated as a deduction as opposed to an addition.
     *
     * @return $this
     */
    public function setIsDeduction(?bool $isDeduction): static
    {
        if (is_null($isDeduction)) {
            throw new InvalidArgumentException('non-nullable isDeduction cannot be null');
        }
        $this->container['isDeduction'] = $isDeduction;

        return $this;
    }

    /**
     * Gets isNiable
     *
     * @return bool|null
     */
    public function getIsNiable(): ?bool
    {
        return $this->container['isNiable'];
    }

    /**
     * Sets isNiable
     *
     * @param bool|null $isNiable Determines whether or not the value of PayLines using this code should be taken into consideration when calculating National Insurance Contributions.
     *
     * @return $this
     */
    public function setIsNiable(?bool $isNiable): static
    {
        if (is_null($isNiable)) {
            throw new InvalidArgumentException('non-nullable isNiable cannot be null');
        }
        $this->container['isNiable'] = $isNiable;

        return $this;
    }

    /**
     * Gets isTaxable
     *
     * @return bool|null
     */
    public function getIsTaxable(): ?bool
    {
        return $this->container['isTaxable'];
    }

    /**
     * Sets isTaxable
     *
     * @param bool|null $isTaxable Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the PAYE liability.
     *
     * @return $this
     */
    public function setIsTaxable(?bool $isTaxable): static
    {
        if (is_null($isTaxable)) {
            throw new InvalidArgumentException('non-nullable isTaxable cannot be null');
        }
        $this->container['isTaxable'] = $isTaxable;

        return $this;
    }

    /**
     * Gets isPensionable
     *
     * @return bool|null
     */
    public function getIsPensionable(): ?bool
    {
        return $this->container['isPensionable'];
    }

    /**
     * Sets isPensionable
     *
     * @param bool|null $isPensionable Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the total pensionable pay.
     *
     * @return $this
     */
    public function setIsPensionable(?bool $isPensionable): static
    {
        if (is_null($isPensionable)) {
            throw new InvalidArgumentException('non-nullable isPensionable cannot be null');
        }
        $this->container['isPensionable'] = $isPensionable;

        return $this;
    }

    /**
     * Gets isAttachable
     *
     * @return bool|null
     */
    public function getIsAttachable(): ?bool
    {
        return $this->container['isAttachable'];
    }

    /**
     * Sets isAttachable
     *
     * @param bool|null $isAttachable Determines whether or not the value of PayLines using this code should be taken into consideration when calculating the attachable pay for AttachmentOrders.
     *
     * @return $this
     */
    public function setIsAttachable(?bool $isAttachable): static
    {
        if (is_null($isAttachable)) {
            throw new InvalidArgumentException('non-nullable isAttachable cannot be null');
        }
        $this->container['isAttachable'] = $isAttachable;

        return $this;
    }

    /**
     * Gets isRealTimeClass1aNiable
     *
     * @return bool|null
     */
    public function getIsRealTimeClass1aNiable(): ?bool
    {
        return $this->container['isRealTimeClass1aNiable'];
    }

    /**
     * Sets isRealTimeClass1aNiable
     *
     * @param bool|null $isRealTimeClass1aNiable Determines whether or not the value of PayLines using this code are subject to real time Class 1A NIC.
     *
     * @return $this
     */
    public function setIsRealTimeClass1aNiable(?bool $isRealTimeClass1aNiable): static
    {
        if (is_null($isRealTimeClass1aNiable)) {
            throw new InvalidArgumentException('non-nullable isRealTimeClass1aNiable cannot be null');
        }
        $this->container['isRealTimeClass1aNiable'] = $isRealTimeClass1aNiable;

        return $this;
    }

    /**
     * Gets isNotContributingToHolidayPay
     *
     * @return bool|null
     */
    public function getIsNotContributingToHolidayPay(): ?bool
    {
        return $this->container['isNotContributingToHolidayPay'];
    }

    /**
     * Sets isNotContributingToHolidayPay
     *
     * @param bool|null $isNotContributingToHolidayPay If true then any payments made using this code will not contribute towards holiday pay calculations.
     *
     * @return $this
     */
    public function setIsNotContributingToHolidayPay(?bool $isNotContributingToHolidayPay): static
    {
        if (is_null($isNotContributingToHolidayPay)) {
            throw new InvalidArgumentException('non-nullable isNotContributingToHolidayPay cannot be null');
        }
        $this->container['isNotContributingToHolidayPay'] = $isNotContributingToHolidayPay;

        return $this;
    }

    /**
     * Gets isQualifyingEarningsForAe
     *
     * @return bool|null
     */
    public function getIsQualifyingEarningsForAe(): ?bool
    {
        return $this->container['isQualifyingEarningsForAe'];
    }

    /**
     * Sets isQualifyingEarningsForAe
     *
     * @param bool|null $isQualifyingEarningsForAe If true then any payments made using this code will be used as the basis for calculating QualifyingEarnings for AutoEnrolment assessments.  If it is set to null then when it's next retrieved it'll have the same value as PensionablePay
     *
     * @return $this
     */
    public function setIsQualifyingEarningsForAe(?bool $isQualifyingEarningsForAe): static
    {
        if (is_null($isQualifyingEarningsForAe)) {
            array_push($this->openAPINullablesSetToNull, 'isQualifyingEarningsForAe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isQualifyingEarningsForAe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isQualifyingEarningsForAe'] = $isQualifyingEarningsForAe;

        return $this;
    }

    /**
     * Gets isNotTierable
     *
     * @return bool|null
     */
    public function getIsNotTierable(): ?bool
    {
        return $this->container['isNotTierable'];
    }

    /**
     * Sets isNotTierable
     *
     * @param bool|null $isNotTierable If true then any payments made using this code will not be included when calculating the tier an employee should be on for a Tiered Pension.
     *
     * @return $this
     */
    public function setIsNotTierable(?bool $isNotTierable): static
    {
        if (is_null($isNotTierable)) {
            throw new InvalidArgumentException('non-nullable isNotTierable cannot be null');
        }
        $this->container['isNotTierable'] = $isNotTierable;

        return $this;
    }

    /**
     * Gets isTcpTcls
     *
     * @return bool|null
     */
    public function getIsTcpTcls(): ?bool
    {
        return $this->container['isTcpTcls'];
    }

    /**
     * Sets isTcpTcls
     *
     * @param bool|null $isTcpTcls If true then any payments made using this code will be reported as  a Trivial Commutation Payment (A - TCLS)
     *
     * @return $this
     */
    public function setIsTcpTcls(?bool $isTcpTcls): static
    {
        if (is_null($isTcpTcls)) {
            throw new InvalidArgumentException('non-nullable isTcpTcls cannot be null');
        }
        $this->container['isTcpTcls'] = $isTcpTcls;

        return $this;
    }

    /**
     * Gets isTcpPp
     *
     * @return bool|null
     */
    public function getIsTcpPp(): ?bool
    {
        return $this->container['isTcpPp'];
    }

    /**
     * Sets isTcpPp
     *
     * @param bool|null $isTcpPp If true then any payments made using this code will be reported as  a Trivial Commutation Payment (B - Personal Pension)
     *
     * @return $this
     */
    public function setIsTcpPp(?bool $isTcpPp): static
    {
        if (is_null($isTcpPp)) {
            throw new InvalidArgumentException('non-nullable isTcpPp cannot be null');
        }
        $this->container['isTcpPp'] = $isTcpPp;

        return $this;
    }

    /**
     * Gets isTcpOp
     *
     * @return bool|null
     */
    public function getIsTcpOp(): ?bool
    {
        return $this->container['isTcpOp'];
    }

    /**
     * Sets isTcpOp
     *
     * @param bool|null $isTcpOp If true then any payments made using this code will be reported as  a Trivial Commutation Payment (C - Occupational Pension)
     *
     * @return $this
     */
    public function setIsTcpOp(?bool $isTcpOp): static
    {
        if (is_null($isTcpOp)) {
            throw new InvalidArgumentException('non-nullable isTcpOp cannot be null');
        }
        $this->container['isTcpOp'] = $isTcpOp;

        return $this;
    }

    /**
     * Gets flexibleDrawdown
     *
     * @return \SynergiTech\Staffology\Model\FlexibleDrawdown|null
     */
    public function getFlexibleDrawdown(): ?\SynergiTech\Staffology\Model\FlexibleDrawdown
    {
        return $this->container['flexibleDrawdown'];
    }

    /**
     * Sets flexibleDrawdown
     *
     * @param \SynergiTech\Staffology\Model\FlexibleDrawdown|null $flexibleDrawdown flexibleDrawdown
     *
     * @return $this
     */
    public function setFlexibleDrawdown(?\SynergiTech\Staffology\Model\FlexibleDrawdown $flexibleDrawdown): static
    {
        if (is_null($flexibleDrawdown)) {
            throw new InvalidArgumentException('non-nullable flexibleDrawdown cannot be null');
        }
        $this->container['flexibleDrawdown'] = $flexibleDrawdown;

        return $this;
    }

    /**
     * Gets isAutoAdjust
     *
     * @return bool|null
     */
    public function getIsAutoAdjust(): ?bool
    {
        return $this->container['isAutoAdjust'];
    }

    /**
     * Sets isAutoAdjust
     *
     * @param bool|null $isAutoAdjust Can be used to inform a User to what default value to set for PayLine.autoAdjustForLeave for new lines created.
     *
     * @return $this
     */
    public function setIsAutoAdjust(?bool $isAutoAdjust): static
    {
        if (is_null($isAutoAdjust)) {
            throw new InvalidArgumentException('non-nullable isAutoAdjust cannot be null');
        }
        $this->container['isAutoAdjust'] = $isAutoAdjust;

        return $this;
    }

    /**
     * Gets calculationType
     *
     * @return \SynergiTech\Staffology\Model\PayCodeCalculationType|null
     */
    public function getCalculationType(): ?\SynergiTech\Staffology\Model\PayCodeCalculationType
    {
        return $this->container['calculationType'];
    }

    /**
     * Sets calculationType
     *
     * @param \SynergiTech\Staffology\Model\PayCodeCalculationType|null $calculationType calculationType
     *
     * @return $this
     */
    public function setCalculationType(?\SynergiTech\Staffology\Model\PayCodeCalculationType $calculationType): static
    {
        if (is_null($calculationType)) {
            throw new InvalidArgumentException('non-nullable calculationType cannot be null');
        }
        $this->container['calculationType'] = $calculationType;

        return $this;
    }

    /**
     * Gets multiplierType
     *
     * @return \SynergiTech\Staffology\Model\PayCodeMultiplierType|null
     */
    public function getMultiplierType(): ?\SynergiTech\Staffology\Model\PayCodeMultiplierType
    {
        return $this->container['multiplierType'];
    }

    /**
     * Sets multiplierType
     *
     * @param \SynergiTech\Staffology\Model\PayCodeMultiplierType|null $multiplierType multiplierType
     *
     * @return $this
     */
    public function setMultiplierType(?\SynergiTech\Staffology\Model\PayCodeMultiplierType $multiplierType): static
    {
        if (is_null($multiplierType)) {
            throw new InvalidArgumentException('non-nullable multiplierType cannot be null');
        }
        $this->container['multiplierType'] = $multiplierType;

        return $this;
    }

    /**
     * Gets dailyRateMultiplier
     *
     * @return float|null
     */
    public function getDailyRateMultiplier(): ?float
    {
        return $this->container['dailyRateMultiplier'];
    }

    /**
     * Sets dailyRateMultiplier
     *
     * @param float|null $dailyRateMultiplier If the MultiplierType is MultipleOfDailyRate then this sets the multiple to be used, ie 1.5
     *
     * @return $this
     */
    public function setDailyRateMultiplier(?float $dailyRateMultiplier): static
    {
        if (is_null($dailyRateMultiplier)) {
            throw new InvalidArgumentException('non-nullable dailyRateMultiplier cannot be null');
        }
        $this->container['dailyRateMultiplier'] = $dailyRateMultiplier;

        return $this;
    }

    /**
     * Gets hourlyRateMultiplier
     *
     * @return float|null
     */
    public function getHourlyRateMultiplier(): ?float
    {
        return $this->container['hourlyRateMultiplier'];
    }

    /**
     * Sets hourlyRateMultiplier
     *
     * @param float|null $hourlyRateMultiplier If the MultiplierType is MultipleOfHourlyRate then this sets the multiple to be used, ie 1.5
     *
     * @return $this
     */
    public function setHourlyRateMultiplier(?float $hourlyRateMultiplier): static
    {
        if (is_null($hourlyRateMultiplier)) {
            throw new InvalidArgumentException('non-nullable hourlyRateMultiplier cannot be null');
        }
        $this->container['hourlyRateMultiplier'] = $hourlyRateMultiplier;

        return $this;
    }

    /**
     * Gets isSystemCode
     *
     * @return bool|null
     */
    public function getIsSystemCode(): ?bool
    {
        return $this->container['isSystemCode'];
    }

    /**
     * Sets isSystemCode
     *
     * @param bool|null $isSystemCode [readonly] System Codes cannot be deleted or edited
     *
     * @return $this
     */
    public function setIsSystemCode(?bool $isSystemCode): static
    {
        if (is_null($isSystemCode)) {
            throw new InvalidArgumentException('non-nullable isSystemCode cannot be null');
        }
        $this->container['isSystemCode'] = $isSystemCode;

        return $this;
    }

    /**
     * Gets isControlCode
     *
     * @return bool|null
     */
    public function getIsControlCode(): ?bool
    {
        return $this->container['isControlCode'];
    }

    /**
     * Sets isControlCode
     *
     * @param bool|null $isControlCode [readonly] Control Codes cannot be deleted or edited nor can PayLines be assigned to them.
     *
     * @return $this
     */
    public function setIsControlCode(?bool $isControlCode): static
    {
        if (is_null($isControlCode)) {
            throw new InvalidArgumentException('non-nullable isControlCode cannot be null');
        }
        $this->container['isControlCode'] = $isControlCode;

        return $this;
    }

    /**
     * Gets isNotional
     *
     * @return bool|null
     */
    public function getIsNotional(): ?bool
    {
        return $this->container['isNotional'];
    }

    /**
     * Sets isNotional
     *
     * @param bool|null $isNotional Determines whether the transaction involves non-monetary benefits for payroll processing, potentially subject to tax and National Insurance.
     *
     * @return $this
     */
    public function setIsNotional(?bool $isNotional): static
    {
        if (is_null($isNotional)) {
            throw new InvalidArgumentException('non-nullable isNotional cannot be null');
        }
        $this->container['isNotional'] = $isNotional;

        return $this;
    }

    /**
     * Gets isStandAloneLumpSum
     *
     * @return bool|null
     */
    public function getIsStandAloneLumpSum(): ?bool
    {
        return $this->container['isStandAloneLumpSum'];
    }

    /**
     * Sets isStandAloneLumpSum
     *
     * @param bool|null $isStandAloneLumpSum If true then any payments made using this code will be reported as  a Lump Sums (A - SALS)
     *
     * @return $this
     */
    public function setIsStandAloneLumpSum(?bool $isStandAloneLumpSum): static
    {
        if (is_null($isStandAloneLumpSum)) {
            throw new InvalidArgumentException('non-nullable isStandAloneLumpSum cannot be null');
        }
        $this->container['isStandAloneLumpSum'] = $isStandAloneLumpSum;

        return $this;
    }

    /**
     * Gets isPensionExcessLumpSum
     *
     * @return bool|null
     */
    public function getIsPensionExcessLumpSum(): ?bool
    {
        return $this->container['isPensionExcessLumpSum'];
    }

    /**
     * Sets isPensionExcessLumpSum
     *
     * @param bool|null $isPensionExcessLumpSum If true then any payments made using this code will be reported as  a Lump Sums (B - PCELS)
     *
     * @return $this
     */
    public function setIsPensionExcessLumpSum(?bool $isPensionExcessLumpSum): static
    {
        if (is_null($isPensionExcessLumpSum)) {
            throw new InvalidArgumentException('non-nullable isPensionExcessLumpSum cannot be null');
        }
        $this->container['isPensionExcessLumpSum'] = $isPensionExcessLumpSum;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return string|null
     */
    public function getPayee(): ?string
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param string|null $payee The Id of the Payee, if any, that deductions are to be paid to.
     *
     * @return $this
     */
    public function setPayee(?string $payee): static
    {
        if (is_null($payee)) {
            array_push($this->openAPINullablesSetToNull, 'payee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payee'] = $payee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


