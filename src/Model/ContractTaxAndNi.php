<?php
/**
 * ContractTaxAndNi
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractTaxAndNi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractTaxAndNi implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.TaxAndNi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'niTable' => 'string',
        'secondaryClass1NotPayable' => 'bool',
        'postgradLoan' => 'bool',
        'postgraduateLoanStartDate' => '\DateTime',
        'postgraduateLoanEndDate' => '\DateTime',
        'studentLoan' => '\SynergiTech\Staffology\Model\StudentLoan',
        'studentLoanStartDate' => '\DateTime',
        'studentLoanEndDate' => '\DateTime',
        'taxCode' => 'string',
        'week1Month1' => 'bool',
        'foreignTaxCredit' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'niTable' => null,
        'secondaryClass1NotPayable' => null,
        'postgradLoan' => null,
        'postgraduateLoanStartDate' => 'date',
        'postgraduateLoanEndDate' => 'date',
        'studentLoan' => null,
        'studentLoanStartDate' => 'date',
        'studentLoanEndDate' => 'date',
        'taxCode' => null,
        'week1Month1' => null,
        'foreignTaxCredit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'niTable' => false,
        'secondaryClass1NotPayable' => false,
        'postgradLoan' => false,
        'postgraduateLoanStartDate' => true,
        'postgraduateLoanEndDate' => true,
        'studentLoan' => false,
        'studentLoanStartDate' => true,
        'studentLoanEndDate' => true,
        'taxCode' => true,
        'week1Month1' => false,
        'foreignTaxCredit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'niTable' => 'niTable',
        'secondaryClass1NotPayable' => 'secondaryClass1NotPayable',
        'postgradLoan' => 'postgradLoan',
        'postgraduateLoanStartDate' => 'postgraduateLoanStartDate',
        'postgraduateLoanEndDate' => 'postgraduateLoanEndDate',
        'studentLoan' => 'studentLoan',
        'studentLoanStartDate' => 'studentLoanStartDate',
        'studentLoanEndDate' => 'studentLoanEndDate',
        'taxCode' => 'taxCode',
        'week1Month1' => 'week1Month1',
        'foreignTaxCredit' => 'foreignTaxCredit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'niTable' => 'setNiTable',
        'secondaryClass1NotPayable' => 'setSecondaryClass1NotPayable',
        'postgradLoan' => 'setPostgradLoan',
        'postgraduateLoanStartDate' => 'setPostgraduateLoanStartDate',
        'postgraduateLoanEndDate' => 'setPostgraduateLoanEndDate',
        'studentLoan' => 'setStudentLoan',
        'studentLoanStartDate' => 'setStudentLoanStartDate',
        'studentLoanEndDate' => 'setStudentLoanEndDate',
        'taxCode' => 'setTaxCode',
        'week1Month1' => 'setWeek1Month1',
        'foreignTaxCredit' => 'setForeignTaxCredit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'niTable' => 'getNiTable',
        'secondaryClass1NotPayable' => 'getSecondaryClass1NotPayable',
        'postgradLoan' => 'getPostgradLoan',
        'postgraduateLoanStartDate' => 'getPostgraduateLoanStartDate',
        'postgraduateLoanEndDate' => 'getPostgraduateLoanEndDate',
        'studentLoan' => 'getStudentLoan',
        'studentLoanStartDate' => 'getStudentLoanStartDate',
        'studentLoanEndDate' => 'getStudentLoanEndDate',
        'taxCode' => 'getTaxCode',
        'week1Month1' => 'getWeek1Month1',
        'foreignTaxCredit' => 'getForeignTaxCredit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('niTable', $data ?? [], null);
        $this->setIfExists('secondaryClass1NotPayable', $data ?? [], null);
        $this->setIfExists('postgradLoan', $data ?? [], null);
        $this->setIfExists('postgraduateLoanStartDate', $data ?? [], null);
        $this->setIfExists('postgraduateLoanEndDate', $data ?? [], null);
        $this->setIfExists('studentLoan', $data ?? [], null);
        $this->setIfExists('studentLoanStartDate', $data ?? [], null);
        $this->setIfExists('studentLoanEndDate', $data ?? [], null);
        $this->setIfExists('taxCode', $data ?? [], null);
        $this->setIfExists('week1Month1', $data ?? [], null);
        $this->setIfExists('foreignTaxCredit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['niTable'] === null) {
            $invalidProperties[] = "'niTable' can't be null";
        }
        if (!is_null($this->container['taxCode']) && (mb_strlen($this->container['taxCode']) > 12)) {
            $invalidProperties[] = "invalid value for 'taxCode', the character length must be smaller than or equal to 12.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets niTable
     *
     * @return string
     */
    public function getNiTable(): string
    {
        return $this->container['niTable'];
    }

    /**
     * Sets niTable
     *
     * @param string $niTable The appropriate NI letter for this Employee
     *
     * @return $this
     */
    public function setNiTable(string $niTable): static
    {
        if (is_null($niTable)) {
            throw new InvalidArgumentException('non-nullable niTable cannot be null');
        }
        $this->container['niTable'] = $niTable;

        return $this;
    }

    /**
     * Gets secondaryClass1NotPayable
     *
     * @return bool|null
     */
    public function getSecondaryClass1NotPayable(): ?bool
    {
        return $this->container['secondaryClass1NotPayable'];
    }

    /**
     * Sets secondaryClass1NotPayable
     *
     * @param bool|null $secondaryClass1NotPayable If set to true then no Employer NI will be paid for this Employee
     *
     * @return $this
     */
    public function setSecondaryClass1NotPayable(?bool $secondaryClass1NotPayable): static
    {
        if (is_null($secondaryClass1NotPayable)) {
            throw new InvalidArgumentException('non-nullable secondaryClass1NotPayable cannot be null');
        }
        $this->container['secondaryClass1NotPayable'] = $secondaryClass1NotPayable;

        return $this;
    }

    /**
     * Gets postgradLoan
     *
     * @return bool|null
     */
    public function getPostgradLoan(): ?bool
    {
        return $this->container['postgradLoan'];
    }

    /**
     * Sets postgradLoan
     *
     * @param bool|null $postgradLoan Set to true if the Employee needs to make Post Graduate Loan repayments
     *
     * @return $this
     */
    public function setPostgradLoan(?bool $postgradLoan): static
    {
        if (is_null($postgradLoan)) {
            throw new InvalidArgumentException('non-nullable postgradLoan cannot be null');
        }
        $this->container['postgradLoan'] = $postgradLoan;

        return $this;
    }

    /**
     * Gets postgraduateLoanStartDate
     *
     * @return \DateTime|null
     */
    public function getPostgraduateLoanStartDate(): ?\DateTime
    {
        return $this->container['postgraduateLoanStartDate'];
    }

    /**
     * Sets postgraduateLoanStartDate
     *
     * @param \DateTime|null $postgraduateLoanStartDate postgraduateLoanStartDate
     *
     * @return $this
     */
    public function setPostgraduateLoanStartDate(?\DateTime $postgraduateLoanStartDate): static
    {
        if (is_null($postgraduateLoanStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'postgraduateLoanStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postgraduateLoanStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postgraduateLoanStartDate'] = $postgraduateLoanStartDate;

        return $this;
    }

    /**
     * Gets postgraduateLoanEndDate
     *
     * @return \DateTime|null
     */
    public function getPostgraduateLoanEndDate(): ?\DateTime
    {
        return $this->container['postgraduateLoanEndDate'];
    }

    /**
     * Sets postgraduateLoanEndDate
     *
     * @param \DateTime|null $postgraduateLoanEndDate postgraduateLoanEndDate
     *
     * @return $this
     */
    public function setPostgraduateLoanEndDate(?\DateTime $postgraduateLoanEndDate): static
    {
        if (is_null($postgraduateLoanEndDate)) {
            array_push($this->openAPINullablesSetToNull, 'postgraduateLoanEndDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postgraduateLoanEndDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postgraduateLoanEndDate'] = $postgraduateLoanEndDate;

        return $this;
    }

    /**
     * Gets studentLoan
     *
     * @return \SynergiTech\Staffology\Model\StudentLoan|null
     */
    public function getStudentLoan(): ?\SynergiTech\Staffology\Model\StudentLoan
    {
        return $this->container['studentLoan'];
    }

    /**
     * Sets studentLoan
     *
     * @param \SynergiTech\Staffology\Model\StudentLoan|null $studentLoan studentLoan
     *
     * @return $this
     */
    public function setStudentLoan(?\SynergiTech\Staffology\Model\StudentLoan $studentLoan): static
    {
        if (is_null($studentLoan)) {
            throw new InvalidArgumentException('non-nullable studentLoan cannot be null');
        }
        $this->container['studentLoan'] = $studentLoan;

        return $this;
    }

    /**
     * Gets studentLoanStartDate
     *
     * @return \DateTime|null
     */
    public function getStudentLoanStartDate(): ?\DateTime
    {
        return $this->container['studentLoanStartDate'];
    }

    /**
     * Sets studentLoanStartDate
     *
     * @param \DateTime|null $studentLoanStartDate studentLoanStartDate
     *
     * @return $this
     */
    public function setStudentLoanStartDate(?\DateTime $studentLoanStartDate): static
    {
        if (is_null($studentLoanStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'studentLoanStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studentLoanStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studentLoanStartDate'] = $studentLoanStartDate;

        return $this;
    }

    /**
     * Gets studentLoanEndDate
     *
     * @return \DateTime|null
     */
    public function getStudentLoanEndDate(): ?\DateTime
    {
        return $this->container['studentLoanEndDate'];
    }

    /**
     * Sets studentLoanEndDate
     *
     * @param \DateTime|null $studentLoanEndDate studentLoanEndDate
     *
     * @return $this
     */
    public function setStudentLoanEndDate(?\DateTime $studentLoanEndDate): static
    {
        if (is_null($studentLoanEndDate)) {
            array_push($this->openAPINullablesSetToNull, 'studentLoanEndDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studentLoanEndDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studentLoanEndDate'] = $studentLoanEndDate;

        return $this;
    }

    /**
     * Gets taxCode
     *
     * @return string|null
     */
    public function getTaxCode(): ?string
    {
        return $this->container['taxCode'];
    }

    /**
     * Sets taxCode
     *
     * @param string|null $taxCode The Tax Code for this Employee
     *
     * @return $this
     */
    public function setTaxCode(?string $taxCode): static
    {
        if (is_null($taxCode)) {
            array_push($this->openAPINullablesSetToNull, 'taxCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($taxCode) && (mb_strlen($taxCode) > 12)) {
            throw new InvalidArgumentException('invalid length for $taxCode when calling ContractTaxAndNi., must be smaller than or equal to 12.');
        }

        $this->container['taxCode'] = $taxCode;

        return $this;
    }

    /**
     * Gets week1Month1
     *
     * @return bool|null
     */
    public function getWeek1Month1(): ?bool
    {
        return $this->container['week1Month1'];
    }

    /**
     * Sets week1Month1
     *
     * @param bool|null $week1Month1 Determines whether PAYE should be calculated on a Week1/Month1 basis instead of on a cumulative basis.  This is automatically set to false for any existing Employees when you start a new Tax Year.
     *
     * @return $this
     */
    public function setWeek1Month1(?bool $week1Month1): static
    {
        if (is_null($week1Month1)) {
            throw new InvalidArgumentException('non-nullable week1Month1 cannot be null');
        }
        $this->container['week1Month1'] = $week1Month1;

        return $this;
    }

    /**
     * Gets foreignTaxCredit
     *
     * @return bool|null
     */
    public function getForeignTaxCredit(): ?bool
    {
        return $this->container['foreignTaxCredit'];
    }

    /**
     * Sets foreignTaxCredit
     *
     * @param bool|null $foreignTaxCredit If set to True you are enabling the possibility to enter an amount on payslip so you can reduce UK Tax liabilities.
     *
     * @return $this
     */
    public function setForeignTaxCredit(?bool $foreignTaxCredit): static
    {
        if (is_null($foreignTaxCredit)) {
            throw new InvalidArgumentException('non-nullable foreignTaxCredit cannot be null');
        }
        $this->container['foreignTaxCredit'] = $foreignTaxCredit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


