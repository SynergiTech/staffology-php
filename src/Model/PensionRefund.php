<?php
/**
 * PensionRefund
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PensionRefund Class Doc Comment
 *
 * @description Used to represent a Pension Refund
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PensionRefund implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PensionRefund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employeeRefund' => 'float',
        'employerRefund' => 'float',
        'pensionSchemeUniqueId' => 'string',
        'pensionUniqueId' => 'string',
        'payInCurrentPayRun' => 'bool',
        'payRun' => '\SynergiTech\Staffology\Model\Item',
        'pensionableEarning' => 'float',
        'pensionablePay' => 'float',
        'additionalVoluntaryContribution' => 'float',
        'assumedPensionablePay' => 'float',
        'isPreviousTaxYearRefund' => 'bool',
        'tierName' => 'string',
        'tierRate' => 'float',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employeeRefund' => 'double',
        'employerRefund' => 'double',
        'pensionSchemeUniqueId' => 'uuid',
        'pensionUniqueId' => 'uuid',
        'payInCurrentPayRun' => null,
        'payRun' => null,
        'pensionableEarning' => 'double',
        'pensionablePay' => 'double',
        'additionalVoluntaryContribution' => 'double',
        'assumedPensionablePay' => 'double',
        'isPreviousTaxYearRefund' => null,
        'tierName' => null,
        'tierRate' => 'double',
        'employee' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employeeRefund' => false,
        'employerRefund' => false,
        'pensionSchemeUniqueId' => false,
        'pensionUniqueId' => false,
        'payInCurrentPayRun' => false,
        'payRun' => false,
        'pensionableEarning' => false,
        'pensionablePay' => false,
        'additionalVoluntaryContribution' => false,
        'assumedPensionablePay' => false,
        'isPreviousTaxYearRefund' => false,
        'tierName' => true,
        'tierRate' => true,
        'employee' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employeeRefund' => 'employeeRefund',
        'employerRefund' => 'employerRefund',
        'pensionSchemeUniqueId' => 'pensionSchemeUniqueId',
        'pensionUniqueId' => 'pensionUniqueId',
        'payInCurrentPayRun' => 'payInCurrentPayRun',
        'payRun' => 'payRun',
        'pensionableEarning' => 'pensionableEarning',
        'pensionablePay' => 'pensionablePay',
        'additionalVoluntaryContribution' => 'additionalVoluntaryContribution',
        'assumedPensionablePay' => 'assumedPensionablePay',
        'isPreviousTaxYearRefund' => 'isPreviousTaxYearRefund',
        'tierName' => 'tierName',
        'tierRate' => 'tierRate',
        'employee' => 'employee',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employeeRefund' => 'setEmployeeRefund',
        'employerRefund' => 'setEmployerRefund',
        'pensionSchemeUniqueId' => 'setPensionSchemeUniqueId',
        'pensionUniqueId' => 'setPensionUniqueId',
        'payInCurrentPayRun' => 'setPayInCurrentPayRun',
        'payRun' => 'setPayRun',
        'pensionableEarning' => 'setPensionableEarning',
        'pensionablePay' => 'setPensionablePay',
        'additionalVoluntaryContribution' => 'setAdditionalVoluntaryContribution',
        'assumedPensionablePay' => 'setAssumedPensionablePay',
        'isPreviousTaxYearRefund' => 'setIsPreviousTaxYearRefund',
        'tierName' => 'setTierName',
        'tierRate' => 'setTierRate',
        'employee' => 'setEmployee',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employeeRefund' => 'getEmployeeRefund',
        'employerRefund' => 'getEmployerRefund',
        'pensionSchemeUniqueId' => 'getPensionSchemeUniqueId',
        'pensionUniqueId' => 'getPensionUniqueId',
        'payInCurrentPayRun' => 'getPayInCurrentPayRun',
        'payRun' => 'getPayRun',
        'pensionableEarning' => 'getPensionableEarning',
        'pensionablePay' => 'getPensionablePay',
        'additionalVoluntaryContribution' => 'getAdditionalVoluntaryContribution',
        'assumedPensionablePay' => 'getAssumedPensionablePay',
        'isPreviousTaxYearRefund' => 'getIsPreviousTaxYearRefund',
        'tierName' => 'getTierName',
        'tierRate' => 'getTierRate',
        'employee' => 'getEmployee',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employeeRefund', $data ?? [], null);
        $this->setIfExists('employerRefund', $data ?? [], null);
        $this->setIfExists('pensionSchemeUniqueId', $data ?? [], null);
        $this->setIfExists('pensionUniqueId', $data ?? [], null);
        $this->setIfExists('payInCurrentPayRun', $data ?? [], null);
        $this->setIfExists('payRun', $data ?? [], null);
        $this->setIfExists('pensionableEarning', $data ?? [], null);
        $this->setIfExists('pensionablePay', $data ?? [], null);
        $this->setIfExists('additionalVoluntaryContribution', $data ?? [], null);
        $this->setIfExists('assumedPensionablePay', $data ?? [], null);
        $this->setIfExists('isPreviousTaxYearRefund', $data ?? [], null);
        $this->setIfExists('tierName', $data ?? [], null);
        $this->setIfExists('tierRate', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['employeeRefund'] === null) {
            $invalidProperties[] = "'employeeRefund' can't be null";
        }
        if ($this->container['employerRefund'] === null) {
            $invalidProperties[] = "'employerRefund' can't be null";
        }
        if ($this->container['pensionableEarning'] === null) {
            $invalidProperties[] = "'pensionableEarning' can't be null";
        }
        if ($this->container['pensionablePay'] === null) {
            $invalidProperties[] = "'pensionablePay' can't be null";
        }
        if ($this->container['additionalVoluntaryContribution'] === null) {
            $invalidProperties[] = "'additionalVoluntaryContribution' can't be null";
        }
        if ($this->container['assumedPensionablePay'] === null) {
            $invalidProperties[] = "'assumedPensionablePay' can't be null";
        }
        if ($this->container['isPreviousTaxYearRefund'] === null) {
            $invalidProperties[] = "'isPreviousTaxYearRefund' can't be null";
        }
        if (!is_null($this->container['tierName']) && (mb_strlen($this->container['tierName']) < 1)) {
            $invalidProperties[] = "invalid value for 'tierName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tierRate']) && ($this->container['tierRate'] > 0.999)) {
            $invalidProperties[] = "invalid value for 'tierRate', must be smaller than or equal to 0.999.";
        }

        if (!is_null($this->container['tierRate']) && ($this->container['tierRate'] < 0.001)) {
            $invalidProperties[] = "invalid value for 'tierRate', must be bigger than or equal to 0.001.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeeRefund
     *
     * @return float
     */
    public function getEmployeeRefund(): float
    {
        return $this->container['employeeRefund'];
    }

    /**
     * Sets employeeRefund
     *
     * @param float $employeeRefund employeeRefund
     *
     * @return $this
     */
    public function setEmployeeRefund(float $employeeRefund): static
    {
        if (is_null($employeeRefund)) {
            throw new InvalidArgumentException('non-nullable employeeRefund cannot be null');
        }
        $this->container['employeeRefund'] = $employeeRefund;

        return $this;
    }

    /**
     * Gets employerRefund
     *
     * @return float
     */
    public function getEmployerRefund(): float
    {
        return $this->container['employerRefund'];
    }

    /**
     * Sets employerRefund
     *
     * @param float $employerRefund employerRefund
     *
     * @return $this
     */
    public function setEmployerRefund(float $employerRefund): static
    {
        if (is_null($employerRefund)) {
            throw new InvalidArgumentException('non-nullable employerRefund cannot be null');
        }
        $this->container['employerRefund'] = $employerRefund;

        return $this;
    }

    /**
     * Gets pensionSchemeUniqueId
     *
     * @return string|null
     */
    public function getPensionSchemeUniqueId(): ?string
    {
        return $this->container['pensionSchemeUniqueId'];
    }

    /**
     * Sets pensionSchemeUniqueId
     *
     * @param string|null $pensionSchemeUniqueId pensionSchemeUniqueId
     *
     * @return $this
     */
    public function setPensionSchemeUniqueId(?string $pensionSchemeUniqueId): static
    {
        if (is_null($pensionSchemeUniqueId)) {
            throw new InvalidArgumentException('non-nullable pensionSchemeUniqueId cannot be null');
        }
        $this->container['pensionSchemeUniqueId'] = $pensionSchemeUniqueId;

        return $this;
    }

    /**
     * Gets pensionUniqueId
     *
     * @return string|null
     */
    public function getPensionUniqueId(): ?string
    {
        return $this->container['pensionUniqueId'];
    }

    /**
     * Sets pensionUniqueId
     *
     * @param string|null $pensionUniqueId pensionUniqueId
     *
     * @return $this
     */
    public function setPensionUniqueId(?string $pensionUniqueId): static
    {
        if (is_null($pensionUniqueId)) {
            throw new InvalidArgumentException('non-nullable pensionUniqueId cannot be null');
        }
        $this->container['pensionUniqueId'] = $pensionUniqueId;

        return $this;
    }

    /**
     * Gets payInCurrentPayRun
     *
     * @return bool|null
     */
    public function getPayInCurrentPayRun(): ?bool
    {
        return $this->container['payInCurrentPayRun'];
    }

    /**
     * Sets payInCurrentPayRun
     *
     * @param bool|null $payInCurrentPayRun payInCurrentPayRun
     *
     * @return $this
     */
    public function setPayInCurrentPayRun(?bool $payInCurrentPayRun): static
    {
        if (is_null($payInCurrentPayRun)) {
            throw new InvalidArgumentException('non-nullable payInCurrentPayRun cannot be null');
        }
        $this->container['payInCurrentPayRun'] = $payInCurrentPayRun;

        return $this;
    }

    /**
     * Gets payRun
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getPayRun(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['payRun'];
    }

    /**
     * Sets payRun
     *
     * @param \SynergiTech\Staffology\Model\Item|null $payRun payRun
     *
     * @return $this
     */
    public function setPayRun(?\SynergiTech\Staffology\Model\Item $payRun): static
    {
        if (is_null($payRun)) {
            throw new InvalidArgumentException('non-nullable payRun cannot be null');
        }
        $this->container['payRun'] = $payRun;

        return $this;
    }

    /**
     * Gets pensionableEarning
     *
     * @return float
     */
    public function getPensionableEarning(): float
    {
        return $this->container['pensionableEarning'];
    }

    /**
     * Sets pensionableEarning
     *
     * @param float $pensionableEarning pensionableEarning
     *
     * @return $this
     */
    public function setPensionableEarning(float $pensionableEarning): static
    {
        if (is_null($pensionableEarning)) {
            throw new InvalidArgumentException('non-nullable pensionableEarning cannot be null');
        }
        $this->container['pensionableEarning'] = $pensionableEarning;

        return $this;
    }

    /**
     * Gets pensionablePay
     *
     * @return float
     */
    public function getPensionablePay(): float
    {
        return $this->container['pensionablePay'];
    }

    /**
     * Sets pensionablePay
     *
     * @param float $pensionablePay pensionablePay
     *
     * @return $this
     */
    public function setPensionablePay(float $pensionablePay): static
    {
        if (is_null($pensionablePay)) {
            throw new InvalidArgumentException('non-nullable pensionablePay cannot be null');
        }
        $this->container['pensionablePay'] = $pensionablePay;

        return $this;
    }

    /**
     * Gets additionalVoluntaryContribution
     *
     * @return float
     */
    public function getAdditionalVoluntaryContribution(): float
    {
        return $this->container['additionalVoluntaryContribution'];
    }

    /**
     * Sets additionalVoluntaryContribution
     *
     * @param float $additionalVoluntaryContribution additionalVoluntaryContribution
     *
     * @return $this
     */
    public function setAdditionalVoluntaryContribution(float $additionalVoluntaryContribution): static
    {
        if (is_null($additionalVoluntaryContribution)) {
            throw new InvalidArgumentException('non-nullable additionalVoluntaryContribution cannot be null');
        }
        $this->container['additionalVoluntaryContribution'] = $additionalVoluntaryContribution;

        return $this;
    }

    /**
     * Gets assumedPensionablePay
     *
     * @return float
     */
    public function getAssumedPensionablePay(): float
    {
        return $this->container['assumedPensionablePay'];
    }

    /**
     * Sets assumedPensionablePay
     *
     * @param float $assumedPensionablePay assumedPensionablePay
     *
     * @return $this
     */
    public function setAssumedPensionablePay(float $assumedPensionablePay): static
    {
        if (is_null($assumedPensionablePay)) {
            throw new InvalidArgumentException('non-nullable assumedPensionablePay cannot be null');
        }
        $this->container['assumedPensionablePay'] = $assumedPensionablePay;

        return $this;
    }

    /**
     * Gets isPreviousTaxYearRefund
     *
     * @return bool
     */
    public function getIsPreviousTaxYearRefund(): bool
    {
        return $this->container['isPreviousTaxYearRefund'];
    }

    /**
     * Sets isPreviousTaxYearRefund
     *
     * @param bool $isPreviousTaxYearRefund isPreviousTaxYearRefund
     *
     * @return $this
     */
    public function setIsPreviousTaxYearRefund(bool $isPreviousTaxYearRefund): static
    {
        if (is_null($isPreviousTaxYearRefund)) {
            throw new InvalidArgumentException('non-nullable isPreviousTaxYearRefund cannot be null');
        }
        $this->container['isPreviousTaxYearRefund'] = $isPreviousTaxYearRefund;

        return $this;
    }

    /**
     * Gets tierName
     *
     * @return string|null
     */
    public function getTierName(): ?string
    {
        return $this->container['tierName'];
    }

    /**
     * Sets tierName
     *
     * @param string|null $tierName tierName
     *
     * @return $this
     */
    public function setTierName(?string $tierName): static
    {
        if (is_null($tierName)) {
            array_push($this->openAPINullablesSetToNull, 'tierName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tierName) && (mb_strlen($tierName) < 1)) {
            throw new InvalidArgumentException('invalid length for $tierName when calling PensionRefund., must be bigger than or equal to 1.');
        }

        $this->container['tierName'] = $tierName;

        return $this;
    }

    /**
     * Gets tierRate
     *
     * @return float|null
     */
    public function getTierRate(): ?float
    {
        return $this->container['tierRate'];
    }

    /**
     * Sets tierRate
     *
     * @param float|null $tierRate tierRate
     *
     * @return $this
     */
    public function setTierRate(?float $tierRate): static
    {
        if (is_null($tierRate)) {
            array_push($this->openAPINullablesSetToNull, 'tierRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tierRate) && ($tierRate > 0.999)) {
            throw new InvalidArgumentException('invalid value for $tierRate when calling PensionRefund., must be smaller than or equal to 0.999.');
        }
        if (!is_null($tierRate) && ($tierRate < 0.001)) {
            throw new InvalidArgumentException('invalid value for $tierRate when calling PensionRefund., must be bigger than or equal to 0.001.');
        }

        $this->container['tierRate'] = $tierRate;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


