<?php
/**
 * PaySchedule
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PaySchedule Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PaySchedule implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PaySchedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'ordinal' => 'int',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'payPeriod' => '\SynergiTech\Staffology\Model\PayPeriods',
        'firstPeriodEndDate' => '\DateTime',
        'firstPaymentDate' => '\DateTime',
        'paymentDateType' => '\SynergiTech\Staffology\Model\PaymentDateType',
        'periodEndDateType' => '\SynergiTech\Staffology\Model\PaymentDateType',
        'periodLengths' => 'int[]',
        'highGrossPay' => 'float',
        'highNetPay' => 'float',
        'periodEventsConfig' => '\SynergiTech\Staffology\Model\PaySchedulePeriodEventsConfig',
        'hasOpenPayRunPeriod' => 'bool',
        'lastPeriodEndDate' => '\DateTime',
        'lastPeriodNumber' => 'int',
        'employeeCount' => 'int',
        'isRequired' => 'bool',
        'isConfigured' => 'bool',
        'isYearCompleted' => 'bool',
        'yearEndTasks' => 'string[]',
        'payRuns' => '\SynergiTech\Staffology\Model\Item[]',
        'currentPayRun' => '\SynergiTech\Staffology\Model\Item',
        'nextPayRun' => '\SynergiTech\Staffology\Model\PayRun',
        'publicCreatedDate' => '\DateTime',
        'employerName' => 'string',
        'employerUniqueId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'ordinal' => 'int32',
        'taxYear' => null,
        'payPeriod' => null,
        'firstPeriodEndDate' => 'date',
        'firstPaymentDate' => 'date',
        'paymentDateType' => null,
        'periodEndDateType' => null,
        'periodLengths' => 'int32',
        'highGrossPay' => 'double',
        'highNetPay' => 'double',
        'periodEventsConfig' => null,
        'hasOpenPayRunPeriod' => null,
        'lastPeriodEndDate' => 'date',
        'lastPeriodNumber' => 'int32',
        'employeeCount' => 'int32',
        'isRequired' => null,
        'isConfigured' => null,
        'isYearCompleted' => null,
        'yearEndTasks' => null,
        'payRuns' => null,
        'currentPayRun' => null,
        'nextPayRun' => null,
        'publicCreatedDate' => 'date',
        'employerName' => null,
        'employerUniqueId' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => true,
        'ordinal' => false,
        'taxYear' => false,
        'payPeriod' => false,
        'firstPeriodEndDate' => false,
        'firstPaymentDate' => false,
        'paymentDateType' => false,
        'periodEndDateType' => false,
        'periodLengths' => true,
        'highGrossPay' => false,
        'highNetPay' => false,
        'periodEventsConfig' => true,
        'hasOpenPayRunPeriod' => false,
        'lastPeriodEndDate' => true,
        'lastPeriodNumber' => true,
        'employeeCount' => false,
        'isRequired' => false,
        'isConfigured' => false,
        'isYearCompleted' => false,
        'yearEndTasks' => true,
        'payRuns' => true,
        'currentPayRun' => false,
        'nextPayRun' => false,
        'publicCreatedDate' => false,
        'employerName' => true,
        'employerUniqueId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'ordinal' => 'ordinal',
        'taxYear' => 'taxYear',
        'payPeriod' => 'payPeriod',
        'firstPeriodEndDate' => 'firstPeriodEndDate',
        'firstPaymentDate' => 'firstPaymentDate',
        'paymentDateType' => 'paymentDateType',
        'periodEndDateType' => 'periodEndDateType',
        'periodLengths' => 'periodLengths',
        'highGrossPay' => 'highGrossPay',
        'highNetPay' => 'highNetPay',
        'periodEventsConfig' => 'periodEventsConfig',
        'hasOpenPayRunPeriod' => 'hasOpenPayRunPeriod',
        'lastPeriodEndDate' => 'lastPeriodEndDate',
        'lastPeriodNumber' => 'lastPeriodNumber',
        'employeeCount' => 'employeeCount',
        'isRequired' => 'isRequired',
        'isConfigured' => 'isConfigured',
        'isYearCompleted' => 'isYearCompleted',
        'yearEndTasks' => 'yearEndTasks',
        'payRuns' => 'payRuns',
        'currentPayRun' => 'currentPayRun',
        'nextPayRun' => 'nextPayRun',
        'publicCreatedDate' => 'publicCreatedDate',
        'employerName' => 'employerName',
        'employerUniqueId' => 'employerUniqueId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'ordinal' => 'setOrdinal',
        'taxYear' => 'setTaxYear',
        'payPeriod' => 'setPayPeriod',
        'firstPeriodEndDate' => 'setFirstPeriodEndDate',
        'firstPaymentDate' => 'setFirstPaymentDate',
        'paymentDateType' => 'setPaymentDateType',
        'periodEndDateType' => 'setPeriodEndDateType',
        'periodLengths' => 'setPeriodLengths',
        'highGrossPay' => 'setHighGrossPay',
        'highNetPay' => 'setHighNetPay',
        'periodEventsConfig' => 'setPeriodEventsConfig',
        'hasOpenPayRunPeriod' => 'setHasOpenPayRunPeriod',
        'lastPeriodEndDate' => 'setLastPeriodEndDate',
        'lastPeriodNumber' => 'setLastPeriodNumber',
        'employeeCount' => 'setEmployeeCount',
        'isRequired' => 'setIsRequired',
        'isConfigured' => 'setIsConfigured',
        'isYearCompleted' => 'setIsYearCompleted',
        'yearEndTasks' => 'setYearEndTasks',
        'payRuns' => 'setPayRuns',
        'currentPayRun' => 'setCurrentPayRun',
        'nextPayRun' => 'setNextPayRun',
        'publicCreatedDate' => 'setPublicCreatedDate',
        'employerName' => 'setEmployerName',
        'employerUniqueId' => 'setEmployerUniqueId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'ordinal' => 'getOrdinal',
        'taxYear' => 'getTaxYear',
        'payPeriod' => 'getPayPeriod',
        'firstPeriodEndDate' => 'getFirstPeriodEndDate',
        'firstPaymentDate' => 'getFirstPaymentDate',
        'paymentDateType' => 'getPaymentDateType',
        'periodEndDateType' => 'getPeriodEndDateType',
        'periodLengths' => 'getPeriodLengths',
        'highGrossPay' => 'getHighGrossPay',
        'highNetPay' => 'getHighNetPay',
        'periodEventsConfig' => 'getPeriodEventsConfig',
        'hasOpenPayRunPeriod' => 'getHasOpenPayRunPeriod',
        'lastPeriodEndDate' => 'getLastPeriodEndDate',
        'lastPeriodNumber' => 'getLastPeriodNumber',
        'employeeCount' => 'getEmployeeCount',
        'isRequired' => 'getIsRequired',
        'isConfigured' => 'getIsConfigured',
        'isYearCompleted' => 'getIsYearCompleted',
        'yearEndTasks' => 'getYearEndTasks',
        'payRuns' => 'getPayRuns',
        'currentPayRun' => 'getCurrentPayRun',
        'nextPayRun' => 'getNextPayRun',
        'publicCreatedDate' => 'getPublicCreatedDate',
        'employerName' => 'getEmployerName',
        'employerUniqueId' => 'getEmployerUniqueId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('ordinal', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('payPeriod', $data ?? [], null);
        $this->setIfExists('firstPeriodEndDate', $data ?? [], null);
        $this->setIfExists('firstPaymentDate', $data ?? [], null);
        $this->setIfExists('paymentDateType', $data ?? [], null);
        $this->setIfExists('periodEndDateType', $data ?? [], null);
        $this->setIfExists('periodLengths', $data ?? [], null);
        $this->setIfExists('highGrossPay', $data ?? [], null);
        $this->setIfExists('highNetPay', $data ?? [], null);
        $this->setIfExists('periodEventsConfig', $data ?? [], null);
        $this->setIfExists('hasOpenPayRunPeriod', $data ?? [], null);
        $this->setIfExists('lastPeriodEndDate', $data ?? [], null);
        $this->setIfExists('lastPeriodNumber', $data ?? [], null);
        $this->setIfExists('employeeCount', $data ?? [], null);
        $this->setIfExists('isRequired', $data ?? [], null);
        $this->setIfExists('isConfigured', $data ?? [], null);
        $this->setIfExists('isYearCompleted', $data ?? [], null);
        $this->setIfExists('yearEndTasks', $data ?? [], null);
        $this->setIfExists('payRuns', $data ?? [], null);
        $this->setIfExists('currentPayRun', $data ?? [], null);
        $this->setIfExists('nextPayRun', $data ?? [], null);
        $this->setIfExists('publicCreatedDate', $data ?? [], null);
        $this->setIfExists('employerName', $data ?? [], null);
        $this->setIfExists('employerUniqueId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A descriptive name for this PaySchedule
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling PaySchedule., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ordinal
     *
     * @return int|null
     */
    public function getOrdinal(): ?int
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param int|null $ordinal [readonly] Indicates whether this is first, second, third (etc) PaySchedule for this PayPeriod.
     *
     * @return $this
     */
    public function setOrdinal(?int $ordinal): static
    {
        if (is_null($ordinal)) {
            throw new InvalidArgumentException('non-nullable ordinal cannot be null');
        }
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets payPeriod
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getPayPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['payPeriod'];
    }

    /**
     * Sets payPeriod
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod
     *
     * @return $this
     */
    public function setPayPeriod(?\SynergiTech\Staffology\Model\PayPeriods $payPeriod): static
    {
        if (is_null($payPeriod)) {
            throw new InvalidArgumentException('non-nullable payPeriod cannot be null');
        }
        $this->container['payPeriod'] = $payPeriod;

        return $this;
    }

    /**
     * Gets firstPeriodEndDate
     *
     * @return \DateTime|null
     */
    public function getFirstPeriodEndDate(): ?\DateTime
    {
        return $this->container['firstPeriodEndDate'];
    }

    /**
     * Sets firstPeriodEndDate
     *
     * @param \DateTime|null $firstPeriodEndDate The last day of the first pay period
     *
     * @return $this
     */
    public function setFirstPeriodEndDate(?\DateTime $firstPeriodEndDate): static
    {
        if (is_null($firstPeriodEndDate)) {
            throw new InvalidArgumentException('non-nullable firstPeriodEndDate cannot be null');
        }
        $this->container['firstPeriodEndDate'] = $firstPeriodEndDate;

        return $this;
    }

    /**
     * Gets firstPaymentDate
     *
     * @return \DateTime|null
     */
    public function getFirstPaymentDate(): ?\DateTime
    {
        return $this->container['firstPaymentDate'];
    }

    /**
     * Sets firstPaymentDate
     *
     * @param \DateTime|null $firstPaymentDate The first payment date
     *
     * @return $this
     */
    public function setFirstPaymentDate(?\DateTime $firstPaymentDate): static
    {
        if (is_null($firstPaymentDate)) {
            throw new InvalidArgumentException('non-nullable firstPaymentDate cannot be null');
        }
        $this->container['firstPaymentDate'] = $firstPaymentDate;

        return $this;
    }

    /**
     * Gets paymentDateType
     *
     * @return \SynergiTech\Staffology\Model\PaymentDateType|null
     */
    public function getPaymentDateType(): ?\SynergiTech\Staffology\Model\PaymentDateType
    {
        return $this->container['paymentDateType'];
    }

    /**
     * Sets paymentDateType
     *
     * @param \SynergiTech\Staffology\Model\PaymentDateType|null $paymentDateType paymentDateType
     *
     * @return $this
     */
    public function setPaymentDateType(?\SynergiTech\Staffology\Model\PaymentDateType $paymentDateType): static
    {
        if (is_null($paymentDateType)) {
            throw new InvalidArgumentException('non-nullable paymentDateType cannot be null');
        }
        $this->container['paymentDateType'] = $paymentDateType;

        return $this;
    }

    /**
     * Gets periodEndDateType
     *
     * @return \SynergiTech\Staffology\Model\PaymentDateType|null
     */
    public function getPeriodEndDateType(): ?\SynergiTech\Staffology\Model\PaymentDateType
    {
        return $this->container['periodEndDateType'];
    }

    /**
     * Sets periodEndDateType
     *
     * @param \SynergiTech\Staffology\Model\PaymentDateType|null $periodEndDateType periodEndDateType
     *
     * @return $this
     */
    public function setPeriodEndDateType(?\SynergiTech\Staffology\Model\PaymentDateType $periodEndDateType): static
    {
        if (is_null($periodEndDateType)) {
            throw new InvalidArgumentException('non-nullable periodEndDateType cannot be null');
        }
        $this->container['periodEndDateType'] = $periodEndDateType;

        return $this;
    }

    /**
     * Gets periodLengths
     *
     * @return int[]|null
     */
    public function getPeriodLengths(): ?array
    {
        return $this->container['periodLengths'];
    }

    /**
     * Sets periodLengths
     *
     * @param int[]|null $periodLengths Only applicable for PayPeriod of Custom. Defines the length of each period
     *
     * @return $this
     */
    public function setPeriodLengths(?array $periodLengths): static
    {
        if (is_null($periodLengths)) {
            array_push($this->openAPINullablesSetToNull, 'periodLengths');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodLengths', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periodLengths'] = $periodLengths;

        return $this;
    }

    /**
     * Gets highGrossPay
     *
     * @return float|null
     */
    public function getHighGrossPay(): ?float
    {
        return $this->container['highGrossPay'];
    }

    /**
     * Sets highGrossPay
     *
     * @param float|null $highGrossPay A gross pay amount considered high for this PaySchedule
     *
     * @return $this
     */
    public function setHighGrossPay(?float $highGrossPay): static
    {
        if (is_null($highGrossPay)) {
            throw new InvalidArgumentException('non-nullable highGrossPay cannot be null');
        }
        $this->container['highGrossPay'] = $highGrossPay;

        return $this;
    }

    /**
     * Gets highNetPay
     *
     * @return float|null
     */
    public function getHighNetPay(): ?float
    {
        return $this->container['highNetPay'];
    }

    /**
     * Sets highNetPay
     *
     * @param float|null $highNetPay A net pay amount considered high for this PaySchedule
     *
     * @return $this
     */
    public function setHighNetPay(?float $highNetPay): static
    {
        if (is_null($highNetPay)) {
            throw new InvalidArgumentException('non-nullable highNetPay cannot be null');
        }
        $this->container['highNetPay'] = $highNetPay;

        return $this;
    }

    /**
     * Gets periodEventsConfig
     *
     * @return \SynergiTech\Staffology\Model\PaySchedulePeriodEventsConfig|null
     */
    public function getPeriodEventsConfig(): ?\SynergiTech\Staffology\Model\PaySchedulePeriodEventsConfig
    {
        return $this->container['periodEventsConfig'];
    }

    /**
     * Sets periodEventsConfig
     *
     * @param \SynergiTech\Staffology\Model\PaySchedulePeriodEventsConfig|null $periodEventsConfig periodEventsConfig
     *
     * @return $this
     */
    public function setPeriodEventsConfig(?\SynergiTech\Staffology\Model\PaySchedulePeriodEventsConfig $periodEventsConfig): static
    {
        if (is_null($periodEventsConfig)) {
            array_push($this->openAPINullablesSetToNull, 'periodEventsConfig');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodEventsConfig', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periodEventsConfig'] = $periodEventsConfig;

        return $this;
    }

    /**
     * Gets hasOpenPayRunPeriod
     *
     * @return bool|null
     */
    public function getHasOpenPayRunPeriod(): ?bool
    {
        return $this->container['hasOpenPayRunPeriod'];
    }

    /**
     * Sets hasOpenPayRunPeriod
     *
     * @param bool|null $hasOpenPayRunPeriod [readonly] Will be true if the employer currently has an open PayRun for this PayPeriod
     *
     * @return $this
     */
    public function setHasOpenPayRunPeriod(?bool $hasOpenPayRunPeriod): static
    {
        if (is_null($hasOpenPayRunPeriod)) {
            throw new InvalidArgumentException('non-nullable hasOpenPayRunPeriod cannot be null');
        }
        $this->container['hasOpenPayRunPeriod'] = $hasOpenPayRunPeriod;

        return $this;
    }

    /**
     * Gets lastPeriodEndDate
     *
     * @return \DateTime|null
     */
    public function getLastPeriodEndDate(): ?\DateTime
    {
        return $this->container['lastPeriodEndDate'];
    }

    /**
     * Sets lastPeriodEndDate
     *
     * @param \DateTime|null $lastPeriodEndDate [readonly] The end date of the most recent PayRun on this schedule
     *
     * @return $this
     */
    public function setLastPeriodEndDate(?\DateTime $lastPeriodEndDate): static
    {
        if (is_null($lastPeriodEndDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastPeriodEndDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastPeriodEndDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastPeriodEndDate'] = $lastPeriodEndDate;

        return $this;
    }

    /**
     * Gets lastPeriodNumber
     *
     * @return int|null
     */
    public function getLastPeriodNumber(): ?int
    {
        return $this->container['lastPeriodNumber'];
    }

    /**
     * Sets lastPeriodNumber
     *
     * @param int|null $lastPeriodNumber [readonly] The period number of the most recent PayRun on this schedule
     *
     * @return $this
     */
    public function setLastPeriodNumber(?int $lastPeriodNumber): static
    {
        if (is_null($lastPeriodNumber)) {
            array_push($this->openAPINullablesSetToNull, 'lastPeriodNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastPeriodNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastPeriodNumber'] = $lastPeriodNumber;

        return $this;
    }

    /**
     * Gets employeeCount
     *
     * @return int|null
     */
    public function getEmployeeCount(): ?int
    {
        return $this->container['employeeCount'];
    }

    /**
     * Sets employeeCount
     *
     * @param int|null $employeeCount [readonly] The number of employees paid with this PaySchedule
     *
     * @return $this
     */
    public function setEmployeeCount(?int $employeeCount): static
    {
        if (is_null($employeeCount)) {
            throw new InvalidArgumentException('non-nullable employeeCount cannot be null');
        }
        $this->container['employeeCount'] = $employeeCount;

        return $this;
    }

    /**
     * Gets isRequired
     *
     * @return bool|null
     */
    public function getIsRequired(): ?bool
    {
        return $this->container['isRequired'];
    }

    /**
     * Sets isRequired
     *
     * @param bool|null $isRequired [readonly] Whether or not this PaySchedule is required for the employer, ie: they have employees to be paid on this PaySchedule
     *
     * @return $this
     */
    public function setIsRequired(?bool $isRequired): static
    {
        if (is_null($isRequired)) {
            throw new InvalidArgumentException('non-nullable isRequired cannot be null');
        }
        $this->container['isRequired'] = $isRequired;

        return $this;
    }

    /**
     * Gets isConfigured
     *
     * @return bool|null
     */
    public function getIsConfigured(): ?bool
    {
        return $this->container['isConfigured'];
    }

    /**
     * Sets isConfigured
     *
     * @param bool|null $isConfigured [readonly] Whether or not this PaySchedule has been configured and is ready for use
     *
     * @return $this
     */
    public function setIsConfigured(?bool $isConfigured): static
    {
        if (is_null($isConfigured)) {
            throw new InvalidArgumentException('non-nullable isConfigured cannot be null');
        }
        $this->container['isConfigured'] = $isConfigured;

        return $this;
    }

    /**
     * Gets isYearCompleted
     *
     * @return bool|null
     */
    public function getIsYearCompleted(): ?bool
    {
        return $this->container['isYearCompleted'];
    }

    /**
     * Sets isYearCompleted
     *
     * @param bool|null $isYearCompleted [readonly] Returns true if all PayRuns for this PaySchedule in the TaxYear have been completed
     *
     * @return $this
     */
    public function setIsYearCompleted(?bool $isYearCompleted): static
    {
        if (is_null($isYearCompleted)) {
            throw new InvalidArgumentException('non-nullable isYearCompleted cannot be null');
        }
        $this->container['isYearCompleted'] = $isYearCompleted;

        return $this;
    }

    /**
     * Gets yearEndTasks
     *
     * @return string[]|null
     */
    public function getYearEndTasks(): ?array
    {
        return $this->container['yearEndTasks'];
    }

    /**
     * Sets yearEndTasks
     *
     * @param string[]|null $yearEndTasks [readonly] A list of actions that need to be completed for this PaySchedule before this TaxYear can be finalised
     *
     * @return $this
     */
    public function setYearEndTasks(?array $yearEndTasks): static
    {
        if (is_null($yearEndTasks)) {
            array_push($this->openAPINullablesSetToNull, 'yearEndTasks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearEndTasks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearEndTasks'] = $yearEndTasks;

        return $this;
    }

    /**
     * Gets payRuns
     *
     * @return \SynergiTech\Staffology\Model\Item[]|null
     */
    public function getPayRuns(): ?array
    {
        return $this->container['payRuns'];
    }

    /**
     * Sets payRuns
     *
     * @param \SynergiTech\Staffology\Model\Item[]|null $payRuns [readonly] Details of PayRuns for this PaySchedule
     *
     * @return $this
     */
    public function setPayRuns(?array $payRuns): static
    {
        if (is_null($payRuns)) {
            array_push($this->openAPINullablesSetToNull, 'payRuns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payRuns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payRuns'] = $payRuns;

        return $this;
    }

    /**
     * Gets currentPayRun
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getCurrentPayRun(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['currentPayRun'];
    }

    /**
     * Sets currentPayRun
     *
     * @param \SynergiTech\Staffology\Model\Item|null $currentPayRun currentPayRun
     *
     * @return $this
     */
    public function setCurrentPayRun(?\SynergiTech\Staffology\Model\Item $currentPayRun): static
    {
        if (is_null($currentPayRun)) {
            throw new InvalidArgumentException('non-nullable currentPayRun cannot be null');
        }
        $this->container['currentPayRun'] = $currentPayRun;

        return $this;
    }

    /**
     * Gets nextPayRun
     *
     * @return \SynergiTech\Staffology\Model\PayRun|null
     */
    public function getNextPayRun(): ?\SynergiTech\Staffology\Model\PayRun
    {
        return $this->container['nextPayRun'];
    }

    /**
     * Sets nextPayRun
     *
     * @param \SynergiTech\Staffology\Model\PayRun|null $nextPayRun nextPayRun
     *
     * @return $this
     */
    public function setNextPayRun(?\SynergiTech\Staffology\Model\PayRun $nextPayRun): static
    {
        if (is_null($nextPayRun)) {
            throw new InvalidArgumentException('non-nullable nextPayRun cannot be null');
        }
        $this->container['nextPayRun'] = $nextPayRun;

        return $this;
    }

    /**
     * Gets publicCreatedDate
     *
     * @return \DateTime|null
     */
    public function getPublicCreatedDate(): ?\DateTime
    {
        return $this->container['publicCreatedDate'];
    }

    /**
     * Sets publicCreatedDate
     *
     * @param \DateTime|null $publicCreatedDate publicCreatedDate
     *
     * @return $this
     */
    public function setPublicCreatedDate(?\DateTime $publicCreatedDate): static
    {
        if (is_null($publicCreatedDate)) {
            throw new InvalidArgumentException('non-nullable publicCreatedDate cannot be null');
        }
        $this->container['publicCreatedDate'] = $publicCreatedDate;

        return $this;
    }

    /**
     * Gets employerName
     *
     * @return string|null
     */
    public function getEmployerName(): ?string
    {
        return $this->container['employerName'];
    }

    /**
     * Sets employerName
     *
     * @param string|null $employerName Employer name for this PaySchedule
     *
     * @return $this
     */
    public function setEmployerName(?string $employerName): static
    {
        if (is_null($employerName)) {
            array_push($this->openAPINullablesSetToNull, 'employerName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerName'] = $employerName;

        return $this;
    }

    /**
     * Gets employerUniqueId
     *
     * @return string|null
     */
    public function getEmployerUniqueId(): ?string
    {
        return $this->container['employerUniqueId'];
    }

    /**
     * Sets employerUniqueId
     *
     * @param string|null $employerUniqueId Employer Unique Id for this PaySchedule
     *
     * @return $this
     */
    public function setEmployerUniqueId(?string $employerUniqueId): static
    {
        if (is_null($employerUniqueId)) {
            throw new InvalidArgumentException('non-nullable employerUniqueId cannot be null');
        }
        $this->container['employerUniqueId'] = $employerUniqueId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


