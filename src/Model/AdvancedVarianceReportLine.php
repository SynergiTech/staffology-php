<?php
/**
 * AdvancedVarianceReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * AdvancedVarianceReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AdvancedVarianceReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AdvancedVarianceReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employeeCode' => 'string',
        'employeeName' => 'string',
        'department' => 'string',
        'costCentre' => 'string',
        'primaryGrossTotal' => 'float',
        'secondaryGrossTotal' => 'float',
        'primaryGrossTaxable' => 'float',
        'secondaryGrossTaxable' => 'float',
        'primaryNetPay' => 'float',
        'secondaryNetPay' => 'float',
        'primaryTax' => 'float',
        'secondaryTax' => 'float',
        'primaryEmployeeNi' => 'float',
        'secondaryEmployeeNi' => 'float',
        'primaryEmployerNi' => 'float',
        'secondaryEmployerNi' => 'float',
        'primaryStudentOrPgLoan' => 'float',
        'secondaryStudentOrPgLoan' => 'float',
        'payCodeVarianceLines' => '\SynergiTech\Staffology\Model\PayCodeVarianceLine[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employeeCode' => null,
        'employeeName' => null,
        'department' => null,
        'costCentre' => null,
        'primaryGrossTotal' => 'double',
        'secondaryGrossTotal' => 'double',
        'primaryGrossTaxable' => 'double',
        'secondaryGrossTaxable' => 'double',
        'primaryNetPay' => 'double',
        'secondaryNetPay' => 'double',
        'primaryTax' => 'double',
        'secondaryTax' => 'double',
        'primaryEmployeeNi' => 'double',
        'secondaryEmployeeNi' => 'double',
        'primaryEmployerNi' => 'double',
        'secondaryEmployerNi' => 'double',
        'primaryStudentOrPgLoan' => 'double',
        'secondaryStudentOrPgLoan' => 'double',
        'payCodeVarianceLines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employeeCode' => true,
        'employeeName' => true,
        'department' => true,
        'costCentre' => true,
        'primaryGrossTotal' => true,
        'secondaryGrossTotal' => true,
        'primaryGrossTaxable' => true,
        'secondaryGrossTaxable' => true,
        'primaryNetPay' => true,
        'secondaryNetPay' => true,
        'primaryTax' => true,
        'secondaryTax' => true,
        'primaryEmployeeNi' => true,
        'secondaryEmployeeNi' => true,
        'primaryEmployerNi' => true,
        'secondaryEmployerNi' => true,
        'primaryStudentOrPgLoan' => true,
        'secondaryStudentOrPgLoan' => true,
        'payCodeVarianceLines' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employeeCode' => 'employeeCode',
        'employeeName' => 'employeeName',
        'department' => 'department',
        'costCentre' => 'costCentre',
        'primaryGrossTotal' => 'primaryGrossTotal',
        'secondaryGrossTotal' => 'secondaryGrossTotal',
        'primaryGrossTaxable' => 'primaryGrossTaxable',
        'secondaryGrossTaxable' => 'secondaryGrossTaxable',
        'primaryNetPay' => 'primaryNetPay',
        'secondaryNetPay' => 'secondaryNetPay',
        'primaryTax' => 'primaryTax',
        'secondaryTax' => 'secondaryTax',
        'primaryEmployeeNi' => 'primaryEmployeeNi',
        'secondaryEmployeeNi' => 'secondaryEmployeeNi',
        'primaryEmployerNi' => 'primaryEmployerNi',
        'secondaryEmployerNi' => 'secondaryEmployerNi',
        'primaryStudentOrPgLoan' => 'primaryStudentOrPgLoan',
        'secondaryStudentOrPgLoan' => 'secondaryStudentOrPgLoan',
        'payCodeVarianceLines' => 'payCodeVarianceLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employeeCode' => 'setEmployeeCode',
        'employeeName' => 'setEmployeeName',
        'department' => 'setDepartment',
        'costCentre' => 'setCostCentre',
        'primaryGrossTotal' => 'setPrimaryGrossTotal',
        'secondaryGrossTotal' => 'setSecondaryGrossTotal',
        'primaryGrossTaxable' => 'setPrimaryGrossTaxable',
        'secondaryGrossTaxable' => 'setSecondaryGrossTaxable',
        'primaryNetPay' => 'setPrimaryNetPay',
        'secondaryNetPay' => 'setSecondaryNetPay',
        'primaryTax' => 'setPrimaryTax',
        'secondaryTax' => 'setSecondaryTax',
        'primaryEmployeeNi' => 'setPrimaryEmployeeNi',
        'secondaryEmployeeNi' => 'setSecondaryEmployeeNi',
        'primaryEmployerNi' => 'setPrimaryEmployerNi',
        'secondaryEmployerNi' => 'setSecondaryEmployerNi',
        'primaryStudentOrPgLoan' => 'setPrimaryStudentOrPgLoan',
        'secondaryStudentOrPgLoan' => 'setSecondaryStudentOrPgLoan',
        'payCodeVarianceLines' => 'setPayCodeVarianceLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employeeCode' => 'getEmployeeCode',
        'employeeName' => 'getEmployeeName',
        'department' => 'getDepartment',
        'costCentre' => 'getCostCentre',
        'primaryGrossTotal' => 'getPrimaryGrossTotal',
        'secondaryGrossTotal' => 'getSecondaryGrossTotal',
        'primaryGrossTaxable' => 'getPrimaryGrossTaxable',
        'secondaryGrossTaxable' => 'getSecondaryGrossTaxable',
        'primaryNetPay' => 'getPrimaryNetPay',
        'secondaryNetPay' => 'getSecondaryNetPay',
        'primaryTax' => 'getPrimaryTax',
        'secondaryTax' => 'getSecondaryTax',
        'primaryEmployeeNi' => 'getPrimaryEmployeeNi',
        'secondaryEmployeeNi' => 'getSecondaryEmployeeNi',
        'primaryEmployerNi' => 'getPrimaryEmployerNi',
        'secondaryEmployerNi' => 'getSecondaryEmployerNi',
        'primaryStudentOrPgLoan' => 'getPrimaryStudentOrPgLoan',
        'secondaryStudentOrPgLoan' => 'getSecondaryStudentOrPgLoan',
        'payCodeVarianceLines' => 'getPayCodeVarianceLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employeeCode', $data ?? [], null);
        $this->setIfExists('employeeName', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('costCentre', $data ?? [], null);
        $this->setIfExists('primaryGrossTotal', $data ?? [], null);
        $this->setIfExists('secondaryGrossTotal', $data ?? [], null);
        $this->setIfExists('primaryGrossTaxable', $data ?? [], null);
        $this->setIfExists('secondaryGrossTaxable', $data ?? [], null);
        $this->setIfExists('primaryNetPay', $data ?? [], null);
        $this->setIfExists('secondaryNetPay', $data ?? [], null);
        $this->setIfExists('primaryTax', $data ?? [], null);
        $this->setIfExists('secondaryTax', $data ?? [], null);
        $this->setIfExists('primaryEmployeeNi', $data ?? [], null);
        $this->setIfExists('secondaryEmployeeNi', $data ?? [], null);
        $this->setIfExists('primaryEmployerNi', $data ?? [], null);
        $this->setIfExists('secondaryEmployerNi', $data ?? [], null);
        $this->setIfExists('primaryStudentOrPgLoan', $data ?? [], null);
        $this->setIfExists('secondaryStudentOrPgLoan', $data ?? [], null);
        $this->setIfExists('payCodeVarianceLines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeeCode
     *
     * @return string|null
     */
    public function getEmployeeCode(): ?string
    {
        return $this->container['employeeCode'];
    }

    /**
     * Sets employeeCode
     *
     * @param string|null $employeeCode employeeCode
     *
     * @return $this
     */
    public function setEmployeeCode(?string $employeeCode): static
    {
        if (is_null($employeeCode)) {
            array_push($this->openAPINullablesSetToNull, 'employeeCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeCode'] = $employeeCode;

        return $this;
    }

    /**
     * Gets employeeName
     *
     * @return string|null
     */
    public function getEmployeeName(): ?string
    {
        return $this->container['employeeName'];
    }

    /**
     * Sets employeeName
     *
     * @param string|null $employeeName employeeName
     *
     * @return $this
     */
    public function setEmployeeName(?string $employeeName): static
    {
        if (is_null($employeeName)) {
            array_push($this->openAPINullablesSetToNull, 'employeeName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeName'] = $employeeName;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment(): ?string
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return $this
     */
    public function setDepartment(?string $department): static
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets costCentre
     *
     * @return string|null
     */
    public function getCostCentre(): ?string
    {
        return $this->container['costCentre'];
    }

    /**
     * Sets costCentre
     *
     * @param string|null $costCentre costCentre
     *
     * @return $this
     */
    public function setCostCentre(?string $costCentre): static
    {
        if (is_null($costCentre)) {
            array_push($this->openAPINullablesSetToNull, 'costCentre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentre'] = $costCentre;

        return $this;
    }

    /**
     * Gets primaryGrossTotal
     *
     * @return float|null
     */
    public function getPrimaryGrossTotal(): ?float
    {
        return $this->container['primaryGrossTotal'];
    }

    /**
     * Sets primaryGrossTotal
     *
     * @param float|null $primaryGrossTotal primaryGrossTotal
     *
     * @return $this
     */
    public function setPrimaryGrossTotal(?float $primaryGrossTotal): static
    {
        if (is_null($primaryGrossTotal)) {
            array_push($this->openAPINullablesSetToNull, 'primaryGrossTotal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryGrossTotal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryGrossTotal'] = $primaryGrossTotal;

        return $this;
    }

    /**
     * Gets secondaryGrossTotal
     *
     * @return float|null
     */
    public function getSecondaryGrossTotal(): ?float
    {
        return $this->container['secondaryGrossTotal'];
    }

    /**
     * Sets secondaryGrossTotal
     *
     * @param float|null $secondaryGrossTotal secondaryGrossTotal
     *
     * @return $this
     */
    public function setSecondaryGrossTotal(?float $secondaryGrossTotal): static
    {
        if (is_null($secondaryGrossTotal)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryGrossTotal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryGrossTotal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryGrossTotal'] = $secondaryGrossTotal;

        return $this;
    }

    /**
     * Gets primaryGrossTaxable
     *
     * @return float|null
     */
    public function getPrimaryGrossTaxable(): ?float
    {
        return $this->container['primaryGrossTaxable'];
    }

    /**
     * Sets primaryGrossTaxable
     *
     * @param float|null $primaryGrossTaxable primaryGrossTaxable
     *
     * @return $this
     */
    public function setPrimaryGrossTaxable(?float $primaryGrossTaxable): static
    {
        if (is_null($primaryGrossTaxable)) {
            array_push($this->openAPINullablesSetToNull, 'primaryGrossTaxable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryGrossTaxable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryGrossTaxable'] = $primaryGrossTaxable;

        return $this;
    }

    /**
     * Gets secondaryGrossTaxable
     *
     * @return float|null
     */
    public function getSecondaryGrossTaxable(): ?float
    {
        return $this->container['secondaryGrossTaxable'];
    }

    /**
     * Sets secondaryGrossTaxable
     *
     * @param float|null $secondaryGrossTaxable secondaryGrossTaxable
     *
     * @return $this
     */
    public function setSecondaryGrossTaxable(?float $secondaryGrossTaxable): static
    {
        if (is_null($secondaryGrossTaxable)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryGrossTaxable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryGrossTaxable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryGrossTaxable'] = $secondaryGrossTaxable;

        return $this;
    }

    /**
     * Gets primaryNetPay
     *
     * @return float|null
     */
    public function getPrimaryNetPay(): ?float
    {
        return $this->container['primaryNetPay'];
    }

    /**
     * Sets primaryNetPay
     *
     * @param float|null $primaryNetPay primaryNetPay
     *
     * @return $this
     */
    public function setPrimaryNetPay(?float $primaryNetPay): static
    {
        if (is_null($primaryNetPay)) {
            array_push($this->openAPINullablesSetToNull, 'primaryNetPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryNetPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryNetPay'] = $primaryNetPay;

        return $this;
    }

    /**
     * Gets secondaryNetPay
     *
     * @return float|null
     */
    public function getSecondaryNetPay(): ?float
    {
        return $this->container['secondaryNetPay'];
    }

    /**
     * Sets secondaryNetPay
     *
     * @param float|null $secondaryNetPay secondaryNetPay
     *
     * @return $this
     */
    public function setSecondaryNetPay(?float $secondaryNetPay): static
    {
        if (is_null($secondaryNetPay)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryNetPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryNetPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryNetPay'] = $secondaryNetPay;

        return $this;
    }

    /**
     * Gets primaryTax
     *
     * @return float|null
     */
    public function getPrimaryTax(): ?float
    {
        return $this->container['primaryTax'];
    }

    /**
     * Sets primaryTax
     *
     * @param float|null $primaryTax primaryTax
     *
     * @return $this
     */
    public function setPrimaryTax(?float $primaryTax): static
    {
        if (is_null($primaryTax)) {
            array_push($this->openAPINullablesSetToNull, 'primaryTax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryTax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryTax'] = $primaryTax;

        return $this;
    }

    /**
     * Gets secondaryTax
     *
     * @return float|null
     */
    public function getSecondaryTax(): ?float
    {
        return $this->container['secondaryTax'];
    }

    /**
     * Sets secondaryTax
     *
     * @param float|null $secondaryTax secondaryTax
     *
     * @return $this
     */
    public function setSecondaryTax(?float $secondaryTax): static
    {
        if (is_null($secondaryTax)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryTax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryTax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryTax'] = $secondaryTax;

        return $this;
    }

    /**
     * Gets primaryEmployeeNi
     *
     * @return float|null
     */
    public function getPrimaryEmployeeNi(): ?float
    {
        return $this->container['primaryEmployeeNi'];
    }

    /**
     * Sets primaryEmployeeNi
     *
     * @param float|null $primaryEmployeeNi primaryEmployeeNi
     *
     * @return $this
     */
    public function setPrimaryEmployeeNi(?float $primaryEmployeeNi): static
    {
        if (is_null($primaryEmployeeNi)) {
            array_push($this->openAPINullablesSetToNull, 'primaryEmployeeNi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryEmployeeNi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryEmployeeNi'] = $primaryEmployeeNi;

        return $this;
    }

    /**
     * Gets secondaryEmployeeNi
     *
     * @return float|null
     */
    public function getSecondaryEmployeeNi(): ?float
    {
        return $this->container['secondaryEmployeeNi'];
    }

    /**
     * Sets secondaryEmployeeNi
     *
     * @param float|null $secondaryEmployeeNi secondaryEmployeeNi
     *
     * @return $this
     */
    public function setSecondaryEmployeeNi(?float $secondaryEmployeeNi): static
    {
        if (is_null($secondaryEmployeeNi)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryEmployeeNi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryEmployeeNi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryEmployeeNi'] = $secondaryEmployeeNi;

        return $this;
    }

    /**
     * Gets primaryEmployerNi
     *
     * @return float|null
     */
    public function getPrimaryEmployerNi(): ?float
    {
        return $this->container['primaryEmployerNi'];
    }

    /**
     * Sets primaryEmployerNi
     *
     * @param float|null $primaryEmployerNi primaryEmployerNi
     *
     * @return $this
     */
    public function setPrimaryEmployerNi(?float $primaryEmployerNi): static
    {
        if (is_null($primaryEmployerNi)) {
            array_push($this->openAPINullablesSetToNull, 'primaryEmployerNi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryEmployerNi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryEmployerNi'] = $primaryEmployerNi;

        return $this;
    }

    /**
     * Gets secondaryEmployerNi
     *
     * @return float|null
     */
    public function getSecondaryEmployerNi(): ?float
    {
        return $this->container['secondaryEmployerNi'];
    }

    /**
     * Sets secondaryEmployerNi
     *
     * @param float|null $secondaryEmployerNi secondaryEmployerNi
     *
     * @return $this
     */
    public function setSecondaryEmployerNi(?float $secondaryEmployerNi): static
    {
        if (is_null($secondaryEmployerNi)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryEmployerNi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryEmployerNi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryEmployerNi'] = $secondaryEmployerNi;

        return $this;
    }

    /**
     * Gets primaryStudentOrPgLoan
     *
     * @return float|null
     */
    public function getPrimaryStudentOrPgLoan(): ?float
    {
        return $this->container['primaryStudentOrPgLoan'];
    }

    /**
     * Sets primaryStudentOrPgLoan
     *
     * @param float|null $primaryStudentOrPgLoan primaryStudentOrPgLoan
     *
     * @return $this
     */
    public function setPrimaryStudentOrPgLoan(?float $primaryStudentOrPgLoan): static
    {
        if (is_null($primaryStudentOrPgLoan)) {
            array_push($this->openAPINullablesSetToNull, 'primaryStudentOrPgLoan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryStudentOrPgLoan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryStudentOrPgLoan'] = $primaryStudentOrPgLoan;

        return $this;
    }

    /**
     * Gets secondaryStudentOrPgLoan
     *
     * @return float|null
     */
    public function getSecondaryStudentOrPgLoan(): ?float
    {
        return $this->container['secondaryStudentOrPgLoan'];
    }

    /**
     * Sets secondaryStudentOrPgLoan
     *
     * @param float|null $secondaryStudentOrPgLoan secondaryStudentOrPgLoan
     *
     * @return $this
     */
    public function setSecondaryStudentOrPgLoan(?float $secondaryStudentOrPgLoan): static
    {
        if (is_null($secondaryStudentOrPgLoan)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryStudentOrPgLoan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryStudentOrPgLoan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryStudentOrPgLoan'] = $secondaryStudentOrPgLoan;

        return $this;
    }

    /**
     * Gets payCodeVarianceLines
     *
     * @return \SynergiTech\Staffology\Model\PayCodeVarianceLine[]|null
     */
    public function getPayCodeVarianceLines(): ?array
    {
        return $this->container['payCodeVarianceLines'];
    }

    /**
     * Sets payCodeVarianceLines
     *
     * @param \SynergiTech\Staffology\Model\PayCodeVarianceLine[]|null $payCodeVarianceLines payCodeVarianceLines
     *
     * @return $this
     */
    public function setPayCodeVarianceLines(?array $payCodeVarianceLines): static
    {
        if (is_null($payCodeVarianceLines)) {
            array_push($this->openAPINullablesSetToNull, 'payCodeVarianceLines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodeVarianceLines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodeVarianceLines'] = $payCodeVarianceLines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


