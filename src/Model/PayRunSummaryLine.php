<?php
/**
 * PayRunSummaryLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayRunSummaryLine Class Doc Comment
 *
 * @description An array of this model is used to represent a summary of a PayRun.  This would typically be used for creating accounting entries for the PayRun.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayRunSummaryLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayRunSummaryLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'nominalCode' => 'string',
        'departmentCode' => 'string',
        'nominalName' => 'string',
        'description' => 'string',
        'qty' => 'float',
        'value' => 'float',
        'payCode' => '\SynergiTech\Staffology\Model\PayCode',
        'costCentreCode' => 'string',
        'analysisCategories' => '\SynergiTech\Staffology\Model\AnalysisCategory[]',
        'analysisCategoryCodes' => '\SynergiTech\Staffology\Model\AnalysisCategoryCode[]',
        'employeeUniqueId' => 'string',
        'journalNarrative' => 'string',
        'pensionId' => 'string',
        'employee' => '\SynergiTech\Staffology\Model\Employee',
        'unMappedNominalCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'nominalCode' => null,
        'departmentCode' => null,
        'nominalName' => null,
        'description' => null,
        'qty' => 'double',
        'value' => 'double',
        'payCode' => null,
        'costCentreCode' => null,
        'analysisCategories' => null,
        'analysisCategoryCodes' => null,
        'employeeUniqueId' => 'uuid',
        'journalNarrative' => null,
        'pensionId' => 'uuid',
        'employee' => null,
        'unMappedNominalCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'nominalCode' => true,
        'departmentCode' => true,
        'nominalName' => true,
        'description' => true,
        'qty' => true,
        'value' => false,
        'payCode' => false,
        'costCentreCode' => true,
        'analysisCategories' => true,
        'analysisCategoryCodes' => true,
        'employeeUniqueId' => true,
        'journalNarrative' => true,
        'pensionId' => true,
        'employee' => false,
        'unMappedNominalCode' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'nominalCode' => 'nominalCode',
        'departmentCode' => 'departmentCode',
        'nominalName' => 'nominalName',
        'description' => 'description',
        'qty' => 'qty',
        'value' => 'value',
        'payCode' => 'payCode',
        'costCentreCode' => 'costCentreCode',
        'analysisCategories' => 'analysisCategories',
        'analysisCategoryCodes' => 'analysisCategoryCodes',
        'employeeUniqueId' => 'employeeUniqueId',
        'journalNarrative' => 'journalNarrative',
        'pensionId' => 'pensionId',
        'employee' => 'employee',
        'unMappedNominalCode' => 'unMappedNominalCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'nominalCode' => 'setNominalCode',
        'departmentCode' => 'setDepartmentCode',
        'nominalName' => 'setNominalName',
        'description' => 'setDescription',
        'qty' => 'setQty',
        'value' => 'setValue',
        'payCode' => 'setPayCode',
        'costCentreCode' => 'setCostCentreCode',
        'analysisCategories' => 'setAnalysisCategories',
        'analysisCategoryCodes' => 'setAnalysisCategoryCodes',
        'employeeUniqueId' => 'setEmployeeUniqueId',
        'journalNarrative' => 'setJournalNarrative',
        'pensionId' => 'setPensionId',
        'employee' => 'setEmployee',
        'unMappedNominalCode' => 'setUnMappedNominalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'nominalCode' => 'getNominalCode',
        'departmentCode' => 'getDepartmentCode',
        'nominalName' => 'getNominalName',
        'description' => 'getDescription',
        'qty' => 'getQty',
        'value' => 'getValue',
        'payCode' => 'getPayCode',
        'costCentreCode' => 'getCostCentreCode',
        'analysisCategories' => 'getAnalysisCategories',
        'analysisCategoryCodes' => 'getAnalysisCategoryCodes',
        'employeeUniqueId' => 'getEmployeeUniqueId',
        'journalNarrative' => 'getJournalNarrative',
        'pensionId' => 'getPensionId',
        'employee' => 'getEmployee',
        'unMappedNominalCode' => 'getUnMappedNominalCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('nominalCode', $data ?? [], null);
        $this->setIfExists('departmentCode', $data ?? [], null);
        $this->setIfExists('nominalName', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('qty', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('payCode', $data ?? [], null);
        $this->setIfExists('costCentreCode', $data ?? [], null);
        $this->setIfExists('analysisCategories', $data ?? [], null);
        $this->setIfExists('analysisCategoryCodes', $data ?? [], null);
        $this->setIfExists('employeeUniqueId', $data ?? [], null);
        $this->setIfExists('journalNarrative', $data ?? [], null);
        $this->setIfExists('pensionId', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('unMappedNominalCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nominalCode
     *
     * @return string|null
     */
    public function getNominalCode(): ?string
    {
        return $this->container['nominalCode'];
    }

    /**
     * Sets nominalCode
     *
     * @param string|null $nominalCode [readonly] If you've set up NominalCodeMapping then the relevant Nominal code for the PayCode will be shown here.
     *
     * @return $this
     */
    public function setNominalCode(?string $nominalCode): static
    {
        if (is_null($nominalCode)) {
            array_push($this->openAPINullablesSetToNull, 'nominalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nominalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nominalCode'] = $nominalCode;

        return $this;
    }

    /**
     * Gets departmentCode
     *
     * @return string|null
     */
    public function getDepartmentCode(): ?string
    {
        return $this->container['departmentCode'];
    }

    /**
     * Sets departmentCode
     *
     * @param string|null $departmentCode [readonly] If the journal is split by department then the relevant department code is shown here.
     *
     * @return $this
     */
    public function setDepartmentCode(?string $departmentCode): static
    {
        if (is_null($departmentCode)) {
            array_push($this->openAPINullablesSetToNull, 'departmentCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departmentCode'] = $departmentCode;

        return $this;
    }

    /**
     * Gets nominalName
     *
     * @return string|null
     */
    public function getNominalName(): ?string
    {
        return $this->container['nominalName'];
    }

    /**
     * Sets nominalName
     *
     * @param string|null $nominalName [readonly] As above
     *
     * @return $this
     */
    public function setNominalName(?string $nominalName): static
    {
        if (is_null($nominalName)) {
            array_push($this->openAPINullablesSetToNull, 'nominalName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nominalName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nominalName'] = $nominalName;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description [readonly] A description of what this line summarises.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return float|null
     */
    public function getQty(): ?float
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param float|null $qty [readonly] If the PayCode is a Multiplier code then this will contain the number of days/hours
     *
     * @return $this
     */
    public function setQty(?float $qty): static
    {
        if (is_null($qty)) {
            array_push($this->openAPINullablesSetToNull, 'qty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value [readonly] The total value for this line.
     *
     * @return $this
     */
    public function setValue(?float $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets payCode
     *
     * @return \SynergiTech\Staffology\Model\PayCode|null
     */
    public function getPayCode(): ?\SynergiTech\Staffology\Model\PayCode
    {
        return $this->container['payCode'];
    }

    /**
     * Sets payCode
     *
     * @param \SynergiTech\Staffology\Model\PayCode|null $payCode payCode
     *
     * @return $this
     */
    public function setPayCode(?\SynergiTech\Staffology\Model\PayCode $payCode): static
    {
        if (is_null($payCode)) {
            throw new InvalidArgumentException('non-nullable payCode cannot be null');
        }
        $this->container['payCode'] = $payCode;

        return $this;
    }

    /**
     * Gets costCentreCode
     *
     * @return string|null
     */
    public function getCostCentreCode(): ?string
    {
        return $this->container['costCentreCode'];
    }

    /**
     * Sets costCentreCode
     *
     * @param string|null $costCentreCode [readonly] If the journal is split by cost centre then the relevant cost centre code is shown here.
     *
     * @return $this
     */
    public function setCostCentreCode(?string $costCentreCode): static
    {
        if (is_null($costCentreCode)) {
            array_push($this->openAPINullablesSetToNull, 'costCentreCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentreCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentreCode'] = $costCentreCode;

        return $this;
    }

    /**
     * Gets analysisCategories
     *
     * @return \SynergiTech\Staffology\Model\AnalysisCategory[]|null
     */
    public function getAnalysisCategories(): ?array
    {
        return $this->container['analysisCategories'];
    }

    /**
     * Sets analysisCategories
     *
     * @param \SynergiTech\Staffology\Model\AnalysisCategory[]|null $analysisCategories [readonly] If the journal is split by analysis categories
     *
     * @return $this
     */
    public function setAnalysisCategories(?array $analysisCategories): static
    {
        if (is_null($analysisCategories)) {
            array_push($this->openAPINullablesSetToNull, 'analysisCategories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analysisCategories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analysisCategories'] = $analysisCategories;

        return $this;
    }

    /**
     * Gets analysisCategoryCodes
     *
     * @return \SynergiTech\Staffology\Model\AnalysisCategoryCode[]|null
     */
    public function getAnalysisCategoryCodes(): ?array
    {
        return $this->container['analysisCategoryCodes'];
    }

    /**
     * Sets analysisCategoryCodes
     *
     * @param \SynergiTech\Staffology\Model\AnalysisCategoryCode[]|null $analysisCategoryCodes [readonly] If the journal is split by analysis categories then the relevant analysis categories code is shown here.
     *
     * @return $this
     */
    public function setAnalysisCategoryCodes(?array $analysisCategoryCodes): static
    {
        if (is_null($analysisCategoryCodes)) {
            array_push($this->openAPINullablesSetToNull, 'analysisCategoryCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analysisCategoryCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analysisCategoryCodes'] = $analysisCategoryCodes;

        return $this;
    }

    /**
     * Gets employeeUniqueId
     *
     * @return string|null
     */
    public function getEmployeeUniqueId(): ?string
    {
        return $this->container['employeeUniqueId'];
    }

    /**
     * Sets employeeUniqueId
     *
     * @param string|null $employeeUniqueId [readonly] The EmployeeId this summary line relates to.
     *
     * @return $this
     */
    public function setEmployeeUniqueId(?string $employeeUniqueId): static
    {
        if (is_null($employeeUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'employeeUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeUniqueId'] = $employeeUniqueId;

        return $this;
    }

    /**
     * Gets journalNarrative
     *
     * @return string|null
     */
    public function getJournalNarrative(): ?string
    {
        return $this->container['journalNarrative'];
    }

    /**
     * Sets journalNarrative
     *
     * @param string|null $journalNarrative [readonly] Gets the journal narrative for the pension, if defined.
     *
     * @return $this
     */
    public function setJournalNarrative(?string $journalNarrative): static
    {
        if (is_null($journalNarrative)) {
            array_push($this->openAPINullablesSetToNull, 'journalNarrative');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('journalNarrative', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['journalNarrative'] = $journalNarrative;

        return $this;
    }

    /**
     * Gets pensionId
     *
     * @return string|null
     */
    public function getPensionId(): ?string
    {
        return $this->container['pensionId'];
    }

    /**
     * Sets pensionId
     *
     * @param string|null $pensionId [readonly] The PensionId of the pension associated with this summary line, only present for pension summary lines.
     *
     * @return $this
     */
    public function setPensionId(?string $pensionId): static
    {
        if (is_null($pensionId)) {
            array_push($this->openAPINullablesSetToNull, 'pensionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionId'] = $pensionId;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Employee|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Employee
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Employee|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Employee $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets unMappedNominalCode
     *
     * @return string|null
     */
    public function getUnMappedNominalCode(): ?string
    {
        return $this->container['unMappedNominalCode'];
    }

    /**
     * Sets unMappedNominalCode
     *
     * @param string|null $unMappedNominalCode [readonly] Unmapped Nominal Code is the Nominal Code without the Nominal Mapping.
     *
     * @return $this
     */
    public function setUnMappedNominalCode(?string $unMappedNominalCode): static
    {
        if (is_null($unMappedNominalCode)) {
            array_push($this->openAPINullablesSetToNull, 'unMappedNominalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unMappedNominalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unMappedNominalCode'] = $unMappedNominalCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


