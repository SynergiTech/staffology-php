<?php
/**
 * SpinePointReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * SpinePointReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SpinePointReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'SpinePointReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'spineName' => 'string',
        'spinePointName' => 'string',
        'number' => 'int',
        'effectiveDate' => '\DateTime',
        'annualValue' => 'float',
        'annualValueAltMax' => 'float',
        'annualValueLAInner' => 'float',
        'annualValueLAInnerAltMax' => 'float',
        'annualValueLAOuter' => 'float',
        'annualValueLAOuterAltMax' => 'float',
        'annualValueLAFringe' => 'float',
        'annualValueLAFringeAltMax' => 'float',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'payrollCode' => 'string',
        'department' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'spineName' => null,
        'spinePointName' => null,
        'number' => 'int32',
        'effectiveDate' => 'date',
        'annualValue' => 'double',
        'annualValueAltMax' => 'double',
        'annualValueLAInner' => 'double',
        'annualValueLAInnerAltMax' => 'double',
        'annualValueLAOuter' => 'double',
        'annualValueLAOuterAltMax' => 'double',
        'annualValueLAFringe' => 'double',
        'annualValueLAFringeAltMax' => 'double',
        'employee' => null,
        'payrollCode' => null,
        'department' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'spineName' => true,
        'spinePointName' => true,
        'number' => false,
        'effectiveDate' => false,
        'annualValue' => false,
        'annualValueAltMax' => true,
        'annualValueLAInner' => true,
        'annualValueLAInnerAltMax' => true,
        'annualValueLAOuter' => true,
        'annualValueLAOuterAltMax' => true,
        'annualValueLAFringe' => true,
        'annualValueLAFringeAltMax' => true,
        'employee' => false,
        'payrollCode' => true,
        'department' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'spineName' => 'spineName',
        'spinePointName' => 'spinePointName',
        'number' => 'number',
        'effectiveDate' => 'effectiveDate',
        'annualValue' => 'annualValue',
        'annualValueAltMax' => 'annualValueAltMax',
        'annualValueLAInner' => 'annualValueLAInner',
        'annualValueLAInnerAltMax' => 'annualValueLAInnerAltMax',
        'annualValueLAOuter' => 'annualValueLAOuter',
        'annualValueLAOuterAltMax' => 'annualValueLAOuterAltMax',
        'annualValueLAFringe' => 'annualValueLAFringe',
        'annualValueLAFringeAltMax' => 'annualValueLAFringeAltMax',
        'employee' => 'employee',
        'payrollCode' => 'payrollCode',
        'department' => 'department'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'spineName' => 'setSpineName',
        'spinePointName' => 'setSpinePointName',
        'number' => 'setNumber',
        'effectiveDate' => 'setEffectiveDate',
        'annualValue' => 'setAnnualValue',
        'annualValueAltMax' => 'setAnnualValueAltMax',
        'annualValueLAInner' => 'setAnnualValueLAInner',
        'annualValueLAInnerAltMax' => 'setAnnualValueLAInnerAltMax',
        'annualValueLAOuter' => 'setAnnualValueLAOuter',
        'annualValueLAOuterAltMax' => 'setAnnualValueLAOuterAltMax',
        'annualValueLAFringe' => 'setAnnualValueLAFringe',
        'annualValueLAFringeAltMax' => 'setAnnualValueLAFringeAltMax',
        'employee' => 'setEmployee',
        'payrollCode' => 'setPayrollCode',
        'department' => 'setDepartment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'spineName' => 'getSpineName',
        'spinePointName' => 'getSpinePointName',
        'number' => 'getNumber',
        'effectiveDate' => 'getEffectiveDate',
        'annualValue' => 'getAnnualValue',
        'annualValueAltMax' => 'getAnnualValueAltMax',
        'annualValueLAInner' => 'getAnnualValueLAInner',
        'annualValueLAInnerAltMax' => 'getAnnualValueLAInnerAltMax',
        'annualValueLAOuter' => 'getAnnualValueLAOuter',
        'annualValueLAOuterAltMax' => 'getAnnualValueLAOuterAltMax',
        'annualValueLAFringe' => 'getAnnualValueLAFringe',
        'annualValueLAFringeAltMax' => 'getAnnualValueLAFringeAltMax',
        'employee' => 'getEmployee',
        'payrollCode' => 'getPayrollCode',
        'department' => 'getDepartment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('spineName', $data ?? [], null);
        $this->setIfExists('spinePointName', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('effectiveDate', $data ?? [], null);
        $this->setIfExists('annualValue', $data ?? [], null);
        $this->setIfExists('annualValueAltMax', $data ?? [], null);
        $this->setIfExists('annualValueLAInner', $data ?? [], null);
        $this->setIfExists('annualValueLAInnerAltMax', $data ?? [], null);
        $this->setIfExists('annualValueLAOuter', $data ?? [], null);
        $this->setIfExists('annualValueLAOuterAltMax', $data ?? [], null);
        $this->setIfExists('annualValueLAFringe', $data ?? [], null);
        $this->setIfExists('annualValueLAFringeAltMax', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spineName
     *
     * @return string|null
     */
    public function getSpineName(): ?string
    {
        return $this->container['spineName'];
    }

    /**
     * Sets spineName
     *
     * @param string|null $spineName Spine Name
     *
     * @return $this
     */
    public function setSpineName(?string $spineName): static
    {
        if (is_null($spineName)) {
            array_push($this->openAPINullablesSetToNull, 'spineName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spineName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spineName'] = $spineName;

        return $this;
    }

    /**
     * Gets spinePointName
     *
     * @return string|null
     */
    public function getSpinePointName(): ?string
    {
        return $this->container['spinePointName'];
    }

    /**
     * Sets spinePointName
     *
     * @param string|null $spinePointName Spine Point Name
     *
     * @return $this
     */
    public function setSpinePointName(?string $spinePointName): static
    {
        if (is_null($spinePointName)) {
            array_push($this->openAPINullablesSetToNull, 'spinePointName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spinePointName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spinePointName'] = $spinePointName;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber(): ?int
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number Spine Point Number
     *
     * @return $this
     */
    public function setNumber(?int $number): static
    {
        if (is_null($number)) {
            throw new InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets effectiveDate
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate(): ?\DateTime
    {
        return $this->container['effectiveDate'];
    }

    /**
     * Sets effectiveDate
     *
     * @param \DateTime|null $effectiveDate Effective Date of spine point
     *
     * @return $this
     */
    public function setEffectiveDate(?\DateTime $effectiveDate): static
    {
        if (is_null($effectiveDate)) {
            throw new InvalidArgumentException('non-nullable effectiveDate cannot be null');
        }
        $this->container['effectiveDate'] = $effectiveDate;

        return $this;
    }

    /**
     * Gets annualValue
     *
     * @return float|null
     */
    public function getAnnualValue(): ?float
    {
        return $this->container['annualValue'];
    }

    /**
     * Sets annualValue
     *
     * @param float|null $annualValue Annual Value of spine point
     *
     * @return $this
     */
    public function setAnnualValue(?float $annualValue): static
    {
        if (is_null($annualValue)) {
            throw new InvalidArgumentException('non-nullable annualValue cannot be null');
        }
        $this->container['annualValue'] = $annualValue;

        return $this;
    }

    /**
     * Gets annualValueAltMax
     *
     * @return float|null
     */
    public function getAnnualValueAltMax(): ?float
    {
        return $this->container['annualValueAltMax'];
    }

    /**
     * Sets annualValueAltMax
     *
     * @param float|null $annualValueAltMax Alt Max Annual Value of spine point
     *
     * @return $this
     */
    public function setAnnualValueAltMax(?float $annualValueAltMax): static
    {
        if (is_null($annualValueAltMax)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueAltMax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueAltMax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueAltMax'] = $annualValueAltMax;

        return $this;
    }

    /**
     * Gets annualValueLAInner
     *
     * @return float|null
     */
    public function getAnnualValueLAInner(): ?float
    {
        return $this->container['annualValueLAInner'];
    }

    /**
     * Sets annualValueLAInner
     *
     * @param float|null $annualValueLAInner Annual Value LA Inner of spine point
     *
     * @return $this
     */
    public function setAnnualValueLAInner(?float $annualValueLAInner): static
    {
        if (is_null($annualValueLAInner)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueLAInner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueLAInner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueLAInner'] = $annualValueLAInner;

        return $this;
    }

    /**
     * Gets annualValueLAInnerAltMax
     *
     * @return float|null
     */
    public function getAnnualValueLAInnerAltMax(): ?float
    {
        return $this->container['annualValueLAInnerAltMax'];
    }

    /**
     * Sets annualValueLAInnerAltMax
     *
     * @param float|null $annualValueLAInnerAltMax Annual Value LA Inner Alt Max of spine point
     *
     * @return $this
     */
    public function setAnnualValueLAInnerAltMax(?float $annualValueLAInnerAltMax): static
    {
        if (is_null($annualValueLAInnerAltMax)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueLAInnerAltMax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueLAInnerAltMax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueLAInnerAltMax'] = $annualValueLAInnerAltMax;

        return $this;
    }

    /**
     * Gets annualValueLAOuter
     *
     * @return float|null
     */
    public function getAnnualValueLAOuter(): ?float
    {
        return $this->container['annualValueLAOuter'];
    }

    /**
     * Sets annualValueLAOuter
     *
     * @param float|null $annualValueLAOuter Annual Value LA Outer of spine point
     *
     * @return $this
     */
    public function setAnnualValueLAOuter(?float $annualValueLAOuter): static
    {
        if (is_null($annualValueLAOuter)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueLAOuter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueLAOuter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueLAOuter'] = $annualValueLAOuter;

        return $this;
    }

    /**
     * Gets annualValueLAOuterAltMax
     *
     * @return float|null
     */
    public function getAnnualValueLAOuterAltMax(): ?float
    {
        return $this->container['annualValueLAOuterAltMax'];
    }

    /**
     * Sets annualValueLAOuterAltMax
     *
     * @param float|null $annualValueLAOuterAltMax Annual Value LA Outer Alt Max of spine point
     *
     * @return $this
     */
    public function setAnnualValueLAOuterAltMax(?float $annualValueLAOuterAltMax): static
    {
        if (is_null($annualValueLAOuterAltMax)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueLAOuterAltMax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueLAOuterAltMax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueLAOuterAltMax'] = $annualValueLAOuterAltMax;

        return $this;
    }

    /**
     * Gets annualValueLAFringe
     *
     * @return float|null
     */
    public function getAnnualValueLAFringe(): ?float
    {
        return $this->container['annualValueLAFringe'];
    }

    /**
     * Sets annualValueLAFringe
     *
     * @param float|null $annualValueLAFringe Annual Value LA Fringe of spine point
     *
     * @return $this
     */
    public function setAnnualValueLAFringe(?float $annualValueLAFringe): static
    {
        if (is_null($annualValueLAFringe)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueLAFringe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueLAFringe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueLAFringe'] = $annualValueLAFringe;

        return $this;
    }

    /**
     * Gets annualValueLAFringeAltMax
     *
     * @return float|null
     */
    public function getAnnualValueLAFringeAltMax(): ?float
    {
        return $this->container['annualValueLAFringeAltMax'];
    }

    /**
     * Sets annualValueLAFringeAltMax
     *
     * @param float|null $annualValueLAFringeAltMax Annual Value LA Fringe Alt Max of spine point
     *
     * @return $this
     */
    public function setAnnualValueLAFringeAltMax(?float $annualValueLAFringeAltMax): static
    {
        if (is_null($annualValueLAFringeAltMax)) {
            array_push($this->openAPINullablesSetToNull, 'annualValueLAFringeAltMax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValueLAFringeAltMax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValueLAFringeAltMax'] = $annualValueLAFringeAltMax;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode payrollCode
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment(): ?string
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return $this
     */
    public function setDepartment(?string $department): static
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


