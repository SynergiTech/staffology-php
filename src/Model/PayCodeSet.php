<?php
/**
 * PayCodeSet
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayCodeSet Class Doc Comment
 *
 * @description A PayCodeSet is used to group together a number of PayCodes.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayCodeSet implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayCodeSet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'payCodes' => 'string[]',
        'useForMcr' => 'bool',
        'mcrPayCategory' => '\SynergiTech\Staffology\Model\McrPayCategory',
        'useForLgps' => 'bool',
        'lgpsPayCategory' => '\SynergiTech\Staffology\Model\LgpsPayCategory',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'payCodes' => null,
        'useForMcr' => null,
        'mcrPayCategory' => null,
        'useForLgps' => null,
        'lgpsPayCategory' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'payCodes' => true,
        'useForMcr' => false,
        'mcrPayCategory' => false,
        'useForLgps' => false,
        'lgpsPayCategory' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'payCodes' => 'payCodes',
        'useForMcr' => 'useForMcr',
        'mcrPayCategory' => 'mcrPayCategory',
        'useForLgps' => 'useForLgps',
        'lgpsPayCategory' => 'lgpsPayCategory',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'payCodes' => 'setPayCodes',
        'useForMcr' => 'setUseForMcr',
        'mcrPayCategory' => 'setMcrPayCategory',
        'useForLgps' => 'setUseForLgps',
        'lgpsPayCategory' => 'setLgpsPayCategory',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'payCodes' => 'getPayCodes',
        'useForMcr' => 'getUseForMcr',
        'mcrPayCategory' => 'getMcrPayCategory',
        'useForLgps' => 'getUseForLgps',
        'lgpsPayCategory' => 'getLgpsPayCategory',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('payCodes', $data ?? [], null);
        $this->setIfExists('useForMcr', $data ?? [], null);
        $this->setIfExists('mcrPayCategory', $data ?? [], null);
        $this->setIfExists('useForLgps', $data ?? [], null);
        $this->setIfExists('lgpsPayCategory', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this PayCodeSet
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling PayCodeSet., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new InvalidArgumentException('invalid length for $name when calling PayCodeSet., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets payCodes
     *
     * @return string[]|null
     */
    public function getPayCodes(): ?array
    {
        return $this->container['payCodes'];
    }

    /**
     * Sets payCodes
     *
     * @param string[]|null $payCodes The Code of any PayCodes included in this PayCodeSet
     *
     * @return $this
     */
    public function setPayCodes(?array $payCodes): static
    {
        if (is_null($payCodes)) {
            array_push($this->openAPINullablesSetToNull, 'payCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodes'] = $payCodes;

        return $this;
    }

    /**
     * Gets useForMcr
     *
     * @return bool|null
     */
    public function getUseForMcr(): ?bool
    {
        return $this->container['useForMcr'];
    }

    /**
     * Sets useForMcr
     *
     * @param bool|null $useForMcr useForMcr
     *
     * @return $this
     */
    public function setUseForMcr(?bool $useForMcr): static
    {
        if (is_null($useForMcr)) {
            throw new InvalidArgumentException('non-nullable useForMcr cannot be null');
        }
        $this->container['useForMcr'] = $useForMcr;

        return $this;
    }

    /**
     * Gets mcrPayCategory
     *
     * @return \SynergiTech\Staffology\Model\McrPayCategory|null
     */
    public function getMcrPayCategory(): ?\SynergiTech\Staffology\Model\McrPayCategory
    {
        return $this->container['mcrPayCategory'];
    }

    /**
     * Sets mcrPayCategory
     *
     * @param \SynergiTech\Staffology\Model\McrPayCategory|null $mcrPayCategory mcrPayCategory
     *
     * @return $this
     */
    public function setMcrPayCategory(?\SynergiTech\Staffology\Model\McrPayCategory $mcrPayCategory): static
    {
        if (is_null($mcrPayCategory)) {
            throw new InvalidArgumentException('non-nullable mcrPayCategory cannot be null');
        }
        $this->container['mcrPayCategory'] = $mcrPayCategory;

        return $this;
    }

    /**
     * Gets useForLgps
     *
     * @return bool|null
     */
    public function getUseForLgps(): ?bool
    {
        return $this->container['useForLgps'];
    }

    /**
     * Sets useForLgps
     *
     * @param bool|null $useForLgps Flag indicating if this PayCodeSet will be used for LGPS pay categorisation
     *
     * @return $this
     */
    public function setUseForLgps(?bool $useForLgps): static
    {
        if (is_null($useForLgps)) {
            throw new InvalidArgumentException('non-nullable useForLgps cannot be null');
        }
        $this->container['useForLgps'] = $useForLgps;

        return $this;
    }

    /**
     * Gets lgpsPayCategory
     *
     * @return \SynergiTech\Staffology\Model\LgpsPayCategory|null
     */
    public function getLgpsPayCategory(): ?\SynergiTech\Staffology\Model\LgpsPayCategory
    {
        return $this->container['lgpsPayCategory'];
    }

    /**
     * Sets lgpsPayCategory
     *
     * @param \SynergiTech\Staffology\Model\LgpsPayCategory|null $lgpsPayCategory lgpsPayCategory
     *
     * @return $this
     */
    public function setLgpsPayCategory(?\SynergiTech\Staffology\Model\LgpsPayCategory $lgpsPayCategory): static
    {
        if (is_null($lgpsPayCategory)) {
            throw new InvalidArgumentException('non-nullable lgpsPayCategory cannot be null');
        }
        $this->container['lgpsPayCategory'] = $lgpsPayCategory;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


