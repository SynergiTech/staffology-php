<?php
/**
 * FpsEmployeeFigsToDate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * FpsEmployeeFigsToDate Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FpsEmployeeFigsToDate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FpsEmployeeFigsToDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxablePay' => 'string',
        'totalTax' => 'string',
        'studentLoansTD' => 'string',
        'postgradLoansTD' => 'string',
        'benefitsTaxedViaPayrollYTD' => 'string',
        'empeePenContribnsPaidYTD' => 'string',
        'empeePenContribnsNotPaidYTD' => 'string',
        'smpytd' => 'string',
        'sppytd' => 'string',
        'sapytd' => 'string',
        'shppytd' => 'string',
        'spbpytd' => 'string',
        'sncpytd' => 'string',
        'sspytd' => 'string',
        'gross' => 'string',
        'netPay' => 'string',
        'additions' => 'string',
        'deductions' => 'string',
        'takeHomePay' => 'string',
        'adjustments' => 'string',
        'mapsMiles' => 'string',
        'foreignTaxAmount' => 'string',
        'foreignTaxAmountReclaimed' => 'string',
        'pensionableEarnings' => 'string',
        'pensionablePay' => 'string',
        'employerPensionContribution' => 'string',
        'employeePensionContribution' => 'string',
        'employeePensionContributionAvc' => 'string',
        'paymentAfterLeaving' => 'string',
        'taxOnPaymentAfterLeaving' => 'string',
        'nonTaxOrNICPmt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxablePay' => null,
        'totalTax' => null,
        'studentLoansTD' => null,
        'postgradLoansTD' => null,
        'benefitsTaxedViaPayrollYTD' => null,
        'empeePenContribnsPaidYTD' => null,
        'empeePenContribnsNotPaidYTD' => null,
        'smpytd' => null,
        'sppytd' => null,
        'sapytd' => null,
        'shppytd' => null,
        'spbpytd' => null,
        'sncpytd' => null,
        'sspytd' => null,
        'gross' => null,
        'netPay' => null,
        'additions' => null,
        'deductions' => null,
        'takeHomePay' => null,
        'adjustments' => null,
        'mapsMiles' => null,
        'foreignTaxAmount' => null,
        'foreignTaxAmountReclaimed' => null,
        'pensionableEarnings' => null,
        'pensionablePay' => null,
        'employerPensionContribution' => null,
        'employeePensionContribution' => null,
        'employeePensionContributionAvc' => null,
        'paymentAfterLeaving' => null,
        'taxOnPaymentAfterLeaving' => null,
        'nonTaxOrNICPmt' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxablePay' => true,
        'totalTax' => true,
        'studentLoansTD' => true,
        'postgradLoansTD' => true,
        'benefitsTaxedViaPayrollYTD' => true,
        'empeePenContribnsPaidYTD' => true,
        'empeePenContribnsNotPaidYTD' => true,
        'smpytd' => true,
        'sppytd' => true,
        'sapytd' => true,
        'shppytd' => true,
        'spbpytd' => true,
        'sncpytd' => true,
        'sspytd' => true,
        'gross' => true,
        'netPay' => true,
        'additions' => true,
        'deductions' => true,
        'takeHomePay' => true,
        'adjustments' => true,
        'mapsMiles' => true,
        'foreignTaxAmount' => true,
        'foreignTaxAmountReclaimed' => true,
        'pensionableEarnings' => true,
        'pensionablePay' => true,
        'employerPensionContribution' => true,
        'employeePensionContribution' => true,
        'employeePensionContributionAvc' => true,
        'paymentAfterLeaving' => true,
        'taxOnPaymentAfterLeaving' => true,
        'nonTaxOrNICPmt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxablePay' => 'taxablePay',
        'totalTax' => 'totalTax',
        'studentLoansTD' => 'studentLoansTD',
        'postgradLoansTD' => 'postgradLoansTD',
        'benefitsTaxedViaPayrollYTD' => 'benefitsTaxedViaPayrollYTD',
        'empeePenContribnsPaidYTD' => 'empeePenContribnsPaidYTD',
        'empeePenContribnsNotPaidYTD' => 'empeePenContribnsNotPaidYTD',
        'smpytd' => 'smpytd',
        'sppytd' => 'sppytd',
        'sapytd' => 'sapytd',
        'shppytd' => 'shppytd',
        'spbpytd' => 'spbpytd',
        'sncpytd' => 'sncpytd',
        'sspytd' => 'sspytd',
        'gross' => 'gross',
        'netPay' => 'netPay',
        'additions' => 'additions',
        'deductions' => 'deductions',
        'takeHomePay' => 'takeHomePay',
        'adjustments' => 'adjustments',
        'mapsMiles' => 'mapsMiles',
        'foreignTaxAmount' => 'foreignTaxAmount',
        'foreignTaxAmountReclaimed' => 'foreignTaxAmountReclaimed',
        'pensionableEarnings' => 'pensionableEarnings',
        'pensionablePay' => 'pensionablePay',
        'employerPensionContribution' => 'employerPensionContribution',
        'employeePensionContribution' => 'employeePensionContribution',
        'employeePensionContributionAvc' => 'employeePensionContributionAvc',
        'paymentAfterLeaving' => 'paymentAfterLeaving',
        'taxOnPaymentAfterLeaving' => 'taxOnPaymentAfterLeaving',
        'nonTaxOrNICPmt' => 'nonTaxOrNICPmt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxablePay' => 'setTaxablePay',
        'totalTax' => 'setTotalTax',
        'studentLoansTD' => 'setStudentLoansTD',
        'postgradLoansTD' => 'setPostgradLoansTD',
        'benefitsTaxedViaPayrollYTD' => 'setBenefitsTaxedViaPayrollYTD',
        'empeePenContribnsPaidYTD' => 'setEmpeePenContribnsPaidYTD',
        'empeePenContribnsNotPaidYTD' => 'setEmpeePenContribnsNotPaidYTD',
        'smpytd' => 'setSmpytd',
        'sppytd' => 'setSppytd',
        'sapytd' => 'setSapytd',
        'shppytd' => 'setShppytd',
        'spbpytd' => 'setSpbpytd',
        'sncpytd' => 'setSncpytd',
        'sspytd' => 'setSspytd',
        'gross' => 'setGross',
        'netPay' => 'setNetPay',
        'additions' => 'setAdditions',
        'deductions' => 'setDeductions',
        'takeHomePay' => 'setTakeHomePay',
        'adjustments' => 'setAdjustments',
        'mapsMiles' => 'setMapsMiles',
        'foreignTaxAmount' => 'setForeignTaxAmount',
        'foreignTaxAmountReclaimed' => 'setForeignTaxAmountReclaimed',
        'pensionableEarnings' => 'setPensionableEarnings',
        'pensionablePay' => 'setPensionablePay',
        'employerPensionContribution' => 'setEmployerPensionContribution',
        'employeePensionContribution' => 'setEmployeePensionContribution',
        'employeePensionContributionAvc' => 'setEmployeePensionContributionAvc',
        'paymentAfterLeaving' => 'setPaymentAfterLeaving',
        'taxOnPaymentAfterLeaving' => 'setTaxOnPaymentAfterLeaving',
        'nonTaxOrNICPmt' => 'setNonTaxOrNICPmt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxablePay' => 'getTaxablePay',
        'totalTax' => 'getTotalTax',
        'studentLoansTD' => 'getStudentLoansTD',
        'postgradLoansTD' => 'getPostgradLoansTD',
        'benefitsTaxedViaPayrollYTD' => 'getBenefitsTaxedViaPayrollYTD',
        'empeePenContribnsPaidYTD' => 'getEmpeePenContribnsPaidYTD',
        'empeePenContribnsNotPaidYTD' => 'getEmpeePenContribnsNotPaidYTD',
        'smpytd' => 'getSmpytd',
        'sppytd' => 'getSppytd',
        'sapytd' => 'getSapytd',
        'shppytd' => 'getShppytd',
        'spbpytd' => 'getSpbpytd',
        'sncpytd' => 'getSncpytd',
        'sspytd' => 'getSspytd',
        'gross' => 'getGross',
        'netPay' => 'getNetPay',
        'additions' => 'getAdditions',
        'deductions' => 'getDeductions',
        'takeHomePay' => 'getTakeHomePay',
        'adjustments' => 'getAdjustments',
        'mapsMiles' => 'getMapsMiles',
        'foreignTaxAmount' => 'getForeignTaxAmount',
        'foreignTaxAmountReclaimed' => 'getForeignTaxAmountReclaimed',
        'pensionableEarnings' => 'getPensionableEarnings',
        'pensionablePay' => 'getPensionablePay',
        'employerPensionContribution' => 'getEmployerPensionContribution',
        'employeePensionContribution' => 'getEmployeePensionContribution',
        'employeePensionContributionAvc' => 'getEmployeePensionContributionAvc',
        'paymentAfterLeaving' => 'getPaymentAfterLeaving',
        'taxOnPaymentAfterLeaving' => 'getTaxOnPaymentAfterLeaving',
        'nonTaxOrNICPmt' => 'getNonTaxOrNICPmt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxablePay', $data ?? [], null);
        $this->setIfExists('totalTax', $data ?? [], null);
        $this->setIfExists('studentLoansTD', $data ?? [], null);
        $this->setIfExists('postgradLoansTD', $data ?? [], null);
        $this->setIfExists('benefitsTaxedViaPayrollYTD', $data ?? [], null);
        $this->setIfExists('empeePenContribnsPaidYTD', $data ?? [], null);
        $this->setIfExists('empeePenContribnsNotPaidYTD', $data ?? [], null);
        $this->setIfExists('smpytd', $data ?? [], null);
        $this->setIfExists('sppytd', $data ?? [], null);
        $this->setIfExists('sapytd', $data ?? [], null);
        $this->setIfExists('shppytd', $data ?? [], null);
        $this->setIfExists('spbpytd', $data ?? [], null);
        $this->setIfExists('sncpytd', $data ?? [], null);
        $this->setIfExists('sspytd', $data ?? [], null);
        $this->setIfExists('gross', $data ?? [], null);
        $this->setIfExists('netPay', $data ?? [], null);
        $this->setIfExists('additions', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('takeHomePay', $data ?? [], null);
        $this->setIfExists('adjustments', $data ?? [], null);
        $this->setIfExists('mapsMiles', $data ?? [], null);
        $this->setIfExists('foreignTaxAmount', $data ?? [], null);
        $this->setIfExists('foreignTaxAmountReclaimed', $data ?? [], null);
        $this->setIfExists('pensionableEarnings', $data ?? [], null);
        $this->setIfExists('pensionablePay', $data ?? [], null);
        $this->setIfExists('employerPensionContribution', $data ?? [], null);
        $this->setIfExists('employeePensionContribution', $data ?? [], null);
        $this->setIfExists('employeePensionContributionAvc', $data ?? [], null);
        $this->setIfExists('paymentAfterLeaving', $data ?? [], null);
        $this->setIfExists('taxOnPaymentAfterLeaving', $data ?? [], null);
        $this->setIfExists('nonTaxOrNICPmt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxablePay
     *
     * @return string|null
     */
    public function getTaxablePay(): ?string
    {
        return $this->container['taxablePay'];
    }

    /**
     * Sets taxablePay
     *
     * @param string|null $taxablePay taxablePay
     *
     * @return $this
     */
    public function setTaxablePay(?string $taxablePay): static
    {
        if (is_null($taxablePay)) {
            array_push($this->openAPINullablesSetToNull, 'taxablePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxablePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxablePay'] = $taxablePay;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return string|null
     */
    public function getTotalTax(): ?string
    {
        return $this->container['totalTax'];
    }

    /**
     * Sets totalTax
     *
     * @param string|null $totalTax totalTax
     *
     * @return $this
     */
    public function setTotalTax(?string $totalTax): static
    {
        if (is_null($totalTax)) {
            array_push($this->openAPINullablesSetToNull, 'totalTax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalTax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets studentLoansTD
     *
     * @return string|null
     */
    public function getStudentLoansTD(): ?string
    {
        return $this->container['studentLoansTD'];
    }

    /**
     * Sets studentLoansTD
     *
     * @param string|null $studentLoansTD studentLoansTD
     *
     * @return $this
     */
    public function setStudentLoansTD(?string $studentLoansTD): static
    {
        if (is_null($studentLoansTD)) {
            array_push($this->openAPINullablesSetToNull, 'studentLoansTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studentLoansTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studentLoansTD'] = $studentLoansTD;

        return $this;
    }

    /**
     * Gets postgradLoansTD
     *
     * @return string|null
     */
    public function getPostgradLoansTD(): ?string
    {
        return $this->container['postgradLoansTD'];
    }

    /**
     * Sets postgradLoansTD
     *
     * @param string|null $postgradLoansTD postgradLoansTD
     *
     * @return $this
     */
    public function setPostgradLoansTD(?string $postgradLoansTD): static
    {
        if (is_null($postgradLoansTD)) {
            array_push($this->openAPINullablesSetToNull, 'postgradLoansTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postgradLoansTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postgradLoansTD'] = $postgradLoansTD;

        return $this;
    }

    /**
     * Gets benefitsTaxedViaPayrollYTD
     *
     * @return string|null
     */
    public function getBenefitsTaxedViaPayrollYTD(): ?string
    {
        return $this->container['benefitsTaxedViaPayrollYTD'];
    }

    /**
     * Sets benefitsTaxedViaPayrollYTD
     *
     * @param string|null $benefitsTaxedViaPayrollYTD benefitsTaxedViaPayrollYTD
     *
     * @return $this
     */
    public function setBenefitsTaxedViaPayrollYTD(?string $benefitsTaxedViaPayrollYTD): static
    {
        if (is_null($benefitsTaxedViaPayrollYTD)) {
            array_push($this->openAPINullablesSetToNull, 'benefitsTaxedViaPayrollYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefitsTaxedViaPayrollYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefitsTaxedViaPayrollYTD'] = $benefitsTaxedViaPayrollYTD;

        return $this;
    }

    /**
     * Gets empeePenContribnsPaidYTD
     *
     * @return string|null
     */
    public function getEmpeePenContribnsPaidYTD(): ?string
    {
        return $this->container['empeePenContribnsPaidYTD'];
    }

    /**
     * Sets empeePenContribnsPaidYTD
     *
     * @param string|null $empeePenContribnsPaidYTD empeePenContribnsPaidYTD
     *
     * @return $this
     */
    public function setEmpeePenContribnsPaidYTD(?string $empeePenContribnsPaidYTD): static
    {
        if (is_null($empeePenContribnsPaidYTD)) {
            array_push($this->openAPINullablesSetToNull, 'empeePenContribnsPaidYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('empeePenContribnsPaidYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['empeePenContribnsPaidYTD'] = $empeePenContribnsPaidYTD;

        return $this;
    }

    /**
     * Gets empeePenContribnsNotPaidYTD
     *
     * @return string|null
     */
    public function getEmpeePenContribnsNotPaidYTD(): ?string
    {
        return $this->container['empeePenContribnsNotPaidYTD'];
    }

    /**
     * Sets empeePenContribnsNotPaidYTD
     *
     * @param string|null $empeePenContribnsNotPaidYTD empeePenContribnsNotPaidYTD
     *
     * @return $this
     */
    public function setEmpeePenContribnsNotPaidYTD(?string $empeePenContribnsNotPaidYTD): static
    {
        if (is_null($empeePenContribnsNotPaidYTD)) {
            array_push($this->openAPINullablesSetToNull, 'empeePenContribnsNotPaidYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('empeePenContribnsNotPaidYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['empeePenContribnsNotPaidYTD'] = $empeePenContribnsNotPaidYTD;

        return $this;
    }

    /**
     * Gets smpytd
     *
     * @return string|null
     */
    public function getSmpytd(): ?string
    {
        return $this->container['smpytd'];
    }

    /**
     * Sets smpytd
     *
     * @param string|null $smpytd smpytd
     *
     * @return $this
     */
    public function setSmpytd(?string $smpytd): static
    {
        if (is_null($smpytd)) {
            array_push($this->openAPINullablesSetToNull, 'smpytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('smpytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['smpytd'] = $smpytd;

        return $this;
    }

    /**
     * Gets sppytd
     *
     * @return string|null
     */
    public function getSppytd(): ?string
    {
        return $this->container['sppytd'];
    }

    /**
     * Sets sppytd
     *
     * @param string|null $sppytd sppytd
     *
     * @return $this
     */
    public function setSppytd(?string $sppytd): static
    {
        if (is_null($sppytd)) {
            array_push($this->openAPINullablesSetToNull, 'sppytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sppytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sppytd'] = $sppytd;

        return $this;
    }

    /**
     * Gets sapytd
     *
     * @return string|null
     */
    public function getSapytd(): ?string
    {
        return $this->container['sapytd'];
    }

    /**
     * Sets sapytd
     *
     * @param string|null $sapytd sapytd
     *
     * @return $this
     */
    public function setSapytd(?string $sapytd): static
    {
        if (is_null($sapytd)) {
            array_push($this->openAPINullablesSetToNull, 'sapytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sapytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sapytd'] = $sapytd;

        return $this;
    }

    /**
     * Gets shppytd
     *
     * @return string|null
     */
    public function getShppytd(): ?string
    {
        return $this->container['shppytd'];
    }

    /**
     * Sets shppytd
     *
     * @param string|null $shppytd shppytd
     *
     * @return $this
     */
    public function setShppytd(?string $shppytd): static
    {
        if (is_null($shppytd)) {
            array_push($this->openAPINullablesSetToNull, 'shppytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shppytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shppytd'] = $shppytd;

        return $this;
    }

    /**
     * Gets spbpytd
     *
     * @return string|null
     */
    public function getSpbpytd(): ?string
    {
        return $this->container['spbpytd'];
    }

    /**
     * Sets spbpytd
     *
     * @param string|null $spbpytd spbpytd
     *
     * @return $this
     */
    public function setSpbpytd(?string $spbpytd): static
    {
        if (is_null($spbpytd)) {
            array_push($this->openAPINullablesSetToNull, 'spbpytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spbpytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spbpytd'] = $spbpytd;

        return $this;
    }

    /**
     * Gets sncpytd
     *
     * @return string|null
     */
    public function getSncpytd(): ?string
    {
        return $this->container['sncpytd'];
    }

    /**
     * Sets sncpytd
     *
     * @param string|null $sncpytd sncpytd
     *
     * @return $this
     */
    public function setSncpytd(?string $sncpytd): static
    {
        if (is_null($sncpytd)) {
            array_push($this->openAPINullablesSetToNull, 'sncpytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sncpytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sncpytd'] = $sncpytd;

        return $this;
    }

    /**
     * Gets sspytd
     *
     * @return string|null
     */
    public function getSspytd(): ?string
    {
        return $this->container['sspytd'];
    }

    /**
     * Sets sspytd
     *
     * @param string|null $sspytd sspytd
     *
     * @return $this
     */
    public function setSspytd(?string $sspytd): static
    {
        if (is_null($sspytd)) {
            array_push($this->openAPINullablesSetToNull, 'sspytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sspytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sspytd'] = $sspytd;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return string|null
     */
    public function getGross(): ?string
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param string|null $gross gross
     *
     * @return $this
     */
    public function setGross(?string $gross): static
    {
        if (is_null($gross)) {
            array_push($this->openAPINullablesSetToNull, 'gross');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets netPay
     *
     * @return string|null
     */
    public function getNetPay(): ?string
    {
        return $this->container['netPay'];
    }

    /**
     * Sets netPay
     *
     * @param string|null $netPay netPay
     *
     * @return $this
     */
    public function setNetPay(?string $netPay): static
    {
        if (is_null($netPay)) {
            array_push($this->openAPINullablesSetToNull, 'netPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netPay'] = $netPay;

        return $this;
    }

    /**
     * Gets additions
     *
     * @return string|null
     */
    public function getAdditions(): ?string
    {
        return $this->container['additions'];
    }

    /**
     * Sets additions
     *
     * @param string|null $additions additions
     *
     * @return $this
     */
    public function setAdditions(?string $additions): static
    {
        if (is_null($additions)) {
            array_push($this->openAPINullablesSetToNull, 'additions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additions'] = $additions;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return string|null
     */
    public function getDeductions(): ?string
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param string|null $deductions deductions
     *
     * @return $this
     */
    public function setDeductions(?string $deductions): static
    {
        if (is_null($deductions)) {
            array_push($this->openAPINullablesSetToNull, 'deductions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deductions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets takeHomePay
     *
     * @return string|null
     */
    public function getTakeHomePay(): ?string
    {
        return $this->container['takeHomePay'];
    }

    /**
     * Sets takeHomePay
     *
     * @param string|null $takeHomePay takeHomePay
     *
     * @return $this
     */
    public function setTakeHomePay(?string $takeHomePay): static
    {
        if (is_null($takeHomePay)) {
            array_push($this->openAPINullablesSetToNull, 'takeHomePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('takeHomePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['takeHomePay'] = $takeHomePay;

        return $this;
    }

    /**
     * Gets adjustments
     *
     * @return string|null
     */
    public function getAdjustments(): ?string
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     *
     * @param string|null $adjustments adjustments
     *
     * @return $this
     */
    public function setAdjustments(?string $adjustments): static
    {
        if (is_null($adjustments)) {
            array_push($this->openAPINullablesSetToNull, 'adjustments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adjustments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets mapsMiles
     *
     * @return string|null
     */
    public function getMapsMiles(): ?string
    {
        return $this->container['mapsMiles'];
    }

    /**
     * Sets mapsMiles
     *
     * @param string|null $mapsMiles mapsMiles
     *
     * @return $this
     */
    public function setMapsMiles(?string $mapsMiles): static
    {
        if (is_null($mapsMiles)) {
            array_push($this->openAPINullablesSetToNull, 'mapsMiles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mapsMiles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mapsMiles'] = $mapsMiles;

        return $this;
    }

    /**
     * Gets foreignTaxAmount
     *
     * @return string|null
     */
    public function getForeignTaxAmount(): ?string
    {
        return $this->container['foreignTaxAmount'];
    }

    /**
     * Sets foreignTaxAmount
     *
     * @param string|null $foreignTaxAmount foreignTaxAmount
     *
     * @return $this
     */
    public function setForeignTaxAmount(?string $foreignTaxAmount): static
    {
        if (is_null($foreignTaxAmount)) {
            array_push($this->openAPINullablesSetToNull, 'foreignTaxAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('foreignTaxAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['foreignTaxAmount'] = $foreignTaxAmount;

        return $this;
    }

    /**
     * Gets foreignTaxAmountReclaimed
     *
     * @return string|null
     */
    public function getForeignTaxAmountReclaimed(): ?string
    {
        return $this->container['foreignTaxAmountReclaimed'];
    }

    /**
     * Sets foreignTaxAmountReclaimed
     *
     * @param string|null $foreignTaxAmountReclaimed foreignTaxAmountReclaimed
     *
     * @return $this
     */
    public function setForeignTaxAmountReclaimed(?string $foreignTaxAmountReclaimed): static
    {
        if (is_null($foreignTaxAmountReclaimed)) {
            array_push($this->openAPINullablesSetToNull, 'foreignTaxAmountReclaimed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('foreignTaxAmountReclaimed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['foreignTaxAmountReclaimed'] = $foreignTaxAmountReclaimed;

        return $this;
    }

    /**
     * Gets pensionableEarnings
     *
     * @return string|null
     */
    public function getPensionableEarnings(): ?string
    {
        return $this->container['pensionableEarnings'];
    }

    /**
     * Sets pensionableEarnings
     *
     * @param string|null $pensionableEarnings pensionableEarnings
     *
     * @return $this
     */
    public function setPensionableEarnings(?string $pensionableEarnings): static
    {
        if (is_null($pensionableEarnings)) {
            array_push($this->openAPINullablesSetToNull, 'pensionableEarnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionableEarnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionableEarnings'] = $pensionableEarnings;

        return $this;
    }

    /**
     * Gets pensionablePay
     *
     * @return string|null
     */
    public function getPensionablePay(): ?string
    {
        return $this->container['pensionablePay'];
    }

    /**
     * Sets pensionablePay
     *
     * @param string|null $pensionablePay pensionablePay
     *
     * @return $this
     */
    public function setPensionablePay(?string $pensionablePay): static
    {
        if (is_null($pensionablePay)) {
            array_push($this->openAPINullablesSetToNull, 'pensionablePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionablePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionablePay'] = $pensionablePay;

        return $this;
    }

    /**
     * Gets employerPensionContribution
     *
     * @return string|null
     */
    public function getEmployerPensionContribution(): ?string
    {
        return $this->container['employerPensionContribution'];
    }

    /**
     * Sets employerPensionContribution
     *
     * @param string|null $employerPensionContribution employerPensionContribution
     *
     * @return $this
     */
    public function setEmployerPensionContribution(?string $employerPensionContribution): static
    {
        if (is_null($employerPensionContribution)) {
            array_push($this->openAPINullablesSetToNull, 'employerPensionContribution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerPensionContribution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerPensionContribution'] = $employerPensionContribution;

        return $this;
    }

    /**
     * Gets employeePensionContribution
     *
     * @return string|null
     */
    public function getEmployeePensionContribution(): ?string
    {
        return $this->container['employeePensionContribution'];
    }

    /**
     * Sets employeePensionContribution
     *
     * @param string|null $employeePensionContribution employeePensionContribution
     *
     * @return $this
     */
    public function setEmployeePensionContribution(?string $employeePensionContribution): static
    {
        if (is_null($employeePensionContribution)) {
            array_push($this->openAPINullablesSetToNull, 'employeePensionContribution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeePensionContribution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeePensionContribution'] = $employeePensionContribution;

        return $this;
    }

    /**
     * Gets employeePensionContributionAvc
     *
     * @return string|null
     */
    public function getEmployeePensionContributionAvc(): ?string
    {
        return $this->container['employeePensionContributionAvc'];
    }

    /**
     * Sets employeePensionContributionAvc
     *
     * @param string|null $employeePensionContributionAvc employeePensionContributionAvc
     *
     * @return $this
     */
    public function setEmployeePensionContributionAvc(?string $employeePensionContributionAvc): static
    {
        if (is_null($employeePensionContributionAvc)) {
            array_push($this->openAPINullablesSetToNull, 'employeePensionContributionAvc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeePensionContributionAvc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeePensionContributionAvc'] = $employeePensionContributionAvc;

        return $this;
    }

    /**
     * Gets paymentAfterLeaving
     *
     * @return string|null
     */
    public function getPaymentAfterLeaving(): ?string
    {
        return $this->container['paymentAfterLeaving'];
    }

    /**
     * Sets paymentAfterLeaving
     *
     * @param string|null $paymentAfterLeaving paymentAfterLeaving
     *
     * @return $this
     */
    public function setPaymentAfterLeaving(?string $paymentAfterLeaving): static
    {
        if (is_null($paymentAfterLeaving)) {
            array_push($this->openAPINullablesSetToNull, 'paymentAfterLeaving');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentAfterLeaving', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentAfterLeaving'] = $paymentAfterLeaving;

        return $this;
    }

    /**
     * Gets taxOnPaymentAfterLeaving
     *
     * @return string|null
     */
    public function getTaxOnPaymentAfterLeaving(): ?string
    {
        return $this->container['taxOnPaymentAfterLeaving'];
    }

    /**
     * Sets taxOnPaymentAfterLeaving
     *
     * @param string|null $taxOnPaymentAfterLeaving taxOnPaymentAfterLeaving
     *
     * @return $this
     */
    public function setTaxOnPaymentAfterLeaving(?string $taxOnPaymentAfterLeaving): static
    {
        if (is_null($taxOnPaymentAfterLeaving)) {
            array_push($this->openAPINullablesSetToNull, 'taxOnPaymentAfterLeaving');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxOnPaymentAfterLeaving', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxOnPaymentAfterLeaving'] = $taxOnPaymentAfterLeaving;

        return $this;
    }

    /**
     * Gets nonTaxOrNICPmt
     *
     * @return string|null
     */
    public function getNonTaxOrNICPmt(): ?string
    {
        return $this->container['nonTaxOrNICPmt'];
    }

    /**
     * Sets nonTaxOrNICPmt
     *
     * @param string|null $nonTaxOrNICPmt nonTaxOrNICPmt
     *
     * @return $this
     */
    public function setNonTaxOrNICPmt(?string $nonTaxOrNICPmt): static
    {
        if (is_null($nonTaxOrNICPmt)) {
            array_push($this->openAPINullablesSetToNull, 'nonTaxOrNICPmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nonTaxOrNICPmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nonTaxOrNICPmt'] = $nonTaxOrNICPmt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


