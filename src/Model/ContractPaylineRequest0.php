<?php
/**
 * ContractPaylineRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractPaylineRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractPaylineRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.PaylineRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'analysisCategoryCodeIds' => 'string[]',
        'analysisCategoriesCodes' => '\SynergiTech\Staffology\Model\ContractPaylineAnalysisCategoriesCodes[]',
        'annualValue' => 'float',
        'autoAdjustForLeave' => 'bool',
        'calculateAsWhenPaid' => 'bool',
        'childId' => 'string',
        'code' => 'string',
        'contributesToBasicPay' => 'bool',
        'costCentre' => 'string',
        'costCentreId' => 'string',
        'department' => 'string',
        'departmentId' => 'string',
        'description' => 'string',
        'earnedFrom' => '\DateTime',
        'earnedTo' => '\DateTime',
        'effectiveFrom' => '\DateTime',
        'effectiveTo' => '\DateTime',
        'employeeRoleReference' => 'string',
        'fullTimeAnnualValue' => 'float',
        'ignoreInitialBackPay' => 'bool',
        'isAutoGeneratedBasicPayLine' => 'bool',
        'isAutomaticBackPay' => 'bool',
        'isNetToGross' => 'bool',
        'isZeroHoursTeachersBackPayLine' => 'bool',
        'londonAllowanceId' => 'int',
        'multiplier' => 'float',
        'netToGrossDiscrepancy' => 'float',
        'payGrade' => 'string',
        'paySpine' => 'string',
        'paySpineGradeId' => 'string',
        'paySpineId' => 'string',
        'percentageOfEffectiveDays' => 'float',
        'rate' => 'float',
        'roleId' => 'string',
        'spinePoint' => 'string',
        'spinalPointId' => 'string',
        'tags' => 'string[]',
        'targetNetToGrossValue' => 'float',
        'totalPaidDays' => 'float',
        'totalWorkingDays' => 'float',
        'value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'analysisCategoryCodeIds' => 'uuid',
        'analysisCategoriesCodes' => null,
        'annualValue' => 'double',
        'autoAdjustForLeave' => null,
        'calculateAsWhenPaid' => null,
        'childId' => 'uuid',
        'code' => null,
        'contributesToBasicPay' => null,
        'costCentre' => null,
        'costCentreId' => 'uuid',
        'department' => null,
        'departmentId' => 'uuid',
        'description' => null,
        'earnedFrom' => 'date',
        'earnedTo' => 'date',
        'effectiveFrom' => 'date',
        'effectiveTo' => 'date',
        'employeeRoleReference' => null,
        'fullTimeAnnualValue' => 'double',
        'ignoreInitialBackPay' => null,
        'isAutoGeneratedBasicPayLine' => null,
        'isAutomaticBackPay' => null,
        'isNetToGross' => null,
        'isZeroHoursTeachersBackPayLine' => null,
        'londonAllowanceId' => 'int32',
        'multiplier' => 'double',
        'netToGrossDiscrepancy' => 'double',
        'payGrade' => null,
        'paySpine' => null,
        'paySpineGradeId' => 'uuid',
        'paySpineId' => 'uuid',
        'percentageOfEffectiveDays' => 'double',
        'rate' => 'double',
        'roleId' => 'uuid',
        'spinePoint' => null,
        'spinalPointId' => 'uuid',
        'tags' => null,
        'targetNetToGrossValue' => 'double',
        'totalPaidDays' => 'double',
        'totalWorkingDays' => 'double',
        'value' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'analysisCategoryCodeIds' => true,
        'analysisCategoriesCodes' => true,
        'annualValue' => true,
        'autoAdjustForLeave' => false,
        'calculateAsWhenPaid' => false,
        'childId' => true,
        'code' => true,
        'contributesToBasicPay' => false,
        'costCentre' => true,
        'costCentreId' => true,
        'department' => true,
        'departmentId' => true,
        'description' => true,
        'earnedFrom' => true,
        'earnedTo' => true,
        'effectiveFrom' => true,
        'effectiveTo' => true,
        'employeeRoleReference' => true,
        'fullTimeAnnualValue' => false,
        'ignoreInitialBackPay' => false,
        'isAutoGeneratedBasicPayLine' => false,
        'isAutomaticBackPay' => false,
        'isNetToGross' => false,
        'isZeroHoursTeachersBackPayLine' => false,
        'londonAllowanceId' => true,
        'multiplier' => true,
        'netToGrossDiscrepancy' => true,
        'payGrade' => true,
        'paySpine' => true,
        'paySpineGradeId' => true,
        'paySpineId' => true,
        'percentageOfEffectiveDays' => true,
        'rate' => true,
        'roleId' => true,
        'spinePoint' => true,
        'spinalPointId' => true,
        'tags' => true,
        'targetNetToGrossValue' => true,
        'totalPaidDays' => true,
        'totalWorkingDays' => true,
        'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'analysisCategoryCodeIds' => 'analysisCategoryCodeIds',
        'analysisCategoriesCodes' => 'analysisCategoriesCodes',
        'annualValue' => 'annualValue',
        'autoAdjustForLeave' => 'autoAdjustForLeave',
        'calculateAsWhenPaid' => 'calculateAsWhenPaid',
        'childId' => 'childId',
        'code' => 'code',
        'contributesToBasicPay' => 'contributesToBasicPay',
        'costCentre' => 'costCentre',
        'costCentreId' => 'costCentreId',
        'department' => 'department',
        'departmentId' => 'departmentId',
        'description' => 'description',
        'earnedFrom' => 'earnedFrom',
        'earnedTo' => 'earnedTo',
        'effectiveFrom' => 'effectiveFrom',
        'effectiveTo' => 'effectiveTo',
        'employeeRoleReference' => 'employeeRoleReference',
        'fullTimeAnnualValue' => 'fullTimeAnnualValue',
        'ignoreInitialBackPay' => 'ignoreInitialBackPay',
        'isAutoGeneratedBasicPayLine' => 'isAutoGeneratedBasicPayLine',
        'isAutomaticBackPay' => 'isAutomaticBackPay',
        'isNetToGross' => 'isNetToGross',
        'isZeroHoursTeachersBackPayLine' => 'isZeroHoursTeachersBackPayLine',
        'londonAllowanceId' => 'londonAllowanceId',
        'multiplier' => 'multiplier',
        'netToGrossDiscrepancy' => 'netToGrossDiscrepancy',
        'payGrade' => 'payGrade',
        'paySpine' => 'paySpine',
        'paySpineGradeId' => 'paySpineGradeId',
        'paySpineId' => 'paySpineId',
        'percentageOfEffectiveDays' => 'percentageOfEffectiveDays',
        'rate' => 'rate',
        'roleId' => 'roleId',
        'spinePoint' => 'spinePoint',
        'spinalPointId' => 'spinalPointId',
        'tags' => 'tags',
        'targetNetToGrossValue' => 'targetNetToGrossValue',
        'totalPaidDays' => 'totalPaidDays',
        'totalWorkingDays' => 'totalWorkingDays',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'analysisCategoryCodeIds' => 'setAnalysisCategoryCodeIds',
        'analysisCategoriesCodes' => 'setAnalysisCategoriesCodes',
        'annualValue' => 'setAnnualValue',
        'autoAdjustForLeave' => 'setAutoAdjustForLeave',
        'calculateAsWhenPaid' => 'setCalculateAsWhenPaid',
        'childId' => 'setChildId',
        'code' => 'setCode',
        'contributesToBasicPay' => 'setContributesToBasicPay',
        'costCentre' => 'setCostCentre',
        'costCentreId' => 'setCostCentreId',
        'department' => 'setDepartment',
        'departmentId' => 'setDepartmentId',
        'description' => 'setDescription',
        'earnedFrom' => 'setEarnedFrom',
        'earnedTo' => 'setEarnedTo',
        'effectiveFrom' => 'setEffectiveFrom',
        'effectiveTo' => 'setEffectiveTo',
        'employeeRoleReference' => 'setEmployeeRoleReference',
        'fullTimeAnnualValue' => 'setFullTimeAnnualValue',
        'ignoreInitialBackPay' => 'setIgnoreInitialBackPay',
        'isAutoGeneratedBasicPayLine' => 'setIsAutoGeneratedBasicPayLine',
        'isAutomaticBackPay' => 'setIsAutomaticBackPay',
        'isNetToGross' => 'setIsNetToGross',
        'isZeroHoursTeachersBackPayLine' => 'setIsZeroHoursTeachersBackPayLine',
        'londonAllowanceId' => 'setLondonAllowanceId',
        'multiplier' => 'setMultiplier',
        'netToGrossDiscrepancy' => 'setNetToGrossDiscrepancy',
        'payGrade' => 'setPayGrade',
        'paySpine' => 'setPaySpine',
        'paySpineGradeId' => 'setPaySpineGradeId',
        'paySpineId' => 'setPaySpineId',
        'percentageOfEffectiveDays' => 'setPercentageOfEffectiveDays',
        'rate' => 'setRate',
        'roleId' => 'setRoleId',
        'spinePoint' => 'setSpinePoint',
        'spinalPointId' => 'setSpinalPointId',
        'tags' => 'setTags',
        'targetNetToGrossValue' => 'setTargetNetToGrossValue',
        'totalPaidDays' => 'setTotalPaidDays',
        'totalWorkingDays' => 'setTotalWorkingDays',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'analysisCategoryCodeIds' => 'getAnalysisCategoryCodeIds',
        'analysisCategoriesCodes' => 'getAnalysisCategoriesCodes',
        'annualValue' => 'getAnnualValue',
        'autoAdjustForLeave' => 'getAutoAdjustForLeave',
        'calculateAsWhenPaid' => 'getCalculateAsWhenPaid',
        'childId' => 'getChildId',
        'code' => 'getCode',
        'contributesToBasicPay' => 'getContributesToBasicPay',
        'costCentre' => 'getCostCentre',
        'costCentreId' => 'getCostCentreId',
        'department' => 'getDepartment',
        'departmentId' => 'getDepartmentId',
        'description' => 'getDescription',
        'earnedFrom' => 'getEarnedFrom',
        'earnedTo' => 'getEarnedTo',
        'effectiveFrom' => 'getEffectiveFrom',
        'effectiveTo' => 'getEffectiveTo',
        'employeeRoleReference' => 'getEmployeeRoleReference',
        'fullTimeAnnualValue' => 'getFullTimeAnnualValue',
        'ignoreInitialBackPay' => 'getIgnoreInitialBackPay',
        'isAutoGeneratedBasicPayLine' => 'getIsAutoGeneratedBasicPayLine',
        'isAutomaticBackPay' => 'getIsAutomaticBackPay',
        'isNetToGross' => 'getIsNetToGross',
        'isZeroHoursTeachersBackPayLine' => 'getIsZeroHoursTeachersBackPayLine',
        'londonAllowanceId' => 'getLondonAllowanceId',
        'multiplier' => 'getMultiplier',
        'netToGrossDiscrepancy' => 'getNetToGrossDiscrepancy',
        'payGrade' => 'getPayGrade',
        'paySpine' => 'getPaySpine',
        'paySpineGradeId' => 'getPaySpineGradeId',
        'paySpineId' => 'getPaySpineId',
        'percentageOfEffectiveDays' => 'getPercentageOfEffectiveDays',
        'rate' => 'getRate',
        'roleId' => 'getRoleId',
        'spinePoint' => 'getSpinePoint',
        'spinalPointId' => 'getSpinalPointId',
        'tags' => 'getTags',
        'targetNetToGrossValue' => 'getTargetNetToGrossValue',
        'totalPaidDays' => 'getTotalPaidDays',
        'totalWorkingDays' => 'getTotalWorkingDays',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('analysisCategoryCodeIds', $data ?? [], null);
        $this->setIfExists('analysisCategoriesCodes', $data ?? [], null);
        $this->setIfExists('annualValue', $data ?? [], null);
        $this->setIfExists('autoAdjustForLeave', $data ?? [], null);
        $this->setIfExists('calculateAsWhenPaid', $data ?? [], null);
        $this->setIfExists('childId', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('contributesToBasicPay', $data ?? [], null);
        $this->setIfExists('costCentre', $data ?? [], null);
        $this->setIfExists('costCentreId', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('departmentId', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('earnedFrom', $data ?? [], null);
        $this->setIfExists('earnedTo', $data ?? [], null);
        $this->setIfExists('effectiveFrom', $data ?? [], null);
        $this->setIfExists('effectiveTo', $data ?? [], null);
        $this->setIfExists('employeeRoleReference', $data ?? [], null);
        $this->setIfExists('fullTimeAnnualValue', $data ?? [], null);
        $this->setIfExists('ignoreInitialBackPay', $data ?? [], null);
        $this->setIfExists('isAutoGeneratedBasicPayLine', $data ?? [], null);
        $this->setIfExists('isAutomaticBackPay', $data ?? [], null);
        $this->setIfExists('isNetToGross', $data ?? [], null);
        $this->setIfExists('isZeroHoursTeachersBackPayLine', $data ?? [], null);
        $this->setIfExists('londonAllowanceId', $data ?? [], null);
        $this->setIfExists('multiplier', $data ?? [], null);
        $this->setIfExists('netToGrossDiscrepancy', $data ?? [], null);
        $this->setIfExists('payGrade', $data ?? [], null);
        $this->setIfExists('paySpine', $data ?? [], null);
        $this->setIfExists('paySpineGradeId', $data ?? [], null);
        $this->setIfExists('paySpineId', $data ?? [], null);
        $this->setIfExists('percentageOfEffectiveDays', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('roleId', $data ?? [], null);
        $this->setIfExists('spinePoint', $data ?? [], null);
        $this->setIfExists('spinalPointId', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('targetNetToGrossValue', $data ?? [], null);
        $this->setIfExists('totalPaidDays', $data ?? [], null);
        $this->setIfExists('totalWorkingDays', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets analysisCategoryCodeIds
     *
     * @return string[]|null
     */
    public function getAnalysisCategoryCodeIds(): ?array
    {
        return $this->container['analysisCategoryCodeIds'];
    }

    /**
     * Sets analysisCategoryCodeIds
     *
     * @param string[]|null $analysisCategoryCodeIds List of analysis category code unique ids.
     *
     * @return $this
     */
    public function setAnalysisCategoryCodeIds(?array $analysisCategoryCodeIds): static
    {
        if (is_null($analysisCategoryCodeIds)) {
            array_push($this->openAPINullablesSetToNull, 'analysisCategoryCodeIds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analysisCategoryCodeIds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analysisCategoryCodeIds'] = $analysisCategoryCodeIds;

        return $this;
    }

    /**
     * Gets analysisCategoriesCodes
     *
     * @return \SynergiTech\Staffology\Model\ContractPaylineAnalysisCategoriesCodes[]|null
     */
    public function getAnalysisCategoriesCodes(): ?array
    {
        return $this->container['analysisCategoriesCodes'];
    }

    /**
     * Sets analysisCategoriesCodes
     *
     * @param \SynergiTech\Staffology\Model\ContractPaylineAnalysisCategoriesCodes[]|null $analysisCategoriesCodes List of analysis category ids and analysis category code ids.
     *
     * @return $this
     */
    public function setAnalysisCategoriesCodes(?array $analysisCategoriesCodes): static
    {
        if (is_null($analysisCategoriesCodes)) {
            array_push($this->openAPINullablesSetToNull, 'analysisCategoriesCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analysisCategoriesCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analysisCategoriesCodes'] = $analysisCategoriesCodes;

        return $this;
    }

    /**
     * Gets annualValue
     *
     * @return float|null
     */
    public function getAnnualValue(): ?float
    {
        return $this->container['annualValue'];
    }

    /**
     * Sets annualValue
     *
     * @param float|null $annualValue The original value from the PayLine before we modify it.  Currently only used when CalculationType is set to FixedAnnualAmount  so we can determine whether the payline value needs calculating or not.  To recalculate set to null with annual amount recorded in Value.
     *
     * @return $this
     */
    public function setAnnualValue(?float $annualValue): static
    {
        if (is_null($annualValue)) {
            array_push($this->openAPINullablesSetToNull, 'annualValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annualValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annualValue'] = $annualValue;

        return $this;
    }

    /**
     * Gets autoAdjustForLeave
     *
     * @return bool|null
     */
    public function getAutoAdjustForLeave(): ?bool
    {
        return $this->container['autoAdjustForLeave'];
    }

    /**
     * Sets autoAdjustForLeave
     *
     * @param bool|null $autoAdjustForLeave This sets whether the PayLine should be automatically adjusted or not for: Leave Entries; Starters/Leavers;  PayLine effectiveFrom and effectiveTo values falling midway through a PayRun.
     *
     * @return $this
     */
    public function setAutoAdjustForLeave(?bool $autoAdjustForLeave): static
    {
        if (is_null($autoAdjustForLeave)) {
            throw new InvalidArgumentException('non-nullable autoAdjustForLeave cannot be null');
        }
        $this->container['autoAdjustForLeave'] = $autoAdjustForLeave;

        return $this;
    }

    /**
     * Gets calculateAsWhenPaid
     *
     * @return bool|null
     */
    public function getCalculateAsWhenPaid(): ?bool
    {
        return $this->container['calculateAsWhenPaid'];
    }

    /**
     * Sets calculateAsWhenPaid
     *
     * @param bool|null $calculateAsWhenPaid Indicates whether this pay line should be treated as When Paid rather than When Earned.
     *
     * @return $this
     */
    public function setCalculateAsWhenPaid(?bool $calculateAsWhenPaid): static
    {
        if (is_null($calculateAsWhenPaid)) {
            throw new InvalidArgumentException('non-nullable calculateAsWhenPaid cannot be null');
        }
        $this->container['calculateAsWhenPaid'] = $calculateAsWhenPaid;

        return $this;
    }

    /**
     * Gets childId
     *
     * @return string|null
     */
    public function getChildId(): ?string
    {
        return $this->container['childId'];
    }

    /**
     * Sets childId
     *
     * @param string|null $childId The child id.
     *
     * @return $this
     */
    public function setChildId(?string $childId): static
    {
        if (is_null($childId)) {
            array_push($this->openAPINullablesSetToNull, 'childId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('childId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['childId'] = $childId;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode(): ?string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The PayCode this line is assigned to. The PayCode determines the treatment of this line when it comes to NI, Tax and Pensions as well as whether it's a deduction or addition.
     *
     * @return $this
     */
    public function setCode(?string $code): static
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets contributesToBasicPay
     *
     * @return bool|null
     */
    public function getContributesToBasicPay(): ?bool
    {
        return $this->container['contributesToBasicPay'];
    }

    /**
     * Sets contributesToBasicPay
     *
     * @param bool|null $contributesToBasicPay Indicates whether this PayLine contributes to the basic pay of the Employee.
     *
     * @return $this
     */
    public function setContributesToBasicPay(?bool $contributesToBasicPay): static
    {
        if (is_null($contributesToBasicPay)) {
            throw new InvalidArgumentException('non-nullable contributesToBasicPay cannot be null');
        }
        $this->container['contributesToBasicPay'] = $contributesToBasicPay;

        return $this;
    }

    /**
     * Gets costCentre
     *
     * @return string|null
     */
    public function getCostCentre(): ?string
    {
        return $this->container['costCentre'];
    }

    /**
     * Sets costCentre
     *
     * @param string|null $costCentre CostCentre code which we want to override in the payline.
     *
     * @return $this
     */
    public function setCostCentre(?string $costCentre): static
    {
        if (is_null($costCentre)) {
            array_push($this->openAPINullablesSetToNull, 'costCentre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentre'] = $costCentre;

        return $this;
    }

    /**
     * Gets costCentreId
     *
     * @return string|null
     */
    public function getCostCentreId(): ?string
    {
        return $this->container['costCentreId'];
    }

    /**
     * Sets costCentreId
     *
     * @param string|null $costCentreId CostCentre uniqueId which we want to override in the payline.
     *
     * @return $this
     */
    public function setCostCentreId(?string $costCentreId): static
    {
        if (is_null($costCentreId)) {
            array_push($this->openAPINullablesSetToNull, 'costCentreId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentreId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentreId'] = $costCentreId;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment(): ?string
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department code which we want to override in the payline.
     *
     * @return $this
     */
    public function setDepartment(?string $department): static
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets departmentId
     *
     * @return string|null
     */
    public function getDepartmentId(): ?string
    {
        return $this->container['departmentId'];
    }

    /**
     * Sets departmentId
     *
     * @param string|null $departmentId Department uniqueId which we want to override in the payline.
     *
     * @return $this
     */
    public function setDepartmentId(?string $departmentId): static
    {
        if (is_null($departmentId)) {
            array_push($this->openAPINullablesSetToNull, 'departmentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departmentId'] = $departmentId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description to accompany this line. It will be displayed on the payslip.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets earnedFrom
     *
     * @return \DateTime|null
     */
    public function getEarnedFrom(): ?\DateTime
    {
        return $this->container['earnedFrom'];
    }

    /**
     * Sets earnedFrom
     *
     * @param \DateTime|null $earnedFrom The earned from date.
     *
     * @return $this
     */
    public function setEarnedFrom(?\DateTime $earnedFrom): static
    {
        if (is_null($earnedFrom)) {
            array_push($this->openAPINullablesSetToNull, 'earnedFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('earnedFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['earnedFrom'] = $earnedFrom;

        return $this;
    }

    /**
     * Gets earnedTo
     *
     * @return \DateTime|null
     */
    public function getEarnedTo(): ?\DateTime
    {
        return $this->container['earnedTo'];
    }

    /**
     * Sets earnedTo
     *
     * @param \DateTime|null $earnedTo The earned to date.
     *
     * @return $this
     */
    public function setEarnedTo(?\DateTime $earnedTo): static
    {
        if (is_null($earnedTo)) {
            array_push($this->openAPINullablesSetToNull, 'earnedTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('earnedTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['earnedTo'] = $earnedTo;

        return $this;
    }

    /**
     * Gets effectiveFrom
     *
     * @return \DateTime|null
     */
    public function getEffectiveFrom(): ?\DateTime
    {
        return $this->container['effectiveFrom'];
    }

    /**
     * Sets effectiveFrom
     *
     * @param \DateTime|null $effectiveFrom The date the payline starts being calculated in the payrun.
     *
     * @return $this
     */
    public function setEffectiveFrom(?\DateTime $effectiveFrom): static
    {
        if (is_null($effectiveFrom)) {
            array_push($this->openAPINullablesSetToNull, 'effectiveFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effectiveFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effectiveFrom'] = $effectiveFrom;

        return $this;
    }

    /**
     * Gets effectiveTo
     *
     * @return \DateTime|null
     */
    public function getEffectiveTo(): ?\DateTime
    {
        return $this->container['effectiveTo'];
    }

    /**
     * Sets effectiveTo
     *
     * @param \DateTime|null $effectiveTo The date the payline stops being calculated in the payrun.
     *
     * @return $this
     */
    public function setEffectiveTo(?\DateTime $effectiveTo): static
    {
        if (is_null($effectiveTo)) {
            array_push($this->openAPINullablesSetToNull, 'effectiveTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effectiveTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effectiveTo'] = $effectiveTo;

        return $this;
    }

    /**
     * Gets employeeRoleReference
     *
     * @return string|null
     */
    public function getEmployeeRoleReference(): ?string
    {
        return $this->container['employeeRoleReference'];
    }

    /**
     * Sets employeeRoleReference
     *
     * @param string|null $employeeRoleReference The employee role reference.
     *
     * @return $this
     */
    public function setEmployeeRoleReference(?string $employeeRoleReference): static
    {
        if (is_null($employeeRoleReference)) {
            array_push($this->openAPINullablesSetToNull, 'employeeRoleReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeRoleReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeRoleReference'] = $employeeRoleReference;

        return $this;
    }

    /**
     * Gets fullTimeAnnualValue
     *
     * @return float|null
     */
    public function getFullTimeAnnualValue(): ?float
    {
        return $this->container['fullTimeAnnualValue'];
    }

    /**
     * Sets fullTimeAnnualValue
     *
     * @param float|null $fullTimeAnnualValue Used to set the Full Time Annual Value for the payline.
     *
     * @return $this
     */
    public function setFullTimeAnnualValue(?float $fullTimeAnnualValue): static
    {
        if (is_null($fullTimeAnnualValue)) {
            throw new InvalidArgumentException('non-nullable fullTimeAnnualValue cannot be null');
        }
        $this->container['fullTimeAnnualValue'] = $fullTimeAnnualValue;

        return $this;
    }

    /**
     * Gets ignoreInitialBackPay
     *
     * @return bool|null
     */
    public function getIgnoreInitialBackPay(): ?bool
    {
        return $this->container['ignoreInitialBackPay'];
    }

    /**
     * Sets ignoreInitialBackPay
     *
     * @param bool|null $ignoreInitialBackPay Skip the automatic backpay calculation on the first pay run, if the addition/deduction had been paid outside of Staffology.  If set to false, the automatic backpay calculation will be performed on the first pay run.
     *
     * @return $this
     */
    public function setIgnoreInitialBackPay(?bool $ignoreInitialBackPay): static
    {
        if (is_null($ignoreInitialBackPay)) {
            throw new InvalidArgumentException('non-nullable ignoreInitialBackPay cannot be null');
        }
        $this->container['ignoreInitialBackPay'] = $ignoreInitialBackPay;

        return $this;
    }

    /**
     * Gets isAutoGeneratedBasicPayLine
     *
     * @return bool|null
     */
    public function getIsAutoGeneratedBasicPayLine(): ?bool
    {
        return $this->container['isAutoGeneratedBasicPayLine'];
    }

    /**
     * Sets isAutoGeneratedBasicPayLine
     *
     * @param bool|null $isAutoGeneratedBasicPayLine If the PayLine is an auto-generated basic payline.
     *
     * @return $this
     */
    public function setIsAutoGeneratedBasicPayLine(?bool $isAutoGeneratedBasicPayLine): static
    {
        if (is_null($isAutoGeneratedBasicPayLine)) {
            throw new InvalidArgumentException('non-nullable isAutoGeneratedBasicPayLine cannot be null');
        }
        $this->container['isAutoGeneratedBasicPayLine'] = $isAutoGeneratedBasicPayLine;

        return $this;
    }

    /**
     * Gets isAutomaticBackPay
     *
     * @return bool|null
     */
    public function getIsAutomaticBackPay(): ?bool
    {
        return $this->container['isAutomaticBackPay'];
    }

    /**
     * Sets isAutomaticBackPay
     *
     * @param bool|null $isAutomaticBackPay Automatically calculate backpay and add or modify the necessary pay lines for this addition/deduction when a pay run is created.  Applicable only to employee level addition/deduction pay lines.  If set to false then you must manually handle the calculation and adding of backpay lines.
     *
     * @return $this
     */
    public function setIsAutomaticBackPay(?bool $isAutomaticBackPay): static
    {
        if (is_null($isAutomaticBackPay)) {
            throw new InvalidArgumentException('non-nullable isAutomaticBackPay cannot be null');
        }
        $this->container['isAutomaticBackPay'] = $isAutomaticBackPay;

        return $this;
    }

    /**
     * Gets isNetToGross
     *
     * @return bool|null
     */
    public function getIsNetToGross(): ?bool
    {
        return $this->container['isNetToGross'];
    }

    /**
     * Sets isNetToGross
     *
     * @param bool|null $isNetToGross If the PayLine is a fixed amount addition without multiplier then this property may be set to true so that the amount of the addition to be considered a take home pay target.
     *
     * @return $this
     */
    public function setIsNetToGross(?bool $isNetToGross): static
    {
        if (is_null($isNetToGross)) {
            throw new InvalidArgumentException('non-nullable isNetToGross cannot be null');
        }
        $this->container['isNetToGross'] = $isNetToGross;

        return $this;
    }

    /**
     * Gets isZeroHoursTeachersBackPayLine
     *
     * @return bool|null
     */
    public function getIsZeroHoursTeachersBackPayLine(): ?bool
    {
        return $this->container['isZeroHoursTeachersBackPayLine'];
    }

    /**
     * Sets isZeroHoursTeachersBackPayLine
     *
     * @param bool|null $isZeroHoursTeachersBackPayLine If the PayLine is a zero-hours teachers back-pay line.
     *
     * @return $this
     */
    public function setIsZeroHoursTeachersBackPayLine(?bool $isZeroHoursTeachersBackPayLine): static
    {
        if (is_null($isZeroHoursTeachersBackPayLine)) {
            throw new InvalidArgumentException('non-nullable isZeroHoursTeachersBackPayLine cannot be null');
        }
        $this->container['isZeroHoursTeachersBackPayLine'] = $isZeroHoursTeachersBackPayLine;

        return $this;
    }

    /**
     * Gets londonAllowanceId
     *
     * @return int|null
     */
    public function getLondonAllowanceId(): ?int
    {
        return $this->container['londonAllowanceId'];
    }

    /**
     * Sets londonAllowanceId
     *
     * @param int|null $londonAllowanceId Used to set London allowance id for payline.
     *
     * @return $this
     */
    public function setLondonAllowanceId(?int $londonAllowanceId): static
    {
        if (is_null($londonAllowanceId)) {
            array_push($this->openAPINullablesSetToNull, 'londonAllowanceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('londonAllowanceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['londonAllowanceId'] = $londonAllowanceId;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return float|null
     */
    public function getMultiplier(): ?float
    {
        return $this->container['multiplier'];
    }

    /**
     * Sets multiplier
     *
     * @param float|null $multiplier If the related PayCode has a MultiplierType other than None then this field will be used as number of days or hours.
     *
     * @return $this
     */
    public function setMultiplier(?float $multiplier): static
    {
        if (is_null($multiplier)) {
            array_push($this->openAPINullablesSetToNull, 'multiplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('multiplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets netToGrossDiscrepancy
     *
     * @return float|null
     */
    public function getNetToGrossDiscrepancy(): ?float
    {
        return $this->container['netToGrossDiscrepancy'];
    }

    /**
     * Sets netToGrossDiscrepancy
     *
     * @param float|null $netToGrossDiscrepancy The discrepancy between the targeted and the calculated grossed up value during a net to gross calculation.
     *
     * @return $this
     */
    public function setNetToGrossDiscrepancy(?float $netToGrossDiscrepancy): static
    {
        if (is_null($netToGrossDiscrepancy)) {
            array_push($this->openAPINullablesSetToNull, 'netToGrossDiscrepancy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netToGrossDiscrepancy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netToGrossDiscrepancy'] = $netToGrossDiscrepancy;

        return $this;
    }

    /**
     * Gets payGrade
     *
     * @return string|null
     */
    public function getPayGrade(): ?string
    {
        return $this->container['payGrade'];
    }

    /**
     * Sets payGrade
     *
     * @param string|null $payGrade PayGrade for imported pay lines
     *
     * @return $this
     */
    public function setPayGrade(?string $payGrade): static
    {
        if (is_null($payGrade)) {
            array_push($this->openAPINullablesSetToNull, 'payGrade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payGrade', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payGrade'] = $payGrade;

        return $this;
    }

    /**
     * Gets paySpine
     *
     * @return string|null
     */
    public function getPaySpine(): ?string
    {
        return $this->container['paySpine'];
    }

    /**
     * Sets paySpine
     *
     * @param string|null $paySpine PaySpine for imported pay lines
     *
     * @return $this
     */
    public function setPaySpine(?string $paySpine): static
    {
        if (is_null($paySpine)) {
            array_push($this->openAPINullablesSetToNull, 'paySpine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paySpine', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paySpine'] = $paySpine;

        return $this;
    }

    /**
     * Gets paySpineGradeId
     *
     * @return string|null
     */
    public function getPaySpineGradeId(): ?string
    {
        return $this->container['paySpineGradeId'];
    }

    /**
     * Sets paySpineGradeId
     *
     * @param string|null $paySpineGradeId The Id of the associated pay spine grade.
     *
     * @return $this
     */
    public function setPaySpineGradeId(?string $paySpineGradeId): static
    {
        if (is_null($paySpineGradeId)) {
            array_push($this->openAPINullablesSetToNull, 'paySpineGradeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paySpineGradeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paySpineGradeId'] = $paySpineGradeId;

        return $this;
    }

    /**
     * Gets paySpineId
     *
     * @return string|null
     */
    public function getPaySpineId(): ?string
    {
        return $this->container['paySpineId'];
    }

    /**
     * Sets paySpineId
     *
     * @param string|null $paySpineId The Id of the associated pay spine.
     *
     * @return $this
     */
    public function setPaySpineId(?string $paySpineId): static
    {
        if (is_null($paySpineId)) {
            array_push($this->openAPINullablesSetToNull, 'paySpineId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paySpineId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paySpineId'] = $paySpineId;

        return $this;
    }

    /**
     * Gets percentageOfEffectiveDays
     *
     * @return float|null
     */
    public function getPercentageOfEffectiveDays(): ?float
    {
        return $this->container['percentageOfEffectiveDays'];
    }

    /**
     * Sets percentageOfEffectiveDays
     *
     * @param float|null $percentageOfEffectiveDays The percentage of working days the effective dates span for pro-rata values, calculated and set during each payrun.
     *
     * @return $this
     */
    public function setPercentageOfEffectiveDays(?float $percentageOfEffectiveDays): static
    {
        if (is_null($percentageOfEffectiveDays)) {
            array_push($this->openAPINullablesSetToNull, 'percentageOfEffectiveDays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percentageOfEffectiveDays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percentageOfEffectiveDays'] = $percentageOfEffectiveDays;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate(): ?float
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate If the related PayCode has a MultiplierType other than None then this field will be used as the rate per day or hour. Otherwise it isn't used.
     *
     * @return $this
     */
    public function setRate(?float $rate): static
    {
        if (is_null($rate)) {
            array_push($this->openAPINullablesSetToNull, 'rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets roleId
     *
     * @return string|null
     */
    public function getRoleId(): ?string
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId
     *
     * @param string|null $roleId The employee role which is associated with this pay line.  If set to null, the pay line is not related with a role.
     *
     * @return $this
     */
    public function setRoleId(?string $roleId): static
    {
        if (is_null($roleId)) {
            array_push($this->openAPINullablesSetToNull, 'roleId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets spinePoint
     *
     * @return string|null
     */
    public function getSpinePoint(): ?string
    {
        return $this->container['spinePoint'];
    }

    /**
     * Sets spinePoint
     *
     * @param string|null $spinePoint SpinePoint for imported pay lines
     *
     * @return $this
     */
    public function setSpinePoint(?string $spinePoint): static
    {
        if (is_null($spinePoint)) {
            array_push($this->openAPINullablesSetToNull, 'spinePoint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spinePoint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spinePoint'] = $spinePoint;

        return $this;
    }

    /**
     * Gets spinalPointId
     *
     * @return string|null
     */
    public function getSpinalPointId(): ?string
    {
        return $this->container['spinalPointId'];
    }

    /**
     * Sets spinalPointId
     *
     * @param string|null $spinalPointId The Id of the associated spinal point.
     *
     * @return $this
     */
    public function setSpinalPointId(?string $spinalPointId): static
    {
        if (is_null($spinalPointId)) {
            array_push($this->openAPINullablesSetToNull, 'spinalPointId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spinalPointId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spinalPointId'] = $spinalPointId;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Tags related to this line.
     *
     * @return $this
     */
    public function setTags(?array $tags): static
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets targetNetToGrossValue
     *
     * @return float|null
     */
    public function getTargetNetToGrossValue(): ?float
    {
        return $this->container['targetNetToGrossValue'];
    }

    /**
     * Sets targetNetToGrossValue
     *
     * @param float|null $targetNetToGrossValue The orginal net fixed addition amount that is considered to be a take home pay target.
     *
     * @return $this
     */
    public function setTargetNetToGrossValue(?float $targetNetToGrossValue): static
    {
        if (is_null($targetNetToGrossValue)) {
            array_push($this->openAPINullablesSetToNull, 'targetNetToGrossValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetNetToGrossValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetNetToGrossValue'] = $targetNetToGrossValue;

        return $this;
    }

    /**
     * Gets totalPaidDays
     *
     * @return float|null
     */
    public function getTotalPaidDays(): ?float
    {
        return $this->container['totalPaidDays'];
    }

    /**
     * Sets totalPaidDays
     *
     * @param float|null $totalPaidDays The total paid days.
     *
     * @return $this
     */
    public function setTotalPaidDays(?float $totalPaidDays): static
    {
        if (is_null($totalPaidDays)) {
            array_push($this->openAPINullablesSetToNull, 'totalPaidDays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalPaidDays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalPaidDays'] = $totalPaidDays;

        return $this;
    }

    /**
     * Gets totalWorkingDays
     *
     * @return float|null
     */
    public function getTotalWorkingDays(): ?float
    {
        return $this->container['totalWorkingDays'];
    }

    /**
     * Sets totalWorkingDays
     *
     * @param float|null $totalWorkingDays The total working days.
     *
     * @return $this
     */
    public function setTotalWorkingDays(?float $totalWorkingDays): static
    {
        if (is_null($totalWorkingDays)) {
            array_push($this->openAPINullablesSetToNull, 'totalWorkingDays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalWorkingDays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalWorkingDays'] = $totalWorkingDays;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value The amount to add or deduct (whether it is a deduction or addition depends on the PayCode used).  If the PayCode has a CalculationType other than FixedAmount then this field will be a percentage.  If the PayCode has a MultiplierType other than None then this field will be readonly and automatically calculated.
     *
     * @return $this
     */
    public function setValue(?float $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


