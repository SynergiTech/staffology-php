<?php
/**
 * P11NiAndStatPaymentsLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * P11NiAndStatPaymentsLine Class Doc Comment
 *
 * @description Lines for the NI Contributions and Statutory Payments table in the P11 Detailed Report
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class P11NiAndStatPaymentsLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'P11NiAndStatPaymentsLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'date' => '\DateTime',
        'period' => 'string',
        'monthNumber' => 'string',
        'weekNumber' => 'string',
        'smp' => 'float',
        'spp' => 'float',
        'sap' => 'float',
        'shpp' => 'float',
        'ssp' => 'float',
        'spbp' => 'float',
        'class1a' => 'float',
        'niValues' => '\SynergiTech\Staffology\Model\P11DetailedNiValues',
        'taxCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'date' => 'date',
        'period' => null,
        'monthNumber' => null,
        'weekNumber' => null,
        'smp' => 'double',
        'spp' => 'double',
        'sap' => 'double',
        'shpp' => 'double',
        'ssp' => 'double',
        'spbp' => 'double',
        'class1a' => 'double',
        'niValues' => null,
        'taxCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'date' => false,
        'period' => true,
        'monthNumber' => true,
        'weekNumber' => true,
        'smp' => false,
        'spp' => false,
        'sap' => false,
        'shpp' => false,
        'ssp' => false,
        'spbp' => false,
        'class1a' => false,
        'niValues' => false,
        'taxCode' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'date' => 'date',
        'period' => 'period',
        'monthNumber' => 'monthNumber',
        'weekNumber' => 'weekNumber',
        'smp' => 'smp',
        'spp' => 'spp',
        'sap' => 'sap',
        'shpp' => 'shpp',
        'ssp' => 'ssp',
        'spbp' => 'spbp',
        'class1a' => 'class1a',
        'niValues' => 'niValues',
        'taxCode' => 'taxCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'date' => 'setDate',
        'period' => 'setPeriod',
        'monthNumber' => 'setMonthNumber',
        'weekNumber' => 'setWeekNumber',
        'smp' => 'setSmp',
        'spp' => 'setSpp',
        'sap' => 'setSap',
        'shpp' => 'setShpp',
        'ssp' => 'setSsp',
        'spbp' => 'setSpbp',
        'class1a' => 'setClass1a',
        'niValues' => 'setNiValues',
        'taxCode' => 'setTaxCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'date' => 'getDate',
        'period' => 'getPeriod',
        'monthNumber' => 'getMonthNumber',
        'weekNumber' => 'getWeekNumber',
        'smp' => 'getSmp',
        'spp' => 'getSpp',
        'sap' => 'getSap',
        'shpp' => 'getShpp',
        'ssp' => 'getSsp',
        'spbp' => 'getSpbp',
        'class1a' => 'getClass1a',
        'niValues' => 'getNiValues',
        'taxCode' => 'getTaxCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('monthNumber', $data ?? [], null);
        $this->setIfExists('weekNumber', $data ?? [], null);
        $this->setIfExists('smp', $data ?? [], null);
        $this->setIfExists('spp', $data ?? [], null);
        $this->setIfExists('sap', $data ?? [], null);
        $this->setIfExists('shpp', $data ?? [], null);
        $this->setIfExists('ssp', $data ?? [], null);
        $this->setIfExists('spbp', $data ?? [], null);
        $this->setIfExists('class1a', $data ?? [], null);
        $this->setIfExists('niValues', $data ?? [], null);
        $this->setIfExists('taxCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date [readonly]
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod(): ?string
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period [readonly]
     *
     * @return $this
     */
    public function setPeriod(?string $period): static
    {
        if (is_null($period)) {
            array_push($this->openAPINullablesSetToNull, 'period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets monthNumber
     *
     * @return string|null
     */
    public function getMonthNumber(): ?string
    {
        return $this->container['monthNumber'];
    }

    /**
     * Sets monthNumber
     *
     * @param string|null $monthNumber [readonly]
     *
     * @return $this
     */
    public function setMonthNumber(?string $monthNumber): static
    {
        if (is_null($monthNumber)) {
            array_push($this->openAPINullablesSetToNull, 'monthNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthNumber'] = $monthNumber;

        return $this;
    }

    /**
     * Gets weekNumber
     *
     * @return string|null
     */
    public function getWeekNumber(): ?string
    {
        return $this->container['weekNumber'];
    }

    /**
     * Sets weekNumber
     *
     * @param string|null $weekNumber [readonly]
     *
     * @return $this
     */
    public function setWeekNumber(?string $weekNumber): static
    {
        if (is_null($weekNumber)) {
            array_push($this->openAPINullablesSetToNull, 'weekNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weekNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weekNumber'] = $weekNumber;

        return $this;
    }

    /**
     * Gets smp
     *
     * @return float|null
     */
    public function getSmp(): ?float
    {
        return $this->container['smp'];
    }

    /**
     * Sets smp
     *
     * @param float|null $smp [readonly]
     *
     * @return $this
     */
    public function setSmp(?float $smp): static
    {
        if (is_null($smp)) {
            throw new InvalidArgumentException('non-nullable smp cannot be null');
        }
        $this->container['smp'] = $smp;

        return $this;
    }

    /**
     * Gets spp
     *
     * @return float|null
     */
    public function getSpp(): ?float
    {
        return $this->container['spp'];
    }

    /**
     * Sets spp
     *
     * @param float|null $spp [readonly]
     *
     * @return $this
     */
    public function setSpp(?float $spp): static
    {
        if (is_null($spp)) {
            throw new InvalidArgumentException('non-nullable spp cannot be null');
        }
        $this->container['spp'] = $spp;

        return $this;
    }

    /**
     * Gets sap
     *
     * @return float|null
     */
    public function getSap(): ?float
    {
        return $this->container['sap'];
    }

    /**
     * Sets sap
     *
     * @param float|null $sap [readonly]
     *
     * @return $this
     */
    public function setSap(?float $sap): static
    {
        if (is_null($sap)) {
            throw new InvalidArgumentException('non-nullable sap cannot be null');
        }
        $this->container['sap'] = $sap;

        return $this;
    }

    /**
     * Gets shpp
     *
     * @return float|null
     */
    public function getShpp(): ?float
    {
        return $this->container['shpp'];
    }

    /**
     * Sets shpp
     *
     * @param float|null $shpp [readonly]
     *
     * @return $this
     */
    public function setShpp(?float $shpp): static
    {
        if (is_null($shpp)) {
            throw new InvalidArgumentException('non-nullable shpp cannot be null');
        }
        $this->container['shpp'] = $shpp;

        return $this;
    }

    /**
     * Gets ssp
     *
     * @return float|null
     */
    public function getSsp(): ?float
    {
        return $this->container['ssp'];
    }

    /**
     * Sets ssp
     *
     * @param float|null $ssp [readonly]
     *
     * @return $this
     */
    public function setSsp(?float $ssp): static
    {
        if (is_null($ssp)) {
            throw new InvalidArgumentException('non-nullable ssp cannot be null');
        }
        $this->container['ssp'] = $ssp;

        return $this;
    }

    /**
     * Gets spbp
     *
     * @return float|null
     */
    public function getSpbp(): ?float
    {
        return $this->container['spbp'];
    }

    /**
     * Sets spbp
     *
     * @param float|null $spbp [readonly]
     *
     * @return $this
     */
    public function setSpbp(?float $spbp): static
    {
        if (is_null($spbp)) {
            throw new InvalidArgumentException('non-nullable spbp cannot be null');
        }
        $this->container['spbp'] = $spbp;

        return $this;
    }

    /**
     * Gets class1a
     *
     * @return float|null
     */
    public function getClass1a(): ?float
    {
        return $this->container['class1a'];
    }

    /**
     * Sets class1a
     *
     * @param float|null $class1a [readonly]
     *
     * @return $this
     */
    public function setClass1a(?float $class1a): static
    {
        if (is_null($class1a)) {
            throw new InvalidArgumentException('non-nullable class1a cannot be null');
        }
        $this->container['class1a'] = $class1a;

        return $this;
    }

    /**
     * Gets niValues
     *
     * @return \SynergiTech\Staffology\Model\P11DetailedNiValues|null
     */
    public function getNiValues(): ?\SynergiTech\Staffology\Model\P11DetailedNiValues
    {
        return $this->container['niValues'];
    }

    /**
     * Sets niValues
     *
     * @param \SynergiTech\Staffology\Model\P11DetailedNiValues|null $niValues niValues
     *
     * @return $this
     */
    public function setNiValues(?\SynergiTech\Staffology\Model\P11DetailedNiValues $niValues): static
    {
        if (is_null($niValues)) {
            throw new InvalidArgumentException('non-nullable niValues cannot be null');
        }
        $this->container['niValues'] = $niValues;

        return $this;
    }

    /**
     * Gets taxCode
     *
     * @return string|null
     */
    public function getTaxCode(): ?string
    {
        return $this->container['taxCode'];
    }

    /**
     * Sets taxCode
     *
     * @param string|null $taxCode [readonly]
     *
     * @return $this
     */
    public function setTaxCode(?string $taxCode): static
    {
        if (is_null($taxCode)) {
            array_push($this->openAPINullablesSetToNull, 'taxCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCode'] = $taxCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


