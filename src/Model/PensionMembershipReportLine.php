<?php
/**
 * PensionMembershipReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PensionMembershipReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PensionMembershipReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PensionMembershipReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'payrollCode' => 'string',
        'pensionScheme' => 'string',
        'workerGroup' => 'string',
        'joinDate' => 'string',
        'joinReason' => '\SynergiTech\Staffology\Model\PensionJoinReason',
        'isPensionJoinerActionReported' => 'bool',
        'endDate' => 'string',
        'endReason' => '\SynergiTech\Staffology\Model\PensionEndReason',
        'isPensionLeaverActionReported' => 'bool',
        'aeStatusAtJoining' => '\SynergiTech\Staffology\Model\AeStatus',
        'roleRefs' => 'string',
        'pensionEmployeeContribution' => 'float',
        'isEmployeeContributionPercentage' => 'bool',
        'pensionTiers' => 'string',
        'pensionAVCContribution' => 'float',
        'isAvcPercentage' => 'bool',
        'pensionEmployerContribution' => 'float',
        'isEmployerContributionPercentage' => 'bool',
        'pensionMembershipNo' => 'string',
        'mcrRoleID1' => 'string',
        'mcrRoleID2' => 'string',
        'isHalfContributionMember' => 'bool',
        'tpAdminNino' => 'string',
        'pensionableEarningsYTD' => 'float',
        'pensionablePayYTD' => 'float',
        'employeePensionYTD' => 'float',
        'avcPensionYTD' => 'float',
        'employerPensionYTD' => 'float',
        'assumedPensionablePayYTD' => 'float',
        'reasonForLeaving' => 'string',
        'pensionId' => 'string',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'department' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'payrollCode' => null,
        'pensionScheme' => null,
        'workerGroup' => null,
        'joinDate' => null,
        'joinReason' => null,
        'isPensionJoinerActionReported' => null,
        'endDate' => null,
        'endReason' => null,
        'isPensionLeaverActionReported' => null,
        'aeStatusAtJoining' => null,
        'roleRefs' => null,
        'pensionEmployeeContribution' => 'double',
        'isEmployeeContributionPercentage' => null,
        'pensionTiers' => null,
        'pensionAVCContribution' => 'double',
        'isAvcPercentage' => null,
        'pensionEmployerContribution' => 'double',
        'isEmployerContributionPercentage' => null,
        'pensionMembershipNo' => null,
        'mcrRoleID1' => null,
        'mcrRoleID2' => null,
        'isHalfContributionMember' => null,
        'tpAdminNino' => null,
        'pensionableEarningsYTD' => 'double',
        'pensionablePayYTD' => 'double',
        'employeePensionYTD' => 'double',
        'avcPensionYTD' => 'double',
        'employerPensionYTD' => 'double',
        'assumedPensionablePayYTD' => 'double',
        'reasonForLeaving' => null,
        'pensionId' => 'uuid',
        'employee' => null,
        'department' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'payrollCode' => true,
        'pensionScheme' => true,
        'workerGroup' => true,
        'joinDate' => true,
        'joinReason' => false,
        'isPensionJoinerActionReported' => false,
        'endDate' => true,
        'endReason' => false,
        'isPensionLeaverActionReported' => true,
        'aeStatusAtJoining' => false,
        'roleRefs' => true,
        'pensionEmployeeContribution' => true,
        'isEmployeeContributionPercentage' => false,
        'pensionTiers' => true,
        'pensionAVCContribution' => true,
        'isAvcPercentage' => false,
        'pensionEmployerContribution' => true,
        'isEmployerContributionPercentage' => false,
        'pensionMembershipNo' => true,
        'mcrRoleID1' => true,
        'mcrRoleID2' => true,
        'isHalfContributionMember' => true,
        'tpAdminNino' => true,
        'pensionableEarningsYTD' => true,
        'pensionablePayYTD' => true,
        'employeePensionYTD' => true,
        'avcPensionYTD' => true,
        'employerPensionYTD' => true,
        'assumedPensionablePayYTD' => true,
        'reasonForLeaving' => true,
        'pensionId' => false,
        'employee' => false,
        'department' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'payrollCode' => 'payrollCode',
        'pensionScheme' => 'pensionScheme',
        'workerGroup' => 'workerGroup',
        'joinDate' => 'joinDate',
        'joinReason' => 'joinReason',
        'isPensionJoinerActionReported' => 'isPensionJoinerActionReported',
        'endDate' => 'endDate',
        'endReason' => 'endReason',
        'isPensionLeaverActionReported' => 'isPensionLeaverActionReported',
        'aeStatusAtJoining' => 'aeStatusAtJoining',
        'roleRefs' => 'roleRefs',
        'pensionEmployeeContribution' => 'pensionEmployeeContribution',
        'isEmployeeContributionPercentage' => 'isEmployeeContributionPercentage',
        'pensionTiers' => 'pensionTiers',
        'pensionAVCContribution' => 'pensionAVCContribution',
        'isAvcPercentage' => 'isAvcPercentage',
        'pensionEmployerContribution' => 'pensionEmployerContribution',
        'isEmployerContributionPercentage' => 'isEmployerContributionPercentage',
        'pensionMembershipNo' => 'pensionMembershipNo',
        'mcrRoleID1' => 'mcrRoleID1',
        'mcrRoleID2' => 'mcrRoleID2',
        'isHalfContributionMember' => 'isHalfContributionMember',
        'tpAdminNino' => 'tpAdminNino',
        'pensionableEarningsYTD' => 'pensionableEarningsYTD',
        'pensionablePayYTD' => 'pensionablePayYTD',
        'employeePensionYTD' => 'employeePensionYTD',
        'avcPensionYTD' => 'avcPensionYTD',
        'employerPensionYTD' => 'employerPensionYTD',
        'assumedPensionablePayYTD' => 'assumedPensionablePayYTD',
        'reasonForLeaving' => 'reasonForLeaving',
        'pensionId' => 'pensionId',
        'employee' => 'employee',
        'department' => 'department'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'payrollCode' => 'setPayrollCode',
        'pensionScheme' => 'setPensionScheme',
        'workerGroup' => 'setWorkerGroup',
        'joinDate' => 'setJoinDate',
        'joinReason' => 'setJoinReason',
        'isPensionJoinerActionReported' => 'setIsPensionJoinerActionReported',
        'endDate' => 'setEndDate',
        'endReason' => 'setEndReason',
        'isPensionLeaverActionReported' => 'setIsPensionLeaverActionReported',
        'aeStatusAtJoining' => 'setAeStatusAtJoining',
        'roleRefs' => 'setRoleRefs',
        'pensionEmployeeContribution' => 'setPensionEmployeeContribution',
        'isEmployeeContributionPercentage' => 'setIsEmployeeContributionPercentage',
        'pensionTiers' => 'setPensionTiers',
        'pensionAVCContribution' => 'setPensionAVCContribution',
        'isAvcPercentage' => 'setIsAvcPercentage',
        'pensionEmployerContribution' => 'setPensionEmployerContribution',
        'isEmployerContributionPercentage' => 'setIsEmployerContributionPercentage',
        'pensionMembershipNo' => 'setPensionMembershipNo',
        'mcrRoleID1' => 'setMcrRoleID1',
        'mcrRoleID2' => 'setMcrRoleID2',
        'isHalfContributionMember' => 'setIsHalfContributionMember',
        'tpAdminNino' => 'setTpAdminNino',
        'pensionableEarningsYTD' => 'setPensionableEarningsYTD',
        'pensionablePayYTD' => 'setPensionablePayYTD',
        'employeePensionYTD' => 'setEmployeePensionYTD',
        'avcPensionYTD' => 'setAvcPensionYTD',
        'employerPensionYTD' => 'setEmployerPensionYTD',
        'assumedPensionablePayYTD' => 'setAssumedPensionablePayYTD',
        'reasonForLeaving' => 'setReasonForLeaving',
        'pensionId' => 'setPensionId',
        'employee' => 'setEmployee',
        'department' => 'setDepartment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'payrollCode' => 'getPayrollCode',
        'pensionScheme' => 'getPensionScheme',
        'workerGroup' => 'getWorkerGroup',
        'joinDate' => 'getJoinDate',
        'joinReason' => 'getJoinReason',
        'isPensionJoinerActionReported' => 'getIsPensionJoinerActionReported',
        'endDate' => 'getEndDate',
        'endReason' => 'getEndReason',
        'isPensionLeaverActionReported' => 'getIsPensionLeaverActionReported',
        'aeStatusAtJoining' => 'getAeStatusAtJoining',
        'roleRefs' => 'getRoleRefs',
        'pensionEmployeeContribution' => 'getPensionEmployeeContribution',
        'isEmployeeContributionPercentage' => 'getIsEmployeeContributionPercentage',
        'pensionTiers' => 'getPensionTiers',
        'pensionAVCContribution' => 'getPensionAVCContribution',
        'isAvcPercentage' => 'getIsAvcPercentage',
        'pensionEmployerContribution' => 'getPensionEmployerContribution',
        'isEmployerContributionPercentage' => 'getIsEmployerContributionPercentage',
        'pensionMembershipNo' => 'getPensionMembershipNo',
        'mcrRoleID1' => 'getMcrRoleID1',
        'mcrRoleID2' => 'getMcrRoleID2',
        'isHalfContributionMember' => 'getIsHalfContributionMember',
        'tpAdminNino' => 'getTpAdminNino',
        'pensionableEarningsYTD' => 'getPensionableEarningsYTD',
        'pensionablePayYTD' => 'getPensionablePayYTD',
        'employeePensionYTD' => 'getEmployeePensionYTD',
        'avcPensionYTD' => 'getAvcPensionYTD',
        'employerPensionYTD' => 'getEmployerPensionYTD',
        'assumedPensionablePayYTD' => 'getAssumedPensionablePayYTD',
        'reasonForLeaving' => 'getReasonForLeaving',
        'pensionId' => 'getPensionId',
        'employee' => 'getEmployee',
        'department' => 'getDepartment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('pensionScheme', $data ?? [], null);
        $this->setIfExists('workerGroup', $data ?? [], null);
        $this->setIfExists('joinDate', $data ?? [], null);
        $this->setIfExists('joinReason', $data ?? [], null);
        $this->setIfExists('isPensionJoinerActionReported', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('endReason', $data ?? [], null);
        $this->setIfExists('isPensionLeaverActionReported', $data ?? [], null);
        $this->setIfExists('aeStatusAtJoining', $data ?? [], null);
        $this->setIfExists('roleRefs', $data ?? [], null);
        $this->setIfExists('pensionEmployeeContribution', $data ?? [], null);
        $this->setIfExists('isEmployeeContributionPercentage', $data ?? [], null);
        $this->setIfExists('pensionTiers', $data ?? [], null);
        $this->setIfExists('pensionAVCContribution', $data ?? [], null);
        $this->setIfExists('isAvcPercentage', $data ?? [], null);
        $this->setIfExists('pensionEmployerContribution', $data ?? [], null);
        $this->setIfExists('isEmployerContributionPercentage', $data ?? [], null);
        $this->setIfExists('pensionMembershipNo', $data ?? [], null);
        $this->setIfExists('mcrRoleID1', $data ?? [], null);
        $this->setIfExists('mcrRoleID2', $data ?? [], null);
        $this->setIfExists('isHalfContributionMember', $data ?? [], null);
        $this->setIfExists('tpAdminNino', $data ?? [], null);
        $this->setIfExists('pensionableEarningsYTD', $data ?? [], null);
        $this->setIfExists('pensionablePayYTD', $data ?? [], null);
        $this->setIfExists('employeePensionYTD', $data ?? [], null);
        $this->setIfExists('avcPensionYTD', $data ?? [], null);
        $this->setIfExists('employerPensionYTD', $data ?? [], null);
        $this->setIfExists('assumedPensionablePayYTD', $data ?? [], null);
        $this->setIfExists('reasonForLeaving', $data ?? [], null);
        $this->setIfExists('pensionId', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode Payroll code of the employee
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets pensionScheme
     *
     * @return string|null
     */
    public function getPensionScheme(): ?string
    {
        return $this->container['pensionScheme'];
    }

    /**
     * Sets pensionScheme
     *
     * @param string|null $pensionScheme Employee pension scheme
     *
     * @return $this
     */
    public function setPensionScheme(?string $pensionScheme): static
    {
        if (is_null($pensionScheme)) {
            array_push($this->openAPINullablesSetToNull, 'pensionScheme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionScheme', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionScheme'] = $pensionScheme;

        return $this;
    }

    /**
     * Gets workerGroup
     *
     * @return string|null
     */
    public function getWorkerGroup(): ?string
    {
        return $this->container['workerGroup'];
    }

    /**
     * Sets workerGroup
     *
     * @param string|null $workerGroup The WorkerGroup of the employee pension scheme
     *
     * @return $this
     */
    public function setWorkerGroup(?string $workerGroup): static
    {
        if (is_null($workerGroup)) {
            array_push($this->openAPINullablesSetToNull, 'workerGroup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workerGroup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workerGroup'] = $workerGroup;

        return $this;
    }

    /**
     * Gets joinDate
     *
     * @return string|null
     */
    public function getJoinDate(): ?string
    {
        return $this->container['joinDate'];
    }

    /**
     * Sets joinDate
     *
     * @param string|null $joinDate The Join Date of the employee
     *
     * @return $this
     */
    public function setJoinDate(?string $joinDate): static
    {
        if (is_null($joinDate)) {
            array_push($this->openAPINullablesSetToNull, 'joinDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('joinDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['joinDate'] = $joinDate;

        return $this;
    }

    /**
     * Gets joinReason
     *
     * @return \SynergiTech\Staffology\Model\PensionJoinReason|null
     */
    public function getJoinReason(): ?\SynergiTech\Staffology\Model\PensionJoinReason
    {
        return $this->container['joinReason'];
    }

    /**
     * Sets joinReason
     *
     * @param \SynergiTech\Staffology\Model\PensionJoinReason|null $joinReason joinReason
     *
     * @return $this
     */
    public function setJoinReason(?\SynergiTech\Staffology\Model\PensionJoinReason $joinReason): static
    {
        if (is_null($joinReason)) {
            throw new InvalidArgumentException('non-nullable joinReason cannot be null');
        }
        $this->container['joinReason'] = $joinReason;

        return $this;
    }

    /**
     * Gets isPensionJoinerActionReported
     *
     * @return bool|null
     */
    public function getIsPensionJoinerActionReported(): ?bool
    {
        return $this->container['isPensionJoinerActionReported'];
    }

    /**
     * Sets isPensionJoinerActionReported
     *
     * @param bool|null $isPensionJoinerActionReported Indicates whether the pension joiner  action is reported.
     *
     * @return $this
     */
    public function setIsPensionJoinerActionReported(?bool $isPensionJoinerActionReported): static
    {
        if (is_null($isPensionJoinerActionReported)) {
            throw new InvalidArgumentException('non-nullable isPensionJoinerActionReported cannot be null');
        }
        $this->container['isPensionJoinerActionReported'] = $isPensionJoinerActionReported;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string|null
     */
    public function getEndDate(): ?string
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string|null $endDate Pension End Date
     *
     * @return $this
     */
    public function setEndDate(?string $endDate): static
    {
        if (is_null($endDate)) {
            array_push($this->openAPINullablesSetToNull, 'endDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets endReason
     *
     * @return \SynergiTech\Staffology\Model\PensionEndReason|null
     */
    public function getEndReason(): ?\SynergiTech\Staffology\Model\PensionEndReason
    {
        return $this->container['endReason'];
    }

    /**
     * Sets endReason
     *
     * @param \SynergiTech\Staffology\Model\PensionEndReason|null $endReason endReason
     *
     * @return $this
     */
    public function setEndReason(?\SynergiTech\Staffology\Model\PensionEndReason $endReason): static
    {
        if (is_null($endReason)) {
            throw new InvalidArgumentException('non-nullable endReason cannot be null');
        }
        $this->container['endReason'] = $endReason;

        return $this;
    }

    /**
     * Gets isPensionLeaverActionReported
     *
     * @return bool|null
     */
    public function getIsPensionLeaverActionReported(): ?bool
    {
        return $this->container['isPensionLeaverActionReported'];
    }

    /**
     * Sets isPensionLeaverActionReported
     *
     * @param bool|null $isPensionLeaverActionReported Indicates whether the pension leaver  action is reported.
     *
     * @return $this
     */
    public function setIsPensionLeaverActionReported(?bool $isPensionLeaverActionReported): static
    {
        if (is_null($isPensionLeaverActionReported)) {
            array_push($this->openAPINullablesSetToNull, 'isPensionLeaverActionReported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isPensionLeaverActionReported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isPensionLeaverActionReported'] = $isPensionLeaverActionReported;

        return $this;
    }

    /**
     * Gets aeStatusAtJoining
     *
     * @return \SynergiTech\Staffology\Model\AeStatus|null
     */
    public function getAeStatusAtJoining(): ?\SynergiTech\Staffology\Model\AeStatus
    {
        return $this->container['aeStatusAtJoining'];
    }

    /**
     * Sets aeStatusAtJoining
     *
     * @param \SynergiTech\Staffology\Model\AeStatus|null $aeStatusAtJoining aeStatusAtJoining
     *
     * @return $this
     */
    public function setAeStatusAtJoining(?\SynergiTech\Staffology\Model\AeStatus $aeStatusAtJoining): static
    {
        if (is_null($aeStatusAtJoining)) {
            throw new InvalidArgumentException('non-nullable aeStatusAtJoining cannot be null');
        }
        $this->container['aeStatusAtJoining'] = $aeStatusAtJoining;

        return $this;
    }

    /**
     * Gets roleRefs
     *
     * @return string|null
     */
    public function getRoleRefs(): ?string
    {
        return $this->container['roleRefs'];
    }

    /**
     * Sets roleRefs
     *
     * @param string|null $roleRefs role references of employee
     *
     * @return $this
     */
    public function setRoleRefs(?string $roleRefs): static
    {
        if (is_null($roleRefs)) {
            array_push($this->openAPINullablesSetToNull, 'roleRefs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleRefs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleRefs'] = $roleRefs;

        return $this;
    }

    /**
     * Gets pensionEmployeeContribution
     *
     * @return float|null
     */
    public function getPensionEmployeeContribution(): ?float
    {
        return $this->container['pensionEmployeeContribution'];
    }

    /**
     * Sets pensionEmployeeContribution
     *
     * @param float|null $pensionEmployeeContribution Pension Employee Contribution
     *
     * @return $this
     */
    public function setPensionEmployeeContribution(?float $pensionEmployeeContribution): static
    {
        if (is_null($pensionEmployeeContribution)) {
            array_push($this->openAPINullablesSetToNull, 'pensionEmployeeContribution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionEmployeeContribution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionEmployeeContribution'] = $pensionEmployeeContribution;

        return $this;
    }

    /**
     * Gets isEmployeeContributionPercentage
     *
     * @return bool|null
     */
    public function getIsEmployeeContributionPercentage(): ?bool
    {
        return $this->container['isEmployeeContributionPercentage'];
    }

    /**
     * Sets isEmployeeContributionPercentage
     *
     * @param bool|null $isEmployeeContributionPercentage Indicates whether the EmployeeContribution is expressed as a percentage.
     *
     * @return $this
     */
    public function setIsEmployeeContributionPercentage(?bool $isEmployeeContributionPercentage): static
    {
        if (is_null($isEmployeeContributionPercentage)) {
            throw new InvalidArgumentException('non-nullable isEmployeeContributionPercentage cannot be null');
        }
        $this->container['isEmployeeContributionPercentage'] = $isEmployeeContributionPercentage;

        return $this;
    }

    /**
     * Gets pensionTiers
     *
     * @return string|null
     */
    public function getPensionTiers(): ?string
    {
        return $this->container['pensionTiers'];
    }

    /**
     * Sets pensionTiers
     *
     * @param string|null $pensionTiers Pension Tiers of the employee
     *
     * @return $this
     */
    public function setPensionTiers(?string $pensionTiers): static
    {
        if (is_null($pensionTiers)) {
            array_push($this->openAPINullablesSetToNull, 'pensionTiers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionTiers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionTiers'] = $pensionTiers;

        return $this;
    }

    /**
     * Gets pensionAVCContribution
     *
     * @return float|null
     */
    public function getPensionAVCContribution(): ?float
    {
        return $this->container['pensionAVCContribution'];
    }

    /**
     * Sets pensionAVCContribution
     *
     * @param float|null $pensionAVCContribution Pension AVC Contribution of employee
     *
     * @return $this
     */
    public function setPensionAVCContribution(?float $pensionAVCContribution): static
    {
        if (is_null($pensionAVCContribution)) {
            array_push($this->openAPINullablesSetToNull, 'pensionAVCContribution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionAVCContribution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionAVCContribution'] = $pensionAVCContribution;

        return $this;
    }

    /**
     * Gets isAvcPercentage
     *
     * @return bool|null
     */
    public function getIsAvcPercentage(): ?bool
    {
        return $this->container['isAvcPercentage'];
    }

    /**
     * Sets isAvcPercentage
     *
     * @param bool|null $isAvcPercentage Indicates whether the AvcContribution is expressed as a percentage.
     *
     * @return $this
     */
    public function setIsAvcPercentage(?bool $isAvcPercentage): static
    {
        if (is_null($isAvcPercentage)) {
            throw new InvalidArgumentException('non-nullable isAvcPercentage cannot be null');
        }
        $this->container['isAvcPercentage'] = $isAvcPercentage;

        return $this;
    }

    /**
     * Gets pensionEmployerContribution
     *
     * @return float|null
     */
    public function getPensionEmployerContribution(): ?float
    {
        return $this->container['pensionEmployerContribution'];
    }

    /**
     * Sets pensionEmployerContribution
     *
     * @param float|null $pensionEmployerContribution Employer Pension Contribution
     *
     * @return $this
     */
    public function setPensionEmployerContribution(?float $pensionEmployerContribution): static
    {
        if (is_null($pensionEmployerContribution)) {
            array_push($this->openAPINullablesSetToNull, 'pensionEmployerContribution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionEmployerContribution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionEmployerContribution'] = $pensionEmployerContribution;

        return $this;
    }

    /**
     * Gets isEmployerContributionPercentage
     *
     * @return bool|null
     */
    public function getIsEmployerContributionPercentage(): ?bool
    {
        return $this->container['isEmployerContributionPercentage'];
    }

    /**
     * Sets isEmployerContributionPercentage
     *
     * @param bool|null $isEmployerContributionPercentage Indicates whether the EmployerContribution is expressed as a percentage.
     *
     * @return $this
     */
    public function setIsEmployerContributionPercentage(?bool $isEmployerContributionPercentage): static
    {
        if (is_null($isEmployerContributionPercentage)) {
            throw new InvalidArgumentException('non-nullable isEmployerContributionPercentage cannot be null');
        }
        $this->container['isEmployerContributionPercentage'] = $isEmployerContributionPercentage;

        return $this;
    }

    /**
     * Gets pensionMembershipNo
     *
     * @return string|null
     */
    public function getPensionMembershipNo(): ?string
    {
        return $this->container['pensionMembershipNo'];
    }

    /**
     * Sets pensionMembershipNo
     *
     * @param string|null $pensionMembershipNo Pension Membership Number
     *
     * @return $this
     */
    public function setPensionMembershipNo(?string $pensionMembershipNo): static
    {
        if (is_null($pensionMembershipNo)) {
            array_push($this->openAPINullablesSetToNull, 'pensionMembershipNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionMembershipNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionMembershipNo'] = $pensionMembershipNo;

        return $this;
    }

    /**
     * Gets mcrRoleID1
     *
     * @return string|null
     */
    public function getMcrRoleID1(): ?string
    {
        return $this->container['mcrRoleID1'];
    }

    /**
     * Sets mcrRoleID1
     *
     * @param string|null $mcrRoleID1 MCR Role ID1 for teachers pension
     *
     * @return $this
     */
    public function setMcrRoleID1(?string $mcrRoleID1): static
    {
        if (is_null($mcrRoleID1)) {
            array_push($this->openAPINullablesSetToNull, 'mcrRoleID1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mcrRoleID1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mcrRoleID1'] = $mcrRoleID1;

        return $this;
    }

    /**
     * Gets mcrRoleID2
     *
     * @return string|null
     */
    public function getMcrRoleID2(): ?string
    {
        return $this->container['mcrRoleID2'];
    }

    /**
     * Sets mcrRoleID2
     *
     * @param string|null $mcrRoleID2 MCR Role ID2 for teachers pension
     *
     * @return $this
     */
    public function setMcrRoleID2(?string $mcrRoleID2): static
    {
        if (is_null($mcrRoleID2)) {
            array_push($this->openAPINullablesSetToNull, 'mcrRoleID2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mcrRoleID2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mcrRoleID2'] = $mcrRoleID2;

        return $this;
    }

    /**
     * Gets isHalfContributionMember
     *
     * @return bool|null
     */
    public function getIsHalfContributionMember(): ?bool
    {
        return $this->container['isHalfContributionMember'];
    }

    /**
     * Sets isHalfContributionMember
     *
     * @param bool|null $isHalfContributionMember 50/50 membership
     *
     * @return $this
     */
    public function setIsHalfContributionMember(?bool $isHalfContributionMember): static
    {
        if (is_null($isHalfContributionMember)) {
            array_push($this->openAPINullablesSetToNull, 'isHalfContributionMember');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isHalfContributionMember', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isHalfContributionMember'] = $isHalfContributionMember;

        return $this;
    }

    /**
     * Gets tpAdminNino
     *
     * @return string|null
     */
    public function getTpAdminNino(): ?string
    {
        return $this->container['tpAdminNino'];
    }

    /**
     * Sets tpAdminNino
     *
     * @param string|null $tpAdminNino Teachers Pension Admin Ni Number
     *
     * @return $this
     */
    public function setTpAdminNino(?string $tpAdminNino): static
    {
        if (is_null($tpAdminNino)) {
            array_push($this->openAPINullablesSetToNull, 'tpAdminNino');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tpAdminNino', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tpAdminNino'] = $tpAdminNino;

        return $this;
    }

    /**
     * Gets pensionableEarningsYTD
     *
     * @return float|null
     */
    public function getPensionableEarningsYTD(): ?float
    {
        return $this->container['pensionableEarningsYTD'];
    }

    /**
     * Sets pensionableEarningsYTD
     *
     * @param float|null $pensionableEarningsYTD Pensionable earning year to date
     *
     * @return $this
     */
    public function setPensionableEarningsYTD(?float $pensionableEarningsYTD): static
    {
        if (is_null($pensionableEarningsYTD)) {
            array_push($this->openAPINullablesSetToNull, 'pensionableEarningsYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionableEarningsYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionableEarningsYTD'] = $pensionableEarningsYTD;

        return $this;
    }

    /**
     * Gets pensionablePayYTD
     *
     * @return float|null
     */
    public function getPensionablePayYTD(): ?float
    {
        return $this->container['pensionablePayYTD'];
    }

    /**
     * Sets pensionablePayYTD
     *
     * @param float|null $pensionablePayYTD Pensionable Pay year to date
     *
     * @return $this
     */
    public function setPensionablePayYTD(?float $pensionablePayYTD): static
    {
        if (is_null($pensionablePayYTD)) {
            array_push($this->openAPINullablesSetToNull, 'pensionablePayYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionablePayYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionablePayYTD'] = $pensionablePayYTD;

        return $this;
    }

    /**
     * Gets employeePensionYTD
     *
     * @return float|null
     */
    public function getEmployeePensionYTD(): ?float
    {
        return $this->container['employeePensionYTD'];
    }

    /**
     * Sets employeePensionYTD
     *
     * @param float|null $employeePensionYTD Employee pension year to date
     *
     * @return $this
     */
    public function setEmployeePensionYTD(?float $employeePensionYTD): static
    {
        if (is_null($employeePensionYTD)) {
            array_push($this->openAPINullablesSetToNull, 'employeePensionYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeePensionYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeePensionYTD'] = $employeePensionYTD;

        return $this;
    }

    /**
     * Gets avcPensionYTD
     *
     * @return float|null
     */
    public function getAvcPensionYTD(): ?float
    {
        return $this->container['avcPensionYTD'];
    }

    /**
     * Sets avcPensionYTD
     *
     * @param float|null $avcPensionYTD Additional Voluntary Contribution YTD
     *
     * @return $this
     */
    public function setAvcPensionYTD(?float $avcPensionYTD): static
    {
        if (is_null($avcPensionYTD)) {
            array_push($this->openAPINullablesSetToNull, 'avcPensionYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avcPensionYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avcPensionYTD'] = $avcPensionYTD;

        return $this;
    }

    /**
     * Gets employerPensionYTD
     *
     * @return float|null
     */
    public function getEmployerPensionYTD(): ?float
    {
        return $this->container['employerPensionYTD'];
    }

    /**
     * Sets employerPensionYTD
     *
     * @param float|null $employerPensionYTD Employer pension year to date
     *
     * @return $this
     */
    public function setEmployerPensionYTD(?float $employerPensionYTD): static
    {
        if (is_null($employerPensionYTD)) {
            array_push($this->openAPINullablesSetToNull, 'employerPensionYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerPensionYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerPensionYTD'] = $employerPensionYTD;

        return $this;
    }

    /**
     * Gets assumedPensionablePayYTD
     *
     * @return float|null
     */
    public function getAssumedPensionablePayYTD(): ?float
    {
        return $this->container['assumedPensionablePayYTD'];
    }

    /**
     * Sets assumedPensionablePayYTD
     *
     * @param float|null $assumedPensionablePayYTD Assumed pensionable pay year to date
     *
     * @return $this
     */
    public function setAssumedPensionablePayYTD(?float $assumedPensionablePayYTD): static
    {
        if (is_null($assumedPensionablePayYTD)) {
            array_push($this->openAPINullablesSetToNull, 'assumedPensionablePayYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assumedPensionablePayYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assumedPensionablePayYTD'] = $assumedPensionablePayYTD;

        return $this;
    }

    /**
     * Gets reasonForLeaving
     *
     * @return string|null
     */
    public function getReasonForLeaving(): ?string
    {
        return $this->container['reasonForLeaving'];
    }

    /**
     * Sets reasonForLeaving
     *
     * @param string|null $reasonForLeaving Reason the employee left the scheme
     *
     * @return $this
     */
    public function setReasonForLeaving(?string $reasonForLeaving): static
    {
        if (is_null($reasonForLeaving)) {
            array_push($this->openAPINullablesSetToNull, 'reasonForLeaving');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reasonForLeaving', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reasonForLeaving'] = $reasonForLeaving;

        return $this;
    }

    /**
     * Gets pensionId
     *
     * @return string|null
     */
    public function getPensionId(): ?string
    {
        return $this->container['pensionId'];
    }

    /**
     * Sets pensionId
     *
     * @param string|null $pensionId Pension Id
     *
     * @return $this
     */
    public function setPensionId(?string $pensionId): static
    {
        if (is_null($pensionId)) {
            throw new InvalidArgumentException('non-nullable pensionId cannot be null');
        }
        $this->container['pensionId'] = $pensionId;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment(): ?string
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return $this
     */
    public function setDepartment(?string $department): static
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


