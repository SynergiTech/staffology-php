<?php
/**
 * CisStatement
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * CisStatement Class Doc Comment
 *
 * @description CIS Payment and Deduction Statement (CISOL1)
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CisStatement implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CisStatement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'taxMonth' => 'int',
        'contractorName' => 'string',
        'contractorAddress' => '\SynergiTech\Staffology\Model\Address',
        'contractorOfficeNumber' => 'string',
        'contractorPayeReference' => 'string',
        'subcontractorName' => '\SynergiTech\Staffology\Model\RtiEmployeeName',
        'subContractorUtr' => 'string',
        'verificationNumber' => 'string',
        'grossAmountPaid' => 'float',
        'costOfMaterials' => 'float',
        'amountLiableToDeduction' => 'float',
        'amountDeducted' => 'float',
        'amountPayable' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxYear' => null,
        'taxMonth' => 'int32',
        'contractorName' => null,
        'contractorAddress' => null,
        'contractorOfficeNumber' => null,
        'contractorPayeReference' => null,
        'subcontractorName' => null,
        'subContractorUtr' => null,
        'verificationNumber' => null,
        'grossAmountPaid' => 'double',
        'costOfMaterials' => 'double',
        'amountLiableToDeduction' => 'double',
        'amountDeducted' => 'double',
        'amountPayable' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxYear' => false,
        'taxMonth' => false,
        'contractorName' => true,
        'contractorAddress' => false,
        'contractorOfficeNumber' => true,
        'contractorPayeReference' => true,
        'subcontractorName' => false,
        'subContractorUtr' => true,
        'verificationNumber' => true,
        'grossAmountPaid' => false,
        'costOfMaterials' => false,
        'amountLiableToDeduction' => false,
        'amountDeducted' => false,
        'amountPayable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxYear' => 'taxYear',
        'taxMonth' => 'taxMonth',
        'contractorName' => 'contractorName',
        'contractorAddress' => 'contractorAddress',
        'contractorOfficeNumber' => 'contractorOfficeNumber',
        'contractorPayeReference' => 'contractorPayeReference',
        'subcontractorName' => 'subcontractorName',
        'subContractorUtr' => 'subContractorUtr',
        'verificationNumber' => 'verificationNumber',
        'grossAmountPaid' => 'grossAmountPaid',
        'costOfMaterials' => 'costOfMaterials',
        'amountLiableToDeduction' => 'amountLiableToDeduction',
        'amountDeducted' => 'amountDeducted',
        'amountPayable' => 'amountPayable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxYear' => 'setTaxYear',
        'taxMonth' => 'setTaxMonth',
        'contractorName' => 'setContractorName',
        'contractorAddress' => 'setContractorAddress',
        'contractorOfficeNumber' => 'setContractorOfficeNumber',
        'contractorPayeReference' => 'setContractorPayeReference',
        'subcontractorName' => 'setSubcontractorName',
        'subContractorUtr' => 'setSubContractorUtr',
        'verificationNumber' => 'setVerificationNumber',
        'grossAmountPaid' => 'setGrossAmountPaid',
        'costOfMaterials' => 'setCostOfMaterials',
        'amountLiableToDeduction' => 'setAmountLiableToDeduction',
        'amountDeducted' => 'setAmountDeducted',
        'amountPayable' => 'setAmountPayable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxYear' => 'getTaxYear',
        'taxMonth' => 'getTaxMonth',
        'contractorName' => 'getContractorName',
        'contractorAddress' => 'getContractorAddress',
        'contractorOfficeNumber' => 'getContractorOfficeNumber',
        'contractorPayeReference' => 'getContractorPayeReference',
        'subcontractorName' => 'getSubcontractorName',
        'subContractorUtr' => 'getSubContractorUtr',
        'verificationNumber' => 'getVerificationNumber',
        'grossAmountPaid' => 'getGrossAmountPaid',
        'costOfMaterials' => 'getCostOfMaterials',
        'amountLiableToDeduction' => 'getAmountLiableToDeduction',
        'amountDeducted' => 'getAmountDeducted',
        'amountPayable' => 'getAmountPayable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('taxMonth', $data ?? [], null);
        $this->setIfExists('contractorName', $data ?? [], null);
        $this->setIfExists('contractorAddress', $data ?? [], null);
        $this->setIfExists('contractorOfficeNumber', $data ?? [], null);
        $this->setIfExists('contractorPayeReference', $data ?? [], null);
        $this->setIfExists('subcontractorName', $data ?? [], null);
        $this->setIfExists('subContractorUtr', $data ?? [], null);
        $this->setIfExists('verificationNumber', $data ?? [], null);
        $this->setIfExists('grossAmountPaid', $data ?? [], null);
        $this->setIfExists('costOfMaterials', $data ?? [], null);
        $this->setIfExists('amountLiableToDeduction', $data ?? [], null);
        $this->setIfExists('amountDeducted', $data ?? [], null);
        $this->setIfExists('amountPayable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets taxMonth
     *
     * @return int|null
     */
    public function getTaxMonth(): ?int
    {
        return $this->container['taxMonth'];
    }

    /**
     * Sets taxMonth
     *
     * @param int|null $taxMonth [readonly]
     *
     * @return $this
     */
    public function setTaxMonth(?int $taxMonth): static
    {
        if (is_null($taxMonth)) {
            throw new InvalidArgumentException('non-nullable taxMonth cannot be null');
        }
        $this->container['taxMonth'] = $taxMonth;

        return $this;
    }

    /**
     * Gets contractorName
     *
     * @return string|null
     */
    public function getContractorName(): ?string
    {
        return $this->container['contractorName'];
    }

    /**
     * Sets contractorName
     *
     * @param string|null $contractorName [readonly]
     *
     * @return $this
     */
    public function setContractorName(?string $contractorName): static
    {
        if (is_null($contractorName)) {
            array_push($this->openAPINullablesSetToNull, 'contractorName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contractorName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contractorName'] = $contractorName;

        return $this;
    }

    /**
     * Gets contractorAddress
     *
     * @return \SynergiTech\Staffology\Model\Address|null
     */
    public function getContractorAddress(): ?\SynergiTech\Staffology\Model\Address
    {
        return $this->container['contractorAddress'];
    }

    /**
     * Sets contractorAddress
     *
     * @param \SynergiTech\Staffology\Model\Address|null $contractorAddress contractorAddress
     *
     * @return $this
     */
    public function setContractorAddress(?\SynergiTech\Staffology\Model\Address $contractorAddress): static
    {
        if (is_null($contractorAddress)) {
            throw new InvalidArgumentException('non-nullable contractorAddress cannot be null');
        }
        $this->container['contractorAddress'] = $contractorAddress;

        return $this;
    }

    /**
     * Gets contractorOfficeNumber
     *
     * @return string|null
     */
    public function getContractorOfficeNumber(): ?string
    {
        return $this->container['contractorOfficeNumber'];
    }

    /**
     * Sets contractorOfficeNumber
     *
     * @param string|null $contractorOfficeNumber [readonly]
     *
     * @return $this
     */
    public function setContractorOfficeNumber(?string $contractorOfficeNumber): static
    {
        if (is_null($contractorOfficeNumber)) {
            array_push($this->openAPINullablesSetToNull, 'contractorOfficeNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contractorOfficeNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contractorOfficeNumber'] = $contractorOfficeNumber;

        return $this;
    }

    /**
     * Gets contractorPayeReference
     *
     * @return string|null
     */
    public function getContractorPayeReference(): ?string
    {
        return $this->container['contractorPayeReference'];
    }

    /**
     * Sets contractorPayeReference
     *
     * @param string|null $contractorPayeReference [readonly]
     *
     * @return $this
     */
    public function setContractorPayeReference(?string $contractorPayeReference): static
    {
        if (is_null($contractorPayeReference)) {
            array_push($this->openAPINullablesSetToNull, 'contractorPayeReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contractorPayeReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contractorPayeReference'] = $contractorPayeReference;

        return $this;
    }

    /**
     * Gets subcontractorName
     *
     * @return \SynergiTech\Staffology\Model\RtiEmployeeName|null
     */
    public function getSubcontractorName(): ?\SynergiTech\Staffology\Model\RtiEmployeeName
    {
        return $this->container['subcontractorName'];
    }

    /**
     * Sets subcontractorName
     *
     * @param \SynergiTech\Staffology\Model\RtiEmployeeName|null $subcontractorName subcontractorName
     *
     * @return $this
     */
    public function setSubcontractorName(?\SynergiTech\Staffology\Model\RtiEmployeeName $subcontractorName): static
    {
        if (is_null($subcontractorName)) {
            throw new InvalidArgumentException('non-nullable subcontractorName cannot be null');
        }
        $this->container['subcontractorName'] = $subcontractorName;

        return $this;
    }

    /**
     * Gets subContractorUtr
     *
     * @return string|null
     */
    public function getSubContractorUtr(): ?string
    {
        return $this->container['subContractorUtr'];
    }

    /**
     * Sets subContractorUtr
     *
     * @param string|null $subContractorUtr [readonly]
     *
     * @return $this
     */
    public function setSubContractorUtr(?string $subContractorUtr): static
    {
        if (is_null($subContractorUtr)) {
            array_push($this->openAPINullablesSetToNull, 'subContractorUtr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subContractorUtr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subContractorUtr'] = $subContractorUtr;

        return $this;
    }

    /**
     * Gets verificationNumber
     *
     * @return string|null
     */
    public function getVerificationNumber(): ?string
    {
        return $this->container['verificationNumber'];
    }

    /**
     * Sets verificationNumber
     *
     * @param string|null $verificationNumber [readonly]
     *
     * @return $this
     */
    public function setVerificationNumber(?string $verificationNumber): static
    {
        if (is_null($verificationNumber)) {
            array_push($this->openAPINullablesSetToNull, 'verificationNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verificationNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verificationNumber'] = $verificationNumber;

        return $this;
    }

    /**
     * Gets grossAmountPaid
     *
     * @return float|null
     */
    public function getGrossAmountPaid(): ?float
    {
        return $this->container['grossAmountPaid'];
    }

    /**
     * Sets grossAmountPaid
     *
     * @param float|null $grossAmountPaid [readonly] Gross Amount Paid (Excl VAT)
     *
     * @return $this
     */
    public function setGrossAmountPaid(?float $grossAmountPaid): static
    {
        if (is_null($grossAmountPaid)) {
            throw new InvalidArgumentException('non-nullable grossAmountPaid cannot be null');
        }
        $this->container['grossAmountPaid'] = $grossAmountPaid;

        return $this;
    }

    /**
     * Gets costOfMaterials
     *
     * @return float|null
     */
    public function getCostOfMaterials(): ?float
    {
        return $this->container['costOfMaterials'];
    }

    /**
     * Sets costOfMaterials
     *
     * @param float|null $costOfMaterials [readonly]
     *
     * @return $this
     */
    public function setCostOfMaterials(?float $costOfMaterials): static
    {
        if (is_null($costOfMaterials)) {
            throw new InvalidArgumentException('non-nullable costOfMaterials cannot be null');
        }
        $this->container['costOfMaterials'] = $costOfMaterials;

        return $this;
    }

    /**
     * Gets amountLiableToDeduction
     *
     * @return float|null
     */
    public function getAmountLiableToDeduction(): ?float
    {
        return $this->container['amountLiableToDeduction'];
    }

    /**
     * Sets amountLiableToDeduction
     *
     * @param float|null $amountLiableToDeduction [readonly]
     *
     * @return $this
     */
    public function setAmountLiableToDeduction(?float $amountLiableToDeduction): static
    {
        if (is_null($amountLiableToDeduction)) {
            throw new InvalidArgumentException('non-nullable amountLiableToDeduction cannot be null');
        }
        $this->container['amountLiableToDeduction'] = $amountLiableToDeduction;

        return $this;
    }

    /**
     * Gets amountDeducted
     *
     * @return float|null
     */
    public function getAmountDeducted(): ?float
    {
        return $this->container['amountDeducted'];
    }

    /**
     * Sets amountDeducted
     *
     * @param float|null $amountDeducted [readonly]
     *
     * @return $this
     */
    public function setAmountDeducted(?float $amountDeducted): static
    {
        if (is_null($amountDeducted)) {
            throw new InvalidArgumentException('non-nullable amountDeducted cannot be null');
        }
        $this->container['amountDeducted'] = $amountDeducted;

        return $this;
    }

    /**
     * Gets amountPayable
     *
     * @return float|null
     */
    public function getAmountPayable(): ?float
    {
        return $this->container['amountPayable'];
    }

    /**
     * Sets amountPayable
     *
     * @param float|null $amountPayable [readonly]
     *
     * @return $this
     */
    public function setAmountPayable(?float $amountPayable): static
    {
        if (is_null($amountPayable)) {
            throw new InvalidArgumentException('non-nullable amountPayable cannot be null');
        }
        $this->container['amountPayable'] = $amountPayable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


