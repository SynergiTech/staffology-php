<?php
/**
 * FpsEmployeePayment
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * FpsEmployeePayment Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FpsEmployeePayment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FpsEmployeePayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'bacsHashCode' => 'string',
        'payFreq' => 'string',
        'pmtDate' => 'string',
        'lateReason' => 'string',
        'weekNo' => 'string',
        'monthNo' => 'string',
        'periodsCovered' => 'int',
        'aggregatedEarnings' => 'string',
        'pmtAfterLeaving' => 'string',
        'hoursWorked' => 'string',
        'taxCode' => '\SynergiTech\Staffology\Model\FpsEmployeeTaxCode',
        'taxablePay' => 'string',
        'nonTaxOrNICPmt' => 'string',
        'dednsFromNetPay' => 'string',
        'payAfterStatDedns' => 'string',
        'benefitsTaxedViaPayroll' => 'string',
        'class1ANICsYTD' => 'string',
        'benefits' => '\SynergiTech\Staffology\Model\FpsBenefit',
        'empeePenContribnsPaid' => 'string',
        'itemsSubjectToClass1NIC' => 'string',
        'empeePenContribnsNotPaid' => 'string',
        'studentLoanRecovered' => '\SynergiTech\Staffology\Model\StudentLoanRecovered',
        'postgradLoanRecovered' => 'string',
        'taxDeductedOrRefunded' => 'string',
        'onStrike' => 'string',
        'unpaidAbsence' => 'string',
        'smpytd' => 'string',
        'sppytd' => 'string',
        'sapytd' => 'string',
        'shPPYTD' => 'string',
        'spbpytd' => 'string',
        'trivialCommutationPayment' => '\SynergiTech\Staffology\Model\FpsEmployeeTrivialCommutationPayment[]',
        'flexibleDrawdown' => '\SynergiTech\Staffology\Model\FpsEmployeeFlexibleDrawdown'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'bacsHashCode' => null,
        'payFreq' => null,
        'pmtDate' => null,
        'lateReason' => null,
        'weekNo' => null,
        'monthNo' => null,
        'periodsCovered' => 'int32',
        'aggregatedEarnings' => null,
        'pmtAfterLeaving' => null,
        'hoursWorked' => null,
        'taxCode' => null,
        'taxablePay' => null,
        'nonTaxOrNICPmt' => null,
        'dednsFromNetPay' => null,
        'payAfterStatDedns' => null,
        'benefitsTaxedViaPayroll' => null,
        'class1ANICsYTD' => null,
        'benefits' => null,
        'empeePenContribnsPaid' => null,
        'itemsSubjectToClass1NIC' => null,
        'empeePenContribnsNotPaid' => null,
        'studentLoanRecovered' => null,
        'postgradLoanRecovered' => null,
        'taxDeductedOrRefunded' => null,
        'onStrike' => null,
        'unpaidAbsence' => null,
        'smpytd' => null,
        'sppytd' => null,
        'sapytd' => null,
        'shPPYTD' => null,
        'spbpytd' => null,
        'trivialCommutationPayment' => null,
        'flexibleDrawdown' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'bacsHashCode' => true,
        'payFreq' => true,
        'pmtDate' => true,
        'lateReason' => true,
        'weekNo' => true,
        'monthNo' => true,
        'periodsCovered' => false,
        'aggregatedEarnings' => true,
        'pmtAfterLeaving' => true,
        'hoursWorked' => true,
        'taxCode' => false,
        'taxablePay' => true,
        'nonTaxOrNICPmt' => true,
        'dednsFromNetPay' => true,
        'payAfterStatDedns' => true,
        'benefitsTaxedViaPayroll' => true,
        'class1ANICsYTD' => true,
        'benefits' => false,
        'empeePenContribnsPaid' => true,
        'itemsSubjectToClass1NIC' => true,
        'empeePenContribnsNotPaid' => true,
        'studentLoanRecovered' => false,
        'postgradLoanRecovered' => true,
        'taxDeductedOrRefunded' => true,
        'onStrike' => true,
        'unpaidAbsence' => true,
        'smpytd' => true,
        'sppytd' => true,
        'sapytd' => true,
        'shPPYTD' => true,
        'spbpytd' => true,
        'trivialCommutationPayment' => true,
        'flexibleDrawdown' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'bacsHashCode' => 'bacsHashCode',
        'payFreq' => 'payFreq',
        'pmtDate' => 'pmtDate',
        'lateReason' => 'lateReason',
        'weekNo' => 'weekNo',
        'monthNo' => 'monthNo',
        'periodsCovered' => 'periodsCovered',
        'aggregatedEarnings' => 'aggregatedEarnings',
        'pmtAfterLeaving' => 'pmtAfterLeaving',
        'hoursWorked' => 'hoursWorked',
        'taxCode' => 'taxCode',
        'taxablePay' => 'taxablePay',
        'nonTaxOrNICPmt' => 'nonTaxOrNICPmt',
        'dednsFromNetPay' => 'dednsFromNetPay',
        'payAfterStatDedns' => 'payAfterStatDedns',
        'benefitsTaxedViaPayroll' => 'benefitsTaxedViaPayroll',
        'class1ANICsYTD' => 'class1ANICsYTD',
        'benefits' => 'benefits',
        'empeePenContribnsPaid' => 'empeePenContribnsPaid',
        'itemsSubjectToClass1NIC' => 'itemsSubjectToClass1NIC',
        'empeePenContribnsNotPaid' => 'empeePenContribnsNotPaid',
        'studentLoanRecovered' => 'studentLoanRecovered',
        'postgradLoanRecovered' => 'postgradLoanRecovered',
        'taxDeductedOrRefunded' => 'taxDeductedOrRefunded',
        'onStrike' => 'onStrike',
        'unpaidAbsence' => 'unpaidAbsence',
        'smpytd' => 'smpytd',
        'sppytd' => 'sppytd',
        'sapytd' => 'sapytd',
        'shPPYTD' => 'shPPYTD',
        'spbpytd' => 'spbpytd',
        'trivialCommutationPayment' => 'trivialCommutationPayment',
        'flexibleDrawdown' => 'flexibleDrawdown'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'bacsHashCode' => 'setBacsHashCode',
        'payFreq' => 'setPayFreq',
        'pmtDate' => 'setPmtDate',
        'lateReason' => 'setLateReason',
        'weekNo' => 'setWeekNo',
        'monthNo' => 'setMonthNo',
        'periodsCovered' => 'setPeriodsCovered',
        'aggregatedEarnings' => 'setAggregatedEarnings',
        'pmtAfterLeaving' => 'setPmtAfterLeaving',
        'hoursWorked' => 'setHoursWorked',
        'taxCode' => 'setTaxCode',
        'taxablePay' => 'setTaxablePay',
        'nonTaxOrNICPmt' => 'setNonTaxOrNICPmt',
        'dednsFromNetPay' => 'setDednsFromNetPay',
        'payAfterStatDedns' => 'setPayAfterStatDedns',
        'benefitsTaxedViaPayroll' => 'setBenefitsTaxedViaPayroll',
        'class1ANICsYTD' => 'setClass1ANICsYTD',
        'benefits' => 'setBenefits',
        'empeePenContribnsPaid' => 'setEmpeePenContribnsPaid',
        'itemsSubjectToClass1NIC' => 'setItemsSubjectToClass1NIC',
        'empeePenContribnsNotPaid' => 'setEmpeePenContribnsNotPaid',
        'studentLoanRecovered' => 'setStudentLoanRecovered',
        'postgradLoanRecovered' => 'setPostgradLoanRecovered',
        'taxDeductedOrRefunded' => 'setTaxDeductedOrRefunded',
        'onStrike' => 'setOnStrike',
        'unpaidAbsence' => 'setUnpaidAbsence',
        'smpytd' => 'setSmpytd',
        'sppytd' => 'setSppytd',
        'sapytd' => 'setSapytd',
        'shPPYTD' => 'setShPPYTD',
        'spbpytd' => 'setSpbpytd',
        'trivialCommutationPayment' => 'setTrivialCommutationPayment',
        'flexibleDrawdown' => 'setFlexibleDrawdown'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'bacsHashCode' => 'getBacsHashCode',
        'payFreq' => 'getPayFreq',
        'pmtDate' => 'getPmtDate',
        'lateReason' => 'getLateReason',
        'weekNo' => 'getWeekNo',
        'monthNo' => 'getMonthNo',
        'periodsCovered' => 'getPeriodsCovered',
        'aggregatedEarnings' => 'getAggregatedEarnings',
        'pmtAfterLeaving' => 'getPmtAfterLeaving',
        'hoursWorked' => 'getHoursWorked',
        'taxCode' => 'getTaxCode',
        'taxablePay' => 'getTaxablePay',
        'nonTaxOrNICPmt' => 'getNonTaxOrNICPmt',
        'dednsFromNetPay' => 'getDednsFromNetPay',
        'payAfterStatDedns' => 'getPayAfterStatDedns',
        'benefitsTaxedViaPayroll' => 'getBenefitsTaxedViaPayroll',
        'class1ANICsYTD' => 'getClass1ANICsYTD',
        'benefits' => 'getBenefits',
        'empeePenContribnsPaid' => 'getEmpeePenContribnsPaid',
        'itemsSubjectToClass1NIC' => 'getItemsSubjectToClass1NIC',
        'empeePenContribnsNotPaid' => 'getEmpeePenContribnsNotPaid',
        'studentLoanRecovered' => 'getStudentLoanRecovered',
        'postgradLoanRecovered' => 'getPostgradLoanRecovered',
        'taxDeductedOrRefunded' => 'getTaxDeductedOrRefunded',
        'onStrike' => 'getOnStrike',
        'unpaidAbsence' => 'getUnpaidAbsence',
        'smpytd' => 'getSmpytd',
        'sppytd' => 'getSppytd',
        'sapytd' => 'getSapytd',
        'shPPYTD' => 'getShPPYTD',
        'spbpytd' => 'getSpbpytd',
        'trivialCommutationPayment' => 'getTrivialCommutationPayment',
        'flexibleDrawdown' => 'getFlexibleDrawdown'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bacsHashCode', $data ?? [], null);
        $this->setIfExists('payFreq', $data ?? [], null);
        $this->setIfExists('pmtDate', $data ?? [], null);
        $this->setIfExists('lateReason', $data ?? [], null);
        $this->setIfExists('weekNo', $data ?? [], null);
        $this->setIfExists('monthNo', $data ?? [], null);
        $this->setIfExists('periodsCovered', $data ?? [], null);
        $this->setIfExists('aggregatedEarnings', $data ?? [], null);
        $this->setIfExists('pmtAfterLeaving', $data ?? [], null);
        $this->setIfExists('hoursWorked', $data ?? [], null);
        $this->setIfExists('taxCode', $data ?? [], null);
        $this->setIfExists('taxablePay', $data ?? [], null);
        $this->setIfExists('nonTaxOrNICPmt', $data ?? [], null);
        $this->setIfExists('dednsFromNetPay', $data ?? [], null);
        $this->setIfExists('payAfterStatDedns', $data ?? [], null);
        $this->setIfExists('benefitsTaxedViaPayroll', $data ?? [], null);
        $this->setIfExists('class1ANICsYTD', $data ?? [], null);
        $this->setIfExists('benefits', $data ?? [], null);
        $this->setIfExists('empeePenContribnsPaid', $data ?? [], null);
        $this->setIfExists('itemsSubjectToClass1NIC', $data ?? [], null);
        $this->setIfExists('empeePenContribnsNotPaid', $data ?? [], null);
        $this->setIfExists('studentLoanRecovered', $data ?? [], null);
        $this->setIfExists('postgradLoanRecovered', $data ?? [], null);
        $this->setIfExists('taxDeductedOrRefunded', $data ?? [], null);
        $this->setIfExists('onStrike', $data ?? [], null);
        $this->setIfExists('unpaidAbsence', $data ?? [], null);
        $this->setIfExists('smpytd', $data ?? [], null);
        $this->setIfExists('sppytd', $data ?? [], null);
        $this->setIfExists('sapytd', $data ?? [], null);
        $this->setIfExists('shPPYTD', $data ?? [], null);
        $this->setIfExists('spbpytd', $data ?? [], null);
        $this->setIfExists('trivialCommutationPayment', $data ?? [], null);
        $this->setIfExists('flexibleDrawdown', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bacsHashCode
     *
     * @return string|null
     */
    public function getBacsHashCode(): ?string
    {
        return $this->container['bacsHashCode'];
    }

    /**
     * Sets bacsHashCode
     *
     * @param string|null $bacsHashCode bacsHashCode
     *
     * @return $this
     */
    public function setBacsHashCode(?string $bacsHashCode): static
    {
        if (is_null($bacsHashCode)) {
            array_push($this->openAPINullablesSetToNull, 'bacsHashCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsHashCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsHashCode'] = $bacsHashCode;

        return $this;
    }

    /**
     * Gets payFreq
     *
     * @return string|null
     */
    public function getPayFreq(): ?string
    {
        return $this->container['payFreq'];
    }

    /**
     * Sets payFreq
     *
     * @param string|null $payFreq payFreq
     *
     * @return $this
     */
    public function setPayFreq(?string $payFreq): static
    {
        if (is_null($payFreq)) {
            array_push($this->openAPINullablesSetToNull, 'payFreq');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payFreq', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payFreq'] = $payFreq;

        return $this;
    }

    /**
     * Gets pmtDate
     *
     * @return string|null
     */
    public function getPmtDate(): ?string
    {
        return $this->container['pmtDate'];
    }

    /**
     * Sets pmtDate
     *
     * @param string|null $pmtDate pmtDate
     *
     * @return $this
     */
    public function setPmtDate(?string $pmtDate): static
    {
        if (is_null($pmtDate)) {
            array_push($this->openAPINullablesSetToNull, 'pmtDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pmtDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pmtDate'] = $pmtDate;

        return $this;
    }

    /**
     * Gets lateReason
     *
     * @return string|null
     */
    public function getLateReason(): ?string
    {
        return $this->container['lateReason'];
    }

    /**
     * Sets lateReason
     *
     * @param string|null $lateReason lateReason
     *
     * @return $this
     */
    public function setLateReason(?string $lateReason): static
    {
        if (is_null($lateReason)) {
            array_push($this->openAPINullablesSetToNull, 'lateReason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lateReason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lateReason'] = $lateReason;

        return $this;
    }

    /**
     * Gets weekNo
     *
     * @return string|null
     */
    public function getWeekNo(): ?string
    {
        return $this->container['weekNo'];
    }

    /**
     * Sets weekNo
     *
     * @param string|null $weekNo weekNo
     *
     * @return $this
     */
    public function setWeekNo(?string $weekNo): static
    {
        if (is_null($weekNo)) {
            array_push($this->openAPINullablesSetToNull, 'weekNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weekNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weekNo'] = $weekNo;

        return $this;
    }

    /**
     * Gets monthNo
     *
     * @return string|null
     */
    public function getMonthNo(): ?string
    {
        return $this->container['monthNo'];
    }

    /**
     * Sets monthNo
     *
     * @param string|null $monthNo monthNo
     *
     * @return $this
     */
    public function setMonthNo(?string $monthNo): static
    {
        if (is_null($monthNo)) {
            array_push($this->openAPINullablesSetToNull, 'monthNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthNo'] = $monthNo;

        return $this;
    }

    /**
     * Gets periodsCovered
     *
     * @return int|null
     */
    public function getPeriodsCovered(): ?int
    {
        return $this->container['periodsCovered'];
    }

    /**
     * Sets periodsCovered
     *
     * @param int|null $periodsCovered periodsCovered
     *
     * @return $this
     */
    public function setPeriodsCovered(?int $periodsCovered): static
    {
        if (is_null($periodsCovered)) {
            throw new InvalidArgumentException('non-nullable periodsCovered cannot be null');
        }
        $this->container['periodsCovered'] = $periodsCovered;

        return $this;
    }

    /**
     * Gets aggregatedEarnings
     *
     * @return string|null
     */
    public function getAggregatedEarnings(): ?string
    {
        return $this->container['aggregatedEarnings'];
    }

    /**
     * Sets aggregatedEarnings
     *
     * @param string|null $aggregatedEarnings aggregatedEarnings
     *
     * @return $this
     */
    public function setAggregatedEarnings(?string $aggregatedEarnings): static
    {
        if (is_null($aggregatedEarnings)) {
            array_push($this->openAPINullablesSetToNull, 'aggregatedEarnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregatedEarnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregatedEarnings'] = $aggregatedEarnings;

        return $this;
    }

    /**
     * Gets pmtAfterLeaving
     *
     * @return string|null
     */
    public function getPmtAfterLeaving(): ?string
    {
        return $this->container['pmtAfterLeaving'];
    }

    /**
     * Sets pmtAfterLeaving
     *
     * @param string|null $pmtAfterLeaving pmtAfterLeaving
     *
     * @return $this
     */
    public function setPmtAfterLeaving(?string $pmtAfterLeaving): static
    {
        if (is_null($pmtAfterLeaving)) {
            array_push($this->openAPINullablesSetToNull, 'pmtAfterLeaving');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pmtAfterLeaving', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pmtAfterLeaving'] = $pmtAfterLeaving;

        return $this;
    }

    /**
     * Gets hoursWorked
     *
     * @return string|null
     */
    public function getHoursWorked(): ?string
    {
        return $this->container['hoursWorked'];
    }

    /**
     * Sets hoursWorked
     *
     * @param string|null $hoursWorked hoursWorked
     *
     * @return $this
     */
    public function setHoursWorked(?string $hoursWorked): static
    {
        if (is_null($hoursWorked)) {
            array_push($this->openAPINullablesSetToNull, 'hoursWorked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hoursWorked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hoursWorked'] = $hoursWorked;

        return $this;
    }

    /**
     * Gets taxCode
     *
     * @return \SynergiTech\Staffology\Model\FpsEmployeeTaxCode|null
     */
    public function getTaxCode(): ?\SynergiTech\Staffology\Model\FpsEmployeeTaxCode
    {
        return $this->container['taxCode'];
    }

    /**
     * Sets taxCode
     *
     * @param \SynergiTech\Staffology\Model\FpsEmployeeTaxCode|null $taxCode taxCode
     *
     * @return $this
     */
    public function setTaxCode(?\SynergiTech\Staffology\Model\FpsEmployeeTaxCode $taxCode): static
    {
        if (is_null($taxCode)) {
            throw new InvalidArgumentException('non-nullable taxCode cannot be null');
        }
        $this->container['taxCode'] = $taxCode;

        return $this;
    }

    /**
     * Gets taxablePay
     *
     * @return string|null
     */
    public function getTaxablePay(): ?string
    {
        return $this->container['taxablePay'];
    }

    /**
     * Sets taxablePay
     *
     * @param string|null $taxablePay taxablePay
     *
     * @return $this
     */
    public function setTaxablePay(?string $taxablePay): static
    {
        if (is_null($taxablePay)) {
            array_push($this->openAPINullablesSetToNull, 'taxablePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxablePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxablePay'] = $taxablePay;

        return $this;
    }

    /**
     * Gets nonTaxOrNICPmt
     *
     * @return string|null
     */
    public function getNonTaxOrNICPmt(): ?string
    {
        return $this->container['nonTaxOrNICPmt'];
    }

    /**
     * Sets nonTaxOrNICPmt
     *
     * @param string|null $nonTaxOrNICPmt nonTaxOrNICPmt
     *
     * @return $this
     */
    public function setNonTaxOrNICPmt(?string $nonTaxOrNICPmt): static
    {
        if (is_null($nonTaxOrNICPmt)) {
            array_push($this->openAPINullablesSetToNull, 'nonTaxOrNICPmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nonTaxOrNICPmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nonTaxOrNICPmt'] = $nonTaxOrNICPmt;

        return $this;
    }

    /**
     * Gets dednsFromNetPay
     *
     * @return string|null
     */
    public function getDednsFromNetPay(): ?string
    {
        return $this->container['dednsFromNetPay'];
    }

    /**
     * Sets dednsFromNetPay
     *
     * @param string|null $dednsFromNetPay dednsFromNetPay
     *
     * @return $this
     */
    public function setDednsFromNetPay(?string $dednsFromNetPay): static
    {
        if (is_null($dednsFromNetPay)) {
            array_push($this->openAPINullablesSetToNull, 'dednsFromNetPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dednsFromNetPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dednsFromNetPay'] = $dednsFromNetPay;

        return $this;
    }

    /**
     * Gets payAfterStatDedns
     *
     * @return string|null
     */
    public function getPayAfterStatDedns(): ?string
    {
        return $this->container['payAfterStatDedns'];
    }

    /**
     * Sets payAfterStatDedns
     *
     * @param string|null $payAfterStatDedns payAfterStatDedns
     *
     * @return $this
     */
    public function setPayAfterStatDedns(?string $payAfterStatDedns): static
    {
        if (is_null($payAfterStatDedns)) {
            array_push($this->openAPINullablesSetToNull, 'payAfterStatDedns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payAfterStatDedns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payAfterStatDedns'] = $payAfterStatDedns;

        return $this;
    }

    /**
     * Gets benefitsTaxedViaPayroll
     *
     * @return string|null
     */
    public function getBenefitsTaxedViaPayroll(): ?string
    {
        return $this->container['benefitsTaxedViaPayroll'];
    }

    /**
     * Sets benefitsTaxedViaPayroll
     *
     * @param string|null $benefitsTaxedViaPayroll benefitsTaxedViaPayroll
     *
     * @return $this
     */
    public function setBenefitsTaxedViaPayroll(?string $benefitsTaxedViaPayroll): static
    {
        if (is_null($benefitsTaxedViaPayroll)) {
            array_push($this->openAPINullablesSetToNull, 'benefitsTaxedViaPayroll');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefitsTaxedViaPayroll', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefitsTaxedViaPayroll'] = $benefitsTaxedViaPayroll;

        return $this;
    }

    /**
     * Gets class1ANICsYTD
     *
     * @return string|null
     */
    public function getClass1ANICsYTD(): ?string
    {
        return $this->container['class1ANICsYTD'];
    }

    /**
     * Sets class1ANICsYTD
     *
     * @param string|null $class1ANICsYTD class1ANICsYTD
     *
     * @return $this
     */
    public function setClass1ANICsYTD(?string $class1ANICsYTD): static
    {
        if (is_null($class1ANICsYTD)) {
            array_push($this->openAPINullablesSetToNull, 'class1ANICsYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('class1ANICsYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['class1ANICsYTD'] = $class1ANICsYTD;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return \SynergiTech\Staffology\Model\FpsBenefit|null
     */
    public function getBenefits(): ?\SynergiTech\Staffology\Model\FpsBenefit
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param \SynergiTech\Staffology\Model\FpsBenefit|null $benefits benefits
     *
     * @return $this
     */
    public function setBenefits(?\SynergiTech\Staffology\Model\FpsBenefit $benefits): static
    {
        if (is_null($benefits)) {
            throw new InvalidArgumentException('non-nullable benefits cannot be null');
        }
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Gets empeePenContribnsPaid
     *
     * @return string|null
     */
    public function getEmpeePenContribnsPaid(): ?string
    {
        return $this->container['empeePenContribnsPaid'];
    }

    /**
     * Sets empeePenContribnsPaid
     *
     * @param string|null $empeePenContribnsPaid empeePenContribnsPaid
     *
     * @return $this
     */
    public function setEmpeePenContribnsPaid(?string $empeePenContribnsPaid): static
    {
        if (is_null($empeePenContribnsPaid)) {
            array_push($this->openAPINullablesSetToNull, 'empeePenContribnsPaid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('empeePenContribnsPaid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['empeePenContribnsPaid'] = $empeePenContribnsPaid;

        return $this;
    }

    /**
     * Gets itemsSubjectToClass1NIC
     *
     * @return string|null
     */
    public function getItemsSubjectToClass1NIC(): ?string
    {
        return $this->container['itemsSubjectToClass1NIC'];
    }

    /**
     * Sets itemsSubjectToClass1NIC
     *
     * @param string|null $itemsSubjectToClass1NIC itemsSubjectToClass1NIC
     *
     * @return $this
     */
    public function setItemsSubjectToClass1NIC(?string $itemsSubjectToClass1NIC): static
    {
        if (is_null($itemsSubjectToClass1NIC)) {
            array_push($this->openAPINullablesSetToNull, 'itemsSubjectToClass1NIC');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemsSubjectToClass1NIC', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['itemsSubjectToClass1NIC'] = $itemsSubjectToClass1NIC;

        return $this;
    }

    /**
     * Gets empeePenContribnsNotPaid
     *
     * @return string|null
     */
    public function getEmpeePenContribnsNotPaid(): ?string
    {
        return $this->container['empeePenContribnsNotPaid'];
    }

    /**
     * Sets empeePenContribnsNotPaid
     *
     * @param string|null $empeePenContribnsNotPaid empeePenContribnsNotPaid
     *
     * @return $this
     */
    public function setEmpeePenContribnsNotPaid(?string $empeePenContribnsNotPaid): static
    {
        if (is_null($empeePenContribnsNotPaid)) {
            array_push($this->openAPINullablesSetToNull, 'empeePenContribnsNotPaid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('empeePenContribnsNotPaid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['empeePenContribnsNotPaid'] = $empeePenContribnsNotPaid;

        return $this;
    }

    /**
     * Gets studentLoanRecovered
     *
     * @return \SynergiTech\Staffology\Model\StudentLoanRecovered|null
     */
    public function getStudentLoanRecovered(): ?\SynergiTech\Staffology\Model\StudentLoanRecovered
    {
        return $this->container['studentLoanRecovered'];
    }

    /**
     * Sets studentLoanRecovered
     *
     * @param \SynergiTech\Staffology\Model\StudentLoanRecovered|null $studentLoanRecovered studentLoanRecovered
     *
     * @return $this
     */
    public function setStudentLoanRecovered(?\SynergiTech\Staffology\Model\StudentLoanRecovered $studentLoanRecovered): static
    {
        if (is_null($studentLoanRecovered)) {
            throw new InvalidArgumentException('non-nullable studentLoanRecovered cannot be null');
        }
        $this->container['studentLoanRecovered'] = $studentLoanRecovered;

        return $this;
    }

    /**
     * Gets postgradLoanRecovered
     *
     * @return string|null
     */
    public function getPostgradLoanRecovered(): ?string
    {
        return $this->container['postgradLoanRecovered'];
    }

    /**
     * Sets postgradLoanRecovered
     *
     * @param string|null $postgradLoanRecovered postgradLoanRecovered
     *
     * @return $this
     */
    public function setPostgradLoanRecovered(?string $postgradLoanRecovered): static
    {
        if (is_null($postgradLoanRecovered)) {
            array_push($this->openAPINullablesSetToNull, 'postgradLoanRecovered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postgradLoanRecovered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postgradLoanRecovered'] = $postgradLoanRecovered;

        return $this;
    }

    /**
     * Gets taxDeductedOrRefunded
     *
     * @return string|null
     */
    public function getTaxDeductedOrRefunded(): ?string
    {
        return $this->container['taxDeductedOrRefunded'];
    }

    /**
     * Sets taxDeductedOrRefunded
     *
     * @param string|null $taxDeductedOrRefunded taxDeductedOrRefunded
     *
     * @return $this
     */
    public function setTaxDeductedOrRefunded(?string $taxDeductedOrRefunded): static
    {
        if (is_null($taxDeductedOrRefunded)) {
            array_push($this->openAPINullablesSetToNull, 'taxDeductedOrRefunded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxDeductedOrRefunded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxDeductedOrRefunded'] = $taxDeductedOrRefunded;

        return $this;
    }

    /**
     * Gets onStrike
     *
     * @return string|null
     */
    public function getOnStrike(): ?string
    {
        return $this->container['onStrike'];
    }

    /**
     * Sets onStrike
     *
     * @param string|null $onStrike onStrike
     *
     * @return $this
     */
    public function setOnStrike(?string $onStrike): static
    {
        if (is_null($onStrike)) {
            array_push($this->openAPINullablesSetToNull, 'onStrike');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('onStrike', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['onStrike'] = $onStrike;

        return $this;
    }

    /**
     * Gets unpaidAbsence
     *
     * @return string|null
     */
    public function getUnpaidAbsence(): ?string
    {
        return $this->container['unpaidAbsence'];
    }

    /**
     * Sets unpaidAbsence
     *
     * @param string|null $unpaidAbsence unpaidAbsence
     *
     * @return $this
     */
    public function setUnpaidAbsence(?string $unpaidAbsence): static
    {
        if (is_null($unpaidAbsence)) {
            array_push($this->openAPINullablesSetToNull, 'unpaidAbsence');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unpaidAbsence', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unpaidAbsence'] = $unpaidAbsence;

        return $this;
    }

    /**
     * Gets smpytd
     *
     * @return string|null
     */
    public function getSmpytd(): ?string
    {
        return $this->container['smpytd'];
    }

    /**
     * Sets smpytd
     *
     * @param string|null $smpytd smpytd
     *
     * @return $this
     */
    public function setSmpytd(?string $smpytd): static
    {
        if (is_null($smpytd)) {
            array_push($this->openAPINullablesSetToNull, 'smpytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('smpytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['smpytd'] = $smpytd;

        return $this;
    }

    /**
     * Gets sppytd
     *
     * @return string|null
     */
    public function getSppytd(): ?string
    {
        return $this->container['sppytd'];
    }

    /**
     * Sets sppytd
     *
     * @param string|null $sppytd sppytd
     *
     * @return $this
     */
    public function setSppytd(?string $sppytd): static
    {
        if (is_null($sppytd)) {
            array_push($this->openAPINullablesSetToNull, 'sppytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sppytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sppytd'] = $sppytd;

        return $this;
    }

    /**
     * Gets sapytd
     *
     * @return string|null
     */
    public function getSapytd(): ?string
    {
        return $this->container['sapytd'];
    }

    /**
     * Sets sapytd
     *
     * @param string|null $sapytd sapytd
     *
     * @return $this
     */
    public function setSapytd(?string $sapytd): static
    {
        if (is_null($sapytd)) {
            array_push($this->openAPINullablesSetToNull, 'sapytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sapytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sapytd'] = $sapytd;

        return $this;
    }

    /**
     * Gets shPPYTD
     *
     * @return string|null
     */
    public function getShPPYTD(): ?string
    {
        return $this->container['shPPYTD'];
    }

    /**
     * Sets shPPYTD
     *
     * @param string|null $shPPYTD shPPYTD
     *
     * @return $this
     */
    public function setShPPYTD(?string $shPPYTD): static
    {
        if (is_null($shPPYTD)) {
            array_push($this->openAPINullablesSetToNull, 'shPPYTD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shPPYTD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shPPYTD'] = $shPPYTD;

        return $this;
    }

    /**
     * Gets spbpytd
     *
     * @return string|null
     */
    public function getSpbpytd(): ?string
    {
        return $this->container['spbpytd'];
    }

    /**
     * Sets spbpytd
     *
     * @param string|null $spbpytd spbpytd
     *
     * @return $this
     */
    public function setSpbpytd(?string $spbpytd): static
    {
        if (is_null($spbpytd)) {
            array_push($this->openAPINullablesSetToNull, 'spbpytd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spbpytd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spbpytd'] = $spbpytd;

        return $this;
    }

    /**
     * Gets trivialCommutationPayment
     *
     * @return \SynergiTech\Staffology\Model\FpsEmployeeTrivialCommutationPayment[]|null
     */
    public function getTrivialCommutationPayment(): ?array
    {
        return $this->container['trivialCommutationPayment'];
    }

    /**
     * Sets trivialCommutationPayment
     *
     * @param \SynergiTech\Staffology\Model\FpsEmployeeTrivialCommutationPayment[]|null $trivialCommutationPayment trivialCommutationPayment
     *
     * @return $this
     */
    public function setTrivialCommutationPayment(?array $trivialCommutationPayment): static
    {
        if (is_null($trivialCommutationPayment)) {
            array_push($this->openAPINullablesSetToNull, 'trivialCommutationPayment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trivialCommutationPayment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trivialCommutationPayment'] = $trivialCommutationPayment;

        return $this;
    }

    /**
     * Gets flexibleDrawdown
     *
     * @return \SynergiTech\Staffology\Model\FpsEmployeeFlexibleDrawdown|null
     */
    public function getFlexibleDrawdown(): ?\SynergiTech\Staffology\Model\FpsEmployeeFlexibleDrawdown
    {
        return $this->container['flexibleDrawdown'];
    }

    /**
     * Sets flexibleDrawdown
     *
     * @param \SynergiTech\Staffology\Model\FpsEmployeeFlexibleDrawdown|null $flexibleDrawdown flexibleDrawdown
     *
     * @return $this
     */
    public function setFlexibleDrawdown(?\SynergiTech\Staffology\Model\FpsEmployeeFlexibleDrawdown $flexibleDrawdown): static
    {
        if (is_null($flexibleDrawdown)) {
            throw new InvalidArgumentException('non-nullable flexibleDrawdown cannot be null');
        }
        $this->container['flexibleDrawdown'] = $flexibleDrawdown;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


