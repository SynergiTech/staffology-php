<?php
/**
 * Payslip
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Payslip Class Doc Comment
 *
 * @description If you don&#39;t want to use our customisable PDFs for Payslips then you can retrieve the raw data used to create a Payslip.  This is the model you will be provided with for each employee.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Payslip implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Payslip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'isClosed' => 'bool',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'payPeriod' => '\SynergiTech\Staffology\Model\PayPeriods',
        'periodNumber' => 'int',
        'period' => 'string',
        'from' => '\DateTime',
        'to' => '\DateTime',
        'paymentDate' => '\DateTime',
        'note' => 'string',
        'allowanceNote' => 'string',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'logoUrl' => 'string',
        'employer' => '\SynergiTech\Staffology\Model\Item',
        'employerAddress' => '\SynergiTech\Staffology\Model\Address',
        'hmrcDetails' => '\SynergiTech\Staffology\Model\HmrcDetails',
        'payOptions' => '\SynergiTech\Staffology\Model\PayOptions',
        'employmentDetails' => '\SynergiTech\Staffology\Model\EmploymentDetails',
        'personalDetails' => '\SynergiTech\Staffology\Model\PersonalDetails',
        'totals' => '\SynergiTech\Staffology\Model\PayRunTotals',
        'totalsYtd' => '\SynergiTech\Staffology\Model\PayRunTotals',
        'lines' => '\SynergiTech\Staffology\Model\PayslipLine[]',
        'employerNi' => 'float',
        'employerPensionContribs' => 'float',
        'depts' => '\SynergiTech\Staffology\Model\StringDecimalKeyValuePair[]',
        'umbrellaPayment' => '\SynergiTech\Staffology\Model\UmbrellaPayment',
        'costCentres' => '\SynergiTech\Staffology\Model\StringDecimalKeyValuePair[]',
        'employeeRoleAnalysisCategoryCodes' => '\SynergiTech\Staffology\Model\EmployeeRoleAnalysisCategoryCode[]',
        'employeeCostCentres' => '\SynergiTech\Staffology\Model\EmployeeCostCentre[]',
        'departmentMemberships' => '\SynergiTech\Staffology\Model\DepartmentMembership[]',
        'pensionContributionsByRole' => '\SynergiTech\Staffology\Model\Item[]',
        'employerPensionContributions' => '\SynergiTech\Staffology\Model\EmployerPensionContribution[]',
        'employeePensionContributions' => 'array<string,\SynergiTech\Staffology\Model\DecimalDecimalBooleanPensionRuleValueTuple>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'isClosed' => null,
        'taxYear' => null,
        'payPeriod' => null,
        'periodNumber' => 'int32',
        'period' => null,
        'from' => 'date',
        'to' => 'date',
        'paymentDate' => 'date',
        'note' => null,
        'allowanceNote' => null,
        'employee' => null,
        'logoUrl' => null,
        'employer' => null,
        'employerAddress' => null,
        'hmrcDetails' => null,
        'payOptions' => null,
        'employmentDetails' => null,
        'personalDetails' => null,
        'totals' => null,
        'totalsYtd' => null,
        'lines' => null,
        'employerNi' => 'double',
        'employerPensionContribs' => 'double',
        'depts' => null,
        'umbrellaPayment' => null,
        'costCentres' => null,
        'employeeRoleAnalysisCategoryCodes' => null,
        'employeeCostCentres' => null,
        'departmentMemberships' => null,
        'pensionContributionsByRole' => null,
        'employerPensionContributions' => null,
        'employeePensionContributions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'isClosed' => false,
        'taxYear' => false,
        'payPeriod' => false,
        'periodNumber' => false,
        'period' => true,
        'from' => false,
        'to' => false,
        'paymentDate' => false,
        'note' => true,
        'allowanceNote' => true,
        'employee' => false,
        'logoUrl' => true,
        'employer' => false,
        'employerAddress' => false,
        'hmrcDetails' => false,
        'payOptions' => false,
        'employmentDetails' => false,
        'personalDetails' => false,
        'totals' => false,
        'totalsYtd' => false,
        'lines' => true,
        'employerNi' => false,
        'employerPensionContribs' => false,
        'depts' => true,
        'umbrellaPayment' => false,
        'costCentres' => true,
        'employeeRoleAnalysisCategoryCodes' => true,
        'employeeCostCentres' => true,
        'departmentMemberships' => true,
        'pensionContributionsByRole' => true,
        'employerPensionContributions' => true,
        'employeePensionContributions' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'isClosed' => 'isClosed',
        'taxYear' => 'taxYear',
        'payPeriod' => 'payPeriod',
        'periodNumber' => 'periodNumber',
        'period' => 'period',
        'from' => 'from',
        'to' => 'to',
        'paymentDate' => 'paymentDate',
        'note' => 'note',
        'allowanceNote' => 'allowanceNote',
        'employee' => 'employee',
        'logoUrl' => 'logoUrl',
        'employer' => 'employer',
        'employerAddress' => 'employerAddress',
        'hmrcDetails' => 'hmrcDetails',
        'payOptions' => 'payOptions',
        'employmentDetails' => 'employmentDetails',
        'personalDetails' => 'personalDetails',
        'totals' => 'totals',
        'totalsYtd' => 'totalsYtd',
        'lines' => 'lines',
        'employerNi' => 'employerNi',
        'employerPensionContribs' => 'employerPensionContribs',
        'depts' => 'depts',
        'umbrellaPayment' => 'umbrellaPayment',
        'costCentres' => 'costCentres',
        'employeeRoleAnalysisCategoryCodes' => 'employeeRoleAnalysisCategoryCodes',
        'employeeCostCentres' => 'employeeCostCentres',
        'departmentMemberships' => 'departmentMemberships',
        'pensionContributionsByRole' => 'pensionContributionsByRole',
        'employerPensionContributions' => 'employerPensionContributions',
        'employeePensionContributions' => 'employeePensionContributions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'isClosed' => 'setIsClosed',
        'taxYear' => 'setTaxYear',
        'payPeriod' => 'setPayPeriod',
        'periodNumber' => 'setPeriodNumber',
        'period' => 'setPeriod',
        'from' => 'setFrom',
        'to' => 'setTo',
        'paymentDate' => 'setPaymentDate',
        'note' => 'setNote',
        'allowanceNote' => 'setAllowanceNote',
        'employee' => 'setEmployee',
        'logoUrl' => 'setLogoUrl',
        'employer' => 'setEmployer',
        'employerAddress' => 'setEmployerAddress',
        'hmrcDetails' => 'setHmrcDetails',
        'payOptions' => 'setPayOptions',
        'employmentDetails' => 'setEmploymentDetails',
        'personalDetails' => 'setPersonalDetails',
        'totals' => 'setTotals',
        'totalsYtd' => 'setTotalsYtd',
        'lines' => 'setLines',
        'employerNi' => 'setEmployerNi',
        'employerPensionContribs' => 'setEmployerPensionContribs',
        'depts' => 'setDepts',
        'umbrellaPayment' => 'setUmbrellaPayment',
        'costCentres' => 'setCostCentres',
        'employeeRoleAnalysisCategoryCodes' => 'setEmployeeRoleAnalysisCategoryCodes',
        'employeeCostCentres' => 'setEmployeeCostCentres',
        'departmentMemberships' => 'setDepartmentMemberships',
        'pensionContributionsByRole' => 'setPensionContributionsByRole',
        'employerPensionContributions' => 'setEmployerPensionContributions',
        'employeePensionContributions' => 'setEmployeePensionContributions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'isClosed' => 'getIsClosed',
        'taxYear' => 'getTaxYear',
        'payPeriod' => 'getPayPeriod',
        'periodNumber' => 'getPeriodNumber',
        'period' => 'getPeriod',
        'from' => 'getFrom',
        'to' => 'getTo',
        'paymentDate' => 'getPaymentDate',
        'note' => 'getNote',
        'allowanceNote' => 'getAllowanceNote',
        'employee' => 'getEmployee',
        'logoUrl' => 'getLogoUrl',
        'employer' => 'getEmployer',
        'employerAddress' => 'getEmployerAddress',
        'hmrcDetails' => 'getHmrcDetails',
        'payOptions' => 'getPayOptions',
        'employmentDetails' => 'getEmploymentDetails',
        'personalDetails' => 'getPersonalDetails',
        'totals' => 'getTotals',
        'totalsYtd' => 'getTotalsYtd',
        'lines' => 'getLines',
        'employerNi' => 'getEmployerNi',
        'employerPensionContribs' => 'getEmployerPensionContribs',
        'depts' => 'getDepts',
        'umbrellaPayment' => 'getUmbrellaPayment',
        'costCentres' => 'getCostCentres',
        'employeeRoleAnalysisCategoryCodes' => 'getEmployeeRoleAnalysisCategoryCodes',
        'employeeCostCentres' => 'getEmployeeCostCentres',
        'departmentMemberships' => 'getDepartmentMemberships',
        'pensionContributionsByRole' => 'getPensionContributionsByRole',
        'employerPensionContributions' => 'getEmployerPensionContributions',
        'employeePensionContributions' => 'getEmployeePensionContributions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('isClosed', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('payPeriod', $data ?? [], null);
        $this->setIfExists('periodNumber', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('allowanceNote', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('logoUrl', $data ?? [], null);
        $this->setIfExists('employer', $data ?? [], null);
        $this->setIfExists('employerAddress', $data ?? [], null);
        $this->setIfExists('hmrcDetails', $data ?? [], null);
        $this->setIfExists('payOptions', $data ?? [], null);
        $this->setIfExists('employmentDetails', $data ?? [], null);
        $this->setIfExists('personalDetails', $data ?? [], null);
        $this->setIfExists('totals', $data ?? [], null);
        $this->setIfExists('totalsYtd', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('employerNi', $data ?? [], null);
        $this->setIfExists('employerPensionContribs', $data ?? [], null);
        $this->setIfExists('depts', $data ?? [], null);
        $this->setIfExists('umbrellaPayment', $data ?? [], null);
        $this->setIfExists('costCentres', $data ?? [], null);
        $this->setIfExists('employeeRoleAnalysisCategoryCodes', $data ?? [], null);
        $this->setIfExists('employeeCostCentres', $data ?? [], null);
        $this->setIfExists('departmentMemberships', $data ?? [], null);
        $this->setIfExists('pensionContributionsByRole', $data ?? [], null);
        $this->setIfExists('employerPensionContributions', $data ?? [], null);
        $this->setIfExists('employeePensionContributions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isClosed
     *
     * @return bool|null
     */
    public function getIsClosed(): ?bool
    {
        return $this->container['isClosed'];
    }

    /**
     * Sets isClosed
     *
     * @param bool|null $isClosed [readonly] Indicates if the Payrun has been finalised
     *
     * @return $this
     */
    public function setIsClosed(?bool $isClosed): static
    {
        if (is_null($isClosed)) {
            throw new InvalidArgumentException('non-nullable isClosed cannot be null');
        }
        $this->container['isClosed'] = $isClosed;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets payPeriod
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getPayPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['payPeriod'];
    }

    /**
     * Sets payPeriod
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod
     *
     * @return $this
     */
    public function setPayPeriod(?\SynergiTech\Staffology\Model\PayPeriods $payPeriod): static
    {
        if (is_null($payPeriod)) {
            throw new InvalidArgumentException('non-nullable payPeriod cannot be null');
        }
        $this->container['payPeriod'] = $payPeriod;

        return $this;
    }

    /**
     * Gets periodNumber
     *
     * @return int|null
     */
    public function getPeriodNumber(): ?int
    {
        return $this->container['periodNumber'];
    }

    /**
     * Sets periodNumber
     *
     * @param int|null $periodNumber periodNumber
     *
     * @return $this
     */
    public function setPeriodNumber(?int $periodNumber): static
    {
        if (is_null($periodNumber)) {
            throw new InvalidArgumentException('non-nullable periodNumber cannot be null');
        }
        $this->container['periodNumber'] = $periodNumber;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod(): ?string
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period [readonly] A description of the period that Payslip relates to.
     *
     * @return $this
     */
    public function setPeriod(?string $period): static
    {
        if (is_null($period)) {
            array_push($this->openAPINullablesSetToNull, 'period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime|null
     */
    public function getFrom(): ?\DateTime
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime|null $from [readonly] The start date of the period this Payslip covers.
     *
     * @return $this
     */
    public function setFrom(?\DateTime $from): static
    {
        if (is_null($from)) {
            throw new InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \DateTime|null
     */
    public function getTo(): ?\DateTime
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \DateTime|null $to [readonly] The end date of the period this Payslip covers.
     *
     * @return $this
     */
    public function setTo(?\DateTime $to): static
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return \DateTime|null
     */
    public function getPaymentDate(): ?\DateTime
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param \DateTime|null $paymentDate [readonly] The date the Employee will be paid on
     *
     * @return $this
     */
    public function setPaymentDate(?\DateTime $paymentDate): static
    {
        if (is_null($paymentDate)) {
            throw new InvalidArgumentException('non-nullable paymentDate cannot be null');
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote(): ?string
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note [readonly] Any note that should appear on the payslip
     *
     * @return $this
     */
    public function setNote(?string $note): static
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets allowanceNote
     *
     * @return string|null
     */
    public function getAllowanceNote(): ?string
    {
        return $this->container['allowanceNote'];
    }

    /**
     * Sets allowanceNote
     *
     * @param string|null $allowanceNote [readonly] Details of remaining allowance to show on payslip
     *
     * @return $this
     */
    public function setAllowanceNote(?string $allowanceNote): static
    {
        if (is_null($allowanceNote)) {
            array_push($this->openAPINullablesSetToNull, 'allowanceNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowanceNote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowanceNote'] = $allowanceNote;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets logoUrl
     *
     * @return string|null
     */
    public function getLogoUrl(): ?string
    {
        return $this->container['logoUrl'];
    }

    /**
     * Sets logoUrl
     *
     * @param string|null $logoUrl [readonly] The Logo to include on the payslip
     *
     * @return $this
     */
    public function setLogoUrl(?string $logoUrl): static
    {
        if (is_null($logoUrl)) {
            array_push($this->openAPINullablesSetToNull, 'logoUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logoUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logoUrl'] = $logoUrl;

        return $this;
    }

    /**
     * Gets employer
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployer(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employer'];
    }

    /**
     * Sets employer
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employer employer
     *
     * @return $this
     */
    public function setEmployer(?\SynergiTech\Staffology\Model\Item $employer): static
    {
        if (is_null($employer)) {
            throw new InvalidArgumentException('non-nullable employer cannot be null');
        }
        $this->container['employer'] = $employer;

        return $this;
    }

    /**
     * Gets employerAddress
     *
     * @return \SynergiTech\Staffology\Model\Address|null
     */
    public function getEmployerAddress(): ?\SynergiTech\Staffology\Model\Address
    {
        return $this->container['employerAddress'];
    }

    /**
     * Sets employerAddress
     *
     * @param \SynergiTech\Staffology\Model\Address|null $employerAddress employerAddress
     *
     * @return $this
     */
    public function setEmployerAddress(?\SynergiTech\Staffology\Model\Address $employerAddress): static
    {
        if (is_null($employerAddress)) {
            throw new InvalidArgumentException('non-nullable employerAddress cannot be null');
        }
        $this->container['employerAddress'] = $employerAddress;

        return $this;
    }

    /**
     * Gets hmrcDetails
     *
     * @return \SynergiTech\Staffology\Model\HmrcDetails|null
     */
    public function getHmrcDetails(): ?\SynergiTech\Staffology\Model\HmrcDetails
    {
        return $this->container['hmrcDetails'];
    }

    /**
     * Sets hmrcDetails
     *
     * @param \SynergiTech\Staffology\Model\HmrcDetails|null $hmrcDetails hmrcDetails
     *
     * @return $this
     */
    public function setHmrcDetails(?\SynergiTech\Staffology\Model\HmrcDetails $hmrcDetails): static
    {
        if (is_null($hmrcDetails)) {
            throw new InvalidArgumentException('non-nullable hmrcDetails cannot be null');
        }
        $this->container['hmrcDetails'] = $hmrcDetails;

        return $this;
    }

    /**
     * Gets payOptions
     *
     * @return \SynergiTech\Staffology\Model\PayOptions|null
     */
    public function getPayOptions(): ?\SynergiTech\Staffology\Model\PayOptions
    {
        return $this->container['payOptions'];
    }

    /**
     * Sets payOptions
     *
     * @param \SynergiTech\Staffology\Model\PayOptions|null $payOptions payOptions
     *
     * @return $this
     */
    public function setPayOptions(?\SynergiTech\Staffology\Model\PayOptions $payOptions): static
    {
        if (is_null($payOptions)) {
            throw new InvalidArgumentException('non-nullable payOptions cannot be null');
        }
        $this->container['payOptions'] = $payOptions;

        return $this;
    }

    /**
     * Gets employmentDetails
     *
     * @return \SynergiTech\Staffology\Model\EmploymentDetails|null
     */
    public function getEmploymentDetails(): ?\SynergiTech\Staffology\Model\EmploymentDetails
    {
        return $this->container['employmentDetails'];
    }

    /**
     * Sets employmentDetails
     *
     * @param \SynergiTech\Staffology\Model\EmploymentDetails|null $employmentDetails employmentDetails
     *
     * @return $this
     */
    public function setEmploymentDetails(?\SynergiTech\Staffology\Model\EmploymentDetails $employmentDetails): static
    {
        if (is_null($employmentDetails)) {
            throw new InvalidArgumentException('non-nullable employmentDetails cannot be null');
        }
        $this->container['employmentDetails'] = $employmentDetails;

        return $this;
    }

    /**
     * Gets personalDetails
     *
     * @return \SynergiTech\Staffology\Model\PersonalDetails|null
     */
    public function getPersonalDetails(): ?\SynergiTech\Staffology\Model\PersonalDetails
    {
        return $this->container['personalDetails'];
    }

    /**
     * Sets personalDetails
     *
     * @param \SynergiTech\Staffology\Model\PersonalDetails|null $personalDetails personalDetails
     *
     * @return $this
     */
    public function setPersonalDetails(?\SynergiTech\Staffology\Model\PersonalDetails $personalDetails): static
    {
        if (is_null($personalDetails)) {
            throw new InvalidArgumentException('non-nullable personalDetails cannot be null');
        }
        $this->container['personalDetails'] = $personalDetails;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \SynergiTech\Staffology\Model\PayRunTotals|null
     */
    public function getTotals(): ?\SynergiTech\Staffology\Model\PayRunTotals
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \SynergiTech\Staffology\Model\PayRunTotals|null $totals totals
     *
     * @return $this
     */
    public function setTotals(?\SynergiTech\Staffology\Model\PayRunTotals $totals): static
    {
        if (is_null($totals)) {
            throw new InvalidArgumentException('non-nullable totals cannot be null');
        }
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets totalsYtd
     *
     * @return \SynergiTech\Staffology\Model\PayRunTotals|null
     */
    public function getTotalsYtd(): ?\SynergiTech\Staffology\Model\PayRunTotals
    {
        return $this->container['totalsYtd'];
    }

    /**
     * Sets totalsYtd
     *
     * @param \SynergiTech\Staffology\Model\PayRunTotals|null $totalsYtd totalsYtd
     *
     * @return $this
     */
    public function setTotalsYtd(?\SynergiTech\Staffology\Model\PayRunTotals $totalsYtd): static
    {
        if (is_null($totalsYtd)) {
            throw new InvalidArgumentException('non-nullable totalsYtd cannot be null');
        }
        $this->container['totalsYtd'] = $totalsYtd;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \SynergiTech\Staffology\Model\PayslipLine[]|null
     */
    public function getLines(): ?array
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \SynergiTech\Staffology\Model\PayslipLine[]|null $lines [readonly] The lines to display on the Payslip
     *
     * @return $this
     */
    public function setLines(?array $lines): static
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets employerNi
     *
     * @return float|null
     */
    public function getEmployerNi(): ?float
    {
        return $this->container['employerNi'];
    }

    /**
     * Sets employerNi
     *
     * @param float|null $employerNi [readonly] The Employer NI Contribution amount
     *
     * @return $this
     */
    public function setEmployerNi(?float $employerNi): static
    {
        if (is_null($employerNi)) {
            throw new InvalidArgumentException('non-nullable employerNi cannot be null');
        }
        $this->container['employerNi'] = $employerNi;

        return $this;
    }

    /**
     * Gets employerPensionContribs
     *
     * @return float|null
     */
    public function getEmployerPensionContribs(): ?float
    {
        return $this->container['employerPensionContribs'];
    }

    /**
     * Sets employerPensionContribs
     *
     * @param float|null $employerPensionContribs [readonly] The Employer Pension Contribution Amount
     *
     * @return $this
     */
    public function setEmployerPensionContribs(?float $employerPensionContribs): static
    {
        if (is_null($employerPensionContribs)) {
            throw new InvalidArgumentException('non-nullable employerPensionContribs cannot be null');
        }
        $this->container['employerPensionContribs'] = $employerPensionContribs;

        return $this;
    }

    /**
     * Gets depts
     *
     * @return \SynergiTech\Staffology\Model\StringDecimalKeyValuePair[]|null
     */
    public function getDepts(): ?array
    {
        return $this->container['depts'];
    }

    /**
     * Sets depts
     *
     * @param \SynergiTech\Staffology\Model\StringDecimalKeyValuePair[]|null $depts The employees Department Membership(s) at the time the payrun was finalised
     *
     * @return $this
     */
    public function setDepts(?array $depts): static
    {
        if (is_null($depts)) {
            array_push($this->openAPINullablesSetToNull, 'depts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depts'] = $depts;

        return $this;
    }

    /**
     * Gets umbrellaPayment
     *
     * @return \SynergiTech\Staffology\Model\UmbrellaPayment|null
     */
    public function getUmbrellaPayment(): ?\SynergiTech\Staffology\Model\UmbrellaPayment
    {
        return $this->container['umbrellaPayment'];
    }

    /**
     * Sets umbrellaPayment
     *
     * @param \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment umbrellaPayment
     *
     * @return $this
     */
    public function setUmbrellaPayment(?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment): static
    {
        if (is_null($umbrellaPayment)) {
            throw new InvalidArgumentException('non-nullable umbrellaPayment cannot be null');
        }
        $this->container['umbrellaPayment'] = $umbrellaPayment;

        return $this;
    }

    /**
     * Gets costCentres
     *
     * @return \SynergiTech\Staffology\Model\StringDecimalKeyValuePair[]|null
     */
    public function getCostCentres(): ?array
    {
        return $this->container['costCentres'];
    }

    /**
     * Sets costCentres
     *
     * @param \SynergiTech\Staffology\Model\StringDecimalKeyValuePair[]|null $costCentres The employees Cost Centre Membership(s) only populated when creating journals
     *
     * @return $this
     */
    public function setCostCentres(?array $costCentres): static
    {
        if (is_null($costCentres)) {
            array_push($this->openAPINullablesSetToNull, 'costCentres');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentres', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentres'] = $costCentres;

        return $this;
    }

    /**
     * Gets employeeRoleAnalysisCategoryCodes
     *
     * @return \SynergiTech\Staffology\Model\EmployeeRoleAnalysisCategoryCode[]|null
     */
    public function getEmployeeRoleAnalysisCategoryCodes(): ?array
    {
        return $this->container['employeeRoleAnalysisCategoryCodes'];
    }

    /**
     * Sets employeeRoleAnalysisCategoryCodes
     *
     * @param \SynergiTech\Staffology\Model\EmployeeRoleAnalysisCategoryCode[]|null $employeeRoleAnalysisCategoryCodes The EmployeeRoleAnalysisCategoryCodes only populated when creating journals
     *
     * @return $this
     */
    public function setEmployeeRoleAnalysisCategoryCodes(?array $employeeRoleAnalysisCategoryCodes): static
    {
        if (is_null($employeeRoleAnalysisCategoryCodes)) {
            array_push($this->openAPINullablesSetToNull, 'employeeRoleAnalysisCategoryCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeRoleAnalysisCategoryCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeRoleAnalysisCategoryCodes'] = $employeeRoleAnalysisCategoryCodes;

        return $this;
    }

    /**
     * Gets employeeCostCentres
     *
     * @return \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null
     */
    public function getEmployeeCostCentres(): ?array
    {
        return $this->container['employeeCostCentres'];
    }

    /**
     * Sets employeeCostCentres
     *
     * @param \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentres The Employee Cost Centre Membership(s) by role only populated when creating journals
     *
     * @return $this
     */
    public function setEmployeeCostCentres(?array $employeeCostCentres): static
    {
        if (is_null($employeeCostCentres)) {
            array_push($this->openAPINullablesSetToNull, 'employeeCostCentres');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeCostCentres', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeCostCentres'] = $employeeCostCentres;

        return $this;
    }

    /**
     * Gets departmentMemberships
     *
     * @return \SynergiTech\Staffology\Model\DepartmentMembership[]|null
     */
    public function getDepartmentMemberships(): ?array
    {
        return $this->container['departmentMemberships'];
    }

    /**
     * Sets departmentMemberships
     *
     * @param \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMemberships The Employee Department Membership(s) by role only populated when creating journals
     *
     * @return $this
     */
    public function setDepartmentMemberships(?array $departmentMemberships): static
    {
        if (is_null($departmentMemberships)) {
            array_push($this->openAPINullablesSetToNull, 'departmentMemberships');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentMemberships', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departmentMemberships'] = $departmentMemberships;

        return $this;
    }

    /**
     * Gets pensionContributionsByRole
     *
     * @return \SynergiTech\Staffology\Model\Item[]|null
     */
    public function getPensionContributionsByRole(): ?array
    {
        return $this->container['pensionContributionsByRole'];
    }

    /**
     * Sets pensionContributionsByRole
     *
     * @param \SynergiTech\Staffology\Model\Item[]|null $pensionContributionsByRole The Pension Employer contribution by role only populated when creating journals
     *
     * @return $this
     */
    public function setPensionContributionsByRole(?array $pensionContributionsByRole): static
    {
        if (is_null($pensionContributionsByRole)) {
            array_push($this->openAPINullablesSetToNull, 'pensionContributionsByRole');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionContributionsByRole', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionContributionsByRole'] = $pensionContributionsByRole;

        return $this;
    }

    /**
     * Gets employerPensionContributions
     *
     * @return \SynergiTech\Staffology\Model\EmployerPensionContribution[]|null
     */
    public function getEmployerPensionContributions(): ?array
    {
        return $this->container['employerPensionContributions'];
    }

    /**
     * Sets employerPensionContributions
     *
     * @param \SynergiTech\Staffology\Model\EmployerPensionContribution[]|null $employerPensionContributions [readonly] The list of Employer Pension Contribution(s)
     *
     * @return $this
     */
    public function setEmployerPensionContributions(?array $employerPensionContributions): static
    {
        if (is_null($employerPensionContributions)) {
            array_push($this->openAPINullablesSetToNull, 'employerPensionContributions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerPensionContributions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerPensionContributions'] = $employerPensionContributions;

        return $this;
    }

    /**
     * Gets employeePensionContributions
     *
     * @return array<string,\SynergiTech\Staffology\Model\DecimalDecimalBooleanPensionRuleValueTuple>|null
     */
    public function getEmployeePensionContributions(): ?array
    {
        return $this->container['employeePensionContributions'];
    }

    /**
     * Sets employeePensionContributions
     *
     * @param array<string,\SynergiTech\Staffology\Model\DecimalDecimalBooleanPensionRuleValueTuple>|null $employeePensionContributions Dictionary of Pension Contributions(s) Keyed on PensionId containing Employee Pension and AVC Contribution(s) Bfd, AVC indicator and pension rule
     *
     * @return $this
     */
    public function setEmployeePensionContributions(?array $employeePensionContributions): static
    {
        if (is_null($employeePensionContributions)) {
            array_push($this->openAPINullablesSetToNull, 'employeePensionContributions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeePensionContributions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeePensionContributions'] = $employeePensionContributions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


