<?php
/**
 * Benefit
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Benefit Class Doc Comment
 *
 * @description Used to represent Benefits and Expenses
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Benefit implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Benefit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'type' => '\SynergiTech\Staffology\Model\BenefitType',
        'declarationType' => '\SynergiTech\Staffology\Model\BenefitDeclarationType',
        'benefitPayrolled' => '\SynergiTech\Staffology\Model\BenefitPayrolled[]',
        'description' => 'string',
        'value' => 'float',
        'employeeContribution' => 'float',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'useProRata' => 'bool',
        'cashEquivalent' => 'float',
        'assetType' => '\SynergiTech\Staffology\Model\BenefitDetailsAssetType',
        'useOfAssetType' => '\SynergiTech\Staffology\Model\BenefitDetailsUseOfAssetType',
        'class1AType' => '\SynergiTech\Staffology\Model\BenefitDetailsClass1AType',
        'nonClass1AType' => '\SynergiTech\Staffology\Model\BenefitDetailsNonClass1AType',
        'paymentType' => '\SynergiTech\Staffology\Model\BenefitDetailsPaymentType',
        'tradingOrganisation' => 'bool',
        'cashEquivalentFuel' => 'float',
        'loan' => '\SynergiTech\Staffology\Model\BenefitDetailsLoan',
        'car' => '\SynergiTech\Staffology\Model\BenefitDetailsCar',
        'openingBalance' => 'float',
        'paid' => 'float',
        'bikOutstanding' => 'float',
        'isPeriodValue' => 'bool',
        'overrideOpeningBalance' => 'bool',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxYear' => null,
        'type' => null,
        'declarationType' => null,
        'benefitPayrolled' => null,
        'description' => null,
        'value' => 'double',
        'employeeContribution' => 'double',
        'startDate' => 'date',
        'endDate' => 'date',
        'useProRata' => null,
        'cashEquivalent' => 'double',
        'assetType' => null,
        'useOfAssetType' => null,
        'class1AType' => null,
        'nonClass1AType' => null,
        'paymentType' => null,
        'tradingOrganisation' => null,
        'cashEquivalentFuel' => 'double',
        'loan' => null,
        'car' => null,
        'openingBalance' => 'double',
        'paid' => 'double',
        'bikOutstanding' => 'double',
        'isPeriodValue' => null,
        'overrideOpeningBalance' => null,
        'employee' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxYear' => false,
        'type' => false,
        'declarationType' => false,
        'benefitPayrolled' => true,
        'description' => true,
        'value' => false,
        'employeeContribution' => false,
        'startDate' => true,
        'endDate' => true,
        'useProRata' => false,
        'cashEquivalent' => false,
        'assetType' => false,
        'useOfAssetType' => false,
        'class1AType' => false,
        'nonClass1AType' => false,
        'paymentType' => false,
        'tradingOrganisation' => false,
        'cashEquivalentFuel' => false,
        'loan' => false,
        'car' => false,
        'openingBalance' => false,
        'paid' => false,
        'bikOutstanding' => false,
        'isPeriodValue' => false,
        'overrideOpeningBalance' => false,
        'employee' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxYear' => 'taxYear',
        'type' => 'type',
        'declarationType' => 'declarationType',
        'benefitPayrolled' => 'benefitPayrolled',
        'description' => 'description',
        'value' => 'value',
        'employeeContribution' => 'employeeContribution',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'useProRata' => 'useProRata',
        'cashEquivalent' => 'cashEquivalent',
        'assetType' => 'assetType',
        'useOfAssetType' => 'useOfAssetType',
        'class1AType' => 'class1AType',
        'nonClass1AType' => 'nonClass1AType',
        'paymentType' => 'paymentType',
        'tradingOrganisation' => 'tradingOrganisation',
        'cashEquivalentFuel' => 'cashEquivalentFuel',
        'loan' => 'loan',
        'car' => 'car',
        'openingBalance' => 'openingBalance',
        'paid' => 'paid',
        'bikOutstanding' => 'bikOutstanding',
        'isPeriodValue' => 'isPeriodValue',
        'overrideOpeningBalance' => 'overrideOpeningBalance',
        'employee' => 'employee',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxYear' => 'setTaxYear',
        'type' => 'setType',
        'declarationType' => 'setDeclarationType',
        'benefitPayrolled' => 'setBenefitPayrolled',
        'description' => 'setDescription',
        'value' => 'setValue',
        'employeeContribution' => 'setEmployeeContribution',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'useProRata' => 'setUseProRata',
        'cashEquivalent' => 'setCashEquivalent',
        'assetType' => 'setAssetType',
        'useOfAssetType' => 'setUseOfAssetType',
        'class1AType' => 'setClass1AType',
        'nonClass1AType' => 'setNonClass1AType',
        'paymentType' => 'setPaymentType',
        'tradingOrganisation' => 'setTradingOrganisation',
        'cashEquivalentFuel' => 'setCashEquivalentFuel',
        'loan' => 'setLoan',
        'car' => 'setCar',
        'openingBalance' => 'setOpeningBalance',
        'paid' => 'setPaid',
        'bikOutstanding' => 'setBikOutstanding',
        'isPeriodValue' => 'setIsPeriodValue',
        'overrideOpeningBalance' => 'setOverrideOpeningBalance',
        'employee' => 'setEmployee',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxYear' => 'getTaxYear',
        'type' => 'getType',
        'declarationType' => 'getDeclarationType',
        'benefitPayrolled' => 'getBenefitPayrolled',
        'description' => 'getDescription',
        'value' => 'getValue',
        'employeeContribution' => 'getEmployeeContribution',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'useProRata' => 'getUseProRata',
        'cashEquivalent' => 'getCashEquivalent',
        'assetType' => 'getAssetType',
        'useOfAssetType' => 'getUseOfAssetType',
        'class1AType' => 'getClass1AType',
        'nonClass1AType' => 'getNonClass1AType',
        'paymentType' => 'getPaymentType',
        'tradingOrganisation' => 'getTradingOrganisation',
        'cashEquivalentFuel' => 'getCashEquivalentFuel',
        'loan' => 'getLoan',
        'car' => 'getCar',
        'openingBalance' => 'getOpeningBalance',
        'paid' => 'getPaid',
        'bikOutstanding' => 'getBikOutstanding',
        'isPeriodValue' => 'getIsPeriodValue',
        'overrideOpeningBalance' => 'getOverrideOpeningBalance',
        'employee' => 'getEmployee',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('declarationType', $data ?? [], null);
        $this->setIfExists('benefitPayrolled', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('employeeContribution', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('useProRata', $data ?? [], null);
        $this->setIfExists('cashEquivalent', $data ?? [], null);
        $this->setIfExists('assetType', $data ?? [], null);
        $this->setIfExists('useOfAssetType', $data ?? [], null);
        $this->setIfExists('class1AType', $data ?? [], null);
        $this->setIfExists('nonClass1AType', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('tradingOrganisation', $data ?? [], null);
        $this->setIfExists('cashEquivalentFuel', $data ?? [], null);
        $this->setIfExists('loan', $data ?? [], null);
        $this->setIfExists('car', $data ?? [], null);
        $this->setIfExists('openingBalance', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('bikOutstanding', $data ?? [], null);
        $this->setIfExists('isPeriodValue', $data ?? [], null);
        $this->setIfExists('overrideOpeningBalance', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 120)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 120.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\BenefitType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\BenefitType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\BenefitType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\BenefitType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets declarationType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDeclarationType|null
     */
    public function getDeclarationType(): ?\SynergiTech\Staffology\Model\BenefitDeclarationType
    {
        return $this->container['declarationType'];
    }

    /**
     * Sets declarationType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDeclarationType|null $declarationType declarationType
     *
     * @return $this
     */
    public function setDeclarationType(?\SynergiTech\Staffology\Model\BenefitDeclarationType $declarationType): static
    {
        if (is_null($declarationType)) {
            throw new InvalidArgumentException('non-nullable declarationType cannot be null');
        }
        $this->container['declarationType'] = $declarationType;

        return $this;
    }

    /**
     * Gets benefitPayrolled
     *
     * @return \SynergiTech\Staffology\Model\BenefitPayrolled[]|null
     */
    public function getBenefitPayrolled(): ?array
    {
        return $this->container['benefitPayrolled'];
    }

    /**
     * Sets benefitPayrolled
     *
     * @param \SynergiTech\Staffology\Model\BenefitPayrolled[]|null $benefitPayrolled benefitPayrolled
     *
     * @return $this
     */
    public function setBenefitPayrolled(?array $benefitPayrolled): static
    {
        if (is_null($benefitPayrolled)) {
            array_push($this->openAPINullablesSetToNull, 'benefitPayrolled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefitPayrolled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefitPayrolled'] = $benefitPayrolled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of this benefit
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 120)) {
            throw new InvalidArgumentException('invalid length for $description when calling Benefit., must be smaller than or equal to 120.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return $this
     */
    public function setValue(?float $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets employeeContribution
     *
     * @return float|null
     */
    public function getEmployeeContribution(): ?float
    {
        return $this->container['employeeContribution'];
    }

    /**
     * Sets employeeContribution
     *
     * @param float|null $employeeContribution employeeContribution
     *
     * @return $this
     */
    public function setEmployeeContribution(?float $employeeContribution): static
    {
        if (is_null($employeeContribution)) {
            throw new InvalidArgumentException('non-nullable employeeContribution cannot be null');
        }
        $this->container['employeeContribution'] = $employeeContribution;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate The date the benefits starts if different to the start date of the TaxYear
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $startDate): static
    {
        if (is_null($startDate)) {
            array_push($this->openAPINullablesSetToNull, 'startDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The date the benefits ends if different to the end date of the TaxYear
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $endDate): static
    {
        if (is_null($endDate)) {
            array_push($this->openAPINullablesSetToNull, 'endDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets useProRata
     *
     * @return bool|null
     */
    public function getUseProRata(): ?bool
    {
        return $this->container['useProRata'];
    }

    /**
     * Sets useProRata
     *
     * @param bool|null $useProRata Benefit calculation should be done on pro rata rules
     *
     * @return $this
     */
    public function setUseProRata(?bool $useProRata): static
    {
        if (is_null($useProRata)) {
            throw new InvalidArgumentException('non-nullable useProRata cannot be null');
        }
        $this->container['useProRata'] = $useProRata;

        return $this;
    }

    /**
     * Gets cashEquivalent
     *
     * @return float|null
     */
    public function getCashEquivalent(): ?float
    {
        return $this->container['cashEquivalent'];
    }

    /**
     * Sets cashEquivalent
     *
     * @param float|null $cashEquivalent [readonly]
     *
     * @return $this
     */
    public function setCashEquivalent(?float $cashEquivalent): static
    {
        if (is_null($cashEquivalent)) {
            throw new InvalidArgumentException('non-nullable cashEquivalent cannot be null');
        }
        $this->container['cashEquivalent'] = $cashEquivalent;

        return $this;
    }

    /**
     * Gets assetType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsAssetType|null
     */
    public function getAssetType(): ?\SynergiTech\Staffology\Model\BenefitDetailsAssetType
    {
        return $this->container['assetType'];
    }

    /**
     * Sets assetType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsAssetType|null $assetType assetType
     *
     * @return $this
     */
    public function setAssetType(?\SynergiTech\Staffology\Model\BenefitDetailsAssetType $assetType): static
    {
        if (is_null($assetType)) {
            throw new InvalidArgumentException('non-nullable assetType cannot be null');
        }
        $this->container['assetType'] = $assetType;

        return $this;
    }

    /**
     * Gets useOfAssetType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsUseOfAssetType|null
     */
    public function getUseOfAssetType(): ?\SynergiTech\Staffology\Model\BenefitDetailsUseOfAssetType
    {
        return $this->container['useOfAssetType'];
    }

    /**
     * Sets useOfAssetType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsUseOfAssetType|null $useOfAssetType useOfAssetType
     *
     * @return $this
     */
    public function setUseOfAssetType(?\SynergiTech\Staffology\Model\BenefitDetailsUseOfAssetType $useOfAssetType): static
    {
        if (is_null($useOfAssetType)) {
            throw new InvalidArgumentException('non-nullable useOfAssetType cannot be null');
        }
        $this->container['useOfAssetType'] = $useOfAssetType;

        return $this;
    }

    /**
     * Gets class1AType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsClass1AType|null
     */
    public function getClass1AType(): ?\SynergiTech\Staffology\Model\BenefitDetailsClass1AType
    {
        return $this->container['class1AType'];
    }

    /**
     * Sets class1AType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsClass1AType|null $class1AType class1AType
     *
     * @return $this
     */
    public function setClass1AType(?\SynergiTech\Staffology\Model\BenefitDetailsClass1AType $class1AType): static
    {
        if (is_null($class1AType)) {
            throw new InvalidArgumentException('non-nullable class1AType cannot be null');
        }
        $this->container['class1AType'] = $class1AType;

        return $this;
    }

    /**
     * Gets nonClass1AType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsNonClass1AType|null
     */
    public function getNonClass1AType(): ?\SynergiTech\Staffology\Model\BenefitDetailsNonClass1AType
    {
        return $this->container['nonClass1AType'];
    }

    /**
     * Sets nonClass1AType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsNonClass1AType|null $nonClass1AType nonClass1AType
     *
     * @return $this
     */
    public function setNonClass1AType(?\SynergiTech\Staffology\Model\BenefitDetailsNonClass1AType $nonClass1AType): static
    {
        if (is_null($nonClass1AType)) {
            throw new InvalidArgumentException('non-nullable nonClass1AType cannot be null');
        }
        $this->container['nonClass1AType'] = $nonClass1AType;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsPaymentType|null
     */
    public function getPaymentType(): ?\SynergiTech\Staffology\Model\BenefitDetailsPaymentType
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsPaymentType|null $paymentType paymentType
     *
     * @return $this
     */
    public function setPaymentType(?\SynergiTech\Staffology\Model\BenefitDetailsPaymentType $paymentType): static
    {
        if (is_null($paymentType)) {
            throw new InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets tradingOrganisation
     *
     * @return bool|null
     */
    public function getTradingOrganisation(): ?bool
    {
        return $this->container['tradingOrganisation'];
    }

    /**
     * Sets tradingOrganisation
     *
     * @param bool|null $tradingOrganisation Only relevant to Benefits with Type Entertainment
     *
     * @return $this
     */
    public function setTradingOrganisation(?bool $tradingOrganisation): static
    {
        if (is_null($tradingOrganisation)) {
            throw new InvalidArgumentException('non-nullable tradingOrganisation cannot be null');
        }
        $this->container['tradingOrganisation'] = $tradingOrganisation;

        return $this;
    }

    /**
     * Gets cashEquivalentFuel
     *
     * @return float|null
     */
    public function getCashEquivalentFuel(): ?float
    {
        return $this->container['cashEquivalentFuel'];
    }

    /**
     * Sets cashEquivalentFuel
     *
     * @param float|null $cashEquivalentFuel Only relevant to Benefits with Type Vans
     *
     * @return $this
     */
    public function setCashEquivalentFuel(?float $cashEquivalentFuel): static
    {
        if (is_null($cashEquivalentFuel)) {
            throw new InvalidArgumentException('non-nullable cashEquivalentFuel cannot be null');
        }
        $this->container['cashEquivalentFuel'] = $cashEquivalentFuel;

        return $this;
    }

    /**
     * Gets loan
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsLoan|null
     */
    public function getLoan(): ?\SynergiTech\Staffology\Model\BenefitDetailsLoan
    {
        return $this->container['loan'];
    }

    /**
     * Sets loan
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsLoan|null $loan loan
     *
     * @return $this
     */
    public function setLoan(?\SynergiTech\Staffology\Model\BenefitDetailsLoan $loan): static
    {
        if (is_null($loan)) {
            throw new InvalidArgumentException('non-nullable loan cannot be null');
        }
        $this->container['loan'] = $loan;

        return $this;
    }

    /**
     * Gets car
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsCar|null
     */
    public function getCar(): ?\SynergiTech\Staffology\Model\BenefitDetailsCar
    {
        return $this->container['car'];
    }

    /**
     * Sets car
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsCar|null $car car
     *
     * @return $this
     */
    public function setCar(?\SynergiTech\Staffology\Model\BenefitDetailsCar $car): static
    {
        if (is_null($car)) {
            throw new InvalidArgumentException('non-nullable car cannot be null');
        }
        $this->container['car'] = $car;

        return $this;
    }

    /**
     * Gets openingBalance
     *
     * @return float|null
     */
    public function getOpeningBalance(): ?float
    {
        return $this->container['openingBalance'];
    }

    /**
     * Sets openingBalance
     *
     * @param float|null $openingBalance The amount of benefit paid YTD when setting up a benefit
     *
     * @return $this
     */
    public function setOpeningBalance(?float $openingBalance): static
    {
        if (is_null($openingBalance)) {
            throw new InvalidArgumentException('non-nullable openingBalance cannot be null');
        }
        $this->container['openingBalance'] = $openingBalance;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return float|null
     */
    public function getPaid(): ?float
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param float|null $paid [readonly]
     *
     * @return $this
     */
    public function setPaid(?float $paid): static
    {
        if (is_null($paid)) {
            throw new InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets bikOutstanding
     *
     * @return float|null
     */
    public function getBikOutstanding(): ?float
    {
        return $this->container['bikOutstanding'];
    }

    /**
     * Sets bikOutstanding
     *
     * @param float|null $bikOutstanding [readonly]
     *
     * @return $this
     */
    public function setBikOutstanding(?float $bikOutstanding): static
    {
        if (is_null($bikOutstanding)) {
            throw new InvalidArgumentException('non-nullable bikOutstanding cannot be null');
        }
        $this->container['bikOutstanding'] = $bikOutstanding;

        return $this;
    }

    /**
     * Gets isPeriodValue
     *
     * @return bool|null
     */
    public function getIsPeriodValue(): ?bool
    {
        return $this->container['isPeriodValue'];
    }

    /**
     * Sets isPeriodValue
     *
     * @param bool|null $isPeriodValue To be used for the benefit period
     *
     * @return $this
     */
    public function setIsPeriodValue(?bool $isPeriodValue): static
    {
        if (is_null($isPeriodValue)) {
            throw new InvalidArgumentException('non-nullable isPeriodValue cannot be null');
        }
        $this->container['isPeriodValue'] = $isPeriodValue;

        return $this;
    }

    /**
     * Gets overrideOpeningBalance
     *
     * @return bool|null
     */
    public function getOverrideOpeningBalance(): ?bool
    {
        return $this->container['overrideOpeningBalance'];
    }

    /**
     * Sets overrideOpeningBalance
     *
     * @param bool|null $overrideOpeningBalance To be used to change the opening balance if the benefit has been payrolled
     *
     * @return $this
     */
    public function setOverrideOpeningBalance(?bool $overrideOpeningBalance): static
    {
        if (is_null($overrideOpeningBalance)) {
            throw new InvalidArgumentException('non-nullable overrideOpeningBalance cannot be null');
        }
        $this->container['overrideOpeningBalance'] = $overrideOpeningBalance;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


