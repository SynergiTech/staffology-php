<?php
/**
 * ContractPaySpineUpdateRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractPaySpineUpdateRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractPaySpineUpdateRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.PaySpineUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'fullTimeHours' => 'float',
        'fullTimeWeeks' => 'float',
        'salaryFormula' => 'string',
        'hourlyDivisor' => 'float',
        'hourlyDecimals' => 'int',
        'dailyDivisor' => 'float',
        'dailyDecimals' => 'int',
        'annualDecimals' => 'int',
        'annualRoundingRule' => '\SynergiTech\Staffology\Model\AnnualRoundingRule',
        'incrementRule' => '\SynergiTech\Staffology\Model\IncrementRule',
        'requiresLondonAllowance' => 'bool',
        'gradeEffectiveDate' => '\DateTime',
        'pointEffectiveDate' => '\DateTime',
        'useSpineHolidayRules' => 'bool',
        'holidayEntitlements' => '\SynergiTech\Staffology\Model\ContractHolidayEntitlementUpdateRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'fullTimeHours' => 'double',
        'fullTimeWeeks' => 'double',
        'salaryFormula' => null,
        'hourlyDivisor' => 'double',
        'hourlyDecimals' => 'int32',
        'dailyDivisor' => 'double',
        'dailyDecimals' => 'int32',
        'annualDecimals' => 'int32',
        'annualRoundingRule' => null,
        'incrementRule' => null,
        'requiresLondonAllowance' => null,
        'gradeEffectiveDate' => 'date',
        'pointEffectiveDate' => 'date',
        'useSpineHolidayRules' => null,
        'holidayEntitlements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => true,
        'fullTimeHours' => false,
        'fullTimeWeeks' => false,
        'salaryFormula' => true,
        'hourlyDivisor' => false,
        'hourlyDecimals' => false,
        'dailyDivisor' => false,
        'dailyDecimals' => false,
        'annualDecimals' => false,
        'annualRoundingRule' => false,
        'incrementRule' => false,
        'requiresLondonAllowance' => false,
        'gradeEffectiveDate' => false,
        'pointEffectiveDate' => false,
        'useSpineHolidayRules' => false,
        'holidayEntitlements' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'fullTimeHours' => 'fullTimeHours',
        'fullTimeWeeks' => 'fullTimeWeeks',
        'salaryFormula' => 'salaryFormula',
        'hourlyDivisor' => 'hourlyDivisor',
        'hourlyDecimals' => 'hourlyDecimals',
        'dailyDivisor' => 'dailyDivisor',
        'dailyDecimals' => 'dailyDecimals',
        'annualDecimals' => 'annualDecimals',
        'annualRoundingRule' => 'annualRoundingRule',
        'incrementRule' => 'incrementRule',
        'requiresLondonAllowance' => 'requiresLondonAllowance',
        'gradeEffectiveDate' => 'gradeEffectiveDate',
        'pointEffectiveDate' => 'pointEffectiveDate',
        'useSpineHolidayRules' => 'useSpineHolidayRules',
        'holidayEntitlements' => 'holidayEntitlements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'fullTimeHours' => 'setFullTimeHours',
        'fullTimeWeeks' => 'setFullTimeWeeks',
        'salaryFormula' => 'setSalaryFormula',
        'hourlyDivisor' => 'setHourlyDivisor',
        'hourlyDecimals' => 'setHourlyDecimals',
        'dailyDivisor' => 'setDailyDivisor',
        'dailyDecimals' => 'setDailyDecimals',
        'annualDecimals' => 'setAnnualDecimals',
        'annualRoundingRule' => 'setAnnualRoundingRule',
        'incrementRule' => 'setIncrementRule',
        'requiresLondonAllowance' => 'setRequiresLondonAllowance',
        'gradeEffectiveDate' => 'setGradeEffectiveDate',
        'pointEffectiveDate' => 'setPointEffectiveDate',
        'useSpineHolidayRules' => 'setUseSpineHolidayRules',
        'holidayEntitlements' => 'setHolidayEntitlements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'fullTimeHours' => 'getFullTimeHours',
        'fullTimeWeeks' => 'getFullTimeWeeks',
        'salaryFormula' => 'getSalaryFormula',
        'hourlyDivisor' => 'getHourlyDivisor',
        'hourlyDecimals' => 'getHourlyDecimals',
        'dailyDivisor' => 'getDailyDivisor',
        'dailyDecimals' => 'getDailyDecimals',
        'annualDecimals' => 'getAnnualDecimals',
        'annualRoundingRule' => 'getAnnualRoundingRule',
        'incrementRule' => 'getIncrementRule',
        'requiresLondonAllowance' => 'getRequiresLondonAllowance',
        'gradeEffectiveDate' => 'getGradeEffectiveDate',
        'pointEffectiveDate' => 'getPointEffectiveDate',
        'useSpineHolidayRules' => 'getUseSpineHolidayRules',
        'holidayEntitlements' => 'getHolidayEntitlements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('fullTimeHours', $data ?? [], null);
        $this->setIfExists('fullTimeWeeks', $data ?? [], null);
        $this->setIfExists('salaryFormula', $data ?? [], null);
        $this->setIfExists('hourlyDivisor', $data ?? [], null);
        $this->setIfExists('hourlyDecimals', $data ?? [], null);
        $this->setIfExists('dailyDivisor', $data ?? [], null);
        $this->setIfExists('dailyDecimals', $data ?? [], null);
        $this->setIfExists('annualDecimals', $data ?? [], null);
        $this->setIfExists('annualRoundingRule', $data ?? [], null);
        $this->setIfExists('incrementRule', $data ?? [], null);
        $this->setIfExists('requiresLondonAllowance', $data ?? [], null);
        $this->setIfExists('gradeEffectiveDate', $data ?? [], null);
        $this->setIfExists('pointEffectiveDate', $data ?? [], null);
        $this->setIfExists('useSpineHolidayRules', $data ?? [], null);
        $this->setIfExists('holidayEntitlements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the Pay Spine
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fullTimeHours
     *
     * @return float|null
     */
    public function getFullTimeHours(): ?float
    {
        return $this->container['fullTimeHours'];
    }

    /**
     * Sets fullTimeHours
     *
     * @param float|null $fullTimeHours Maximum Full Time Hours on this Pay Spine
     *
     * @return $this
     */
    public function setFullTimeHours(?float $fullTimeHours): static
    {
        if (is_null($fullTimeHours)) {
            throw new InvalidArgumentException('non-nullable fullTimeHours cannot be null');
        }
        $this->container['fullTimeHours'] = $fullTimeHours;

        return $this;
    }

    /**
     * Gets fullTimeWeeks
     *
     * @return float|null
     */
    public function getFullTimeWeeks(): ?float
    {
        return $this->container['fullTimeWeeks'];
    }

    /**
     * Sets fullTimeWeeks
     *
     * @param float|null $fullTimeWeeks Maximum Full Time Weeks on this Pay Spine
     *
     * @return $this
     */
    public function setFullTimeWeeks(?float $fullTimeWeeks): static
    {
        if (is_null($fullTimeWeeks)) {
            throw new InvalidArgumentException('non-nullable fullTimeWeeks cannot be null');
        }
        $this->container['fullTimeWeeks'] = $fullTimeWeeks;

        return $this;
    }

    /**
     * Gets salaryFormula
     *
     * @return string|null
     */
    public function getSalaryFormula(): ?string
    {
        return $this->container['salaryFormula'];
    }

    /**
     * Sets salaryFormula
     *
     * @param string|null $salaryFormula Formula used to derive annual salary  <remarks>  The salary formula consists of the following elements and Round functions:  - PointValue (The value of an individual Spinal Point)  - HoursWorked (The hours an employee is contracted to work for in their role)  - FTHours (The full time hours specified for an employee in their role)  - WeeksWorked (The contracted weeks an employee works in their role)  - FTWeeks (The full weeks specified for an employee in their role)  Round functions:   - ROUND(Value,decimal places): Round the value to specific decimal places. The maximum value is between 0 and 15.  - ROUNDUP(Value)  - ROUNDDOWN(Value)   - TRUNCATE(Value)  </remarks><example>  For example: \"PointValue * ROUND(HoursWorked * WeeksWorked * (7/365),3) / FTHours\"   </example>
     *
     * @return $this
     */
    public function setSalaryFormula(?string $salaryFormula): static
    {
        if (is_null($salaryFormula)) {
            array_push($this->openAPINullablesSetToNull, 'salaryFormula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salaryFormula', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salaryFormula'] = $salaryFormula;

        return $this;
    }

    /**
     * Gets hourlyDivisor
     *
     * @return float|null
     */
    public function getHourlyDivisor(): ?float
    {
        return $this->container['hourlyDivisor'];
    }

    /**
     * Sets hourlyDivisor
     *
     * @param float|null $hourlyDivisor Hours used to determine Hourly Rate
     *
     * @return $this
     */
    public function setHourlyDivisor(?float $hourlyDivisor): static
    {
        if (is_null($hourlyDivisor)) {
            throw new InvalidArgumentException('non-nullable hourlyDivisor cannot be null');
        }
        $this->container['hourlyDivisor'] = $hourlyDivisor;

        return $this;
    }

    /**
     * Gets hourlyDecimals
     *
     * @return int|null
     */
    public function getHourlyDecimals(): ?int
    {
        return $this->container['hourlyDecimals'];
    }

    /**
     * Sets hourlyDecimals
     *
     * @param int|null $hourlyDecimals Number of decimal places to calculate Hourly Rates
     *
     * @return $this
     */
    public function setHourlyDecimals(?int $hourlyDecimals): static
    {
        if (is_null($hourlyDecimals)) {
            throw new InvalidArgumentException('non-nullable hourlyDecimals cannot be null');
        }
        $this->container['hourlyDecimals'] = $hourlyDecimals;

        return $this;
    }

    /**
     * Gets dailyDivisor
     *
     * @return float|null
     */
    public function getDailyDivisor(): ?float
    {
        return $this->container['dailyDivisor'];
    }

    /**
     * Sets dailyDivisor
     *
     * @param float|null $dailyDivisor Days used to determine Full time Daily Rate
     *
     * @return $this
     */
    public function setDailyDivisor(?float $dailyDivisor): static
    {
        if (is_null($dailyDivisor)) {
            throw new InvalidArgumentException('non-nullable dailyDivisor cannot be null');
        }
        $this->container['dailyDivisor'] = $dailyDivisor;

        return $this;
    }

    /**
     * Gets dailyDecimals
     *
     * @return int|null
     */
    public function getDailyDecimals(): ?int
    {
        return $this->container['dailyDecimals'];
    }

    /**
     * Sets dailyDecimals
     *
     * @param int|null $dailyDecimals Number of decimal places to calculate Daily Rates
     *
     * @return $this
     */
    public function setDailyDecimals(?int $dailyDecimals): static
    {
        if (is_null($dailyDecimals)) {
            throw new InvalidArgumentException('non-nullable dailyDecimals cannot be null');
        }
        $this->container['dailyDecimals'] = $dailyDecimals;

        return $this;
    }

    /**
     * Gets annualDecimals
     *
     * @return int|null
     */
    public function getAnnualDecimals(): ?int
    {
        return $this->container['annualDecimals'];
    }

    /**
     * Sets annualDecimals
     *
     * @param int|null $annualDecimals Number of decimal places to calculate Annual Salaries
     *
     * @return $this
     */
    public function setAnnualDecimals(?int $annualDecimals): static
    {
        if (is_null($annualDecimals)) {
            throw new InvalidArgumentException('non-nullable annualDecimals cannot be null');
        }
        $this->container['annualDecimals'] = $annualDecimals;

        return $this;
    }

    /**
     * Gets annualRoundingRule
     *
     * @return \SynergiTech\Staffology\Model\AnnualRoundingRule|null
     */
    public function getAnnualRoundingRule(): ?\SynergiTech\Staffology\Model\AnnualRoundingRule
    {
        return $this->container['annualRoundingRule'];
    }

    /**
     * Sets annualRoundingRule
     *
     * @param \SynergiTech\Staffology\Model\AnnualRoundingRule|null $annualRoundingRule annualRoundingRule
     *
     * @return $this
     */
    public function setAnnualRoundingRule(?\SynergiTech\Staffology\Model\AnnualRoundingRule $annualRoundingRule): static
    {
        if (is_null($annualRoundingRule)) {
            throw new InvalidArgumentException('non-nullable annualRoundingRule cannot be null');
        }
        $this->container['annualRoundingRule'] = $annualRoundingRule;

        return $this;
    }

    /**
     * Gets incrementRule
     *
     * @return \SynergiTech\Staffology\Model\IncrementRule|null
     */
    public function getIncrementRule(): ?\SynergiTech\Staffology\Model\IncrementRule
    {
        return $this->container['incrementRule'];
    }

    /**
     * Sets incrementRule
     *
     * @param \SynergiTech\Staffology\Model\IncrementRule|null $incrementRule incrementRule
     *
     * @return $this
     */
    public function setIncrementRule(?\SynergiTech\Staffology\Model\IncrementRule $incrementRule): static
    {
        if (is_null($incrementRule)) {
            throw new InvalidArgumentException('non-nullable incrementRule cannot be null');
        }
        $this->container['incrementRule'] = $incrementRule;

        return $this;
    }

    /**
     * Gets requiresLondonAllowance
     *
     * @return bool|null
     */
    public function getRequiresLondonAllowance(): ?bool
    {
        return $this->container['requiresLondonAllowance'];
    }

    /**
     * Sets requiresLondonAllowance
     *
     * @param bool|null $requiresLondonAllowance Requires LA column to be completed on the spine
     *
     * @return $this
     */
    public function setRequiresLondonAllowance(?bool $requiresLondonAllowance): static
    {
        if (is_null($requiresLondonAllowance)) {
            throw new InvalidArgumentException('non-nullable requiresLondonAllowance cannot be null');
        }
        $this->container['requiresLondonAllowance'] = $requiresLondonAllowance;

        return $this;
    }

    /**
     * Gets gradeEffectiveDate
     *
     * @return \DateTime|null
     */
    public function getGradeEffectiveDate(): ?\DateTime
    {
        return $this->container['gradeEffectiveDate'];
    }

    /**
     * Sets gradeEffectiveDate
     *
     * @param \DateTime|null $gradeEffectiveDate Effective date for applicable grades
     *
     * @return $this
     */
    public function setGradeEffectiveDate(?\DateTime $gradeEffectiveDate): static
    {
        if (is_null($gradeEffectiveDate)) {
            throw new InvalidArgumentException('non-nullable gradeEffectiveDate cannot be null');
        }
        $this->container['gradeEffectiveDate'] = $gradeEffectiveDate;

        return $this;
    }

    /**
     * Gets pointEffectiveDate
     *
     * @return \DateTime|null
     */
    public function getPointEffectiveDate(): ?\DateTime
    {
        return $this->container['pointEffectiveDate'];
    }

    /**
     * Sets pointEffectiveDate
     *
     * @param \DateTime|null $pointEffectiveDate Effective date for applicable spinal points
     *
     * @return $this
     */
    public function setPointEffectiveDate(?\DateTime $pointEffectiveDate): static
    {
        if (is_null($pointEffectiveDate)) {
            throw new InvalidArgumentException('non-nullable pointEffectiveDate cannot be null');
        }
        $this->container['pointEffectiveDate'] = $pointEffectiveDate;

        return $this;
    }

    /**
     * Gets useSpineHolidayRules
     *
     * @return bool|null
     */
    public function getUseSpineHolidayRules(): ?bool
    {
        return $this->container['useSpineHolidayRules'];
    }

    /**
     * Sets useSpineHolidayRules
     *
     * @param bool|null $useSpineHolidayRules Flag to include holiday entitlements in Payspine (Default false)
     *
     * @return $this
     */
    public function setUseSpineHolidayRules(?bool $useSpineHolidayRules): static
    {
        if (is_null($useSpineHolidayRules)) {
            throw new InvalidArgumentException('non-nullable useSpineHolidayRules cannot be null');
        }
        $this->container['useSpineHolidayRules'] = $useSpineHolidayRules;

        return $this;
    }

    /**
     * Gets holidayEntitlements
     *
     * @return \SynergiTech\Staffology\Model\ContractHolidayEntitlementUpdateRequest[]|null
     */
    public function getHolidayEntitlements(): ?array
    {
        return $this->container['holidayEntitlements'];
    }

    /**
     * Sets holidayEntitlements
     *
     * @param \SynergiTech\Staffology\Model\ContractHolidayEntitlementUpdateRequest[]|null $holidayEntitlements PaySpine Holiday Entitlements
     *
     * @return $this
     */
    public function setHolidayEntitlements(?array $holidayEntitlements): static
    {
        if (is_null($holidayEntitlements)) {
            array_push($this->openAPINullablesSetToNull, 'holidayEntitlements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holidayEntitlements', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holidayEntitlements'] = $holidayEntitlements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


