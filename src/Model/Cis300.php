<?php
/**
 * Cis300
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Cis300 Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Cis300 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Cis300';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxMonth' => 'int',
        'employeeCount' => 'int',
        'employmentStatusDeclaration' => 'bool',
        'verificationDeclaration' => 'bool',
        'informationCorrectDeclaration' => 'bool',
        'inactivityDeclaration' => 'bool',
        'cisReturn' => '\SynergiTech\Staffology\Model\CisReturn',
        'iRmark' => 'string',
        'xml' => 'string',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'employerReferences' => '\SynergiTech\Staffology\Model\EmpRefs',
        'govTalkSubmission' => '\SynergiTech\Staffology\Model\GovTalkSubmission',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxMonth' => 'int32',
        'employeeCount' => 'int32',
        'employmentStatusDeclaration' => null,
        'verificationDeclaration' => null,
        'informationCorrectDeclaration' => null,
        'inactivityDeclaration' => null,
        'cisReturn' => null,
        'iRmark' => null,
        'xml' => null,
        'taxYear' => null,
        'employerReferences' => null,
        'govTalkSubmission' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxMonth' => false,
        'employeeCount' => false,
        'employmentStatusDeclaration' => false,
        'verificationDeclaration' => false,
        'informationCorrectDeclaration' => false,
        'inactivityDeclaration' => false,
        'cisReturn' => false,
        'iRmark' => true,
        'xml' => true,
        'taxYear' => false,
        'employerReferences' => false,
        'govTalkSubmission' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxMonth' => 'taxMonth',
        'employeeCount' => 'employeeCount',
        'employmentStatusDeclaration' => 'employmentStatusDeclaration',
        'verificationDeclaration' => 'verificationDeclaration',
        'informationCorrectDeclaration' => 'informationCorrectDeclaration',
        'inactivityDeclaration' => 'inactivityDeclaration',
        'cisReturn' => 'cisReturn',
        'iRmark' => 'iRmark',
        'xml' => 'xml',
        'taxYear' => 'taxYear',
        'employerReferences' => 'employerReferences',
        'govTalkSubmission' => 'govTalkSubmission',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxMonth' => 'setTaxMonth',
        'employeeCount' => 'setEmployeeCount',
        'employmentStatusDeclaration' => 'setEmploymentStatusDeclaration',
        'verificationDeclaration' => 'setVerificationDeclaration',
        'informationCorrectDeclaration' => 'setInformationCorrectDeclaration',
        'inactivityDeclaration' => 'setInactivityDeclaration',
        'cisReturn' => 'setCisReturn',
        'iRmark' => 'setIRmark',
        'xml' => 'setXml',
        'taxYear' => 'setTaxYear',
        'employerReferences' => 'setEmployerReferences',
        'govTalkSubmission' => 'setGovTalkSubmission',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxMonth' => 'getTaxMonth',
        'employeeCount' => 'getEmployeeCount',
        'employmentStatusDeclaration' => 'getEmploymentStatusDeclaration',
        'verificationDeclaration' => 'getVerificationDeclaration',
        'informationCorrectDeclaration' => 'getInformationCorrectDeclaration',
        'inactivityDeclaration' => 'getInactivityDeclaration',
        'cisReturn' => 'getCisReturn',
        'iRmark' => 'getIRmark',
        'xml' => 'getXml',
        'taxYear' => 'getTaxYear',
        'employerReferences' => 'getEmployerReferences',
        'govTalkSubmission' => 'getGovTalkSubmission',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('taxMonth', $data ?? [], null);
        $this->setIfExists('employeeCount', $data ?? [], null);
        $this->setIfExists('employmentStatusDeclaration', $data ?? [], null);
        $this->setIfExists('verificationDeclaration', $data ?? [], null);
        $this->setIfExists('informationCorrectDeclaration', $data ?? [], null);
        $this->setIfExists('inactivityDeclaration', $data ?? [], null);
        $this->setIfExists('cisReturn', $data ?? [], null);
        $this->setIfExists('iRmark', $data ?? [], null);
        $this->setIfExists('xml', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('employerReferences', $data ?? [], null);
        $this->setIfExists('govTalkSubmission', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxMonth
     *
     * @return int|null
     */
    public function getTaxMonth(): ?int
    {
        return $this->container['taxMonth'];
    }

    /**
     * Sets taxMonth
     *
     * @param int|null $taxMonth taxMonth
     *
     * @return $this
     */
    public function setTaxMonth(?int $taxMonth): static
    {
        if (is_null($taxMonth)) {
            throw new InvalidArgumentException('non-nullable taxMonth cannot be null');
        }
        $this->container['taxMonth'] = $taxMonth;

        return $this;
    }

    /**
     * Gets employeeCount
     *
     * @return int|null
     */
    public function getEmployeeCount(): ?int
    {
        return $this->container['employeeCount'];
    }

    /**
     * Sets employeeCount
     *
     * @param int|null $employeeCount employeeCount
     *
     * @return $this
     */
    public function setEmployeeCount(?int $employeeCount): static
    {
        if (is_null($employeeCount)) {
            throw new InvalidArgumentException('non-nullable employeeCount cannot be null');
        }
        $this->container['employeeCount'] = $employeeCount;

        return $this;
    }

    /**
     * Gets employmentStatusDeclaration
     *
     * @return bool|null
     */
    public function getEmploymentStatusDeclaration(): ?bool
    {
        return $this->container['employmentStatusDeclaration'];
    }

    /**
     * Sets employmentStatusDeclaration
     *
     * @param bool|null $employmentStatusDeclaration employmentStatusDeclaration
     *
     * @return $this
     */
    public function setEmploymentStatusDeclaration(?bool $employmentStatusDeclaration): static
    {
        if (is_null($employmentStatusDeclaration)) {
            throw new InvalidArgumentException('non-nullable employmentStatusDeclaration cannot be null');
        }
        $this->container['employmentStatusDeclaration'] = $employmentStatusDeclaration;

        return $this;
    }

    /**
     * Gets verificationDeclaration
     *
     * @return bool|null
     */
    public function getVerificationDeclaration(): ?bool
    {
        return $this->container['verificationDeclaration'];
    }

    /**
     * Sets verificationDeclaration
     *
     * @param bool|null $verificationDeclaration verificationDeclaration
     *
     * @return $this
     */
    public function setVerificationDeclaration(?bool $verificationDeclaration): static
    {
        if (is_null($verificationDeclaration)) {
            throw new InvalidArgumentException('non-nullable verificationDeclaration cannot be null');
        }
        $this->container['verificationDeclaration'] = $verificationDeclaration;

        return $this;
    }

    /**
     * Gets informationCorrectDeclaration
     *
     * @return bool|null
     */
    public function getInformationCorrectDeclaration(): ?bool
    {
        return $this->container['informationCorrectDeclaration'];
    }

    /**
     * Sets informationCorrectDeclaration
     *
     * @param bool|null $informationCorrectDeclaration informationCorrectDeclaration
     *
     * @return $this
     */
    public function setInformationCorrectDeclaration(?bool $informationCorrectDeclaration): static
    {
        if (is_null($informationCorrectDeclaration)) {
            throw new InvalidArgumentException('non-nullable informationCorrectDeclaration cannot be null');
        }
        $this->container['informationCorrectDeclaration'] = $informationCorrectDeclaration;

        return $this;
    }

    /**
     * Gets inactivityDeclaration
     *
     * @return bool|null
     */
    public function getInactivityDeclaration(): ?bool
    {
        return $this->container['inactivityDeclaration'];
    }

    /**
     * Sets inactivityDeclaration
     *
     * @param bool|null $inactivityDeclaration inactivityDeclaration
     *
     * @return $this
     */
    public function setInactivityDeclaration(?bool $inactivityDeclaration): static
    {
        if (is_null($inactivityDeclaration)) {
            throw new InvalidArgumentException('non-nullable inactivityDeclaration cannot be null');
        }
        $this->container['inactivityDeclaration'] = $inactivityDeclaration;

        return $this;
    }

    /**
     * Gets cisReturn
     *
     * @return \SynergiTech\Staffology\Model\CisReturn|null
     */
    public function getCisReturn(): ?\SynergiTech\Staffology\Model\CisReturn
    {
        return $this->container['cisReturn'];
    }

    /**
     * Sets cisReturn
     *
     * @param \SynergiTech\Staffology\Model\CisReturn|null $cisReturn cisReturn
     *
     * @return $this
     */
    public function setCisReturn(?\SynergiTech\Staffology\Model\CisReturn $cisReturn): static
    {
        if (is_null($cisReturn)) {
            throw new InvalidArgumentException('non-nullable cisReturn cannot be null');
        }
        $this->container['cisReturn'] = $cisReturn;

        return $this;
    }

    /**
     * Gets iRmark
     *
     * @return string|null
     */
    public function getIRmark(): ?string
    {
        return $this->container['iRmark'];
    }

    /**
     * Sets iRmark
     *
     * @param string|null $iRmark iRmark
     *
     * @return $this
     */
    public function setIRmark(?string $iRmark): static
    {
        if (is_null($iRmark)) {
            array_push($this->openAPINullablesSetToNull, 'iRmark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iRmark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iRmark'] = $iRmark;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return string|null
     */
    public function getXml(): ?string
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param string|null $xml This property will soon be removed and should not be used.  There is now a dedicated API endpoint for retrieving the XML for a submission.
     *
     * @return $this
     */
    public function setXml(?string $xml): static
    {
        if (is_null($xml)) {
            array_push($this->openAPINullablesSetToNull, 'xml');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xml', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets employerReferences
     *
     * @return \SynergiTech\Staffology\Model\EmpRefs|null
     */
    public function getEmployerReferences(): ?\SynergiTech\Staffology\Model\EmpRefs
    {
        return $this->container['employerReferences'];
    }

    /**
     * Sets employerReferences
     *
     * @param \SynergiTech\Staffology\Model\EmpRefs|null $employerReferences employerReferences
     *
     * @return $this
     */
    public function setEmployerReferences(?\SynergiTech\Staffology\Model\EmpRefs $employerReferences): static
    {
        if (is_null($employerReferences)) {
            throw new InvalidArgumentException('non-nullable employerReferences cannot be null');
        }
        $this->container['employerReferences'] = $employerReferences;

        return $this;
    }

    /**
     * Gets govTalkSubmission
     *
     * @return \SynergiTech\Staffology\Model\GovTalkSubmission|null
     */
    public function getGovTalkSubmission(): ?\SynergiTech\Staffology\Model\GovTalkSubmission
    {
        return $this->container['govTalkSubmission'];
    }

    /**
     * Sets govTalkSubmission
     *
     * @param \SynergiTech\Staffology\Model\GovTalkSubmission|null $govTalkSubmission govTalkSubmission
     *
     * @return $this
     */
    public function setGovTalkSubmission(?\SynergiTech\Staffology\Model\GovTalkSubmission $govTalkSubmission): static
    {
        if (is_null($govTalkSubmission)) {
            throw new InvalidArgumentException('non-nullable govTalkSubmission cannot be null');
        }
        $this->container['govTalkSubmission'] = $govTalkSubmission;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


