<?php
/**
 * P11PayeTotalsLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * P11PayeTotalsLine Class Doc Comment
 *
 * @description Summary line for the Paye Income Tax table in the P11 Detailed report
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class P11PayeTotalsLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'P11PayeTotalsLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'studentLoan' => 'float',
        'postgradLoan' => 'float',
        'pay' => 'float',
        'totalPayToDate' => 'float',
        'taxDueToDate' => 'float',
        'taxDue' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'studentLoan' => 'double',
        'postgradLoan' => 'double',
        'pay' => 'double',
        'totalPayToDate' => 'double',
        'taxDueToDate' => 'double',
        'taxDue' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'studentLoan' => false,
        'postgradLoan' => false,
        'pay' => false,
        'totalPayToDate' => false,
        'taxDueToDate' => false,
        'taxDue' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'studentLoan' => 'studentLoan',
        'postgradLoan' => 'postgradLoan',
        'pay' => 'pay',
        'totalPayToDate' => 'totalPayToDate',
        'taxDueToDate' => 'taxDueToDate',
        'taxDue' => 'taxDue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'studentLoan' => 'setStudentLoan',
        'postgradLoan' => 'setPostgradLoan',
        'pay' => 'setPay',
        'totalPayToDate' => 'setTotalPayToDate',
        'taxDueToDate' => 'setTaxDueToDate',
        'taxDue' => 'setTaxDue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'studentLoan' => 'getStudentLoan',
        'postgradLoan' => 'getPostgradLoan',
        'pay' => 'getPay',
        'totalPayToDate' => 'getTotalPayToDate',
        'taxDueToDate' => 'getTaxDueToDate',
        'taxDue' => 'getTaxDue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('studentLoan', $data ?? [], null);
        $this->setIfExists('postgradLoan', $data ?? [], null);
        $this->setIfExists('pay', $data ?? [], null);
        $this->setIfExists('totalPayToDate', $data ?? [], null);
        $this->setIfExists('taxDueToDate', $data ?? [], null);
        $this->setIfExists('taxDue', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets studentLoan
     *
     * @return float|null
     */
    public function getStudentLoan(): ?float
    {
        return $this->container['studentLoan'];
    }

    /**
     * Sets studentLoan
     *
     * @param float|null $studentLoan [readonly]
     *
     * @return $this
     */
    public function setStudentLoan(?float $studentLoan): static
    {
        if (is_null($studentLoan)) {
            throw new InvalidArgumentException('non-nullable studentLoan cannot be null');
        }
        $this->container['studentLoan'] = $studentLoan;

        return $this;
    }

    /**
     * Gets postgradLoan
     *
     * @return float|null
     */
    public function getPostgradLoan(): ?float
    {
        return $this->container['postgradLoan'];
    }

    /**
     * Sets postgradLoan
     *
     * @param float|null $postgradLoan [readonly]
     *
     * @return $this
     */
    public function setPostgradLoan(?float $postgradLoan): static
    {
        if (is_null($postgradLoan)) {
            throw new InvalidArgumentException('non-nullable postgradLoan cannot be null');
        }
        $this->container['postgradLoan'] = $postgradLoan;

        return $this;
    }

    /**
     * Gets pay
     *
     * @return float|null
     */
    public function getPay(): ?float
    {
        return $this->container['pay'];
    }

    /**
     * Sets pay
     *
     * @param float|null $pay [readonly]
     *
     * @return $this
     */
    public function setPay(?float $pay): static
    {
        if (is_null($pay)) {
            throw new InvalidArgumentException('non-nullable pay cannot be null');
        }
        $this->container['pay'] = $pay;

        return $this;
    }

    /**
     * Gets totalPayToDate
     *
     * @return float|null
     */
    public function getTotalPayToDate(): ?float
    {
        return $this->container['totalPayToDate'];
    }

    /**
     * Sets totalPayToDate
     *
     * @param float|null $totalPayToDate [readonly]
     *
     * @return $this
     */
    public function setTotalPayToDate(?float $totalPayToDate): static
    {
        if (is_null($totalPayToDate)) {
            throw new InvalidArgumentException('non-nullable totalPayToDate cannot be null');
        }
        $this->container['totalPayToDate'] = $totalPayToDate;

        return $this;
    }

    /**
     * Gets taxDueToDate
     *
     * @return float|null
     */
    public function getTaxDueToDate(): ?float
    {
        return $this->container['taxDueToDate'];
    }

    /**
     * Sets taxDueToDate
     *
     * @param float|null $taxDueToDate [readonly]
     *
     * @return $this
     */
    public function setTaxDueToDate(?float $taxDueToDate): static
    {
        if (is_null($taxDueToDate)) {
            throw new InvalidArgumentException('non-nullable taxDueToDate cannot be null');
        }
        $this->container['taxDueToDate'] = $taxDueToDate;

        return $this;
    }

    /**
     * Gets taxDue
     *
     * @return float|null
     */
    public function getTaxDue(): ?float
    {
        return $this->container['taxDue'];
    }

    /**
     * Sets taxDue
     *
     * @param float|null $taxDue [readonly]
     *
     * @return $this
     */
    public function setTaxDue(?float $taxDue): static
    {
        if (is_null($taxDue)) {
            throw new InvalidArgumentException('non-nullable taxDue cannot be null');
        }
        $this->container['taxDue'] = $taxDue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


