<?php
/**
 * DpsNotice
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * DpsNotice Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DpsNotice implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'DpsNotice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'issueDate' => '\DateTime',
        'effectiveDate' => '\DateTime',
        'taxYear' => 'int',
        'sequenceNumber' => 'int',
        'type' => '\SynergiTech\Staffology\Model\DpsDataType',
        'formType' => 'string',
        'forename' => 'string',
        'surname' => 'string',
        'niNo' => 'string',
        'worksNumber' => 'string',
        'taxCode' => 'string',
        'week1Month1' => 'bool',
        'previousTax' => 'float',
        'previousPay' => 'float',
        'planType' => '\SynergiTech\Staffology\Model\StudentLoan',
        'appliedOn' => '\DateTime',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'issueDate' => 'date',
        'effectiveDate' => 'date',
        'taxYear' => 'int32',
        'sequenceNumber' => 'int32',
        'type' => null,
        'formType' => null,
        'forename' => null,
        'surname' => null,
        'niNo' => null,
        'worksNumber' => null,
        'taxCode' => null,
        'week1Month1' => null,
        'previousTax' => 'double',
        'previousPay' => 'double',
        'planType' => null,
        'appliedOn' => 'date',
        'employee' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'issueDate' => false,
        'effectiveDate' => false,
        'taxYear' => false,
        'sequenceNumber' => false,
        'type' => false,
        'formType' => true,
        'forename' => true,
        'surname' => true,
        'niNo' => true,
        'worksNumber' => true,
        'taxCode' => true,
        'week1Month1' => true,
        'previousTax' => true,
        'previousPay' => true,
        'planType' => false,
        'appliedOn' => true,
        'employee' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'issueDate' => 'issueDate',
        'effectiveDate' => 'effectiveDate',
        'taxYear' => 'taxYear',
        'sequenceNumber' => 'sequenceNumber',
        'type' => 'type',
        'formType' => 'formType',
        'forename' => 'forename',
        'surname' => 'surname',
        'niNo' => 'niNo',
        'worksNumber' => 'worksNumber',
        'taxCode' => 'taxCode',
        'week1Month1' => 'week1Month1',
        'previousTax' => 'previousTax',
        'previousPay' => 'previousPay',
        'planType' => 'planType',
        'appliedOn' => 'appliedOn',
        'employee' => 'employee',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'issueDate' => 'setIssueDate',
        'effectiveDate' => 'setEffectiveDate',
        'taxYear' => 'setTaxYear',
        'sequenceNumber' => 'setSequenceNumber',
        'type' => 'setType',
        'formType' => 'setFormType',
        'forename' => 'setForename',
        'surname' => 'setSurname',
        'niNo' => 'setNiNo',
        'worksNumber' => 'setWorksNumber',
        'taxCode' => 'setTaxCode',
        'week1Month1' => 'setWeek1Month1',
        'previousTax' => 'setPreviousTax',
        'previousPay' => 'setPreviousPay',
        'planType' => 'setPlanType',
        'appliedOn' => 'setAppliedOn',
        'employee' => 'setEmployee',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'issueDate' => 'getIssueDate',
        'effectiveDate' => 'getEffectiveDate',
        'taxYear' => 'getTaxYear',
        'sequenceNumber' => 'getSequenceNumber',
        'type' => 'getType',
        'formType' => 'getFormType',
        'forename' => 'getForename',
        'surname' => 'getSurname',
        'niNo' => 'getNiNo',
        'worksNumber' => 'getWorksNumber',
        'taxCode' => 'getTaxCode',
        'week1Month1' => 'getWeek1Month1',
        'previousTax' => 'getPreviousTax',
        'previousPay' => 'getPreviousPay',
        'planType' => 'getPlanType',
        'appliedOn' => 'getAppliedOn',
        'employee' => 'getEmployee',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('issueDate', $data ?? [], null);
        $this->setIfExists('effectiveDate', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('sequenceNumber', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('formType', $data ?? [], null);
        $this->setIfExists('forename', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('niNo', $data ?? [], null);
        $this->setIfExists('worksNumber', $data ?? [], null);
        $this->setIfExists('taxCode', $data ?? [], null);
        $this->setIfExists('week1Month1', $data ?? [], null);
        $this->setIfExists('previousTax', $data ?? [], null);
        $this->setIfExists('previousPay', $data ?? [], null);
        $this->setIfExists('planType', $data ?? [], null);
        $this->setIfExists('appliedOn', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets issueDate
     *
     * @return \DateTime|null
     */
    public function getIssueDate(): ?\DateTime
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param \DateTime|null $issueDate issueDate
     *
     * @return $this
     */
    public function setIssueDate(?\DateTime $issueDate): static
    {
        if (is_null($issueDate)) {
            throw new InvalidArgumentException('non-nullable issueDate cannot be null');
        }
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets effectiveDate
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate(): ?\DateTime
    {
        return $this->container['effectiveDate'];
    }

    /**
     * Sets effectiveDate
     *
     * @param \DateTime|null $effectiveDate effectiveDate
     *
     * @return $this
     */
    public function setEffectiveDate(?\DateTime $effectiveDate): static
    {
        if (is_null($effectiveDate)) {
            throw new InvalidArgumentException('non-nullable effectiveDate cannot be null');
        }
        $this->container['effectiveDate'] = $effectiveDate;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return int|null
     */
    public function getTaxYear(): ?int
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param int|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?int $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets sequenceNumber
     *
     * @return int|null
     */
    public function getSequenceNumber(): ?int
    {
        return $this->container['sequenceNumber'];
    }

    /**
     * Sets sequenceNumber
     *
     * @param int|null $sequenceNumber sequenceNumber
     *
     * @return $this
     */
    public function setSequenceNumber(?int $sequenceNumber): static
    {
        if (is_null($sequenceNumber)) {
            throw new InvalidArgumentException('non-nullable sequenceNumber cannot be null');
        }
        $this->container['sequenceNumber'] = $sequenceNumber;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\DpsDataType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\DpsDataType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\DpsDataType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\DpsDataType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets formType
     *
     * @return string|null
     */
    public function getFormType(): ?string
    {
        return $this->container['formType'];
    }

    /**
     * Sets formType
     *
     * @param string|null $formType formType
     *
     * @return $this
     */
    public function setFormType(?string $formType): static
    {
        if (is_null($formType)) {
            array_push($this->openAPINullablesSetToNull, 'formType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formType'] = $formType;

        return $this;
    }

    /**
     * Gets forename
     *
     * @return string|null
     */
    public function getForename(): ?string
    {
        return $this->container['forename'];
    }

    /**
     * Sets forename
     *
     * @param string|null $forename forename
     *
     * @return $this
     */
    public function setForename(?string $forename): static
    {
        if (is_null($forename)) {
            array_push($this->openAPINullablesSetToNull, 'forename');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forename', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forename'] = $forename;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname(): ?string
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return $this
     */
    public function setSurname(?string $surname): static
    {
        if (is_null($surname)) {
            array_push($this->openAPINullablesSetToNull, 'surname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('surname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets niNo
     *
     * @return string|null
     */
    public function getNiNo(): ?string
    {
        return $this->container['niNo'];
    }

    /**
     * Sets niNo
     *
     * @param string|null $niNo niNo
     *
     * @return $this
     */
    public function setNiNo(?string $niNo): static
    {
        if (is_null($niNo)) {
            array_push($this->openAPINullablesSetToNull, 'niNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('niNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['niNo'] = $niNo;

        return $this;
    }

    /**
     * Gets worksNumber
     *
     * @return string|null
     */
    public function getWorksNumber(): ?string
    {
        return $this->container['worksNumber'];
    }

    /**
     * Sets worksNumber
     *
     * @param string|null $worksNumber worksNumber
     *
     * @return $this
     */
    public function setWorksNumber(?string $worksNumber): static
    {
        if (is_null($worksNumber)) {
            array_push($this->openAPINullablesSetToNull, 'worksNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('worksNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['worksNumber'] = $worksNumber;

        return $this;
    }

    /**
     * Gets taxCode
     *
     * @return string|null
     */
    public function getTaxCode(): ?string
    {
        return $this->container['taxCode'];
    }

    /**
     * Sets taxCode
     *
     * @param string|null $taxCode taxCode
     *
     * @return $this
     */
    public function setTaxCode(?string $taxCode): static
    {
        if (is_null($taxCode)) {
            array_push($this->openAPINullablesSetToNull, 'taxCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCode'] = $taxCode;

        return $this;
    }

    /**
     * Gets week1Month1
     *
     * @return bool|null
     */
    public function getWeek1Month1(): ?bool
    {
        return $this->container['week1Month1'];
    }

    /**
     * Sets week1Month1
     *
     * @param bool|null $week1Month1 week1Month1
     *
     * @return $this
     */
    public function setWeek1Month1(?bool $week1Month1): static
    {
        if (is_null($week1Month1)) {
            array_push($this->openAPINullablesSetToNull, 'week1Month1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('week1Month1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['week1Month1'] = $week1Month1;

        return $this;
    }

    /**
     * Gets previousTax
     *
     * @return float|null
     */
    public function getPreviousTax(): ?float
    {
        return $this->container['previousTax'];
    }

    /**
     * Sets previousTax
     *
     * @param float|null $previousTax previousTax
     *
     * @return $this
     */
    public function setPreviousTax(?float $previousTax): static
    {
        if (is_null($previousTax)) {
            array_push($this->openAPINullablesSetToNull, 'previousTax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previousTax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previousTax'] = $previousTax;

        return $this;
    }

    /**
     * Gets previousPay
     *
     * @return float|null
     */
    public function getPreviousPay(): ?float
    {
        return $this->container['previousPay'];
    }

    /**
     * Sets previousPay
     *
     * @param float|null $previousPay previousPay
     *
     * @return $this
     */
    public function setPreviousPay(?float $previousPay): static
    {
        if (is_null($previousPay)) {
            array_push($this->openAPINullablesSetToNull, 'previousPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previousPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previousPay'] = $previousPay;

        return $this;
    }

    /**
     * Gets planType
     *
     * @return \SynergiTech\Staffology\Model\StudentLoan|null
     */
    public function getPlanType(): ?\SynergiTech\Staffology\Model\StudentLoan
    {
        return $this->container['planType'];
    }

    /**
     * Sets planType
     *
     * @param \SynergiTech\Staffology\Model\StudentLoan|null $planType planType
     *
     * @return $this
     */
    public function setPlanType(?\SynergiTech\Staffology\Model\StudentLoan $planType): static
    {
        if (is_null($planType)) {
            throw new InvalidArgumentException('non-nullable planType cannot be null');
        }
        $this->container['planType'] = $planType;

        return $this;
    }

    /**
     * Gets appliedOn
     *
     * @return \DateTime|null
     */
    public function getAppliedOn(): ?\DateTime
    {
        return $this->container['appliedOn'];
    }

    /**
     * Sets appliedOn
     *
     * @param \DateTime|null $appliedOn appliedOn
     *
     * @return $this
     */
    public function setAppliedOn(?\DateTime $appliedOn): static
    {
        if (is_null($appliedOn)) {
            array_push($this->openAPINullablesSetToNull, 'appliedOn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appliedOn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appliedOn'] = $appliedOn;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


