<?php
/**
 * ContractPayOptionsRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractPayOptionsRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractPayOptionsRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.PayOptionsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'regularPayLines' => '\SynergiTech\Staffology\Model\ContractPayLineRequest[]',
        'period' => '\SynergiTech\Staffology\Model\PayPeriods',
        'ordinal' => 'int',
        'method' => '\SynergiTech\Staffology\Model\PayMethod',
        'withholdTaxRefundIfPayIsZero' => 'bool',
        'taxAndNi' => '\SynergiTech\Staffology\Model\ContractTaxAndNi',
        'fpsFields' => '\SynergiTech\Staffology\Model\ContractFpsFields',
        'tags' => 'string[]',
        'basis' => '\SynergiTech\Staffology\Model\PayBasis',
        'nationalMinimumWage' => 'bool',
        'payCode' => 'string',
        'mileageVehicleType' => '\SynergiTech\Staffology\Model\MileageVehicleType',
        'mapsMiles' => 'int',
        'payAmount' => 'float',
        'payAmountMultiplier' => 'float',
        'baseHourlyRate' => 'float',
        'baseDailyRate' => 'float',
        'autoAdjustForLeave' => 'bool',
        'niTable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'regularPayLines' => null,
        'period' => null,
        'ordinal' => 'int32',
        'method' => null,
        'withholdTaxRefundIfPayIsZero' => null,
        'taxAndNi' => null,
        'fpsFields' => null,
        'tags' => null,
        'basis' => null,
        'nationalMinimumWage' => null,
        'payCode' => null,
        'mileageVehicleType' => null,
        'mapsMiles' => 'int32',
        'payAmount' => 'double',
        'payAmountMultiplier' => 'double',
        'baseHourlyRate' => 'double',
        'baseDailyRate' => 'double',
        'autoAdjustForLeave' => null,
        'niTable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'regularPayLines' => true,
        'period' => false,
        'ordinal' => false,
        'method' => false,
        'withholdTaxRefundIfPayIsZero' => false,
        'taxAndNi' => false,
        'fpsFields' => false,
        'tags' => true,
        'basis' => false,
        'nationalMinimumWage' => false,
        'payCode' => true,
        'mileageVehicleType' => false,
        'mapsMiles' => true,
        'payAmount' => false,
        'payAmountMultiplier' => false,
        'baseHourlyRate' => false,
        'baseDailyRate' => false,
        'autoAdjustForLeave' => false,
        'niTable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'regularPayLines' => 'regularPayLines',
        'period' => 'period',
        'ordinal' => 'ordinal',
        'method' => 'method',
        'withholdTaxRefundIfPayIsZero' => 'withholdTaxRefundIfPayIsZero',
        'taxAndNi' => 'taxAndNi',
        'fpsFields' => 'fpsFields',
        'tags' => 'tags',
        'basis' => 'basis',
        'nationalMinimumWage' => 'nationalMinimumWage',
        'payCode' => 'payCode',
        'mileageVehicleType' => 'mileageVehicleType',
        'mapsMiles' => 'mapsMiles',
        'payAmount' => 'payAmount',
        'payAmountMultiplier' => 'payAmountMultiplier',
        'baseHourlyRate' => 'baseHourlyRate',
        'baseDailyRate' => 'baseDailyRate',
        'autoAdjustForLeave' => 'autoAdjustForLeave',
        'niTable' => 'niTable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'regularPayLines' => 'setRegularPayLines',
        'period' => 'setPeriod',
        'ordinal' => 'setOrdinal',
        'method' => 'setMethod',
        'withholdTaxRefundIfPayIsZero' => 'setWithholdTaxRefundIfPayIsZero',
        'taxAndNi' => 'setTaxAndNi',
        'fpsFields' => 'setFpsFields',
        'tags' => 'setTags',
        'basis' => 'setBasis',
        'nationalMinimumWage' => 'setNationalMinimumWage',
        'payCode' => 'setPayCode',
        'mileageVehicleType' => 'setMileageVehicleType',
        'mapsMiles' => 'setMapsMiles',
        'payAmount' => 'setPayAmount',
        'payAmountMultiplier' => 'setPayAmountMultiplier',
        'baseHourlyRate' => 'setBaseHourlyRate',
        'baseDailyRate' => 'setBaseDailyRate',
        'autoAdjustForLeave' => 'setAutoAdjustForLeave',
        'niTable' => 'setNiTable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'regularPayLines' => 'getRegularPayLines',
        'period' => 'getPeriod',
        'ordinal' => 'getOrdinal',
        'method' => 'getMethod',
        'withholdTaxRefundIfPayIsZero' => 'getWithholdTaxRefundIfPayIsZero',
        'taxAndNi' => 'getTaxAndNi',
        'fpsFields' => 'getFpsFields',
        'tags' => 'getTags',
        'basis' => 'getBasis',
        'nationalMinimumWage' => 'getNationalMinimumWage',
        'payCode' => 'getPayCode',
        'mileageVehicleType' => 'getMileageVehicleType',
        'mapsMiles' => 'getMapsMiles',
        'payAmount' => 'getPayAmount',
        'payAmountMultiplier' => 'getPayAmountMultiplier',
        'baseHourlyRate' => 'getBaseHourlyRate',
        'baseDailyRate' => 'getBaseDailyRate',
        'autoAdjustForLeave' => 'getAutoAdjustForLeave',
        'niTable' => 'getNiTable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('regularPayLines', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('ordinal', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('withholdTaxRefundIfPayIsZero', $data ?? [], null);
        $this->setIfExists('taxAndNi', $data ?? [], null);
        $this->setIfExists('fpsFields', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('basis', $data ?? [], null);
        $this->setIfExists('nationalMinimumWage', $data ?? [], null);
        $this->setIfExists('payCode', $data ?? [], null);
        $this->setIfExists('mileageVehicleType', $data ?? [], null);
        $this->setIfExists('mapsMiles', $data ?? [], null);
        $this->setIfExists('payAmount', $data ?? [], null);
        $this->setIfExists('payAmountMultiplier', $data ?? [], null);
        $this->setIfExists('baseHourlyRate', $data ?? [], null);
        $this->setIfExists('baseDailyRate', $data ?? [], null);
        $this->setIfExists('autoAdjustForLeave', $data ?? [], null);
        $this->setIfExists('niTable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets regularPayLines
     *
     * @return \SynergiTech\Staffology\Model\ContractPayLineRequest[]|null
     */
    public function getRegularPayLines(): ?array
    {
        return $this->container['regularPayLines'];
    }

    /**
     * Sets regularPayLines
     *
     * @param \SynergiTech\Staffology\Model\ContractPayLineRequest[]|null $regularPayLines These are used to make additions/deductions to the pay for this Employee.  You do not need to include Pension, Tax, NI,  Loan Repayments, etc as these will all be automatically created.
     *
     * @return $this
     */
    public function setRegularPayLines(?array $regularPayLines): static
    {
        if (is_null($regularPayLines)) {
            array_push($this->openAPINullablesSetToNull, 'regularPayLines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('regularPayLines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['regularPayLines'] = $regularPayLines;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $period period
     *
     * @return $this
     */
    public function setPeriod(?\SynergiTech\Staffology\Model\PayPeriods $period): static
    {
        if (is_null($period)) {
            throw new InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets ordinal
     *
     * @return int|null
     */
    public function getOrdinal(): ?int
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param int|null $ordinal Indicates whether to use first, second, third (etc) PaySchedule for this PayPeriod.
     *
     * @return $this
     */
    public function setOrdinal(?int $ordinal): static
    {
        if (is_null($ordinal)) {
            throw new InvalidArgumentException('non-nullable ordinal cannot be null');
        }
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \SynergiTech\Staffology\Model\PayMethod|null
     */
    public function getMethod(): ?\SynergiTech\Staffology\Model\PayMethod
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \SynergiTech\Staffology\Model\PayMethod|null $method method
     *
     * @return $this
     */
    public function setMethod(?\SynergiTech\Staffology\Model\PayMethod $method): static
    {
        if (is_null($method)) {
            throw new InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets withholdTaxRefundIfPayIsZero
     *
     * @return bool|null
     */
    public function getWithholdTaxRefundIfPayIsZero(): ?bool
    {
        return $this->container['withholdTaxRefundIfPayIsZero'];
    }

    /**
     * Sets withholdTaxRefundIfPayIsZero
     *
     * @param bool|null $withholdTaxRefundIfPayIsZero If you don't want negative PAYE values when the Gross pay is zero, set this to true
     *
     * @return $this
     */
    public function setWithholdTaxRefundIfPayIsZero(?bool $withholdTaxRefundIfPayIsZero): static
    {
        if (is_null($withholdTaxRefundIfPayIsZero)) {
            throw new InvalidArgumentException('non-nullable withholdTaxRefundIfPayIsZero cannot be null');
        }
        $this->container['withholdTaxRefundIfPayIsZero'] = $withholdTaxRefundIfPayIsZero;

        return $this;
    }

    /**
     * Gets taxAndNi
     *
     * @return \SynergiTech\Staffology\Model\ContractTaxAndNi|null
     */
    public function getTaxAndNi(): ?\SynergiTech\Staffology\Model\ContractTaxAndNi
    {
        return $this->container['taxAndNi'];
    }

    /**
     * Sets taxAndNi
     *
     * @param \SynergiTech\Staffology\Model\ContractTaxAndNi|null $taxAndNi taxAndNi
     *
     * @return $this
     */
    public function setTaxAndNi(?\SynergiTech\Staffology\Model\ContractTaxAndNi $taxAndNi): static
    {
        if (is_null($taxAndNi)) {
            throw new InvalidArgumentException('non-nullable taxAndNi cannot be null');
        }
        $this->container['taxAndNi'] = $taxAndNi;

        return $this;
    }

    /**
     * Gets fpsFields
     *
     * @return \SynergiTech\Staffology\Model\ContractFpsFields|null
     */
    public function getFpsFields(): ?\SynergiTech\Staffology\Model\ContractFpsFields
    {
        return $this->container['fpsFields'];
    }

    /**
     * Sets fpsFields
     *
     * @param \SynergiTech\Staffology\Model\ContractFpsFields|null $fpsFields fpsFields
     *
     * @return $this
     */
    public function setFpsFields(?\SynergiTech\Staffology\Model\ContractFpsFields $fpsFields): static
    {
        if (is_null($fpsFields)) {
            throw new InvalidArgumentException('non-nullable fpsFields cannot be null');
        }
        $this->container['fpsFields'] = $fpsFields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return $this
     */
    public function setTags(?array $tags): static
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets basis
     *
     * @return \SynergiTech\Staffology\Model\PayBasis|null
     */
    public function getBasis(): ?\SynergiTech\Staffology\Model\PayBasis
    {
        return $this->container['basis'];
    }

    /**
     * Sets basis
     *
     * @param \SynergiTech\Staffology\Model\PayBasis|null $basis basis
     *
     * @return $this
     */
    public function setBasis(?\SynergiTech\Staffology\Model\PayBasis $basis): static
    {
        if (is_null($basis)) {
            throw new InvalidArgumentException('non-nullable basis cannot be null');
        }
        $this->container['basis'] = $basis;

        return $this;
    }

    /**
     * Gets nationalMinimumWage
     *
     * @return bool|null
     */
    public function getNationalMinimumWage(): ?bool
    {
        return $this->container['nationalMinimumWage'];
    }

    /**
     * Sets nationalMinimumWage
     *
     * @param bool|null $nationalMinimumWage nationalMinimumWage
     *
     * @return $this
     */
    public function setNationalMinimumWage(?bool $nationalMinimumWage): static
    {
        if (is_null($nationalMinimumWage)) {
            throw new InvalidArgumentException('non-nullable nationalMinimumWage cannot be null');
        }
        $this->container['nationalMinimumWage'] = $nationalMinimumWage;

        return $this;
    }

    /**
     * Gets payCode
     *
     * @return string|null
     */
    public function getPayCode(): ?string
    {
        return $this->container['payCode'];
    }

    /**
     * Sets payCode
     *
     * @param string|null $payCode If you want the Employees pay to be allocated to a code other than BASIC, specify it here
     *
     * @return $this
     */
    public function setPayCode(?string $payCode): static
    {
        if (is_null($payCode)) {
            array_push($this->openAPINullablesSetToNull, 'payCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCode'] = $payCode;

        return $this;
    }

    /**
     * Gets mileageVehicleType
     *
     * @return \SynergiTech\Staffology\Model\MileageVehicleType|null
     */
    public function getMileageVehicleType(): ?\SynergiTech\Staffology\Model\MileageVehicleType
    {
        return $this->container['mileageVehicleType'];
    }

    /**
     * Sets mileageVehicleType
     *
     * @param \SynergiTech\Staffology\Model\MileageVehicleType|null $mileageVehicleType mileageVehicleType
     *
     * @return $this
     */
    public function setMileageVehicleType(?\SynergiTech\Staffology\Model\MileageVehicleType $mileageVehicleType): static
    {
        if (is_null($mileageVehicleType)) {
            throw new InvalidArgumentException('non-nullable mileageVehicleType cannot be null');
        }
        $this->container['mileageVehicleType'] = $mileageVehicleType;

        return $this;
    }

    /**
     * Gets mapsMiles
     *
     * @return int|null
     */
    public function getMapsMiles(): ?int
    {
        return $this->container['mapsMiles'];
    }

    /**
     * Sets mapsMiles
     *
     * @param int|null $mapsMiles The number of miles to pay for as Mileage Allowance Payments
     *
     * @return $this
     */
    public function setMapsMiles(?int $mapsMiles): static
    {
        if (is_null($mapsMiles)) {
            array_push($this->openAPINullablesSetToNull, 'mapsMiles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mapsMiles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mapsMiles'] = $mapsMiles;

        return $this;
    }

    /**
     * Gets payAmount
     *
     * @return float|null
     */
    public function getPayAmount(): ?float
    {
        return $this->container['payAmount'];
    }

    /**
     * Sets payAmount
     *
     * @param float|null $payAmount The amount the Employee is regularly paid each period
     *
     * @return $this
     */
    public function setPayAmount(?float $payAmount): static
    {
        if (is_null($payAmount)) {
            throw new InvalidArgumentException('non-nullable payAmount cannot be null');
        }
        $this->container['payAmount'] = $payAmount;

        return $this;
    }

    /**
     * Gets payAmountMultiplier
     *
     * @return float|null
     */
    public function getPayAmountMultiplier(): ?float
    {
        return $this->container['payAmountMultiplier'];
    }

    /**
     * Sets payAmountMultiplier
     *
     * @param float|null $payAmountMultiplier This property is irrelevant if the basis is Monthly.  But if the basis is Daily or Hourly then this property sets how many days/hours the employee should be paid for in the period.
     *
     * @return $this
     */
    public function setPayAmountMultiplier(?float $payAmountMultiplier): static
    {
        if (is_null($payAmountMultiplier)) {
            throw new InvalidArgumentException('non-nullable payAmountMultiplier cannot be null');
        }
        $this->container['payAmountMultiplier'] = $payAmountMultiplier;

        return $this;
    }

    /**
     * Gets baseHourlyRate
     *
     * @return float|null
     */
    public function getBaseHourlyRate(): ?float
    {
        return $this->container['baseHourlyRate'];
    }

    /**
     * Sets baseHourlyRate
     *
     * @param float|null $baseHourlyRate This property is used to calculate values for PayCodes that are set as multiples of  the employees base hourly rate. Eg Overtime.  If this is set as zero then we'll attempt to calculate a value based on the other fields
     *
     * @return $this
     */
    public function setBaseHourlyRate(?float $baseHourlyRate): static
    {
        if (is_null($baseHourlyRate)) {
            throw new InvalidArgumentException('non-nullable baseHourlyRate cannot be null');
        }
        $this->container['baseHourlyRate'] = $baseHourlyRate;

        return $this;
    }

    /**
     * Gets baseDailyRate
     *
     * @return float|null
     */
    public function getBaseDailyRate(): ?float
    {
        return $this->container['baseDailyRate'];
    }

    /**
     * Sets baseDailyRate
     *
     * @param float|null $baseDailyRate This property is used to calculate values for PayCodes that are set as multiples of  the employees base daily rate. Eg sick.  If this is set as zero then we'll attempt to calculate a value based on the other fields
     *
     * @return $this
     */
    public function setBaseDailyRate(?float $baseDailyRate): static
    {
        if (is_null($baseDailyRate)) {
            throw new InvalidArgumentException('non-nullable baseDailyRate cannot be null');
        }
        $this->container['baseDailyRate'] = $baseDailyRate;

        return $this;
    }

    /**
     * Gets autoAdjustForLeave
     *
     * @return bool|null
     */
    public function getAutoAdjustForLeave(): ?bool
    {
        return $this->container['autoAdjustForLeave'];
    }

    /**
     * Sets autoAdjustForLeave
     *
     * @param bool|null $autoAdjustForLeave This sets whether the PayLine should be automatically adjusted or not for:  Leave Entries;  Starters/Leavers;  PayLine effectiveFrom and effectiveTo values falling mid-way through a PayRun
     *
     * @return $this
     */
    public function setAutoAdjustForLeave(?bool $autoAdjustForLeave): static
    {
        if (is_null($autoAdjustForLeave)) {
            throw new InvalidArgumentException('non-nullable autoAdjustForLeave cannot be null');
        }
        $this->container['autoAdjustForLeave'] = $autoAdjustForLeave;

        return $this;
    }

    /**
     * Gets niTable
     *
     * @return string|null
     */
    public function getNiTable(): ?string
    {
        return $this->container['niTable'];
    }

    /**
     * Sets niTable
     *
     * @param string|null $niTable niTable
     *
     * @return $this
     */
    public function setNiTable(?string $niTable): static
    {
        if (is_null($niTable)) {
            throw new InvalidArgumentException('non-nullable niTable cannot be null');
        }
        $this->container['niTable'] = $niTable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


