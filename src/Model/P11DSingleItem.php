<?php
/**
 * P11DSingleItem
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * P11DSingleItem Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class P11DSingleItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'P11DSingleItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'typeLetter' => 'string',
        'taxablePmt' => 'string',
        'excess' => 'string',
        'taxablePmtOrRelevantAmt' => 'string',
        'tradingOrgInd' => 'string',
        'desc' => 'string',
        'other' => 'string',
        'annValProRata' => 'string',
        'grossOrAmtForgone' => 'string',
        'costOrAmtForgone' => 'string',
        'madeGood' => 'string',
        'cashEquivOrRelevantAmt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'typeLetter' => null,
        'taxablePmt' => null,
        'excess' => null,
        'taxablePmtOrRelevantAmt' => null,
        'tradingOrgInd' => null,
        'desc' => null,
        'other' => null,
        'annValProRata' => null,
        'grossOrAmtForgone' => null,
        'costOrAmtForgone' => null,
        'madeGood' => null,
        'cashEquivOrRelevantAmt' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'typeLetter' => true,
        'taxablePmt' => true,
        'excess' => true,
        'taxablePmtOrRelevantAmt' => true,
        'tradingOrgInd' => true,
        'desc' => true,
        'other' => true,
        'annValProRata' => true,
        'grossOrAmtForgone' => true,
        'costOrAmtForgone' => true,
        'madeGood' => true,
        'cashEquivOrRelevantAmt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'typeLetter' => 'typeLetter',
        'taxablePmt' => 'taxablePmt',
        'excess' => 'excess',
        'taxablePmtOrRelevantAmt' => 'taxablePmtOrRelevantAmt',
        'tradingOrgInd' => 'tradingOrgInd',
        'desc' => 'desc',
        'other' => 'other',
        'annValProRata' => 'annValProRata',
        'grossOrAmtForgone' => 'grossOrAmtForgone',
        'costOrAmtForgone' => 'costOrAmtForgone',
        'madeGood' => 'madeGood',
        'cashEquivOrRelevantAmt' => 'cashEquivOrRelevantAmt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'typeLetter' => 'setTypeLetter',
        'taxablePmt' => 'setTaxablePmt',
        'excess' => 'setExcess',
        'taxablePmtOrRelevantAmt' => 'setTaxablePmtOrRelevantAmt',
        'tradingOrgInd' => 'setTradingOrgInd',
        'desc' => 'setDesc',
        'other' => 'setOther',
        'annValProRata' => 'setAnnValProRata',
        'grossOrAmtForgone' => 'setGrossOrAmtForgone',
        'costOrAmtForgone' => 'setCostOrAmtForgone',
        'madeGood' => 'setMadeGood',
        'cashEquivOrRelevantAmt' => 'setCashEquivOrRelevantAmt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'typeLetter' => 'getTypeLetter',
        'taxablePmt' => 'getTaxablePmt',
        'excess' => 'getExcess',
        'taxablePmtOrRelevantAmt' => 'getTaxablePmtOrRelevantAmt',
        'tradingOrgInd' => 'getTradingOrgInd',
        'desc' => 'getDesc',
        'other' => 'getOther',
        'annValProRata' => 'getAnnValProRata',
        'grossOrAmtForgone' => 'getGrossOrAmtForgone',
        'costOrAmtForgone' => 'getCostOrAmtForgone',
        'madeGood' => 'getMadeGood',
        'cashEquivOrRelevantAmt' => 'getCashEquivOrRelevantAmt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('typeLetter', $data ?? [], null);
        $this->setIfExists('taxablePmt', $data ?? [], null);
        $this->setIfExists('excess', $data ?? [], null);
        $this->setIfExists('taxablePmtOrRelevantAmt', $data ?? [], null);
        $this->setIfExists('tradingOrgInd', $data ?? [], null);
        $this->setIfExists('desc', $data ?? [], null);
        $this->setIfExists('other', $data ?? [], null);
        $this->setIfExists('annValProRata', $data ?? [], null);
        $this->setIfExists('grossOrAmtForgone', $data ?? [], null);
        $this->setIfExists('costOrAmtForgone', $data ?? [], null);
        $this->setIfExists('madeGood', $data ?? [], null);
        $this->setIfExists('cashEquivOrRelevantAmt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets typeLetter
     *
     * @return string|null
     */
    public function getTypeLetter(): ?string
    {
        return $this->container['typeLetter'];
    }

    /**
     * Sets typeLetter
     *
     * @param string|null $typeLetter typeLetter
     *
     * @return $this
     */
    public function setTypeLetter(?string $typeLetter): static
    {
        if (is_null($typeLetter)) {
            array_push($this->openAPINullablesSetToNull, 'typeLetter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('typeLetter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['typeLetter'] = $typeLetter;

        return $this;
    }

    /**
     * Gets taxablePmt
     *
     * @return string|null
     */
    public function getTaxablePmt(): ?string
    {
        return $this->container['taxablePmt'];
    }

    /**
     * Sets taxablePmt
     *
     * @param string|null $taxablePmt taxablePmt
     *
     * @return $this
     */
    public function setTaxablePmt(?string $taxablePmt): static
    {
        if (is_null($taxablePmt)) {
            array_push($this->openAPINullablesSetToNull, 'taxablePmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxablePmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxablePmt'] = $taxablePmt;

        return $this;
    }

    /**
     * Gets excess
     *
     * @return string|null
     */
    public function getExcess(): ?string
    {
        return $this->container['excess'];
    }

    /**
     * Sets excess
     *
     * @param string|null $excess excess
     *
     * @return $this
     */
    public function setExcess(?string $excess): static
    {
        if (is_null($excess)) {
            array_push($this->openAPINullablesSetToNull, 'excess');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excess', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excess'] = $excess;

        return $this;
    }

    /**
     * Gets taxablePmtOrRelevantAmt
     *
     * @return string|null
     */
    public function getTaxablePmtOrRelevantAmt(): ?string
    {
        return $this->container['taxablePmtOrRelevantAmt'];
    }

    /**
     * Sets taxablePmtOrRelevantAmt
     *
     * @param string|null $taxablePmtOrRelevantAmt taxablePmtOrRelevantAmt
     *
     * @return $this
     */
    public function setTaxablePmtOrRelevantAmt(?string $taxablePmtOrRelevantAmt): static
    {
        if (is_null($taxablePmtOrRelevantAmt)) {
            array_push($this->openAPINullablesSetToNull, 'taxablePmtOrRelevantAmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxablePmtOrRelevantAmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxablePmtOrRelevantAmt'] = $taxablePmtOrRelevantAmt;

        return $this;
    }

    /**
     * Gets tradingOrgInd
     *
     * @return string|null
     */
    public function getTradingOrgInd(): ?string
    {
        return $this->container['tradingOrgInd'];
    }

    /**
     * Sets tradingOrgInd
     *
     * @param string|null $tradingOrgInd tradingOrgInd
     *
     * @return $this
     */
    public function setTradingOrgInd(?string $tradingOrgInd): static
    {
        if (is_null($tradingOrgInd)) {
            array_push($this->openAPINullablesSetToNull, 'tradingOrgInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tradingOrgInd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tradingOrgInd'] = $tradingOrgInd;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string|null
     */
    public function getDesc(): ?string
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string|null $desc desc
     *
     * @return $this
     */
    public function setDesc(?string $desc): static
    {
        if (is_null($desc)) {
            array_push($this->openAPINullablesSetToNull, 'desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets other
     *
     * @return string|null
     */
    public function getOther(): ?string
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param string|null $other other
     *
     * @return $this
     */
    public function setOther(?string $other): static
    {
        if (is_null($other)) {
            array_push($this->openAPINullablesSetToNull, 'other');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets annValProRata
     *
     * @return string|null
     */
    public function getAnnValProRata(): ?string
    {
        return $this->container['annValProRata'];
    }

    /**
     * Sets annValProRata
     *
     * @param string|null $annValProRata annValProRata
     *
     * @return $this
     */
    public function setAnnValProRata(?string $annValProRata): static
    {
        if (is_null($annValProRata)) {
            array_push($this->openAPINullablesSetToNull, 'annValProRata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annValProRata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annValProRata'] = $annValProRata;

        return $this;
    }

    /**
     * Gets grossOrAmtForgone
     *
     * @return string|null
     */
    public function getGrossOrAmtForgone(): ?string
    {
        return $this->container['grossOrAmtForgone'];
    }

    /**
     * Sets grossOrAmtForgone
     *
     * @param string|null $grossOrAmtForgone grossOrAmtForgone
     *
     * @return $this
     */
    public function setGrossOrAmtForgone(?string $grossOrAmtForgone): static
    {
        if (is_null($grossOrAmtForgone)) {
            array_push($this->openAPINullablesSetToNull, 'grossOrAmtForgone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossOrAmtForgone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossOrAmtForgone'] = $grossOrAmtForgone;

        return $this;
    }

    /**
     * Gets costOrAmtForgone
     *
     * @return string|null
     */
    public function getCostOrAmtForgone(): ?string
    {
        return $this->container['costOrAmtForgone'];
    }

    /**
     * Sets costOrAmtForgone
     *
     * @param string|null $costOrAmtForgone costOrAmtForgone
     *
     * @return $this
     */
    public function setCostOrAmtForgone(?string $costOrAmtForgone): static
    {
        if (is_null($costOrAmtForgone)) {
            array_push($this->openAPINullablesSetToNull, 'costOrAmtForgone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costOrAmtForgone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costOrAmtForgone'] = $costOrAmtForgone;

        return $this;
    }

    /**
     * Gets madeGood
     *
     * @return string|null
     */
    public function getMadeGood(): ?string
    {
        return $this->container['madeGood'];
    }

    /**
     * Sets madeGood
     *
     * @param string|null $madeGood madeGood
     *
     * @return $this
     */
    public function setMadeGood(?string $madeGood): static
    {
        if (is_null($madeGood)) {
            array_push($this->openAPINullablesSetToNull, 'madeGood');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('madeGood', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['madeGood'] = $madeGood;

        return $this;
    }

    /**
     * Gets cashEquivOrRelevantAmt
     *
     * @return string|null
     */
    public function getCashEquivOrRelevantAmt(): ?string
    {
        return $this->container['cashEquivOrRelevantAmt'];
    }

    /**
     * Sets cashEquivOrRelevantAmt
     *
     * @param string|null $cashEquivOrRelevantAmt cashEquivOrRelevantAmt
     *
     * @return $this
     */
    public function setCashEquivOrRelevantAmt(?string $cashEquivOrRelevantAmt): static
    {
        if (is_null($cashEquivOrRelevantAmt)) {
            array_push($this->openAPINullablesSetToNull, 'cashEquivOrRelevantAmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cashEquivOrRelevantAmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cashEquivOrRelevantAmt'] = $cashEquivOrRelevantAmt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


