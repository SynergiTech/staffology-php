<?php
/**
 * AutomationSettings
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * AutomationSettings Class Doc Comment
 *
 * @description Configures various automation settings for an Employer
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AutomationSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AutomationSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'enableAutoPilot' => 'bool',
        'autoPilotTime' => '\SynergiTech\Staffology\Model\AutoPilotFinaliseTime',
        'autoPilotOffset' => 'int',
        'enableAutoOpen' => 'bool',
        'autoSubmitFps' => 'bool',
        'autoSubmitPayments' => 'bool',
        'autoSubmitJournal' => 'bool',
        'autoSubmitPaymentsEmployee' => 'bool',
        'autoSubmitPayslips' => 'bool',
        'autoSubmitP45s' => 'bool',
        'autoSubmitPaymentsHmrc' => 'bool',
        'autoSubmitPaymentsDeductions' => 'bool',
        'autoSubmitPaymentsAeos' => 'bool',
        'autoSubmitPaymentsPensions' => 'bool',
        'payslipReleaseType' => '\SynergiTech\Staffology\Model\PayslipReleaseType',
        'autoSubmitPayslipsDaysBeforePayday' => '\SynergiTech\Staffology\Model\DaysBeforePayday',
        'autoSubmitPayslipsPaymentDateRule' => '\SynergiTech\Staffology\Model\PayslipReleasePaymentDateRule',
        'autoSubmitPayslipsPayslipReleaseTime' => '\SynergiTech\Staffology\Model\PayslipReleaseTime',
        'employeesWithoutEmailAddress' => 'int',
        'employeesWithEmailAddressButNotAutoSending' => 'int',
        'subcontractorsNotAutoSendingStatement' => 'int',
        'codingNoticesAutomaticallyApplied' => 'bool',
        'payrunEmails' => '\SynergiTech\Staffology\Model\PayrunEmail[]',
        'autoSubmitPensionLetters' => 'bool',
        'autoSubmitEps' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'enableAutoPilot' => null,
        'autoPilotTime' => null,
        'autoPilotOffset' => 'int32',
        'enableAutoOpen' => null,
        'autoSubmitFps' => null,
        'autoSubmitPayments' => null,
        'autoSubmitJournal' => null,
        'autoSubmitPaymentsEmployee' => null,
        'autoSubmitPayslips' => null,
        'autoSubmitP45s' => null,
        'autoSubmitPaymentsHmrc' => null,
        'autoSubmitPaymentsDeductions' => null,
        'autoSubmitPaymentsAeos' => null,
        'autoSubmitPaymentsPensions' => null,
        'payslipReleaseType' => null,
        'autoSubmitPayslipsDaysBeforePayday' => null,
        'autoSubmitPayslipsPaymentDateRule' => null,
        'autoSubmitPayslipsPayslipReleaseTime' => null,
        'employeesWithoutEmailAddress' => 'int32',
        'employeesWithEmailAddressButNotAutoSending' => 'int32',
        'subcontractorsNotAutoSendingStatement' => 'int32',
        'codingNoticesAutomaticallyApplied' => null,
        'payrunEmails' => null,
        'autoSubmitPensionLetters' => null,
        'autoSubmitEps' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'enableAutoPilot' => false,
        'autoPilotTime' => false,
        'autoPilotOffset' => false,
        'enableAutoOpen' => false,
        'autoSubmitFps' => false,
        'autoSubmitPayments' => false,
        'autoSubmitJournal' => false,
        'autoSubmitPaymentsEmployee' => false,
        'autoSubmitPayslips' => false,
        'autoSubmitP45s' => false,
        'autoSubmitPaymentsHmrc' => false,
        'autoSubmitPaymentsDeductions' => false,
        'autoSubmitPaymentsAeos' => false,
        'autoSubmitPaymentsPensions' => false,
        'payslipReleaseType' => false,
        'autoSubmitPayslipsDaysBeforePayday' => false,
        'autoSubmitPayslipsPaymentDateRule' => false,
        'autoSubmitPayslipsPayslipReleaseTime' => false,
        'employeesWithoutEmailAddress' => false,
        'employeesWithEmailAddressButNotAutoSending' => false,
        'subcontractorsNotAutoSendingStatement' => false,
        'codingNoticesAutomaticallyApplied' => false,
        'payrunEmails' => true,
        'autoSubmitPensionLetters' => false,
        'autoSubmitEps' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'enableAutoPilot' => 'enableAutoPilot',
        'autoPilotTime' => 'autoPilotTime',
        'autoPilotOffset' => 'autoPilotOffset',
        'enableAutoOpen' => 'enableAutoOpen',
        'autoSubmitFps' => 'autoSubmitFps',
        'autoSubmitPayments' => 'autoSubmitPayments',
        'autoSubmitJournal' => 'autoSubmitJournal',
        'autoSubmitPaymentsEmployee' => 'autoSubmitPayments_Employee',
        'autoSubmitPayslips' => 'autoSubmitPayslips',
        'autoSubmitP45s' => 'autoSubmitP45s',
        'autoSubmitPaymentsHmrc' => 'autoSubmitPayments_Hmrc',
        'autoSubmitPaymentsDeductions' => 'autoSubmitPayments_Deductions',
        'autoSubmitPaymentsAeos' => 'autoSubmitPayments_Aeos',
        'autoSubmitPaymentsPensions' => 'autoSubmitPayments_Pensions',
        'payslipReleaseType' => 'payslipReleaseType',
        'autoSubmitPayslipsDaysBeforePayday' => 'autoSubmitPayslips_DaysBeforePayday',
        'autoSubmitPayslipsPaymentDateRule' => 'autoSubmitPayslips_PaymentDateRule',
        'autoSubmitPayslipsPayslipReleaseTime' => 'autoSubmitPayslips_PayslipReleaseTime',
        'employeesWithoutEmailAddress' => 'employeesWithoutEmailAddress',
        'employeesWithEmailAddressButNotAutoSending' => 'employeesWithEmailAddressButNotAutoSending',
        'subcontractorsNotAutoSendingStatement' => 'subcontractorsNotAutoSendingStatement',
        'codingNoticesAutomaticallyApplied' => 'codingNoticesAutomaticallyApplied',
        'payrunEmails' => 'payrunEmails',
        'autoSubmitPensionLetters' => 'autoSubmitPensionLetters',
        'autoSubmitEps' => 'autoSubmitEps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'enableAutoPilot' => 'setEnableAutoPilot',
        'autoPilotTime' => 'setAutoPilotTime',
        'autoPilotOffset' => 'setAutoPilotOffset',
        'enableAutoOpen' => 'setEnableAutoOpen',
        'autoSubmitFps' => 'setAutoSubmitFps',
        'autoSubmitPayments' => 'setAutoSubmitPayments',
        'autoSubmitJournal' => 'setAutoSubmitJournal',
        'autoSubmitPaymentsEmployee' => 'setAutoSubmitPaymentsEmployee',
        'autoSubmitPayslips' => 'setAutoSubmitPayslips',
        'autoSubmitP45s' => 'setAutoSubmitP45s',
        'autoSubmitPaymentsHmrc' => 'setAutoSubmitPaymentsHmrc',
        'autoSubmitPaymentsDeductions' => 'setAutoSubmitPaymentsDeductions',
        'autoSubmitPaymentsAeos' => 'setAutoSubmitPaymentsAeos',
        'autoSubmitPaymentsPensions' => 'setAutoSubmitPaymentsPensions',
        'payslipReleaseType' => 'setPayslipReleaseType',
        'autoSubmitPayslipsDaysBeforePayday' => 'setAutoSubmitPayslipsDaysBeforePayday',
        'autoSubmitPayslipsPaymentDateRule' => 'setAutoSubmitPayslipsPaymentDateRule',
        'autoSubmitPayslipsPayslipReleaseTime' => 'setAutoSubmitPayslipsPayslipReleaseTime',
        'employeesWithoutEmailAddress' => 'setEmployeesWithoutEmailAddress',
        'employeesWithEmailAddressButNotAutoSending' => 'setEmployeesWithEmailAddressButNotAutoSending',
        'subcontractorsNotAutoSendingStatement' => 'setSubcontractorsNotAutoSendingStatement',
        'codingNoticesAutomaticallyApplied' => 'setCodingNoticesAutomaticallyApplied',
        'payrunEmails' => 'setPayrunEmails',
        'autoSubmitPensionLetters' => 'setAutoSubmitPensionLetters',
        'autoSubmitEps' => 'setAutoSubmitEps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'enableAutoPilot' => 'getEnableAutoPilot',
        'autoPilotTime' => 'getAutoPilotTime',
        'autoPilotOffset' => 'getAutoPilotOffset',
        'enableAutoOpen' => 'getEnableAutoOpen',
        'autoSubmitFps' => 'getAutoSubmitFps',
        'autoSubmitPayments' => 'getAutoSubmitPayments',
        'autoSubmitJournal' => 'getAutoSubmitJournal',
        'autoSubmitPaymentsEmployee' => 'getAutoSubmitPaymentsEmployee',
        'autoSubmitPayslips' => 'getAutoSubmitPayslips',
        'autoSubmitP45s' => 'getAutoSubmitP45s',
        'autoSubmitPaymentsHmrc' => 'getAutoSubmitPaymentsHmrc',
        'autoSubmitPaymentsDeductions' => 'getAutoSubmitPaymentsDeductions',
        'autoSubmitPaymentsAeos' => 'getAutoSubmitPaymentsAeos',
        'autoSubmitPaymentsPensions' => 'getAutoSubmitPaymentsPensions',
        'payslipReleaseType' => 'getPayslipReleaseType',
        'autoSubmitPayslipsDaysBeforePayday' => 'getAutoSubmitPayslipsDaysBeforePayday',
        'autoSubmitPayslipsPaymentDateRule' => 'getAutoSubmitPayslipsPaymentDateRule',
        'autoSubmitPayslipsPayslipReleaseTime' => 'getAutoSubmitPayslipsPayslipReleaseTime',
        'employeesWithoutEmailAddress' => 'getEmployeesWithoutEmailAddress',
        'employeesWithEmailAddressButNotAutoSending' => 'getEmployeesWithEmailAddressButNotAutoSending',
        'subcontractorsNotAutoSendingStatement' => 'getSubcontractorsNotAutoSendingStatement',
        'codingNoticesAutomaticallyApplied' => 'getCodingNoticesAutomaticallyApplied',
        'payrunEmails' => 'getPayrunEmails',
        'autoSubmitPensionLetters' => 'getAutoSubmitPensionLetters',
        'autoSubmitEps' => 'getAutoSubmitEps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enableAutoPilot', $data ?? [], null);
        $this->setIfExists('autoPilotTime', $data ?? [], null);
        $this->setIfExists('autoPilotOffset', $data ?? [], null);
        $this->setIfExists('enableAutoOpen', $data ?? [], null);
        $this->setIfExists('autoSubmitFps', $data ?? [], null);
        $this->setIfExists('autoSubmitPayments', $data ?? [], null);
        $this->setIfExists('autoSubmitJournal', $data ?? [], null);
        $this->setIfExists('autoSubmitPaymentsEmployee', $data ?? [], null);
        $this->setIfExists('autoSubmitPayslips', $data ?? [], null);
        $this->setIfExists('autoSubmitP45s', $data ?? [], null);
        $this->setIfExists('autoSubmitPaymentsHmrc', $data ?? [], null);
        $this->setIfExists('autoSubmitPaymentsDeductions', $data ?? [], null);
        $this->setIfExists('autoSubmitPaymentsAeos', $data ?? [], null);
        $this->setIfExists('autoSubmitPaymentsPensions', $data ?? [], null);
        $this->setIfExists('payslipReleaseType', $data ?? [], null);
        $this->setIfExists('autoSubmitPayslipsDaysBeforePayday', $data ?? [], null);
        $this->setIfExists('autoSubmitPayslipsPaymentDateRule', $data ?? [], null);
        $this->setIfExists('autoSubmitPayslipsPayslipReleaseTime', $data ?? [], null);
        $this->setIfExists('employeesWithoutEmailAddress', $data ?? [], null);
        $this->setIfExists('employeesWithEmailAddressButNotAutoSending', $data ?? [], null);
        $this->setIfExists('subcontractorsNotAutoSendingStatement', $data ?? [], null);
        $this->setIfExists('codingNoticesAutomaticallyApplied', $data ?? [], null);
        $this->setIfExists('payrunEmails', $data ?? [], null);
        $this->setIfExists('autoSubmitPensionLetters', $data ?? [], null);
        $this->setIfExists('autoSubmitEps', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['autoPilotOffset']) && ($this->container['autoPilotOffset'] > 6)) {
            $invalidProperties[] = "invalid value for 'autoPilotOffset', must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['autoPilotOffset']) && ($this->container['autoPilotOffset'] < 0)) {
            $invalidProperties[] = "invalid value for 'autoPilotOffset', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enableAutoPilot
     *
     * @return bool|null
     */
    public function getEnableAutoPilot(): ?bool
    {
        return $this->container['enableAutoPilot'];
    }

    /**
     * Sets enableAutoPilot
     *
     * @param bool|null $enableAutoPilot IF enabled then payruns will be automatically finalised on the payment date and the next payrun will be started
     *
     * @return $this
     */
    public function setEnableAutoPilot(?bool $enableAutoPilot): static
    {
        if (is_null($enableAutoPilot)) {
            throw new InvalidArgumentException('non-nullable enableAutoPilot cannot be null');
        }
        $this->container['enableAutoPilot'] = $enableAutoPilot;

        return $this;
    }

    /**
     * Gets autoPilotTime
     *
     * @return \SynergiTech\Staffology\Model\AutoPilotFinaliseTime|null
     */
    public function getAutoPilotTime(): ?\SynergiTech\Staffology\Model\AutoPilotFinaliseTime
    {
        return $this->container['autoPilotTime'];
    }

    /**
     * Sets autoPilotTime
     *
     * @param \SynergiTech\Staffology\Model\AutoPilotFinaliseTime|null $autoPilotTime autoPilotTime
     *
     * @return $this
     */
    public function setAutoPilotTime(?\SynergiTech\Staffology\Model\AutoPilotFinaliseTime $autoPilotTime): static
    {
        if (is_null($autoPilotTime)) {
            throw new InvalidArgumentException('non-nullable autoPilotTime cannot be null');
        }
        $this->container['autoPilotTime'] = $autoPilotTime;

        return $this;
    }

    /**
     * Gets autoPilotOffset
     *
     * @return int|null
     */
    public function getAutoPilotOffset(): ?int
    {
        return $this->container['autoPilotOffset'];
    }

    /**
     * Sets autoPilotOffset
     *
     * @param int|null $autoPilotOffset How many days before the payment date a payrun should be finalised.  Set it to 0 if you want the payrun to be automatically finalised on the payment date itself
     *
     * @return $this
     */
    public function setAutoPilotOffset(?int $autoPilotOffset): static
    {
        if (is_null($autoPilotOffset)) {
            throw new InvalidArgumentException('non-nullable autoPilotOffset cannot be null');
        }

        if (($autoPilotOffset > 6)) {
            throw new InvalidArgumentException('invalid value for $autoPilotOffset when calling AutomationSettings., must be smaller than or equal to 6.');
        }
        if (($autoPilotOffset < 0)) {
            throw new InvalidArgumentException('invalid value for $autoPilotOffset when calling AutomationSettings., must be bigger than or equal to 0.');
        }

        $this->container['autoPilotOffset'] = $autoPilotOffset;

        return $this;
    }

    /**
     * Gets enableAutoOpen
     *
     * @return bool|null
     */
    public function getEnableAutoOpen(): ?bool
    {
        return $this->container['enableAutoOpen'];
    }

    /**
     * Sets enableAutoOpen
     *
     * @param bool|null $enableAutoOpen IF enabled then whenever you close a payrun, the next one will be started. Automatically set to true if EnableAutoPilot is true
     *
     * @return $this
     */
    public function setEnableAutoOpen(?bool $enableAutoOpen): static
    {
        if (is_null($enableAutoOpen)) {
            throw new InvalidArgumentException('non-nullable enableAutoOpen cannot be null');
        }
        $this->container['enableAutoOpen'] = $enableAutoOpen;

        return $this;
    }

    /**
     * Gets autoSubmitFps
     *
     * @return bool|null
     */
    public function getAutoSubmitFps(): ?bool
    {
        return $this->container['autoSubmitFps'];
    }

    /**
     * Sets autoSubmitFps
     *
     * @param bool|null $autoSubmitFps If set to true, we'll automatically send your FPS to HMRC whenever you finalise a PayRun.  This property will always have the same value as the property with the same name on the RtiSubmissionSettings model.
     *
     * @return $this
     */
    public function setAutoSubmitFps(?bool $autoSubmitFps): static
    {
        if (is_null($autoSubmitFps)) {
            throw new InvalidArgumentException('non-nullable autoSubmitFps cannot be null');
        }
        $this->container['autoSubmitFps'] = $autoSubmitFps;

        return $this;
    }

    /**
     * Gets autoSubmitPayments
     *
     * @return bool|null
     */
    public function getAutoSubmitPayments(): ?bool
    {
        return $this->container['autoSubmitPayments'];
    }

    /**
     * Sets autoSubmitPayments
     *
     * @param bool|null $autoSubmitPayments If set to true, we'll automatically submit payments whenever you finalise a PayRun.  The employer must be connected to an ExternalDataProvider supporting Type of 'Payments'.
     *
     * @return $this
     */
    public function setAutoSubmitPayments(?bool $autoSubmitPayments): static
    {
        if (is_null($autoSubmitPayments)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPayments cannot be null');
        }
        $this->container['autoSubmitPayments'] = $autoSubmitPayments;

        return $this;
    }

    /**
     * Gets autoSubmitJournal
     *
     * @return bool|null
     */
    public function getAutoSubmitJournal(): ?bool
    {
        return $this->container['autoSubmitJournal'];
    }

    /**
     * Sets autoSubmitJournal
     *
     * @param bool|null $autoSubmitJournal If set to true, we'll automatically submit the payroll journal whenever you finalise a PayRun.  The employer must be connected to an ExternalDataProvider supporting Type of 'Accounting'.
     *
     * @return $this
     */
    public function setAutoSubmitJournal(?bool $autoSubmitJournal): static
    {
        if (is_null($autoSubmitJournal)) {
            throw new InvalidArgumentException('non-nullable autoSubmitJournal cannot be null');
        }
        $this->container['autoSubmitJournal'] = $autoSubmitJournal;

        return $this;
    }

    /**
     * Gets autoSubmitPaymentsEmployee
     *
     * @return bool|null
     */
    public function getAutoSubmitPaymentsEmployee(): ?bool
    {
        return $this->container['autoSubmitPaymentsEmployee'];
    }

    /**
     * Sets autoSubmitPaymentsEmployee
     *
     * @param bool|null $autoSubmitPaymentsEmployee Used in conjunction with AutoSubmitPayments.
     *
     * @return $this
     */
    public function setAutoSubmitPaymentsEmployee(?bool $autoSubmitPaymentsEmployee): static
    {
        if (is_null($autoSubmitPaymentsEmployee)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPaymentsEmployee cannot be null');
        }
        $this->container['autoSubmitPaymentsEmployee'] = $autoSubmitPaymentsEmployee;

        return $this;
    }

    /**
     * Gets autoSubmitPayslips
     *
     * @return bool|null
     */
    public function getAutoSubmitPayslips(): ?bool
    {
        return $this->container['autoSubmitPayslips'];
    }

    /**
     * Sets autoSubmitPayslips
     *
     * @param bool|null $autoSubmitPayslips If set to true, we'll automatically submit payslips whenever you finalise a PayRun.  The employer must be connected to an ExternalDataProvider supporting Type of 'EmployeePortal'.
     *
     * @return $this
     */
    public function setAutoSubmitPayslips(?bool $autoSubmitPayslips): static
    {
        if (is_null($autoSubmitPayslips)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPayslips cannot be null');
        }
        $this->container['autoSubmitPayslips'] = $autoSubmitPayslips;

        return $this;
    }

    /**
     * Gets autoSubmitP45s
     *
     * @return bool|null
     */
    public function getAutoSubmitP45s(): ?bool
    {
        return $this->container['autoSubmitP45s'];
    }

    /**
     * Sets autoSubmitP45s
     *
     * @param bool|null $autoSubmitP45s If set to true, we'll automatically submit P45s whenever you finalise a PayRun.  The employer must be connected to an ExternalDataProvider supporting Type of 'EmployeePortal'.
     *
     * @return $this
     */
    public function setAutoSubmitP45s(?bool $autoSubmitP45s): static
    {
        if (is_null($autoSubmitP45s)) {
            throw new InvalidArgumentException('non-nullable autoSubmitP45s cannot be null');
        }
        $this->container['autoSubmitP45s'] = $autoSubmitP45s;

        return $this;
    }

    /**
     * Gets autoSubmitPaymentsHmrc
     *
     * @return bool|null
     */
    public function getAutoSubmitPaymentsHmrc(): ?bool
    {
        return $this->container['autoSubmitPaymentsHmrc'];
    }

    /**
     * Sets autoSubmitPaymentsHmrc
     *
     * @param bool|null $autoSubmitPaymentsHmrc Used in conjunction with AutoSubmitPayments.
     *
     * @return $this
     */
    public function setAutoSubmitPaymentsHmrc(?bool $autoSubmitPaymentsHmrc): static
    {
        if (is_null($autoSubmitPaymentsHmrc)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPaymentsHmrc cannot be null');
        }
        $this->container['autoSubmitPaymentsHmrc'] = $autoSubmitPaymentsHmrc;

        return $this;
    }

    /**
     * Gets autoSubmitPaymentsDeductions
     *
     * @return bool|null
     */
    public function getAutoSubmitPaymentsDeductions(): ?bool
    {
        return $this->container['autoSubmitPaymentsDeductions'];
    }

    /**
     * Sets autoSubmitPaymentsDeductions
     *
     * @param bool|null $autoSubmitPaymentsDeductions Used in conjunction with AutoSubmitPayments.
     *
     * @return $this
     */
    public function setAutoSubmitPaymentsDeductions(?bool $autoSubmitPaymentsDeductions): static
    {
        if (is_null($autoSubmitPaymentsDeductions)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPaymentsDeductions cannot be null');
        }
        $this->container['autoSubmitPaymentsDeductions'] = $autoSubmitPaymentsDeductions;

        return $this;
    }

    /**
     * Gets autoSubmitPaymentsAeos
     *
     * @return bool|null
     */
    public function getAutoSubmitPaymentsAeos(): ?bool
    {
        return $this->container['autoSubmitPaymentsAeos'];
    }

    /**
     * Sets autoSubmitPaymentsAeos
     *
     * @param bool|null $autoSubmitPaymentsAeos Used in conjunction with AutoSubmitPayments.
     *
     * @return $this
     */
    public function setAutoSubmitPaymentsAeos(?bool $autoSubmitPaymentsAeos): static
    {
        if (is_null($autoSubmitPaymentsAeos)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPaymentsAeos cannot be null');
        }
        $this->container['autoSubmitPaymentsAeos'] = $autoSubmitPaymentsAeos;

        return $this;
    }

    /**
     * Gets autoSubmitPaymentsPensions
     *
     * @return bool|null
     */
    public function getAutoSubmitPaymentsPensions(): ?bool
    {
        return $this->container['autoSubmitPaymentsPensions'];
    }

    /**
     * Sets autoSubmitPaymentsPensions
     *
     * @param bool|null $autoSubmitPaymentsPensions Used in conjunction with AutoSubmitPayments.
     *
     * @return $this
     */
    public function setAutoSubmitPaymentsPensions(?bool $autoSubmitPaymentsPensions): static
    {
        if (is_null($autoSubmitPaymentsPensions)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPaymentsPensions cannot be null');
        }
        $this->container['autoSubmitPaymentsPensions'] = $autoSubmitPaymentsPensions;

        return $this;
    }

    /**
     * Gets payslipReleaseType
     *
     * @return \SynergiTech\Staffology\Model\PayslipReleaseType|null
     */
    public function getPayslipReleaseType(): ?\SynergiTech\Staffology\Model\PayslipReleaseType
    {
        return $this->container['payslipReleaseType'];
    }

    /**
     * Sets payslipReleaseType
     *
     * @param \SynergiTech\Staffology\Model\PayslipReleaseType|null $payslipReleaseType payslipReleaseType
     *
     * @return $this
     */
    public function setPayslipReleaseType(?\SynergiTech\Staffology\Model\PayslipReleaseType $payslipReleaseType): static
    {
        if (is_null($payslipReleaseType)) {
            throw new InvalidArgumentException('non-nullable payslipReleaseType cannot be null');
        }
        $this->container['payslipReleaseType'] = $payslipReleaseType;

        return $this;
    }

    /**
     * Gets autoSubmitPayslipsDaysBeforePayday
     *
     * @return \SynergiTech\Staffology\Model\DaysBeforePayday|null
     */
    public function getAutoSubmitPayslipsDaysBeforePayday(): ?\SynergiTech\Staffology\Model\DaysBeforePayday
    {
        return $this->container['autoSubmitPayslipsDaysBeforePayday'];
    }

    /**
     * Sets autoSubmitPayslipsDaysBeforePayday
     *
     * @param \SynergiTech\Staffology\Model\DaysBeforePayday|null $autoSubmitPayslipsDaysBeforePayday autoSubmitPayslipsDaysBeforePayday
     *
     * @return $this
     */
    public function setAutoSubmitPayslipsDaysBeforePayday(?\SynergiTech\Staffology\Model\DaysBeforePayday $autoSubmitPayslipsDaysBeforePayday): static
    {
        if (is_null($autoSubmitPayslipsDaysBeforePayday)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPayslipsDaysBeforePayday cannot be null');
        }
        $this->container['autoSubmitPayslipsDaysBeforePayday'] = $autoSubmitPayslipsDaysBeforePayday;

        return $this;
    }

    /**
     * Gets autoSubmitPayslipsPaymentDateRule
     *
     * @return \SynergiTech\Staffology\Model\PayslipReleasePaymentDateRule|null
     */
    public function getAutoSubmitPayslipsPaymentDateRule(): ?\SynergiTech\Staffology\Model\PayslipReleasePaymentDateRule
    {
        return $this->container['autoSubmitPayslipsPaymentDateRule'];
    }

    /**
     * Sets autoSubmitPayslipsPaymentDateRule
     *
     * @param \SynergiTech\Staffology\Model\PayslipReleasePaymentDateRule|null $autoSubmitPayslipsPaymentDateRule autoSubmitPayslipsPaymentDateRule
     *
     * @return $this
     */
    public function setAutoSubmitPayslipsPaymentDateRule(?\SynergiTech\Staffology\Model\PayslipReleasePaymentDateRule $autoSubmitPayslipsPaymentDateRule): static
    {
        if (is_null($autoSubmitPayslipsPaymentDateRule)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPayslipsPaymentDateRule cannot be null');
        }
        $this->container['autoSubmitPayslipsPaymentDateRule'] = $autoSubmitPayslipsPaymentDateRule;

        return $this;
    }

    /**
     * Gets autoSubmitPayslipsPayslipReleaseTime
     *
     * @return \SynergiTech\Staffology\Model\PayslipReleaseTime|null
     */
    public function getAutoSubmitPayslipsPayslipReleaseTime(): ?\SynergiTech\Staffology\Model\PayslipReleaseTime
    {
        return $this->container['autoSubmitPayslipsPayslipReleaseTime'];
    }

    /**
     * Sets autoSubmitPayslipsPayslipReleaseTime
     *
     * @param \SynergiTech\Staffology\Model\PayslipReleaseTime|null $autoSubmitPayslipsPayslipReleaseTime autoSubmitPayslipsPayslipReleaseTime
     *
     * @return $this
     */
    public function setAutoSubmitPayslipsPayslipReleaseTime(?\SynergiTech\Staffology\Model\PayslipReleaseTime $autoSubmitPayslipsPayslipReleaseTime): static
    {
        if (is_null($autoSubmitPayslipsPayslipReleaseTime)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPayslipsPayslipReleaseTime cannot be null');
        }
        $this->container['autoSubmitPayslipsPayslipReleaseTime'] = $autoSubmitPayslipsPayslipReleaseTime;

        return $this;
    }

    /**
     * Gets employeesWithoutEmailAddress
     *
     * @return int|null
     */
    public function getEmployeesWithoutEmailAddress(): ?int
    {
        return $this->container['employeesWithoutEmailAddress'];
    }

    /**
     * Sets employeesWithoutEmailAddress
     *
     * @param int|null $employeesWithoutEmailAddress [readonly] A count of how many employees or subcontractors for this employer do not have email addresses
     *
     * @return $this
     */
    public function setEmployeesWithoutEmailAddress(?int $employeesWithoutEmailAddress): static
    {
        if (is_null($employeesWithoutEmailAddress)) {
            throw new InvalidArgumentException('non-nullable employeesWithoutEmailAddress cannot be null');
        }
        $this->container['employeesWithoutEmailAddress'] = $employeesWithoutEmailAddress;

        return $this;
    }

    /**
     * Gets employeesWithEmailAddressButNotAutoSending
     *
     * @return int|null
     */
    public function getEmployeesWithEmailAddressButNotAutoSending(): ?int
    {
        return $this->container['employeesWithEmailAddressButNotAutoSending'];
    }

    /**
     * Sets employeesWithEmailAddressButNotAutoSending
     *
     * @param int|null $employeesWithEmailAddressButNotAutoSending [readonly] A count of how many employees or subcontractors for this employer do have email addresses but don't have the option enabled to auto-email payslips
     *
     * @return $this
     */
    public function setEmployeesWithEmailAddressButNotAutoSending(?int $employeesWithEmailAddressButNotAutoSending): static
    {
        if (is_null($employeesWithEmailAddressButNotAutoSending)) {
            throw new InvalidArgumentException('non-nullable employeesWithEmailAddressButNotAutoSending cannot be null');
        }
        $this->container['employeesWithEmailAddressButNotAutoSending'] = $employeesWithEmailAddressButNotAutoSending;

        return $this;
    }

    /**
     * Gets subcontractorsNotAutoSendingStatement
     *
     * @return int|null
     */
    public function getSubcontractorsNotAutoSendingStatement(): ?int
    {
        return $this->container['subcontractorsNotAutoSendingStatement'];
    }

    /**
     * Sets subcontractorsNotAutoSendingStatement
     *
     * @param int|null $subcontractorsNotAutoSendingStatement [readonly] A count of how many subscontractors for this employer do don't have the option enabled to auto-email statement
     *
     * @return $this
     */
    public function setSubcontractorsNotAutoSendingStatement(?int $subcontractorsNotAutoSendingStatement): static
    {
        if (is_null($subcontractorsNotAutoSendingStatement)) {
            throw new InvalidArgumentException('non-nullable subcontractorsNotAutoSendingStatement cannot be null');
        }
        $this->container['subcontractorsNotAutoSendingStatement'] = $subcontractorsNotAutoSendingStatement;

        return $this;
    }

    /**
     * Gets codingNoticesAutomaticallyApplied
     *
     * @return bool|null
     */
    public function getCodingNoticesAutomaticallyApplied(): ?bool
    {
        return $this->container['codingNoticesAutomaticallyApplied'];
    }

    /**
     * Sets codingNoticesAutomaticallyApplied
     *
     * @param bool|null $codingNoticesAutomaticallyApplied [readonly] An indicator of whether or not this employer is automatically applying DpsNotices
     *
     * @return $this
     */
    public function setCodingNoticesAutomaticallyApplied(?bool $codingNoticesAutomaticallyApplied): static
    {
        if (is_null($codingNoticesAutomaticallyApplied)) {
            throw new InvalidArgumentException('non-nullable codingNoticesAutomaticallyApplied cannot be null');
        }
        $this->container['codingNoticesAutomaticallyApplied'] = $codingNoticesAutomaticallyApplied;

        return $this;
    }

    /**
     * Gets payrunEmails
     *
     * @return \SynergiTech\Staffology\Model\PayrunEmail[]|null
     */
    public function getPayrunEmails(): ?array
    {
        return $this->container['payrunEmails'];
    }

    /**
     * Sets payrunEmails
     *
     * @param \SynergiTech\Staffology\Model\PayrunEmail[]|null $payrunEmails Automated emails that will be sent when a PayRun is finalised
     *
     * @return $this
     */
    public function setPayrunEmails(?array $payrunEmails): static
    {
        if (is_null($payrunEmails)) {
            array_push($this->openAPINullablesSetToNull, 'payrunEmails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrunEmails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrunEmails'] = $payrunEmails;

        return $this;
    }

    /**
     * Gets autoSubmitPensionLetters
     *
     * @return bool|null
     */
    public function getAutoSubmitPensionLetters(): ?bool
    {
        return $this->container['autoSubmitPensionLetters'];
    }

    /**
     * Sets autoSubmitPensionLetters
     *
     * @param bool|null $autoSubmitPensionLetters If set to true, we'll automatically submit Pension Letters whenever you finalise a PayRun.  The employer must be connected to an ExternalDataProvider supporting Type of 'EmployeePortal'.
     *
     * @return $this
     */
    public function setAutoSubmitPensionLetters(?bool $autoSubmitPensionLetters): static
    {
        if (is_null($autoSubmitPensionLetters)) {
            throw new InvalidArgumentException('non-nullable autoSubmitPensionLetters cannot be null');
        }
        $this->container['autoSubmitPensionLetters'] = $autoSubmitPensionLetters;

        return $this;
    }

    /**
     * Gets autoSubmitEps
     *
     * @return bool|null
     */
    public function getAutoSubmitEps(): ?bool
    {
        return $this->container['autoSubmitEps'];
    }

    /**
     * Sets autoSubmitEps
     *
     * @param bool|null $autoSubmitEps If set to true, we'll automatically send your EPS to HMRC whenever you finalise a PayRun.
     *
     * @return $this
     */
    public function setAutoSubmitEps(?bool $autoSubmitEps): static
    {
        if (is_null($autoSubmitEps)) {
            throw new InvalidArgumentException('non-nullable autoSubmitEps cannot be null');
        }
        $this->container['autoSubmitEps'] = $autoSubmitEps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


