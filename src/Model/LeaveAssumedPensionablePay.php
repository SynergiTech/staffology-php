<?php
/**
 * LeaveAssumedPensionablePay
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * LeaveAssumedPensionablePay Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class LeaveAssumedPensionablePay implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'LeaveAssumedPensionablePay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'roleReference' => 'string',
        'roleId' => 'string',
        'isPrimary' => 'bool',
        'assumedPensionablePay' => 'float',
        'automaticAPPCalculation' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'roleReference' => null,
        'roleId' => 'uuid',
        'isPrimary' => null,
        'assumedPensionablePay' => 'double',
        'automaticAPPCalculation' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'roleReference' => true,
        'roleId' => false,
        'isPrimary' => false,
        'assumedPensionablePay' => true,
        'automaticAPPCalculation' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'roleReference' => 'roleReference',
        'roleId' => 'roleId',
        'isPrimary' => 'isPrimary',
        'assumedPensionablePay' => 'assumedPensionablePay',
        'automaticAPPCalculation' => 'automaticAPPCalculation',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'roleReference' => 'setRoleReference',
        'roleId' => 'setRoleId',
        'isPrimary' => 'setIsPrimary',
        'assumedPensionablePay' => 'setAssumedPensionablePay',
        'automaticAPPCalculation' => 'setAutomaticAPPCalculation',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'roleReference' => 'getRoleReference',
        'roleId' => 'getRoleId',
        'isPrimary' => 'getIsPrimary',
        'assumedPensionablePay' => 'getAssumedPensionablePay',
        'automaticAPPCalculation' => 'getAutomaticAPPCalculation',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('roleReference', $data ?? [], null);
        $this->setIfExists('roleId', $data ?? [], null);
        $this->setIfExists('isPrimary', $data ?? [], null);
        $this->setIfExists('assumedPensionablePay', $data ?? [], null);
        $this->setIfExists('automaticAPPCalculation', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets roleReference
     *
     * @return string|null
     */
    public function getRoleReference(): ?string
    {
        return $this->container['roleReference'];
    }

    /**
     * Sets roleReference
     *
     * @param string|null $roleReference Employee role reference
     *
     * @return $this
     */
    public function setRoleReference(?string $roleReference): static
    {
        if (is_null($roleReference)) {
            array_push($this->openAPINullablesSetToNull, 'roleReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleReference'] = $roleReference;

        return $this;
    }

    /**
     * Gets roleId
     *
     * @return string|null
     */
    public function getRoleId(): ?string
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId
     *
     * @param string|null $roleId Employee role unique Id
     *
     * @return $this
     */
    public function setRoleId(?string $roleId): static
    {
        if (is_null($roleId)) {
            throw new InvalidArgumentException('non-nullable roleId cannot be null');
        }
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets isPrimary
     *
     * @return bool|null
     */
    public function getIsPrimary(): ?bool
    {
        return $this->container['isPrimary'];
    }

    /**
     * Sets isPrimary
     *
     * @param bool|null $isPrimary Boolean flag indicates if the role is primary
     *
     * @return $this
     */
    public function setIsPrimary(?bool $isPrimary): static
    {
        if (is_null($isPrimary)) {
            throw new InvalidArgumentException('non-nullable isPrimary cannot be null');
        }
        $this->container['isPrimary'] = $isPrimary;

        return $this;
    }

    /**
     * Gets assumedPensionablePay
     *
     * @return float|null
     */
    public function getAssumedPensionablePay(): ?float
    {
        return $this->container['assumedPensionablePay'];
    }

    /**
     * Sets assumedPensionablePay
     *
     * @param float|null $assumedPensionablePay Assumed Pensionable Pay (APP) is an average figure, calculated as the average pay in the 3 months  (or 12 weeks if weekly/fortnightly/fourweekly paid) before the absence
     *
     * @return $this
     */
    public function setAssumedPensionablePay(?float $assumedPensionablePay): static
    {
        if (is_null($assumedPensionablePay)) {
            array_push($this->openAPINullablesSetToNull, 'assumedPensionablePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assumedPensionablePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assumedPensionablePay'] = $assumedPensionablePay;

        return $this;
    }

    /**
     * Gets automaticAPPCalculation
     *
     * @return bool|null
     */
    public function getAutomaticAPPCalculation(): ?bool
    {
        return $this->container['automaticAPPCalculation'];
    }

    /**
     * Sets automaticAPPCalculation
     *
     * @param bool|null $automaticAPPCalculation If set to True then we'll automatically calculate the AssumedPensionablePay.   Set it to false if you want to manually provide a figure that overrides our calculations
     *
     * @return $this
     */
    public function setAutomaticAPPCalculation(?bool $automaticAPPCalculation): static
    {
        if (is_null($automaticAPPCalculation)) {
            throw new InvalidArgumentException('non-nullable automaticAPPCalculation cannot be null');
        }
        $this->container['automaticAPPCalculation'] = $automaticAPPCalculation;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


