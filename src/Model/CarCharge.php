<?php
/**
 * CarCharge
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * CarCharge Class Doc Comment
 *
 * @description Part of the TaxYearConfig that our engine uses to calculate charges for a Company Car.  It is used internally when our engine performs calculations.  You do not need to do anything with this model, it&#39;s provided purely for informational purposes.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CarCharge implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CarCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'dieselSurcharge' => 'float',
        'maxCharge' => 'float',
        'minCharge' => 'float',
        'fuelCharge' => 'float',
        'newCarRateReductionDate' => '\DateTime',
        'newCarRateReductionAmount' => 'float',
        'co2Table' => '\SynergiTech\Staffology\Model\CarChargeRate[]',
        'engineSizeTable' => '\SynergiTech\Staffology\Model\CarChargeRate[]',
        'zeroEmissionsTable' => '\SynergiTech\Staffology\Model\CarChargeRate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'dieselSurcharge' => 'double',
        'maxCharge' => 'double',
        'minCharge' => 'double',
        'fuelCharge' => 'double',
        'newCarRateReductionDate' => 'date',
        'newCarRateReductionAmount' => 'double',
        'co2Table' => null,
        'engineSizeTable' => null,
        'zeroEmissionsTable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'dieselSurcharge' => false,
        'maxCharge' => false,
        'minCharge' => false,
        'fuelCharge' => false,
        'newCarRateReductionDate' => true,
        'newCarRateReductionAmount' => false,
        'co2Table' => true,
        'engineSizeTable' => true,
        'zeroEmissionsTable' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'dieselSurcharge' => 'dieselSurcharge',
        'maxCharge' => 'maxCharge',
        'minCharge' => 'minCharge',
        'fuelCharge' => 'fuelCharge',
        'newCarRateReductionDate' => 'newCarRateReductionDate',
        'newCarRateReductionAmount' => 'newCarRateReductionAmount',
        'co2Table' => 'co2Table',
        'engineSizeTable' => 'engineSizeTable',
        'zeroEmissionsTable' => 'zeroEmissionsTable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'dieselSurcharge' => 'setDieselSurcharge',
        'maxCharge' => 'setMaxCharge',
        'minCharge' => 'setMinCharge',
        'fuelCharge' => 'setFuelCharge',
        'newCarRateReductionDate' => 'setNewCarRateReductionDate',
        'newCarRateReductionAmount' => 'setNewCarRateReductionAmount',
        'co2Table' => 'setCo2Table',
        'engineSizeTable' => 'setEngineSizeTable',
        'zeroEmissionsTable' => 'setZeroEmissionsTable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'dieselSurcharge' => 'getDieselSurcharge',
        'maxCharge' => 'getMaxCharge',
        'minCharge' => 'getMinCharge',
        'fuelCharge' => 'getFuelCharge',
        'newCarRateReductionDate' => 'getNewCarRateReductionDate',
        'newCarRateReductionAmount' => 'getNewCarRateReductionAmount',
        'co2Table' => 'getCo2Table',
        'engineSizeTable' => 'getEngineSizeTable',
        'zeroEmissionsTable' => 'getZeroEmissionsTable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dieselSurcharge', $data ?? [], null);
        $this->setIfExists('maxCharge', $data ?? [], null);
        $this->setIfExists('minCharge', $data ?? [], null);
        $this->setIfExists('fuelCharge', $data ?? [], null);
        $this->setIfExists('newCarRateReductionDate', $data ?? [], null);
        $this->setIfExists('newCarRateReductionAmount', $data ?? [], null);
        $this->setIfExists('co2Table', $data ?? [], null);
        $this->setIfExists('engineSizeTable', $data ?? [], null);
        $this->setIfExists('zeroEmissionsTable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dieselSurcharge
     *
     * @return float|null
     */
    public function getDieselSurcharge(): ?float
    {
        return $this->container['dieselSurcharge'];
    }

    /**
     * Sets dieselSurcharge
     *
     * @param float|null $dieselSurcharge dieselSurcharge
     *
     * @return $this
     */
    public function setDieselSurcharge(?float $dieselSurcharge): static
    {
        if (is_null($dieselSurcharge)) {
            throw new InvalidArgumentException('non-nullable dieselSurcharge cannot be null');
        }
        $this->container['dieselSurcharge'] = $dieselSurcharge;

        return $this;
    }

    /**
     * Gets maxCharge
     *
     * @return float|null
     */
    public function getMaxCharge(): ?float
    {
        return $this->container['maxCharge'];
    }

    /**
     * Sets maxCharge
     *
     * @param float|null $maxCharge maxCharge
     *
     * @return $this
     */
    public function setMaxCharge(?float $maxCharge): static
    {
        if (is_null($maxCharge)) {
            throw new InvalidArgumentException('non-nullable maxCharge cannot be null');
        }
        $this->container['maxCharge'] = $maxCharge;

        return $this;
    }

    /**
     * Gets minCharge
     *
     * @return float|null
     */
    public function getMinCharge(): ?float
    {
        return $this->container['minCharge'];
    }

    /**
     * Sets minCharge
     *
     * @param float|null $minCharge minCharge
     *
     * @return $this
     */
    public function setMinCharge(?float $minCharge): static
    {
        if (is_null($minCharge)) {
            throw new InvalidArgumentException('non-nullable minCharge cannot be null');
        }
        $this->container['minCharge'] = $minCharge;

        return $this;
    }

    /**
     * Gets fuelCharge
     *
     * @return float|null
     */
    public function getFuelCharge(): ?float
    {
        return $this->container['fuelCharge'];
    }

    /**
     * Sets fuelCharge
     *
     * @param float|null $fuelCharge fuelCharge
     *
     * @return $this
     */
    public function setFuelCharge(?float $fuelCharge): static
    {
        if (is_null($fuelCharge)) {
            throw new InvalidArgumentException('non-nullable fuelCharge cannot be null');
        }
        $this->container['fuelCharge'] = $fuelCharge;

        return $this;
    }

    /**
     * Gets newCarRateReductionDate
     *
     * @return \DateTime|null
     */
    public function getNewCarRateReductionDate(): ?\DateTime
    {
        return $this->container['newCarRateReductionDate'];
    }

    /**
     * Sets newCarRateReductionDate
     *
     * @param \DateTime|null $newCarRateReductionDate newCarRateReductionDate
     *
     * @return $this
     */
    public function setNewCarRateReductionDate(?\DateTime $newCarRateReductionDate): static
    {
        if (is_null($newCarRateReductionDate)) {
            array_push($this->openAPINullablesSetToNull, 'newCarRateReductionDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('newCarRateReductionDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['newCarRateReductionDate'] = $newCarRateReductionDate;

        return $this;
    }

    /**
     * Gets newCarRateReductionAmount
     *
     * @return float|null
     */
    public function getNewCarRateReductionAmount(): ?float
    {
        return $this->container['newCarRateReductionAmount'];
    }

    /**
     * Sets newCarRateReductionAmount
     *
     * @param float|null $newCarRateReductionAmount newCarRateReductionAmount
     *
     * @return $this
     */
    public function setNewCarRateReductionAmount(?float $newCarRateReductionAmount): static
    {
        if (is_null($newCarRateReductionAmount)) {
            throw new InvalidArgumentException('non-nullable newCarRateReductionAmount cannot be null');
        }
        $this->container['newCarRateReductionAmount'] = $newCarRateReductionAmount;

        return $this;
    }

    /**
     * Gets co2Table
     *
     * @return \SynergiTech\Staffology\Model\CarChargeRate[]|null
     */
    public function getCo2Table(): ?array
    {
        return $this->container['co2Table'];
    }

    /**
     * Sets co2Table
     *
     * @param \SynergiTech\Staffology\Model\CarChargeRate[]|null $co2Table co2Table
     *
     * @return $this
     */
    public function setCo2Table(?array $co2Table): static
    {
        if (is_null($co2Table)) {
            array_push($this->openAPINullablesSetToNull, 'co2Table');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('co2Table', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['co2Table'] = $co2Table;

        return $this;
    }

    /**
     * Gets engineSizeTable
     *
     * @return \SynergiTech\Staffology\Model\CarChargeRate[]|null
     */
    public function getEngineSizeTable(): ?array
    {
        return $this->container['engineSizeTable'];
    }

    /**
     * Sets engineSizeTable
     *
     * @param \SynergiTech\Staffology\Model\CarChargeRate[]|null $engineSizeTable engineSizeTable
     *
     * @return $this
     */
    public function setEngineSizeTable(?array $engineSizeTable): static
    {
        if (is_null($engineSizeTable)) {
            array_push($this->openAPINullablesSetToNull, 'engineSizeTable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engineSizeTable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['engineSizeTable'] = $engineSizeTable;

        return $this;
    }

    /**
     * Gets zeroEmissionsTable
     *
     * @return \SynergiTech\Staffology\Model\CarChargeRate[]|null
     */
    public function getZeroEmissionsTable(): ?array
    {
        return $this->container['zeroEmissionsTable'];
    }

    /**
     * Sets zeroEmissionsTable
     *
     * @param \SynergiTech\Staffology\Model\CarChargeRate[]|null $zeroEmissionsTable zeroEmissionsTable
     *
     * @return $this
     */
    public function setZeroEmissionsTable(?array $zeroEmissionsTable): static
    {
        if (is_null($zeroEmissionsTable)) {
            array_push($this->openAPINullablesSetToNull, 'zeroEmissionsTable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zeroEmissionsTable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zeroEmissionsTable'] = $zeroEmissionsTable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


