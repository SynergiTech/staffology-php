<?php
/**
 * PayRun
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayRun Class Doc Comment
 *
 * @description This model is right at the very heart of the software.  There is a PayRun for each period in which people are paid.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayRun implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayRun';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'taxMonth' => 'int',
        'payPeriod' => '\SynergiTech\Staffology\Model\PayPeriods',
        'ordinal' => 'int',
        'period' => 'int',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'paymentDate' => '\DateTime',
        'employeeCount' => 'int',
        'subContractorCount' => 'int',
        'nonRtiEmployeeCount' => 'int',
        'totals' => '\SynergiTech\Staffology\Model\PayRunTotals',
        'payslipScheduledDateTime' => '\DateTime',
        'state' => '\SynergiTech\Staffology\Model\PayRunState',
        'isClosed' => 'bool',
        'isRolledBack' => 'bool',
        'dateClosed' => '\DateTime',
        'autoPilotCloseDate' => '\DateTime',
        'entries' => '\SynergiTech\Staffology\Model\Item[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxYear' => null,
        'taxMonth' => 'int32',
        'payPeriod' => null,
        'ordinal' => 'int32',
        'period' => 'int32',
        'startDate' => 'date',
        'endDate' => 'date',
        'paymentDate' => 'date',
        'employeeCount' => 'int32',
        'subContractorCount' => 'int32',
        'nonRtiEmployeeCount' => 'int32',
        'totals' => null,
        'payslipScheduledDateTime' => 'date',
        'state' => null,
        'isClosed' => null,
        'isRolledBack' => null,
        'dateClosed' => 'date-time',
        'autoPilotCloseDate' => 'date',
        'entries' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxYear' => false,
        'taxMonth' => false,
        'payPeriod' => false,
        'ordinal' => false,
        'period' => false,
        'startDate' => false,
        'endDate' => false,
        'paymentDate' => false,
        'employeeCount' => false,
        'subContractorCount' => false,
        'nonRtiEmployeeCount' => false,
        'totals' => false,
        'payslipScheduledDateTime' => true,
        'state' => false,
        'isClosed' => false,
        'isRolledBack' => false,
        'dateClosed' => true,
        'autoPilotCloseDate' => true,
        'entries' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxYear' => 'taxYear',
        'taxMonth' => 'taxMonth',
        'payPeriod' => 'payPeriod',
        'ordinal' => 'ordinal',
        'period' => 'period',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'paymentDate' => 'paymentDate',
        'employeeCount' => 'employeeCount',
        'subContractorCount' => 'subContractorCount',
        'nonRtiEmployeeCount' => 'nonRtiEmployeeCount',
        'totals' => 'totals',
        'payslipScheduledDateTime' => 'payslipScheduledDateTime',
        'state' => 'state',
        'isClosed' => 'isClosed',
        'isRolledBack' => 'isRolledBack',
        'dateClosed' => 'dateClosed',
        'autoPilotCloseDate' => 'autoPilotCloseDate',
        'entries' => 'entries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxYear' => 'setTaxYear',
        'taxMonth' => 'setTaxMonth',
        'payPeriod' => 'setPayPeriod',
        'ordinal' => 'setOrdinal',
        'period' => 'setPeriod',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'paymentDate' => 'setPaymentDate',
        'employeeCount' => 'setEmployeeCount',
        'subContractorCount' => 'setSubContractorCount',
        'nonRtiEmployeeCount' => 'setNonRtiEmployeeCount',
        'totals' => 'setTotals',
        'payslipScheduledDateTime' => 'setPayslipScheduledDateTime',
        'state' => 'setState',
        'isClosed' => 'setIsClosed',
        'isRolledBack' => 'setIsRolledBack',
        'dateClosed' => 'setDateClosed',
        'autoPilotCloseDate' => 'setAutoPilotCloseDate',
        'entries' => 'setEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxYear' => 'getTaxYear',
        'taxMonth' => 'getTaxMonth',
        'payPeriod' => 'getPayPeriod',
        'ordinal' => 'getOrdinal',
        'period' => 'getPeriod',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'paymentDate' => 'getPaymentDate',
        'employeeCount' => 'getEmployeeCount',
        'subContractorCount' => 'getSubContractorCount',
        'nonRtiEmployeeCount' => 'getNonRtiEmployeeCount',
        'totals' => 'getTotals',
        'payslipScheduledDateTime' => 'getPayslipScheduledDateTime',
        'state' => 'getState',
        'isClosed' => 'getIsClosed',
        'isRolledBack' => 'getIsRolledBack',
        'dateClosed' => 'getDateClosed',
        'autoPilotCloseDate' => 'getAutoPilotCloseDate',
        'entries' => 'getEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('taxMonth', $data ?? [], null);
        $this->setIfExists('payPeriod', $data ?? [], null);
        $this->setIfExists('ordinal', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('employeeCount', $data ?? [], null);
        $this->setIfExists('subContractorCount', $data ?? [], null);
        $this->setIfExists('nonRtiEmployeeCount', $data ?? [], null);
        $this->setIfExists('totals', $data ?? [], null);
        $this->setIfExists('payslipScheduledDateTime', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('isClosed', $data ?? [], null);
        $this->setIfExists('isRolledBack', $data ?? [], null);
        $this->setIfExists('dateClosed', $data ?? [], null);
        $this->setIfExists('autoPilotCloseDate', $data ?? [], null);
        $this->setIfExists('entries', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets taxMonth
     *
     * @return int|null
     */
    public function getTaxMonth(): ?int
    {
        return $this->container['taxMonth'];
    }

    /**
     * Sets taxMonth
     *
     * @param int|null $taxMonth [readonly] The Tax Month that the Payment Date falls in
     *
     * @return $this
     */
    public function setTaxMonth(?int $taxMonth): static
    {
        if (is_null($taxMonth)) {
            throw new InvalidArgumentException('non-nullable taxMonth cannot be null');
        }
        $this->container['taxMonth'] = $taxMonth;

        return $this;
    }

    /**
     * Gets payPeriod
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getPayPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['payPeriod'];
    }

    /**
     * Sets payPeriod
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod
     *
     * @return $this
     */
    public function setPayPeriod(?\SynergiTech\Staffology\Model\PayPeriods $payPeriod): static
    {
        if (is_null($payPeriod)) {
            throw new InvalidArgumentException('non-nullable payPeriod cannot be null');
        }
        $this->container['payPeriod'] = $payPeriod;

        return $this;
    }

    /**
     * Gets ordinal
     *
     * @return int|null
     */
    public function getOrdinal(): ?int
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param int|null $ordinal [readonly] Indicates whether this uses first, second, third (etc.) PaySchedule for this PayPeriod.
     *
     * @return $this
     */
    public function setOrdinal(?int $ordinal): static
    {
        if (is_null($ordinal)) {
            throw new InvalidArgumentException('non-nullable ordinal cannot be null');
        }
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod(): ?int
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period [readonly] The period (i.e, Tax Week or Tax Month) that this PayRun is for.
     *
     * @return $this
     */
    public function setPeriod(?int $period): static
    {
        if (is_null($period)) {
            throw new InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate [readonly] The start date of the period this PayRun covers
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $startDate): static
    {
        if (is_null($startDate)) {
            throw new InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate [readonly] The end date of the period this PayRun covers
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $endDate): static
    {
        if (is_null($endDate)) {
            throw new InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return \DateTime|null
     */
    public function getPaymentDate(): ?\DateTime
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param \DateTime|null $paymentDate [readonly] The intended date that Employees will be paid, although this can be changed on a per PayRunEntry basis
     *
     * @return $this
     */
    public function setPaymentDate(?\DateTime $paymentDate): static
    {
        if (is_null($paymentDate)) {
            throw new InvalidArgumentException('non-nullable paymentDate cannot be null');
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets employeeCount
     *
     * @return int|null
     */
    public function getEmployeeCount(): ?int
    {
        return $this->container['employeeCount'];
    }

    /**
     * Sets employeeCount
     *
     * @param int|null $employeeCount [readonly] The number of Employees included in this PayRun (including any CIS Subcontractors)
     *
     * @return $this
     */
    public function setEmployeeCount(?int $employeeCount): static
    {
        if (is_null($employeeCount)) {
            throw new InvalidArgumentException('non-nullable employeeCount cannot be null');
        }
        $this->container['employeeCount'] = $employeeCount;

        return $this;
    }

    /**
     * Gets subContractorCount
     *
     * @return int|null
     */
    public function getSubContractorCount(): ?int
    {
        return $this->container['subContractorCount'];
    }

    /**
     * Sets subContractorCount
     *
     * @param int|null $subContractorCount [readonly] The number of CIS Subcontractors included in this PayRun
     *
     * @return $this
     */
    public function setSubContractorCount(?int $subContractorCount): static
    {
        if (is_null($subContractorCount)) {
            throw new InvalidArgumentException('non-nullable subContractorCount cannot be null');
        }
        $this->container['subContractorCount'] = $subContractorCount;

        return $this;
    }

    /**
     * Gets nonRtiEmployeeCount
     *
     * @return int|null
     */
    public function getNonRtiEmployeeCount(): ?int
    {
        return $this->container['nonRtiEmployeeCount'];
    }

    /**
     * Sets nonRtiEmployeeCount
     *
     * @param int|null $nonRtiEmployeeCount [readonly] The number of employees excluded from the RTI submission in this PayRun
     *
     * @return $this
     */
    public function setNonRtiEmployeeCount(?int $nonRtiEmployeeCount): static
    {
        if (is_null($nonRtiEmployeeCount)) {
            throw new InvalidArgumentException('non-nullable nonRtiEmployeeCount cannot be null');
        }
        $this->container['nonRtiEmployeeCount'] = $nonRtiEmployeeCount;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \SynergiTech\Staffology\Model\PayRunTotals|null
     */
    public function getTotals(): ?\SynergiTech\Staffology\Model\PayRunTotals
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \SynergiTech\Staffology\Model\PayRunTotals|null $totals totals
     *
     * @return $this
     */
    public function setTotals(?\SynergiTech\Staffology\Model\PayRunTotals $totals): static
    {
        if (is_null($totals)) {
            throw new InvalidArgumentException('non-nullable totals cannot be null');
        }
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets payslipScheduledDateTime
     *
     * @return \DateTime|null
     */
    public function getPayslipScheduledDateTime(): ?\DateTime
    {
        return $this->container['payslipScheduledDateTime'];
    }

    /**
     * Sets payslipScheduledDateTime
     *
     * @param \DateTime|null $payslipScheduledDateTime The scheduled date time for sending payslips by email.
     *
     * @return $this
     */
    public function setPayslipScheduledDateTime(?\DateTime $payslipScheduledDateTime): static
    {
        if (is_null($payslipScheduledDateTime)) {
            array_push($this->openAPINullablesSetToNull, 'payslipScheduledDateTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payslipScheduledDateTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payslipScheduledDateTime'] = $payslipScheduledDateTime;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \SynergiTech\Staffology\Model\PayRunState|null
     */
    public function getState(): ?\SynergiTech\Staffology\Model\PayRunState
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SynergiTech\Staffology\Model\PayRunState|null $state state
     *
     * @return $this
     */
    public function setState(?\SynergiTech\Staffology\Model\PayRunState $state): static
    {
        if (is_null($state)) {
            throw new InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets isClosed
     *
     * @return bool|null
     */
    public function getIsClosed(): ?bool
    {
        return $this->container['isClosed'];
    }

    /**
     * Sets isClosed
     *
     * @param bool|null $isClosed [readonly] Set to True if the PayRun is Finalised and changes can no longer be made
     *
     * @return $this
     */
    public function setIsClosed(?bool $isClosed): static
    {
        if (is_null($isClosed)) {
            throw new InvalidArgumentException('non-nullable isClosed cannot be null');
        }
        $this->container['isClosed'] = $isClosed;

        return $this;
    }

    /**
     * Gets isRolledBack
     *
     * @return bool|null
     */
    public function getIsRolledBack(): ?bool
    {
        return $this->container['isRolledBack'];
    }

    /**
     * Sets isRolledBack
     *
     * @param bool|null $isRolledBack [readonly] Set to True if the PayRun is currently rolled back
     *
     * @return $this
     */
    public function setIsRolledBack(?bool $isRolledBack): static
    {
        if (is_null($isRolledBack)) {
            throw new InvalidArgumentException('non-nullable isRolledBack cannot be null');
        }
        $this->container['isRolledBack'] = $isRolledBack;

        return $this;
    }

    /**
     * Gets dateClosed
     *
     * @return \DateTime|null
     */
    public function getDateClosed(): ?\DateTime
    {
        return $this->container['dateClosed'];
    }

    /**
     * Sets dateClosed
     *
     * @param \DateTime|null $dateClosed dateClosed
     *
     * @return $this
     */
    public function setDateClosed(?\DateTime $dateClosed): static
    {
        if (is_null($dateClosed)) {
            array_push($this->openAPINullablesSetToNull, 'dateClosed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateClosed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateClosed'] = $dateClosed;

        return $this;
    }

    /**
     * Gets autoPilotCloseDate
     *
     * @return \DateTime|null
     */
    public function getAutoPilotCloseDate(): ?\DateTime
    {
        return $this->container['autoPilotCloseDate'];
    }

    /**
     * Sets autoPilotCloseDate
     *
     * @param \DateTime|null $autoPilotCloseDate [readonly] If AutoPilot is enabled in the AutomationSettings for the Employer then this property will tell you when  the payrun will be automatically closed
     *
     * @return $this
     */
    public function setAutoPilotCloseDate(?\DateTime $autoPilotCloseDate): static
    {
        if (is_null($autoPilotCloseDate)) {
            array_push($this->openAPINullablesSetToNull, 'autoPilotCloseDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autoPilotCloseDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autoPilotCloseDate'] = $autoPilotCloseDate;

        return $this;
    }

    /**
     * Gets entries
     *
     * @return \SynergiTech\Staffology\Model\Item[]|null
     */
    public function getEntries(): ?array
    {
        return $this->container['entries'];
    }

    /**
     * Sets entries
     *
     * @param \SynergiTech\Staffology\Model\Item[]|null $entries [readonly] The PayRunEntries that make up this PayRun.  This is populate automatically when you start a PayRun.
     *
     * @return $this
     */
    public function setEntries(?array $entries): static
    {
        if (is_null($entries)) {
            array_push($this->openAPINullablesSetToNull, 'entries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entries'] = $entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


