<?php
/**
 * EmployerTemplate
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EmployerTemplate Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class EmployerTemplate implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'EmployerTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => '\SynergiTech\Staffology\Model\EmployerTemplateType',
        'description' => 'string',
        'isCustom' => 'bool',
        'content' => 'string',
        'subject' => 'string',
        'defaultContent' => 'string',
        'defaultSubject' => 'string',
        'hasSubject' => 'bool',
        'tokens' => 'string[]',
        'tokensExpanded' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'description' => null,
        'isCustom' => null,
        'content' => null,
        'subject' => null,
        'defaultContent' => null,
        'defaultSubject' => null,
        'hasSubject' => null,
        'tokens' => null,
        'tokensExpanded' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => false,
        'description' => true,
        'isCustom' => false,
        'content' => true,
        'subject' => true,
        'defaultContent' => true,
        'defaultSubject' => true,
        'hasSubject' => false,
        'tokens' => true,
        'tokensExpanded' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'description' => 'description',
        'isCustom' => 'isCustom',
        'content' => 'content',
        'subject' => 'subject',
        'defaultContent' => 'defaultContent',
        'defaultSubject' => 'defaultSubject',
        'hasSubject' => 'hasSubject',
        'tokens' => 'tokens',
        'tokensExpanded' => 'tokensExpanded',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'description' => 'setDescription',
        'isCustom' => 'setIsCustom',
        'content' => 'setContent',
        'subject' => 'setSubject',
        'defaultContent' => 'setDefaultContent',
        'defaultSubject' => 'setDefaultSubject',
        'hasSubject' => 'setHasSubject',
        'tokens' => 'setTokens',
        'tokensExpanded' => 'setTokensExpanded',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'description' => 'getDescription',
        'isCustom' => 'getIsCustom',
        'content' => 'getContent',
        'subject' => 'getSubject',
        'defaultContent' => 'getDefaultContent',
        'defaultSubject' => 'getDefaultSubject',
        'hasSubject' => 'getHasSubject',
        'tokens' => 'getTokens',
        'tokensExpanded' => 'getTokensExpanded',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('isCustom', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('defaultContent', $data ?? [], null);
        $this->setIfExists('defaultSubject', $data ?? [], null);
        $this->setIfExists('hasSubject', $data ?? [], null);
        $this->setIfExists('tokens', $data ?? [], null);
        $this->setIfExists('tokensExpanded', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 250)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\EmployerTemplateType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\EmployerTemplateType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\EmployerTemplateType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\EmployerTemplateType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Explains the purpose of this template
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isCustom
     *
     * @return bool|null
     */
    public function getIsCustom(): ?bool
    {
        return $this->container['isCustom'];
    }

    /**
     * Sets isCustom
     *
     * @param bool|null $isCustom Indicates whether or not this template has been changed from the default content.
     *
     * @return $this
     */
    public function setIsCustom(?bool $isCustom): static
    {
        if (is_null($isCustom)) {
            throw new InvalidArgumentException('non-nullable isCustom cannot be null');
        }
        $this->container['isCustom'] = $isCustom;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent(): ?string
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return $this
     */
    public function setContent(?string $content): static
    {
        if (is_null($content)) {
            array_push($this->openAPINullablesSetToNull, 'content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject(): ?string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return $this
     */
    public function setSubject(?string $subject): static
    {
        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subject) && (mb_strlen($subject) > 250)) {
            throw new InvalidArgumentException('invalid length for $subject when calling EmployerTemplate., must be smaller than or equal to 250.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets defaultContent
     *
     * @return string|null
     */
    public function getDefaultContent(): ?string
    {
        return $this->container['defaultContent'];
    }

    /**
     * Sets defaultContent
     *
     * @param string|null $defaultContent [readonly] The default content for this template
     *
     * @return $this
     */
    public function setDefaultContent(?string $defaultContent): static
    {
        if (is_null($defaultContent)) {
            array_push($this->openAPINullablesSetToNull, 'defaultContent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultContent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultContent'] = $defaultContent;

        return $this;
    }

    /**
     * Gets defaultSubject
     *
     * @return string|null
     */
    public function getDefaultSubject(): ?string
    {
        return $this->container['defaultSubject'];
    }

    /**
     * Sets defaultSubject
     *
     * @param string|null $defaultSubject [readonly] The default subject for this template
     *
     * @return $this
     */
    public function setDefaultSubject(?string $defaultSubject): static
    {
        if (is_null($defaultSubject)) {
            array_push($this->openAPINullablesSetToNull, 'defaultSubject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultSubject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultSubject'] = $defaultSubject;

        return $this;
    }

    /**
     * Gets hasSubject
     *
     * @return bool|null
     */
    public function getHasSubject(): ?bool
    {
        return $this->container['hasSubject'];
    }

    /**
     * Sets hasSubject
     *
     * @param bool|null $hasSubject [readonly] If false then the Subject property is not relevant for this template type
     *
     * @return $this
     */
    public function setHasSubject(?bool $hasSubject): static
    {
        if (is_null($hasSubject)) {
            throw new InvalidArgumentException('non-nullable hasSubject cannot be null');
        }
        $this->container['hasSubject'] = $hasSubject;

        return $this;
    }

    /**
     * Gets tokens
     *
     * @return string[]|null
     */
    public function getTokens(): ?array
    {
        return $this->container['tokens'];
    }

    /**
     * Sets tokens
     *
     * @param string[]|null $tokens [readonly] A list of tokens that can be used with this template.  For example, if 'Employee.FirstName' is in the list then use '{Employee.FirstName}' in the Content or Subject and  it'll be replaced with the relevant value when the template is parsed.
     *
     * @return $this
     */
    public function setTokens(?array $tokens): static
    {
        if (is_null($tokens)) {
            array_push($this->openAPINullablesSetToNull, 'tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tokens'] = $tokens;

        return $this;
    }

    /**
     * Gets tokensExpanded
     *
     * @return bool|null
     */
    public function getTokensExpanded(): ?bool
    {
        return $this->container['tokensExpanded'];
    }

    /**
     * Sets tokensExpanded
     *
     * @param bool|null $tokensExpanded tokensExpanded
     *
     * @return $this
     */
    public function setTokensExpanded(?bool $tokensExpanded): static
    {
        if (is_null($tokensExpanded)) {
            throw new InvalidArgumentException('non-nullable tokensExpanded cannot be null');
        }
        $this->container['tokensExpanded'] = $tokensExpanded;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


