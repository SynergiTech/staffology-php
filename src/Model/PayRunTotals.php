<?php
/**
 * PayRunTotals
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayRunTotals Class Doc Comment
 *
 * @description Used to represent totals for a PayRun or PayRunEntry.  If a value is 0 then it will not be shown in the JSON.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayRunTotals implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayRunTotals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'basicPay' => 'float',
        'gross' => 'float',
        'grossForNi' => 'float',
        'grossForNiNonRti' => 'float',
        'grossNotSubjectToEmployersNi' => 'float',
        'grossNotSubjectToEmployersNiNonRti' => 'float',
        'grossForTax' => 'float',
        'employerNi' => 'float',
        'employerNiNonRti' => 'float',
        'employeeNi' => 'float',
        'employeeNiNonRti' => 'float',
        'employerNiOffPayroll' => 'float',
        'realTimeClass1ANi' => 'float',
        'realTimeClass1ANiNonRti' => 'float',
        'tax' => 'float',
        'taxNonRti' => 'float',
        'netPay' => 'float',
        'adjustments' => 'float',
        'notionalPay' => 'float',
        'additions' => 'float',
        'deductions' => 'float',
        'takeHomePay' => 'float',
        'nonTaxOrNICPmt' => 'float',
        'itemsSubjectToClass1NIC' => 'float',
        'dednsFromNetPay' => 'float',
        'tcpTcls' => 'float',
        'tcpPp' => 'float',
        'tcpOp' => 'float',
        'flexiDdDeath' => 'float',
        'flexiDdDeathNonTax' => 'float',
        'flexiDdPension' => 'float',
        'flexiDdPensionNonTax' => 'float',
        'flexiDdSeriousIllHealth' => 'float',
        'flexiDdSeriousIllHealthNonTax' => 'float',
        'smp' => 'float',
        'smpNonRti' => 'float',
        'spp' => 'float',
        'sppNonRti' => 'float',
        'sap' => 'float',
        'sapNonRti' => 'float',
        'shpp' => 'float',
        'shppNonRti' => 'float',
        'spbp' => 'float',
        'spbpNonRti' => 'float',
        'ssp' => 'float',
        'sspNonRti' => 'float',
        'studentLoanRecovered' => 'float',
        'studentLoanRecoveredNonRti' => 'float',
        'postgradLoanRecovered' => 'float',
        'postgradLoanRecoveredNonRti' => 'float',
        'pensionableEarnings' => 'float',
        'pensionablePay' => 'float',
        'nonTierablePay' => 'float',
        'employeePensionContribution' => 'float',
        'employeePensionContributionAvc' => 'float',
        'employerPensionContribution' => 'float',
        'empeePenContribnsNotPaid' => 'float',
        'empeePenContribnsPaid' => 'float',
        'attachmentOrderDeductions' => 'float',
        'cisDeduction' => 'float',
        'cisVat' => 'float',
        'cisUmbrellaFee' => 'float',
        'cisUmbrellaFeePostTax' => 'float',
        'pbik' => 'float',
        'mapsMiles' => 'int',
        'foreignTaxAmount' => 'float',
        'foreignTaxAmountReclaimed' => 'float',
        'umbrellaFee' => 'float',
        'appLevyDeduction' => 'float',
        'paymentAfterLeaving' => 'float',
        'taxOnPaymentAfterLeaving' => 'float',
        'nilPaid' => 'int',
        'leavers' => 'int',
        'starters' => 'int',
        'p45Gross' => 'float',
        'p45Tax' => 'float',
        'totalCost' => 'float',
        'recoverableAmounts' => '\SynergiTech\Staffology\Model\RecoverableAmounts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'basicPay' => 'double',
        'gross' => 'double',
        'grossForNi' => 'double',
        'grossForNiNonRti' => 'double',
        'grossNotSubjectToEmployersNi' => 'double',
        'grossNotSubjectToEmployersNiNonRti' => 'double',
        'grossForTax' => 'double',
        'employerNi' => 'double',
        'employerNiNonRti' => 'double',
        'employeeNi' => 'double',
        'employeeNiNonRti' => 'double',
        'employerNiOffPayroll' => 'double',
        'realTimeClass1ANi' => 'double',
        'realTimeClass1ANiNonRti' => 'double',
        'tax' => 'double',
        'taxNonRti' => 'double',
        'netPay' => 'double',
        'adjustments' => 'double',
        'notionalPay' => 'double',
        'additions' => 'double',
        'deductions' => 'double',
        'takeHomePay' => 'double',
        'nonTaxOrNICPmt' => 'double',
        'itemsSubjectToClass1NIC' => 'double',
        'dednsFromNetPay' => 'double',
        'tcpTcls' => 'double',
        'tcpPp' => 'double',
        'tcpOp' => 'double',
        'flexiDdDeath' => 'double',
        'flexiDdDeathNonTax' => 'double',
        'flexiDdPension' => 'double',
        'flexiDdPensionNonTax' => 'double',
        'flexiDdSeriousIllHealth' => 'double',
        'flexiDdSeriousIllHealthNonTax' => 'double',
        'smp' => 'double',
        'smpNonRti' => 'double',
        'spp' => 'double',
        'sppNonRti' => 'double',
        'sap' => 'double',
        'sapNonRti' => 'double',
        'shpp' => 'double',
        'shppNonRti' => 'double',
        'spbp' => 'double',
        'spbpNonRti' => 'double',
        'ssp' => 'double',
        'sspNonRti' => 'double',
        'studentLoanRecovered' => 'double',
        'studentLoanRecoveredNonRti' => 'double',
        'postgradLoanRecovered' => 'double',
        'postgradLoanRecoveredNonRti' => 'double',
        'pensionableEarnings' => 'double',
        'pensionablePay' => 'double',
        'nonTierablePay' => 'double',
        'employeePensionContribution' => 'double',
        'employeePensionContributionAvc' => 'double',
        'employerPensionContribution' => 'double',
        'empeePenContribnsNotPaid' => 'double',
        'empeePenContribnsPaid' => 'double',
        'attachmentOrderDeductions' => 'double',
        'cisDeduction' => 'double',
        'cisVat' => 'double',
        'cisUmbrellaFee' => 'double',
        'cisUmbrellaFeePostTax' => 'double',
        'pbik' => 'double',
        'mapsMiles' => 'int32',
        'foreignTaxAmount' => 'double',
        'foreignTaxAmountReclaimed' => 'double',
        'umbrellaFee' => 'double',
        'appLevyDeduction' => 'double',
        'paymentAfterLeaving' => 'double',
        'taxOnPaymentAfterLeaving' => 'double',
        'nilPaid' => 'int32',
        'leavers' => 'int32',
        'starters' => 'int32',
        'p45Gross' => 'double',
        'p45Tax' => 'double',
        'totalCost' => 'double',
        'recoverableAmounts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'basicPay' => false,
        'gross' => false,
        'grossForNi' => false,
        'grossForNiNonRti' => false,
        'grossNotSubjectToEmployersNi' => false,
        'grossNotSubjectToEmployersNiNonRti' => false,
        'grossForTax' => false,
        'employerNi' => false,
        'employerNiNonRti' => false,
        'employeeNi' => false,
        'employeeNiNonRti' => false,
        'employerNiOffPayroll' => false,
        'realTimeClass1ANi' => false,
        'realTimeClass1ANiNonRti' => false,
        'tax' => false,
        'taxNonRti' => false,
        'netPay' => false,
        'adjustments' => false,
        'notionalPay' => false,
        'additions' => false,
        'deductions' => false,
        'takeHomePay' => false,
        'nonTaxOrNICPmt' => false,
        'itemsSubjectToClass1NIC' => false,
        'dednsFromNetPay' => false,
        'tcpTcls' => false,
        'tcpPp' => false,
        'tcpOp' => false,
        'flexiDdDeath' => false,
        'flexiDdDeathNonTax' => false,
        'flexiDdPension' => false,
        'flexiDdPensionNonTax' => false,
        'flexiDdSeriousIllHealth' => false,
        'flexiDdSeriousIllHealthNonTax' => false,
        'smp' => false,
        'smpNonRti' => false,
        'spp' => false,
        'sppNonRti' => false,
        'sap' => false,
        'sapNonRti' => false,
        'shpp' => false,
        'shppNonRti' => false,
        'spbp' => false,
        'spbpNonRti' => false,
        'ssp' => false,
        'sspNonRti' => false,
        'studentLoanRecovered' => false,
        'studentLoanRecoveredNonRti' => false,
        'postgradLoanRecovered' => false,
        'postgradLoanRecoveredNonRti' => false,
        'pensionableEarnings' => false,
        'pensionablePay' => false,
        'nonTierablePay' => false,
        'employeePensionContribution' => false,
        'employeePensionContributionAvc' => false,
        'employerPensionContribution' => false,
        'empeePenContribnsNotPaid' => false,
        'empeePenContribnsPaid' => false,
        'attachmentOrderDeductions' => false,
        'cisDeduction' => false,
        'cisVat' => false,
        'cisUmbrellaFee' => false,
        'cisUmbrellaFeePostTax' => false,
        'pbik' => false,
        'mapsMiles' => false,
        'foreignTaxAmount' => false,
        'foreignTaxAmountReclaimed' => false,
        'umbrellaFee' => false,
        'appLevyDeduction' => false,
        'paymentAfterLeaving' => false,
        'taxOnPaymentAfterLeaving' => false,
        'nilPaid' => false,
        'leavers' => false,
        'starters' => false,
        'p45Gross' => true,
        'p45Tax' => true,
        'totalCost' => false,
        'recoverableAmounts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'basicPay' => 'basicPay',
        'gross' => 'gross',
        'grossForNi' => 'grossForNi',
        'grossForNiNonRti' => 'grossForNiNonRti',
        'grossNotSubjectToEmployersNi' => 'grossNotSubjectToEmployersNi',
        'grossNotSubjectToEmployersNiNonRti' => 'grossNotSubjectToEmployersNiNonRti',
        'grossForTax' => 'grossForTax',
        'employerNi' => 'employerNi',
        'employerNiNonRti' => 'employerNiNonRti',
        'employeeNi' => 'employeeNi',
        'employeeNiNonRti' => 'employeeNiNonRti',
        'employerNiOffPayroll' => 'employerNiOffPayroll',
        'realTimeClass1ANi' => 'realTimeClass1ANi',
        'realTimeClass1ANiNonRti' => 'realTimeClass1ANiNonRti',
        'tax' => 'tax',
        'taxNonRti' => 'taxNonRti',
        'netPay' => 'netPay',
        'adjustments' => 'adjustments',
        'notionalPay' => 'notionalPay',
        'additions' => 'additions',
        'deductions' => 'deductions',
        'takeHomePay' => 'takeHomePay',
        'nonTaxOrNICPmt' => 'nonTaxOrNICPmt',
        'itemsSubjectToClass1NIC' => 'itemsSubjectToClass1NIC',
        'dednsFromNetPay' => 'dednsFromNetPay',
        'tcpTcls' => 'tcp_Tcls',
        'tcpPp' => 'tcp_Pp',
        'tcpOp' => 'tcp_Op',
        'flexiDdDeath' => 'flexiDd_Death',
        'flexiDdDeathNonTax' => 'flexiDd_Death_NonTax',
        'flexiDdPension' => 'flexiDd_Pension',
        'flexiDdPensionNonTax' => 'flexiDd_Pension_NonTax',
        'flexiDdSeriousIllHealth' => 'flexiDd_SeriousIllHealth',
        'flexiDdSeriousIllHealthNonTax' => 'flexiDd_SeriousIllHealth_NonTax',
        'smp' => 'smp',
        'smpNonRti' => 'smpNonRti',
        'spp' => 'spp',
        'sppNonRti' => 'sppNonRti',
        'sap' => 'sap',
        'sapNonRti' => 'sapNonRti',
        'shpp' => 'shpp',
        'shppNonRti' => 'shppNonRti',
        'spbp' => 'spbp',
        'spbpNonRti' => 'spbpNonRti',
        'ssp' => 'ssp',
        'sspNonRti' => 'sspNonRti',
        'studentLoanRecovered' => 'studentLoanRecovered',
        'studentLoanRecoveredNonRti' => 'studentLoanRecoveredNonRti',
        'postgradLoanRecovered' => 'postgradLoanRecovered',
        'postgradLoanRecoveredNonRti' => 'postgradLoanRecoveredNonRti',
        'pensionableEarnings' => 'pensionableEarnings',
        'pensionablePay' => 'pensionablePay',
        'nonTierablePay' => 'nonTierablePay',
        'employeePensionContribution' => 'employeePensionContribution',
        'employeePensionContributionAvc' => 'employeePensionContributionAvc',
        'employerPensionContribution' => 'employerPensionContribution',
        'empeePenContribnsNotPaid' => 'empeePenContribnsNotPaid',
        'empeePenContribnsPaid' => 'empeePenContribnsPaid',
        'attachmentOrderDeductions' => 'attachmentOrderDeductions',
        'cisDeduction' => 'cisDeduction',
        'cisVat' => 'cisVat',
        'cisUmbrellaFee' => 'cisUmbrellaFee',
        'cisUmbrellaFeePostTax' => 'cisUmbrellaFeePostTax',
        'pbik' => 'pbik',
        'mapsMiles' => 'mapsMiles',
        'foreignTaxAmount' => 'foreignTaxAmount',
        'foreignTaxAmountReclaimed' => 'foreignTaxAmountReclaimed',
        'umbrellaFee' => 'umbrellaFee',
        'appLevyDeduction' => 'appLevyDeduction',
        'paymentAfterLeaving' => 'paymentAfterLeaving',
        'taxOnPaymentAfterLeaving' => 'taxOnPaymentAfterLeaving',
        'nilPaid' => 'nilPaid',
        'leavers' => 'leavers',
        'starters' => 'starters',
        'p45Gross' => 'p45Gross',
        'p45Tax' => 'p45Tax',
        'totalCost' => 'totalCost',
        'recoverableAmounts' => 'recoverableAmounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'basicPay' => 'setBasicPay',
        'gross' => 'setGross',
        'grossForNi' => 'setGrossForNi',
        'grossForNiNonRti' => 'setGrossForNiNonRti',
        'grossNotSubjectToEmployersNi' => 'setGrossNotSubjectToEmployersNi',
        'grossNotSubjectToEmployersNiNonRti' => 'setGrossNotSubjectToEmployersNiNonRti',
        'grossForTax' => 'setGrossForTax',
        'employerNi' => 'setEmployerNi',
        'employerNiNonRti' => 'setEmployerNiNonRti',
        'employeeNi' => 'setEmployeeNi',
        'employeeNiNonRti' => 'setEmployeeNiNonRti',
        'employerNiOffPayroll' => 'setEmployerNiOffPayroll',
        'realTimeClass1ANi' => 'setRealTimeClass1ANi',
        'realTimeClass1ANiNonRti' => 'setRealTimeClass1ANiNonRti',
        'tax' => 'setTax',
        'taxNonRti' => 'setTaxNonRti',
        'netPay' => 'setNetPay',
        'adjustments' => 'setAdjustments',
        'notionalPay' => 'setNotionalPay',
        'additions' => 'setAdditions',
        'deductions' => 'setDeductions',
        'takeHomePay' => 'setTakeHomePay',
        'nonTaxOrNICPmt' => 'setNonTaxOrNICPmt',
        'itemsSubjectToClass1NIC' => 'setItemsSubjectToClass1NIC',
        'dednsFromNetPay' => 'setDednsFromNetPay',
        'tcpTcls' => 'setTcpTcls',
        'tcpPp' => 'setTcpPp',
        'tcpOp' => 'setTcpOp',
        'flexiDdDeath' => 'setFlexiDdDeath',
        'flexiDdDeathNonTax' => 'setFlexiDdDeathNonTax',
        'flexiDdPension' => 'setFlexiDdPension',
        'flexiDdPensionNonTax' => 'setFlexiDdPensionNonTax',
        'flexiDdSeriousIllHealth' => 'setFlexiDdSeriousIllHealth',
        'flexiDdSeriousIllHealthNonTax' => 'setFlexiDdSeriousIllHealthNonTax',
        'smp' => 'setSmp',
        'smpNonRti' => 'setSmpNonRti',
        'spp' => 'setSpp',
        'sppNonRti' => 'setSppNonRti',
        'sap' => 'setSap',
        'sapNonRti' => 'setSapNonRti',
        'shpp' => 'setShpp',
        'shppNonRti' => 'setShppNonRti',
        'spbp' => 'setSpbp',
        'spbpNonRti' => 'setSpbpNonRti',
        'ssp' => 'setSsp',
        'sspNonRti' => 'setSspNonRti',
        'studentLoanRecovered' => 'setStudentLoanRecovered',
        'studentLoanRecoveredNonRti' => 'setStudentLoanRecoveredNonRti',
        'postgradLoanRecovered' => 'setPostgradLoanRecovered',
        'postgradLoanRecoveredNonRti' => 'setPostgradLoanRecoveredNonRti',
        'pensionableEarnings' => 'setPensionableEarnings',
        'pensionablePay' => 'setPensionablePay',
        'nonTierablePay' => 'setNonTierablePay',
        'employeePensionContribution' => 'setEmployeePensionContribution',
        'employeePensionContributionAvc' => 'setEmployeePensionContributionAvc',
        'employerPensionContribution' => 'setEmployerPensionContribution',
        'empeePenContribnsNotPaid' => 'setEmpeePenContribnsNotPaid',
        'empeePenContribnsPaid' => 'setEmpeePenContribnsPaid',
        'attachmentOrderDeductions' => 'setAttachmentOrderDeductions',
        'cisDeduction' => 'setCisDeduction',
        'cisVat' => 'setCisVat',
        'cisUmbrellaFee' => 'setCisUmbrellaFee',
        'cisUmbrellaFeePostTax' => 'setCisUmbrellaFeePostTax',
        'pbik' => 'setPbik',
        'mapsMiles' => 'setMapsMiles',
        'foreignTaxAmount' => 'setForeignTaxAmount',
        'foreignTaxAmountReclaimed' => 'setForeignTaxAmountReclaimed',
        'umbrellaFee' => 'setUmbrellaFee',
        'appLevyDeduction' => 'setAppLevyDeduction',
        'paymentAfterLeaving' => 'setPaymentAfterLeaving',
        'taxOnPaymentAfterLeaving' => 'setTaxOnPaymentAfterLeaving',
        'nilPaid' => 'setNilPaid',
        'leavers' => 'setLeavers',
        'starters' => 'setStarters',
        'p45Gross' => 'setP45Gross',
        'p45Tax' => 'setP45Tax',
        'totalCost' => 'setTotalCost',
        'recoverableAmounts' => 'setRecoverableAmounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'basicPay' => 'getBasicPay',
        'gross' => 'getGross',
        'grossForNi' => 'getGrossForNi',
        'grossForNiNonRti' => 'getGrossForNiNonRti',
        'grossNotSubjectToEmployersNi' => 'getGrossNotSubjectToEmployersNi',
        'grossNotSubjectToEmployersNiNonRti' => 'getGrossNotSubjectToEmployersNiNonRti',
        'grossForTax' => 'getGrossForTax',
        'employerNi' => 'getEmployerNi',
        'employerNiNonRti' => 'getEmployerNiNonRti',
        'employeeNi' => 'getEmployeeNi',
        'employeeNiNonRti' => 'getEmployeeNiNonRti',
        'employerNiOffPayroll' => 'getEmployerNiOffPayroll',
        'realTimeClass1ANi' => 'getRealTimeClass1ANi',
        'realTimeClass1ANiNonRti' => 'getRealTimeClass1ANiNonRti',
        'tax' => 'getTax',
        'taxNonRti' => 'getTaxNonRti',
        'netPay' => 'getNetPay',
        'adjustments' => 'getAdjustments',
        'notionalPay' => 'getNotionalPay',
        'additions' => 'getAdditions',
        'deductions' => 'getDeductions',
        'takeHomePay' => 'getTakeHomePay',
        'nonTaxOrNICPmt' => 'getNonTaxOrNICPmt',
        'itemsSubjectToClass1NIC' => 'getItemsSubjectToClass1NIC',
        'dednsFromNetPay' => 'getDednsFromNetPay',
        'tcpTcls' => 'getTcpTcls',
        'tcpPp' => 'getTcpPp',
        'tcpOp' => 'getTcpOp',
        'flexiDdDeath' => 'getFlexiDdDeath',
        'flexiDdDeathNonTax' => 'getFlexiDdDeathNonTax',
        'flexiDdPension' => 'getFlexiDdPension',
        'flexiDdPensionNonTax' => 'getFlexiDdPensionNonTax',
        'flexiDdSeriousIllHealth' => 'getFlexiDdSeriousIllHealth',
        'flexiDdSeriousIllHealthNonTax' => 'getFlexiDdSeriousIllHealthNonTax',
        'smp' => 'getSmp',
        'smpNonRti' => 'getSmpNonRti',
        'spp' => 'getSpp',
        'sppNonRti' => 'getSppNonRti',
        'sap' => 'getSap',
        'sapNonRti' => 'getSapNonRti',
        'shpp' => 'getShpp',
        'shppNonRti' => 'getShppNonRti',
        'spbp' => 'getSpbp',
        'spbpNonRti' => 'getSpbpNonRti',
        'ssp' => 'getSsp',
        'sspNonRti' => 'getSspNonRti',
        'studentLoanRecovered' => 'getStudentLoanRecovered',
        'studentLoanRecoveredNonRti' => 'getStudentLoanRecoveredNonRti',
        'postgradLoanRecovered' => 'getPostgradLoanRecovered',
        'postgradLoanRecoveredNonRti' => 'getPostgradLoanRecoveredNonRti',
        'pensionableEarnings' => 'getPensionableEarnings',
        'pensionablePay' => 'getPensionablePay',
        'nonTierablePay' => 'getNonTierablePay',
        'employeePensionContribution' => 'getEmployeePensionContribution',
        'employeePensionContributionAvc' => 'getEmployeePensionContributionAvc',
        'employerPensionContribution' => 'getEmployerPensionContribution',
        'empeePenContribnsNotPaid' => 'getEmpeePenContribnsNotPaid',
        'empeePenContribnsPaid' => 'getEmpeePenContribnsPaid',
        'attachmentOrderDeductions' => 'getAttachmentOrderDeductions',
        'cisDeduction' => 'getCisDeduction',
        'cisVat' => 'getCisVat',
        'cisUmbrellaFee' => 'getCisUmbrellaFee',
        'cisUmbrellaFeePostTax' => 'getCisUmbrellaFeePostTax',
        'pbik' => 'getPbik',
        'mapsMiles' => 'getMapsMiles',
        'foreignTaxAmount' => 'getForeignTaxAmount',
        'foreignTaxAmountReclaimed' => 'getForeignTaxAmountReclaimed',
        'umbrellaFee' => 'getUmbrellaFee',
        'appLevyDeduction' => 'getAppLevyDeduction',
        'paymentAfterLeaving' => 'getPaymentAfterLeaving',
        'taxOnPaymentAfterLeaving' => 'getTaxOnPaymentAfterLeaving',
        'nilPaid' => 'getNilPaid',
        'leavers' => 'getLeavers',
        'starters' => 'getStarters',
        'p45Gross' => 'getP45Gross',
        'p45Tax' => 'getP45Tax',
        'totalCost' => 'getTotalCost',
        'recoverableAmounts' => 'getRecoverableAmounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('basicPay', $data ?? [], null);
        $this->setIfExists('gross', $data ?? [], null);
        $this->setIfExists('grossForNi', $data ?? [], null);
        $this->setIfExists('grossForNiNonRti', $data ?? [], null);
        $this->setIfExists('grossNotSubjectToEmployersNi', $data ?? [], null);
        $this->setIfExists('grossNotSubjectToEmployersNiNonRti', $data ?? [], null);
        $this->setIfExists('grossForTax', $data ?? [], null);
        $this->setIfExists('employerNi', $data ?? [], null);
        $this->setIfExists('employerNiNonRti', $data ?? [], null);
        $this->setIfExists('employeeNi', $data ?? [], null);
        $this->setIfExists('employeeNiNonRti', $data ?? [], null);
        $this->setIfExists('employerNiOffPayroll', $data ?? [], null);
        $this->setIfExists('realTimeClass1ANi', $data ?? [], null);
        $this->setIfExists('realTimeClass1ANiNonRti', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('taxNonRti', $data ?? [], null);
        $this->setIfExists('netPay', $data ?? [], null);
        $this->setIfExists('adjustments', $data ?? [], null);
        $this->setIfExists('notionalPay', $data ?? [], null);
        $this->setIfExists('additions', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('takeHomePay', $data ?? [], null);
        $this->setIfExists('nonTaxOrNICPmt', $data ?? [], null);
        $this->setIfExists('itemsSubjectToClass1NIC', $data ?? [], null);
        $this->setIfExists('dednsFromNetPay', $data ?? [], null);
        $this->setIfExists('tcpTcls', $data ?? [], null);
        $this->setIfExists('tcpPp', $data ?? [], null);
        $this->setIfExists('tcpOp', $data ?? [], null);
        $this->setIfExists('flexiDdDeath', $data ?? [], null);
        $this->setIfExists('flexiDdDeathNonTax', $data ?? [], null);
        $this->setIfExists('flexiDdPension', $data ?? [], null);
        $this->setIfExists('flexiDdPensionNonTax', $data ?? [], null);
        $this->setIfExists('flexiDdSeriousIllHealth', $data ?? [], null);
        $this->setIfExists('flexiDdSeriousIllHealthNonTax', $data ?? [], null);
        $this->setIfExists('smp', $data ?? [], null);
        $this->setIfExists('smpNonRti', $data ?? [], null);
        $this->setIfExists('spp', $data ?? [], null);
        $this->setIfExists('sppNonRti', $data ?? [], null);
        $this->setIfExists('sap', $data ?? [], null);
        $this->setIfExists('sapNonRti', $data ?? [], null);
        $this->setIfExists('shpp', $data ?? [], null);
        $this->setIfExists('shppNonRti', $data ?? [], null);
        $this->setIfExists('spbp', $data ?? [], null);
        $this->setIfExists('spbpNonRti', $data ?? [], null);
        $this->setIfExists('ssp', $data ?? [], null);
        $this->setIfExists('sspNonRti', $data ?? [], null);
        $this->setIfExists('studentLoanRecovered', $data ?? [], null);
        $this->setIfExists('studentLoanRecoveredNonRti', $data ?? [], null);
        $this->setIfExists('postgradLoanRecovered', $data ?? [], null);
        $this->setIfExists('postgradLoanRecoveredNonRti', $data ?? [], null);
        $this->setIfExists('pensionableEarnings', $data ?? [], null);
        $this->setIfExists('pensionablePay', $data ?? [], null);
        $this->setIfExists('nonTierablePay', $data ?? [], null);
        $this->setIfExists('employeePensionContribution', $data ?? [], null);
        $this->setIfExists('employeePensionContributionAvc', $data ?? [], null);
        $this->setIfExists('employerPensionContribution', $data ?? [], null);
        $this->setIfExists('empeePenContribnsNotPaid', $data ?? [], null);
        $this->setIfExists('empeePenContribnsPaid', $data ?? [], null);
        $this->setIfExists('attachmentOrderDeductions', $data ?? [], null);
        $this->setIfExists('cisDeduction', $data ?? [], null);
        $this->setIfExists('cisVat', $data ?? [], null);
        $this->setIfExists('cisUmbrellaFee', $data ?? [], null);
        $this->setIfExists('cisUmbrellaFeePostTax', $data ?? [], null);
        $this->setIfExists('pbik', $data ?? [], null);
        $this->setIfExists('mapsMiles', $data ?? [], null);
        $this->setIfExists('foreignTaxAmount', $data ?? [], null);
        $this->setIfExists('foreignTaxAmountReclaimed', $data ?? [], null);
        $this->setIfExists('umbrellaFee', $data ?? [], null);
        $this->setIfExists('appLevyDeduction', $data ?? [], null);
        $this->setIfExists('paymentAfterLeaving', $data ?? [], null);
        $this->setIfExists('taxOnPaymentAfterLeaving', $data ?? [], null);
        $this->setIfExists('nilPaid', $data ?? [], null);
        $this->setIfExists('leavers', $data ?? [], null);
        $this->setIfExists('starters', $data ?? [], null);
        $this->setIfExists('p45Gross', $data ?? [], null);
        $this->setIfExists('p45Tax', $data ?? [], null);
        $this->setIfExists('totalCost', $data ?? [], null);
        $this->setIfExists('recoverableAmounts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basicPay
     *
     * @return float|null
     */
    public function getBasicPay(): ?float
    {
        return $this->container['basicPay'];
    }

    /**
     * Sets basicPay
     *
     * @param float|null $basicPay [readonly] The amount to be paid to this Employee as a result of the PayOptions that have been set
     *
     * @return $this
     */
    public function setBasicPay(?float $basicPay): static
    {
        if (is_null($basicPay)) {
            throw new InvalidArgumentException('non-nullable basicPay cannot be null');
        }
        $this->container['basicPay'] = $basicPay;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return float|null
     */
    public function getGross(): ?float
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param float|null $gross [readonly] Gross pay
     *
     * @return $this
     */
    public function setGross(?float $gross): static
    {
        if (is_null($gross)) {
            throw new InvalidArgumentException('non-nullable gross cannot be null');
        }
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets grossForNi
     *
     * @return float|null
     */
    public function getGrossForNi(): ?float
    {
        return $this->container['grossForNi'];
    }

    /**
     * Sets grossForNi
     *
     * @param float|null $grossForNi [readonly] The amount of the Gross that is subject to NI
     *
     * @return $this
     */
    public function setGrossForNi(?float $grossForNi): static
    {
        if (is_null($grossForNi)) {
            throw new InvalidArgumentException('non-nullable grossForNi cannot be null');
        }
        $this->container['grossForNi'] = $grossForNi;

        return $this;
    }

    /**
     * Gets grossForNiNonRti
     *
     * @return float|null
     */
    public function getGrossForNiNonRti(): ?float
    {
        return $this->container['grossForNiNonRti'];
    }

    /**
     * Sets grossForNiNonRti
     *
     * @param float|null $grossForNiNonRti [readonly] The amount of the Gross that is subject to NI but excluded from RTI
     *
     * @return $this
     */
    public function setGrossForNiNonRti(?float $grossForNiNonRti): static
    {
        if (is_null($grossForNiNonRti)) {
            throw new InvalidArgumentException('non-nullable grossForNiNonRti cannot be null');
        }
        $this->container['grossForNiNonRti'] = $grossForNiNonRti;

        return $this;
    }

    /**
     * Gets grossNotSubjectToEmployersNi
     *
     * @return float|null
     */
    public function getGrossNotSubjectToEmployersNi(): ?float
    {
        return $this->container['grossNotSubjectToEmployersNi'];
    }

    /**
     * Sets grossNotSubjectToEmployersNi
     *
     * @param float|null $grossNotSubjectToEmployersNi [readonly] The amount of the Gross that is not subject to Employers NI.  This is the same as GrossForNI where the employees NI Table has an Er contribution
     *
     * @return $this
     */
    public function setGrossNotSubjectToEmployersNi(?float $grossNotSubjectToEmployersNi): static
    {
        if (is_null($grossNotSubjectToEmployersNi)) {
            throw new InvalidArgumentException('non-nullable grossNotSubjectToEmployersNi cannot be null');
        }
        $this->container['grossNotSubjectToEmployersNi'] = $grossNotSubjectToEmployersNi;

        return $this;
    }

    /**
     * Gets grossNotSubjectToEmployersNiNonRti
     *
     * @return float|null
     */
    public function getGrossNotSubjectToEmployersNiNonRti(): ?float
    {
        return $this->container['grossNotSubjectToEmployersNiNonRti'];
    }

    /**
     * Sets grossNotSubjectToEmployersNiNonRti
     *
     * @param float|null $grossNotSubjectToEmployersNiNonRti [readonly] The amount of the Gross that is not subject to Employers NI.  This is the same as GrossForNI where the employees NI Table has an Er contribution  This is the amount that is excluded from RTI
     *
     * @return $this
     */
    public function setGrossNotSubjectToEmployersNiNonRti(?float $grossNotSubjectToEmployersNiNonRti): static
    {
        if (is_null($grossNotSubjectToEmployersNiNonRti)) {
            throw new InvalidArgumentException('non-nullable grossNotSubjectToEmployersNiNonRti cannot be null');
        }
        $this->container['grossNotSubjectToEmployersNiNonRti'] = $grossNotSubjectToEmployersNiNonRti;

        return $this;
    }

    /**
     * Gets grossForTax
     *
     * @return float|null
     */
    public function getGrossForTax(): ?float
    {
        return $this->container['grossForTax'];
    }

    /**
     * Sets grossForTax
     *
     * @param float|null $grossForTax [readonly] The amount of the Gross that is subject to PAYE
     *
     * @return $this
     */
    public function setGrossForTax(?float $grossForTax): static
    {
        if (is_null($grossForTax)) {
            throw new InvalidArgumentException('non-nullable grossForTax cannot be null');
        }
        $this->container['grossForTax'] = $grossForTax;

        return $this;
    }

    /**
     * Gets employerNi
     *
     * @return float|null
     */
    public function getEmployerNi(): ?float
    {
        return $this->container['employerNi'];
    }

    /**
     * Sets employerNi
     *
     * @param float|null $employerNi [readonly]
     *
     * @return $this
     */
    public function setEmployerNi(?float $employerNi): static
    {
        if (is_null($employerNi)) {
            throw new InvalidArgumentException('non-nullable employerNi cannot be null');
        }
        $this->container['employerNi'] = $employerNi;

        return $this;
    }

    /**
     * Gets employerNiNonRti
     *
     * @return float|null
     */
    public function getEmployerNiNonRti(): ?float
    {
        return $this->container['employerNiNonRti'];
    }

    /**
     * Sets employerNiNonRti
     *
     * @param float|null $employerNiNonRti [readonly] Employer NI excluded from RTI
     *
     * @return $this
     */
    public function setEmployerNiNonRti(?float $employerNiNonRti): static
    {
        if (is_null($employerNiNonRti)) {
            throw new InvalidArgumentException('non-nullable employerNiNonRti cannot be null');
        }
        $this->container['employerNiNonRti'] = $employerNiNonRti;

        return $this;
    }

    /**
     * Gets employeeNi
     *
     * @return float|null
     */
    public function getEmployeeNi(): ?float
    {
        return $this->container['employeeNi'];
    }

    /**
     * Sets employeeNi
     *
     * @param float|null $employeeNi [readonly]
     *
     * @return $this
     */
    public function setEmployeeNi(?float $employeeNi): static
    {
        if (is_null($employeeNi)) {
            throw new InvalidArgumentException('non-nullable employeeNi cannot be null');
        }
        $this->container['employeeNi'] = $employeeNi;

        return $this;
    }

    /**
     * Gets employeeNiNonRti
     *
     * @return float|null
     */
    public function getEmployeeNiNonRti(): ?float
    {
        return $this->container['employeeNiNonRti'];
    }

    /**
     * Sets employeeNiNonRti
     *
     * @param float|null $employeeNiNonRti [readonly] Employee NI excluded from RTI
     *
     * @return $this
     */
    public function setEmployeeNiNonRti(?float $employeeNiNonRti): static
    {
        if (is_null($employeeNiNonRti)) {
            throw new InvalidArgumentException('non-nullable employeeNiNonRti cannot be null');
        }
        $this->container['employeeNiNonRti'] = $employeeNiNonRti;

        return $this;
    }

    /**
     * Gets employerNiOffPayroll
     *
     * @return float|null
     */
    public function getEmployerNiOffPayroll(): ?float
    {
        return $this->container['employerNiOffPayroll'];
    }

    /**
     * Sets employerNiOffPayroll
     *
     * @param float|null $employerNiOffPayroll [readonly] The amount included in EmployerNi that is in relation to Off-Payroll Workers
     *
     * @return $this
     */
    public function setEmployerNiOffPayroll(?float $employerNiOffPayroll): static
    {
        if (is_null($employerNiOffPayroll)) {
            throw new InvalidArgumentException('non-nullable employerNiOffPayroll cannot be null');
        }
        $this->container['employerNiOffPayroll'] = $employerNiOffPayroll;

        return $this;
    }

    /**
     * Gets realTimeClass1ANi
     *
     * @return float|null
     */
    public function getRealTimeClass1ANi(): ?float
    {
        return $this->container['realTimeClass1ANi'];
    }

    /**
     * Sets realTimeClass1ANi
     *
     * @param float|null $realTimeClass1ANi [readonly]
     *
     * @return $this
     */
    public function setRealTimeClass1ANi(?float $realTimeClass1ANi): static
    {
        if (is_null($realTimeClass1ANi)) {
            throw new InvalidArgumentException('non-nullable realTimeClass1ANi cannot be null');
        }
        $this->container['realTimeClass1ANi'] = $realTimeClass1ANi;

        return $this;
    }

    /**
     * Gets realTimeClass1ANiNonRti
     *
     * @return float|null
     */
    public function getRealTimeClass1ANiNonRti(): ?float
    {
        return $this->container['realTimeClass1ANiNonRti'];
    }

    /**
     * Sets realTimeClass1ANiNonRti
     *
     * @param float|null $realTimeClass1ANiNonRti [readonly] Real Time Class 1A NI excluded from RTI
     *
     * @return $this
     */
    public function setRealTimeClass1ANiNonRti(?float $realTimeClass1ANiNonRti): static
    {
        if (is_null($realTimeClass1ANiNonRti)) {
            throw new InvalidArgumentException('non-nullable realTimeClass1ANiNonRti cannot be null');
        }
        $this->container['realTimeClass1ANiNonRti'] = $realTimeClass1ANiNonRti;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax(): ?float
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax [readonly]
     *
     * @return $this
     */
    public function setTax(?float $tax): static
    {
        if (is_null($tax)) {
            throw new InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets taxNonRti
     *
     * @return float|null
     */
    public function getTaxNonRti(): ?float
    {
        return $this->container['taxNonRti'];
    }

    /**
     * Sets taxNonRti
     *
     * @param float|null $taxNonRti [readonly] Tax excluded from RTI
     *
     * @return $this
     */
    public function setTaxNonRti(?float $taxNonRti): static
    {
        if (is_null($taxNonRti)) {
            throw new InvalidArgumentException('non-nullable taxNonRti cannot be null');
        }
        $this->container['taxNonRti'] = $taxNonRti;

        return $this;
    }

    /**
     * Gets netPay
     *
     * @return float|null
     */
    public function getNetPay(): ?float
    {
        return $this->container['netPay'];
    }

    /**
     * Sets netPay
     *
     * @param float|null $netPay [readonly] The Net Pay for this Employee
     *
     * @return $this
     */
    public function setNetPay(?float $netPay): static
    {
        if (is_null($netPay)) {
            throw new InvalidArgumentException('non-nullable netPay cannot be null');
        }
        $this->container['netPay'] = $netPay;

        return $this;
    }

    /**
     * Gets adjustments
     *
     * @return float|null
     */
    public function getAdjustments(): ?float
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     *
     * @param float|null $adjustments [readonly] The value of adjustments made to the Net Pay (Non taxable/NIable additions/deductions)
     *
     * @return $this
     */
    public function setAdjustments(?float $adjustments): static
    {
        if (is_null($adjustments)) {
            throw new InvalidArgumentException('non-nullable adjustments cannot be null');
        }
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets notionalPay
     *
     * @return float|null
     */
    public function getNotionalPay(): ?float
    {
        return $this->container['notionalPay'];
    }

    /**
     * Sets notionalPay
     *
     * @param float|null $notionalPay [readonly] The value of adjustments that are of type notional.
     *
     * @return $this
     */
    public function setNotionalPay(?float $notionalPay): static
    {
        if (is_null($notionalPay)) {
            throw new InvalidArgumentException('non-nullable notionalPay cannot be null');
        }
        $this->container['notionalPay'] = $notionalPay;

        return $this;
    }

    /**
     * Gets additions
     *
     * @return float|null
     */
    public function getAdditions(): ?float
    {
        return $this->container['additions'];
    }

    /**
     * Sets additions
     *
     * @param float|null $additions The value of all additions.  This minus Deductions should equal TakeHomePay
     *
     * @return $this
     */
    public function setAdditions(?float $additions): static
    {
        if (is_null($additions)) {
            throw new InvalidArgumentException('non-nullable additions cannot be null');
        }
        $this->container['additions'] = $additions;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return float|null
     */
    public function getDeductions(): ?float
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param float|null $deductions The value of all deductions.  Additions minus This value should equal TakeHomePay
     *
     * @return $this
     */
    public function setDeductions(?float $deductions): static
    {
        if (is_null($deductions)) {
            throw new InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets takeHomePay
     *
     * @return float|null
     */
    public function getTakeHomePay(): ?float
    {
        return $this->container['takeHomePay'];
    }

    /**
     * Sets takeHomePay
     *
     * @param float|null $takeHomePay [readonly] The amount this Employee takes home
     *
     * @return $this
     */
    public function setTakeHomePay(?float $takeHomePay): static
    {
        if (is_null($takeHomePay)) {
            throw new InvalidArgumentException('non-nullable takeHomePay cannot be null');
        }
        $this->container['takeHomePay'] = $takeHomePay;

        return $this;
    }

    /**
     * Gets nonTaxOrNICPmt
     *
     * @return float|null
     */
    public function getNonTaxOrNICPmt(): ?float
    {
        return $this->container['nonTaxOrNICPmt'];
    }

    /**
     * Sets nonTaxOrNICPmt
     *
     * @param float|null $nonTaxOrNICPmt [readonly] The value of any payments being made to this Employee that aren't being subjected to PAYE or NI
     *
     * @return $this
     */
    public function setNonTaxOrNICPmt(?float $nonTaxOrNICPmt): static
    {
        if (is_null($nonTaxOrNICPmt)) {
            throw new InvalidArgumentException('non-nullable nonTaxOrNICPmt cannot be null');
        }
        $this->container['nonTaxOrNICPmt'] = $nonTaxOrNICPmt;

        return $this;
    }

    /**
     * Gets itemsSubjectToClass1NIC
     *
     * @return float|null
     */
    public function getItemsSubjectToClass1NIC(): ?float
    {
        return $this->container['itemsSubjectToClass1NIC'];
    }

    /**
     * Sets itemsSubjectToClass1NIC
     *
     * @param float|null $itemsSubjectToClass1NIC [readonly] Items subject to Class 1 NIC but not taxed under PAYE regulations excluding pension contributions
     *
     * @return $this
     */
    public function setItemsSubjectToClass1NIC(?float $itemsSubjectToClass1NIC): static
    {
        if (is_null($itemsSubjectToClass1NIC)) {
            throw new InvalidArgumentException('non-nullable itemsSubjectToClass1NIC cannot be null');
        }
        $this->container['itemsSubjectToClass1NIC'] = $itemsSubjectToClass1NIC;

        return $this;
    }

    /**
     * Gets dednsFromNetPay
     *
     * @return float|null
     */
    public function getDednsFromNetPay(): ?float
    {
        return $this->container['dednsFromNetPay'];
    }

    /**
     * Sets dednsFromNetPay
     *
     * @param float|null $dednsFromNetPay [readonly] The value of any deductions being made to the Net Pay for this Employee
     *
     * @return $this
     */
    public function setDednsFromNetPay(?float $dednsFromNetPay): static
    {
        if (is_null($dednsFromNetPay)) {
            throw new InvalidArgumentException('non-nullable dednsFromNetPay cannot be null');
        }
        $this->container['dednsFromNetPay'] = $dednsFromNetPay;

        return $this;
    }

    /**
     * Gets tcpTcls
     *
     * @return float|null
     */
    public function getTcpTcls(): ?float
    {
        return $this->container['tcpTcls'];
    }

    /**
     * Sets tcpTcls
     *
     * @param float|null $tcpTcls [readonly] Value of payments marked as Trivial Commutation Payment (A - TCLS)
     *
     * @return $this
     */
    public function setTcpTcls(?float $tcpTcls): static
    {
        if (is_null($tcpTcls)) {
            throw new InvalidArgumentException('non-nullable tcpTcls cannot be null');
        }
        $this->container['tcpTcls'] = $tcpTcls;

        return $this;
    }

    /**
     * Gets tcpPp
     *
     * @return float|null
     */
    public function getTcpPp(): ?float
    {
        return $this->container['tcpPp'];
    }

    /**
     * Sets tcpPp
     *
     * @param float|null $tcpPp [readonly] Value of payments marked as Trivial Commutation Payment (B - Personal Pension)
     *
     * @return $this
     */
    public function setTcpPp(?float $tcpPp): static
    {
        if (is_null($tcpPp)) {
            throw new InvalidArgumentException('non-nullable tcpPp cannot be null');
        }
        $this->container['tcpPp'] = $tcpPp;

        return $this;
    }

    /**
     * Gets tcpOp
     *
     * @return float|null
     */
    public function getTcpOp(): ?float
    {
        return $this->container['tcpOp'];
    }

    /**
     * Sets tcpOp
     *
     * @param float|null $tcpOp [readonly] Value of payments marked as Trivial Commutation Payment (C - Occupational Pension)
     *
     * @return $this
     */
    public function setTcpOp(?float $tcpOp): static
    {
        if (is_null($tcpOp)) {
            throw new InvalidArgumentException('non-nullable tcpOp cannot be null');
        }
        $this->container['tcpOp'] = $tcpOp;

        return $this;
    }

    /**
     * Gets flexiDdDeath
     *
     * @return float|null
     */
    public function getFlexiDdDeath(): ?float
    {
        return $this->container['flexiDdDeath'];
    }

    /**
     * Sets flexiDdDeath
     *
     * @param float|null $flexiDdDeath [readonly] Value of payments marked as flexibly accessing death benefit (taxable)
     *
     * @return $this
     */
    public function setFlexiDdDeath(?float $flexiDdDeath): static
    {
        if (is_null($flexiDdDeath)) {
            throw new InvalidArgumentException('non-nullable flexiDdDeath cannot be null');
        }
        $this->container['flexiDdDeath'] = $flexiDdDeath;

        return $this;
    }

    /**
     * Gets flexiDdDeathNonTax
     *
     * @return float|null
     */
    public function getFlexiDdDeathNonTax(): ?float
    {
        return $this->container['flexiDdDeathNonTax'];
    }

    /**
     * Sets flexiDdDeathNonTax
     *
     * @param float|null $flexiDdDeathNonTax [readonly] Value of payments marked as flexibly accessing death benefit (non taxable)
     *
     * @return $this
     */
    public function setFlexiDdDeathNonTax(?float $flexiDdDeathNonTax): static
    {
        if (is_null($flexiDdDeathNonTax)) {
            throw new InvalidArgumentException('non-nullable flexiDdDeathNonTax cannot be null');
        }
        $this->container['flexiDdDeathNonTax'] = $flexiDdDeathNonTax;

        return $this;
    }

    /**
     * Gets flexiDdPension
     *
     * @return float|null
     */
    public function getFlexiDdPension(): ?float
    {
        return $this->container['flexiDdPension'];
    }

    /**
     * Sets flexiDdPension
     *
     * @param float|null $flexiDdPension [readonly] Value of payments marked as flexibly accessing pension (taxable)
     *
     * @return $this
     */
    public function setFlexiDdPension(?float $flexiDdPension): static
    {
        if (is_null($flexiDdPension)) {
            throw new InvalidArgumentException('non-nullable flexiDdPension cannot be null');
        }
        $this->container['flexiDdPension'] = $flexiDdPension;

        return $this;
    }

    /**
     * Gets flexiDdPensionNonTax
     *
     * @return float|null
     */
    public function getFlexiDdPensionNonTax(): ?float
    {
        return $this->container['flexiDdPensionNonTax'];
    }

    /**
     * Sets flexiDdPensionNonTax
     *
     * @param float|null $flexiDdPensionNonTax [readonly] Value of payments marked as flexibly accessing pension (non taxable)
     *
     * @return $this
     */
    public function setFlexiDdPensionNonTax(?float $flexiDdPensionNonTax): static
    {
        if (is_null($flexiDdPensionNonTax)) {
            throw new InvalidArgumentException('non-nullable flexiDdPensionNonTax cannot be null');
        }
        $this->container['flexiDdPensionNonTax'] = $flexiDdPensionNonTax;

        return $this;
    }

    /**
     * Gets flexiDdSeriousIllHealth
     *
     * @return float|null
     */
    public function getFlexiDdSeriousIllHealth(): ?float
    {
        return $this->container['flexiDdSeriousIllHealth'];
    }

    /**
     * Sets flexiDdSeriousIllHealth
     *
     * @param float|null $flexiDdSeriousIllHealth [readonly] Value of payments marked as flexibly accessing serious ill health lump sum (taxable)
     *
     * @return $this
     */
    public function setFlexiDdSeriousIllHealth(?float $flexiDdSeriousIllHealth): static
    {
        if (is_null($flexiDdSeriousIllHealth)) {
            throw new InvalidArgumentException('non-nullable flexiDdSeriousIllHealth cannot be null');
        }
        $this->container['flexiDdSeriousIllHealth'] = $flexiDdSeriousIllHealth;

        return $this;
    }

    /**
     * Gets flexiDdSeriousIllHealthNonTax
     *
     * @return float|null
     */
    public function getFlexiDdSeriousIllHealthNonTax(): ?float
    {
        return $this->container['flexiDdSeriousIllHealthNonTax'];
    }

    /**
     * Sets flexiDdSeriousIllHealthNonTax
     *
     * @param float|null $flexiDdSeriousIllHealthNonTax [readonly] Value of payments marked as flexibly accessing serious ill health lump sum (non taxable)
     *
     * @return $this
     */
    public function setFlexiDdSeriousIllHealthNonTax(?float $flexiDdSeriousIllHealthNonTax): static
    {
        if (is_null($flexiDdSeriousIllHealthNonTax)) {
            throw new InvalidArgumentException('non-nullable flexiDdSeriousIllHealthNonTax cannot be null');
        }
        $this->container['flexiDdSeriousIllHealthNonTax'] = $flexiDdSeriousIllHealthNonTax;

        return $this;
    }

    /**
     * Gets smp
     *
     * @return float|null
     */
    public function getSmp(): ?float
    {
        return $this->container['smp'];
    }

    /**
     * Sets smp
     *
     * @param float|null $smp [readonly] Statutory Maternity Pay
     *
     * @return $this
     */
    public function setSmp(?float $smp): static
    {
        if (is_null($smp)) {
            throw new InvalidArgumentException('non-nullable smp cannot be null');
        }
        $this->container['smp'] = $smp;

        return $this;
    }

    /**
     * Gets smpNonRti
     *
     * @return float|null
     */
    public function getSmpNonRti(): ?float
    {
        return $this->container['smpNonRti'];
    }

    /**
     * Sets smpNonRti
     *
     * @param float|null $smpNonRti [readonly] Statutory Maternity Pay excluded from RTI
     *
     * @return $this
     */
    public function setSmpNonRti(?float $smpNonRti): static
    {
        if (is_null($smpNonRti)) {
            throw new InvalidArgumentException('non-nullable smpNonRti cannot be null');
        }
        $this->container['smpNonRti'] = $smpNonRti;

        return $this;
    }

    /**
     * Gets spp
     *
     * @return float|null
     */
    public function getSpp(): ?float
    {
        return $this->container['spp'];
    }

    /**
     * Sets spp
     *
     * @param float|null $spp [readonly] Statutory Paternity Pay
     *
     * @return $this
     */
    public function setSpp(?float $spp): static
    {
        if (is_null($spp)) {
            throw new InvalidArgumentException('non-nullable spp cannot be null');
        }
        $this->container['spp'] = $spp;

        return $this;
    }

    /**
     * Gets sppNonRti
     *
     * @return float|null
     */
    public function getSppNonRti(): ?float
    {
        return $this->container['sppNonRti'];
    }

    /**
     * Sets sppNonRti
     *
     * @param float|null $sppNonRti [readonly] Statutory Paternity Pay excluded from RTI
     *
     * @return $this
     */
    public function setSppNonRti(?float $sppNonRti): static
    {
        if (is_null($sppNonRti)) {
            throw new InvalidArgumentException('non-nullable sppNonRti cannot be null');
        }
        $this->container['sppNonRti'] = $sppNonRti;

        return $this;
    }

    /**
     * Gets sap
     *
     * @return float|null
     */
    public function getSap(): ?float
    {
        return $this->container['sap'];
    }

    /**
     * Sets sap
     *
     * @param float|null $sap [readonly] Statutory Adoption Pay
     *
     * @return $this
     */
    public function setSap(?float $sap): static
    {
        if (is_null($sap)) {
            throw new InvalidArgumentException('non-nullable sap cannot be null');
        }
        $this->container['sap'] = $sap;

        return $this;
    }

    /**
     * Gets sapNonRti
     *
     * @return float|null
     */
    public function getSapNonRti(): ?float
    {
        return $this->container['sapNonRti'];
    }

    /**
     * Sets sapNonRti
     *
     * @param float|null $sapNonRti [readonly] Statutory Adoption Pay excluded from RTI
     *
     * @return $this
     */
    public function setSapNonRti(?float $sapNonRti): static
    {
        if (is_null($sapNonRti)) {
            throw new InvalidArgumentException('non-nullable sapNonRti cannot be null');
        }
        $this->container['sapNonRti'] = $sapNonRti;

        return $this;
    }

    /**
     * Gets shpp
     *
     * @return float|null
     */
    public function getShpp(): ?float
    {
        return $this->container['shpp'];
    }

    /**
     * Sets shpp
     *
     * @param float|null $shpp [readonly] Statutory Shared Parental Pay
     *
     * @return $this
     */
    public function setShpp(?float $shpp): static
    {
        if (is_null($shpp)) {
            throw new InvalidArgumentException('non-nullable shpp cannot be null');
        }
        $this->container['shpp'] = $shpp;

        return $this;
    }

    /**
     * Gets shppNonRti
     *
     * @return float|null
     */
    public function getShppNonRti(): ?float
    {
        return $this->container['shppNonRti'];
    }

    /**
     * Sets shppNonRti
     *
     * @param float|null $shppNonRti [readonly] Statutory Shared Parental Pay excluded from RTI
     *
     * @return $this
     */
    public function setShppNonRti(?float $shppNonRti): static
    {
        if (is_null($shppNonRti)) {
            throw new InvalidArgumentException('non-nullable shppNonRti cannot be null');
        }
        $this->container['shppNonRti'] = $shppNonRti;

        return $this;
    }

    /**
     * Gets spbp
     *
     * @return float|null
     */
    public function getSpbp(): ?float
    {
        return $this->container['spbp'];
    }

    /**
     * Sets spbp
     *
     * @param float|null $spbp [readonly] Statutory Parental Bereavement Pay
     *
     * @return $this
     */
    public function setSpbp(?float $spbp): static
    {
        if (is_null($spbp)) {
            throw new InvalidArgumentException('non-nullable spbp cannot be null');
        }
        $this->container['spbp'] = $spbp;

        return $this;
    }

    /**
     * Gets spbpNonRti
     *
     * @return float|null
     */
    public function getSpbpNonRti(): ?float
    {
        return $this->container['spbpNonRti'];
    }

    /**
     * Sets spbpNonRti
     *
     * @param float|null $spbpNonRti [readonly] Statutory Parental Bereavement Pay excluded from RTI
     *
     * @return $this
     */
    public function setSpbpNonRti(?float $spbpNonRti): static
    {
        if (is_null($spbpNonRti)) {
            throw new InvalidArgumentException('non-nullable spbpNonRti cannot be null');
        }
        $this->container['spbpNonRti'] = $spbpNonRti;

        return $this;
    }

    /**
     * Gets ssp
     *
     * @return float|null
     */
    public function getSsp(): ?float
    {
        return $this->container['ssp'];
    }

    /**
     * Sets ssp
     *
     * @param float|null $ssp [readonly] Statutory Sick  Pay
     *
     * @return $this
     */
    public function setSsp(?float $ssp): static
    {
        if (is_null($ssp)) {
            throw new InvalidArgumentException('non-nullable ssp cannot be null');
        }
        $this->container['ssp'] = $ssp;

        return $this;
    }

    /**
     * Gets sspNonRti
     *
     * @return float|null
     */
    public function getSspNonRti(): ?float
    {
        return $this->container['sspNonRti'];
    }

    /**
     * Sets sspNonRti
     *
     * @param float|null $sspNonRti [readonly] Statutory Sick Pay excluded from RTI
     *
     * @return $this
     */
    public function setSspNonRti(?float $sspNonRti): static
    {
        if (is_null($sspNonRti)) {
            throw new InvalidArgumentException('non-nullable sspNonRti cannot be null');
        }
        $this->container['sspNonRti'] = $sspNonRti;

        return $this;
    }

    /**
     * Gets studentLoanRecovered
     *
     * @return float|null
     */
    public function getStudentLoanRecovered(): ?float
    {
        return $this->container['studentLoanRecovered'];
    }

    /**
     * Sets studentLoanRecovered
     *
     * @param float|null $studentLoanRecovered [readonly]
     *
     * @return $this
     */
    public function setStudentLoanRecovered(?float $studentLoanRecovered): static
    {
        if (is_null($studentLoanRecovered)) {
            throw new InvalidArgumentException('non-nullable studentLoanRecovered cannot be null');
        }
        $this->container['studentLoanRecovered'] = $studentLoanRecovered;

        return $this;
    }

    /**
     * Gets studentLoanRecoveredNonRti
     *
     * @return float|null
     */
    public function getStudentLoanRecoveredNonRti(): ?float
    {
        return $this->container['studentLoanRecoveredNonRti'];
    }

    /**
     * Sets studentLoanRecoveredNonRti
     *
     * @param float|null $studentLoanRecoveredNonRti [readonly] Student Loan recovered excluded from RTI
     *
     * @return $this
     */
    public function setStudentLoanRecoveredNonRti(?float $studentLoanRecoveredNonRti): static
    {
        if (is_null($studentLoanRecoveredNonRti)) {
            throw new InvalidArgumentException('non-nullable studentLoanRecoveredNonRti cannot be null');
        }
        $this->container['studentLoanRecoveredNonRti'] = $studentLoanRecoveredNonRti;

        return $this;
    }

    /**
     * Gets postgradLoanRecovered
     *
     * @return float|null
     */
    public function getPostgradLoanRecovered(): ?float
    {
        return $this->container['postgradLoanRecovered'];
    }

    /**
     * Sets postgradLoanRecovered
     *
     * @param float|null $postgradLoanRecovered [readonly]
     *
     * @return $this
     */
    public function setPostgradLoanRecovered(?float $postgradLoanRecovered): static
    {
        if (is_null($postgradLoanRecovered)) {
            throw new InvalidArgumentException('non-nullable postgradLoanRecovered cannot be null');
        }
        $this->container['postgradLoanRecovered'] = $postgradLoanRecovered;

        return $this;
    }

    /**
     * Gets postgradLoanRecoveredNonRti
     *
     * @return float|null
     */
    public function getPostgradLoanRecoveredNonRti(): ?float
    {
        return $this->container['postgradLoanRecoveredNonRti'];
    }

    /**
     * Sets postgradLoanRecoveredNonRti
     *
     * @param float|null $postgradLoanRecoveredNonRti [readonly] Postgrad Loan recovered excluded from RTI
     *
     * @return $this
     */
    public function setPostgradLoanRecoveredNonRti(?float $postgradLoanRecoveredNonRti): static
    {
        if (is_null($postgradLoanRecoveredNonRti)) {
            throw new InvalidArgumentException('non-nullable postgradLoanRecoveredNonRti cannot be null');
        }
        $this->container['postgradLoanRecoveredNonRti'] = $postgradLoanRecoveredNonRti;

        return $this;
    }

    /**
     * Gets pensionableEarnings
     *
     * @return float|null
     */
    public function getPensionableEarnings(): ?float
    {
        return $this->container['pensionableEarnings'];
    }

    /**
     * Sets pensionableEarnings
     *
     * @param float|null $pensionableEarnings [readonly] The amount of the Gross that is subject to Pension Deductions.  If the Pension Scheme uses Qualifying Earnings (upper and lower limits) then this value is before those are applied
     *
     * @return $this
     */
    public function setPensionableEarnings(?float $pensionableEarnings): static
    {
        if (is_null($pensionableEarnings)) {
            throw new InvalidArgumentException('non-nullable pensionableEarnings cannot be null');
        }
        $this->container['pensionableEarnings'] = $pensionableEarnings;

        return $this;
    }

    /**
     * Gets pensionablePay
     *
     * @return float|null
     */
    public function getPensionablePay(): ?float
    {
        return $this->container['pensionablePay'];
    }

    /**
     * Sets pensionablePay
     *
     * @param float|null $pensionablePay [readonly] The amount of the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.
     *
     * @return $this
     */
    public function setPensionablePay(?float $pensionablePay): static
    {
        if (is_null($pensionablePay)) {
            throw new InvalidArgumentException('non-nullable pensionablePay cannot be null');
        }
        $this->container['pensionablePay'] = $pensionablePay;

        return $this;
    }

    /**
     * Gets nonTierablePay
     *
     * @return float|null
     */
    public function getNonTierablePay(): ?float
    {
        return $this->container['nonTierablePay'];
    }

    /**
     * Sets nonTierablePay
     *
     * @param float|null $nonTierablePay [readonly] The value of any pay that shouldn't count towards determining a pension tier.
     *
     * @return $this
     */
    public function setNonTierablePay(?float $nonTierablePay): static
    {
        if (is_null($nonTierablePay)) {
            throw new InvalidArgumentException('non-nullable nonTierablePay cannot be null');
        }
        $this->container['nonTierablePay'] = $nonTierablePay;

        return $this;
    }

    /**
     * Gets employeePensionContribution
     *
     * @return float|null
     */
    public function getEmployeePensionContribution(): ?float
    {
        return $this->container['employeePensionContribution'];
    }

    /**
     * Sets employeePensionContribution
     *
     * @param float|null $employeePensionContribution [readonly] The value of the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions
     *
     * @return $this
     */
    public function setEmployeePensionContribution(?float $employeePensionContribution): static
    {
        if (is_null($employeePensionContribution)) {
            throw new InvalidArgumentException('non-nullable employeePensionContribution cannot be null');
        }
        $this->container['employeePensionContribution'] = $employeePensionContribution;

        return $this;
    }

    /**
     * Gets employeePensionContributionAvc
     *
     * @return float|null
     */
    public function getEmployeePensionContributionAvc(): ?float
    {
        return $this->container['employeePensionContributionAvc'];
    }

    /**
     * Sets employeePensionContributionAvc
     *
     * @param float|null $employeePensionContributionAvc [readonly] The value of the Pension Contribution being made by this Employee as an Additional Voluntary Contribution
     *
     * @return $this
     */
    public function setEmployeePensionContributionAvc(?float $employeePensionContributionAvc): static
    {
        if (is_null($employeePensionContributionAvc)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionAvc cannot be null');
        }
        $this->container['employeePensionContributionAvc'] = $employeePensionContributionAvc;

        return $this;
    }

    /**
     * Gets employerPensionContribution
     *
     * @return float|null
     */
    public function getEmployerPensionContribution(): ?float
    {
        return $this->container['employerPensionContribution'];
    }

    /**
     * Sets employerPensionContribution
     *
     * @param float|null $employerPensionContribution [readonly] The value of the Pension Contribution being made by the Employer for this Employee
     *
     * @return $this
     */
    public function setEmployerPensionContribution(?float $employerPensionContribution): static
    {
        if (is_null($employerPensionContribution)) {
            throw new InvalidArgumentException('non-nullable employerPensionContribution cannot be null');
        }
        $this->container['employerPensionContribution'] = $employerPensionContribution;

        return $this;
    }

    /**
     * Gets empeePenContribnsNotPaid
     *
     * @return float|null
     */
    public function getEmpeePenContribnsNotPaid(): ?float
    {
        return $this->container['empeePenContribnsNotPaid'];
    }

    /**
     * Sets empeePenContribnsNotPaid
     *
     * @param float|null $empeePenContribnsNotPaid [readonly] Value of employee pension contributions that are not paid under 'net pay arrangements', including any AVC
     *
     * @return $this
     */
    public function setEmpeePenContribnsNotPaid(?float $empeePenContribnsNotPaid): static
    {
        if (is_null($empeePenContribnsNotPaid)) {
            throw new InvalidArgumentException('non-nullable empeePenContribnsNotPaid cannot be null');
        }
        $this->container['empeePenContribnsNotPaid'] = $empeePenContribnsNotPaid;

        return $this;
    }

    /**
     * Gets empeePenContribnsPaid
     *
     * @return float|null
     */
    public function getEmpeePenContribnsPaid(): ?float
    {
        return $this->container['empeePenContribnsPaid'];
    }

    /**
     * Sets empeePenContribnsPaid
     *
     * @param float|null $empeePenContribnsPaid [readonly] Value of employee pension contributions paid under 'net pay arrangements', including any AVC
     *
     * @return $this
     */
    public function setEmpeePenContribnsPaid(?float $empeePenContribnsPaid): static
    {
        if (is_null($empeePenContribnsPaid)) {
            throw new InvalidArgumentException('non-nullable empeePenContribnsPaid cannot be null');
        }
        $this->container['empeePenContribnsPaid'] = $empeePenContribnsPaid;

        return $this;
    }

    /**
     * Gets attachmentOrderDeductions
     *
     * @return float|null
     */
    public function getAttachmentOrderDeductions(): ?float
    {
        return $this->container['attachmentOrderDeductions'];
    }

    /**
     * Sets attachmentOrderDeductions
     *
     * @param float|null $attachmentOrderDeductions [readonly] Value of deductions made due to AttachmentOrders
     *
     * @return $this
     */
    public function setAttachmentOrderDeductions(?float $attachmentOrderDeductions): static
    {
        if (is_null($attachmentOrderDeductions)) {
            throw new InvalidArgumentException('non-nullable attachmentOrderDeductions cannot be null');
        }
        $this->container['attachmentOrderDeductions'] = $attachmentOrderDeductions;

        return $this;
    }

    /**
     * Gets cisDeduction
     *
     * @return float|null
     */
    public function getCisDeduction(): ?float
    {
        return $this->container['cisDeduction'];
    }

    /**
     * Sets cisDeduction
     *
     * @param float|null $cisDeduction [readonly] Value of any CIS Deduction made
     *
     * @return $this
     */
    public function setCisDeduction(?float $cisDeduction): static
    {
        if (is_null($cisDeduction)) {
            throw new InvalidArgumentException('non-nullable cisDeduction cannot be null');
        }
        $this->container['cisDeduction'] = $cisDeduction;

        return $this;
    }

    /**
     * Gets cisVat
     *
     * @return float|null
     */
    public function getCisVat(): ?float
    {
        return $this->container['cisVat'];
    }

    /**
     * Sets cisVat
     *
     * @param float|null $cisVat [readonly] Value of any VAT paid to CIS Subcontractor
     *
     * @return $this
     */
    public function setCisVat(?float $cisVat): static
    {
        if (is_null($cisVat)) {
            throw new InvalidArgumentException('non-nullable cisVat cannot be null');
        }
        $this->container['cisVat'] = $cisVat;

        return $this;
    }

    /**
     * Gets cisUmbrellaFee
     *
     * @return float|null
     */
    public function getCisUmbrellaFee(): ?float
    {
        return $this->container['cisUmbrellaFee'];
    }

    /**
     * Sets cisUmbrellaFee
     *
     * @param float|null $cisUmbrellaFee [readonly] Value of any pre-tax fee charged to the CIS Subcontractor for processing the payment
     *
     * @return $this
     */
    public function setCisUmbrellaFee(?float $cisUmbrellaFee): static
    {
        if (is_null($cisUmbrellaFee)) {
            throw new InvalidArgumentException('non-nullable cisUmbrellaFee cannot be null');
        }
        $this->container['cisUmbrellaFee'] = $cisUmbrellaFee;

        return $this;
    }

    /**
     * Gets cisUmbrellaFeePostTax
     *
     * @return float|null
     */
    public function getCisUmbrellaFeePostTax(): ?float
    {
        return $this->container['cisUmbrellaFeePostTax'];
    }

    /**
     * Sets cisUmbrellaFeePostTax
     *
     * @param float|null $cisUmbrellaFeePostTax [readonly] Value of any post-tax fee charged to the CIS Subcontractor for processing the payment
     *
     * @return $this
     */
    public function setCisUmbrellaFeePostTax(?float $cisUmbrellaFeePostTax): static
    {
        if (is_null($cisUmbrellaFeePostTax)) {
            throw new InvalidArgumentException('non-nullable cisUmbrellaFeePostTax cannot be null');
        }
        $this->container['cisUmbrellaFeePostTax'] = $cisUmbrellaFeePostTax;

        return $this;
    }

    /**
     * Gets pbik
     *
     * @return float|null
     */
    public function getPbik(): ?float
    {
        return $this->container['pbik'];
    }

    /**
     * Sets pbik
     *
     * @param float|null $pbik [readonly] Value of any Payrolled Benefits In Kind
     *
     * @return $this
     */
    public function setPbik(?float $pbik): static
    {
        if (is_null($pbik)) {
            throw new InvalidArgumentException('non-nullable pbik cannot be null');
        }
        $this->container['pbik'] = $pbik;

        return $this;
    }

    /**
     * Gets mapsMiles
     *
     * @return int|null
     */
    public function getMapsMiles(): ?int
    {
        return $this->container['mapsMiles'];
    }

    /**
     * Sets mapsMiles
     *
     * @param int|null $mapsMiles [readonly] The number of miles paid for Mileage Allowance Payments
     *
     * @return $this
     */
    public function setMapsMiles(?int $mapsMiles): static
    {
        if (is_null($mapsMiles)) {
            throw new InvalidArgumentException('non-nullable mapsMiles cannot be null');
        }
        $this->container['mapsMiles'] = $mapsMiles;

        return $this;
    }

    /**
     * Gets foreignTaxAmount
     *
     * @return float|null
     */
    public function getForeignTaxAmount(): ?float
    {
        return $this->container['foreignTaxAmount'];
    }

    /**
     * Sets foreignTaxAmount
     *
     * @param float|null $foreignTaxAmount [readonly] The amount paid for Foreign Tax Credits in this period
     *
     * @return $this
     */
    public function setForeignTaxAmount(?float $foreignTaxAmount): static
    {
        if (is_null($foreignTaxAmount)) {
            throw new InvalidArgumentException('non-nullable foreignTaxAmount cannot be null');
        }
        $this->container['foreignTaxAmount'] = $foreignTaxAmount;

        return $this;
    }

    /**
     * Gets foreignTaxAmountReclaimed
     *
     * @return float|null
     */
    public function getForeignTaxAmountReclaimed(): ?float
    {
        return $this->container['foreignTaxAmountReclaimed'];
    }

    /**
     * Sets foreignTaxAmountReclaimed
     *
     * @param float|null $foreignTaxAmountReclaimed [readonly] The amount of Foreign Tax Credits that you actually reclaimed
     *
     * @return $this
     */
    public function setForeignTaxAmountReclaimed(?float $foreignTaxAmountReclaimed): static
    {
        if (is_null($foreignTaxAmountReclaimed)) {
            throw new InvalidArgumentException('non-nullable foreignTaxAmountReclaimed cannot be null');
        }
        $this->container['foreignTaxAmountReclaimed'] = $foreignTaxAmountReclaimed;

        return $this;
    }

    /**
     * Gets umbrellaFee
     *
     * @return float|null
     */
    public function getUmbrellaFee(): ?float
    {
        return $this->container['umbrellaFee'];
    }

    /**
     * Sets umbrellaFee
     *
     * @param float|null $umbrellaFee [readonly] Value of any Umbrella fee charged for processing the payment
     *
     * @return $this
     */
    public function setUmbrellaFee(?float $umbrellaFee): static
    {
        if (is_null($umbrellaFee)) {
            throw new InvalidArgumentException('non-nullable umbrellaFee cannot be null');
        }
        $this->container['umbrellaFee'] = $umbrellaFee;

        return $this;
    }

    /**
     * Gets appLevyDeduction
     *
     * @return float|null
     */
    public function getAppLevyDeduction(): ?float
    {
        return $this->container['appLevyDeduction'];
    }

    /**
     * Sets appLevyDeduction
     *
     * @param float|null $appLevyDeduction [readonly] Value of any Apprenticeship Levy fee deducted for processing the umbrella payment
     *
     * @return $this
     */
    public function setAppLevyDeduction(?float $appLevyDeduction): static
    {
        if (is_null($appLevyDeduction)) {
            throw new InvalidArgumentException('non-nullable appLevyDeduction cannot be null');
        }
        $this->container['appLevyDeduction'] = $appLevyDeduction;

        return $this;
    }

    /**
     * Gets paymentAfterLeaving
     *
     * @return float|null
     */
    public function getPaymentAfterLeaving(): ?float
    {
        return $this->container['paymentAfterLeaving'];
    }

    /**
     * Sets paymentAfterLeaving
     *
     * @param float|null $paymentAfterLeaving [readonly] Payment After Leaving
     *
     * @return $this
     */
    public function setPaymentAfterLeaving(?float $paymentAfterLeaving): static
    {
        if (is_null($paymentAfterLeaving)) {
            throw new InvalidArgumentException('non-nullable paymentAfterLeaving cannot be null');
        }
        $this->container['paymentAfterLeaving'] = $paymentAfterLeaving;

        return $this;
    }

    /**
     * Gets taxOnPaymentAfterLeaving
     *
     * @return float|null
     */
    public function getTaxOnPaymentAfterLeaving(): ?float
    {
        return $this->container['taxOnPaymentAfterLeaving'];
    }

    /**
     * Sets taxOnPaymentAfterLeaving
     *
     * @param float|null $taxOnPaymentAfterLeaving [readonly] Tax On Payment After Leaving
     *
     * @return $this
     */
    public function setTaxOnPaymentAfterLeaving(?float $taxOnPaymentAfterLeaving): static
    {
        if (is_null($taxOnPaymentAfterLeaving)) {
            throw new InvalidArgumentException('non-nullable taxOnPaymentAfterLeaving cannot be null');
        }
        $this->container['taxOnPaymentAfterLeaving'] = $taxOnPaymentAfterLeaving;

        return $this;
    }

    /**
     * Gets nilPaid
     *
     * @return int|null
     */
    public function getNilPaid(): ?int
    {
        return $this->container['nilPaid'];
    }

    /**
     * Sets nilPaid
     *
     * @param int|null $nilPaid [readonly] The number of employees with NilPaid on the PayRun
     *
     * @return $this
     */
    public function setNilPaid(?int $nilPaid): static
    {
        if (is_null($nilPaid)) {
            throw new InvalidArgumentException('non-nullable nilPaid cannot be null');
        }
        $this->container['nilPaid'] = $nilPaid;

        return $this;
    }

    /**
     * Gets leavers
     *
     * @return int|null
     */
    public function getLeavers(): ?int
    {
        return $this->container['leavers'];
    }

    /**
     * Sets leavers
     *
     * @param int|null $leavers [readonly] The number of Leavers on ths PayRun
     *
     * @return $this
     */
    public function setLeavers(?int $leavers): static
    {
        if (is_null($leavers)) {
            throw new InvalidArgumentException('non-nullable leavers cannot be null');
        }
        $this->container['leavers'] = $leavers;

        return $this;
    }

    /**
     * Gets starters
     *
     * @return int|null
     */
    public function getStarters(): ?int
    {
        return $this->container['starters'];
    }

    /**
     * Sets starters
     *
     * @param int|null $starters [readonly] The number of Starters on this PayRun
     *
     * @return $this
     */
    public function setStarters(?int $starters): static
    {
        if (is_null($starters)) {
            throw new InvalidArgumentException('non-nullable starters cannot be null');
        }
        $this->container['starters'] = $starters;

        return $this;
    }

    /**
     * Gets p45Gross
     *
     * @return float|null
     */
    public function getP45Gross(): ?float
    {
        return $this->container['p45Gross'];
    }

    /**
     * Sets p45Gross
     *
     * @param float|null $p45Gross [readonly] The value P45 Gross which is held on the Employees Opening Balance
     *
     * @return $this
     */
    public function setP45Gross(?float $p45Gross): static
    {
        if (is_null($p45Gross)) {
            array_push($this->openAPINullablesSetToNull, 'p45Gross');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('p45Gross', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['p45Gross'] = $p45Gross;

        return $this;
    }

    /**
     * Gets p45Tax
     *
     * @return float|null
     */
    public function getP45Tax(): ?float
    {
        return $this->container['p45Tax'];
    }

    /**
     * Sets p45Tax
     *
     * @param float|null $p45Tax [readonly] The value of P45 Tax which is held on the Employees Opening Balance
     *
     * @return $this
     */
    public function setP45Tax(?float $p45Tax): static
    {
        if (is_null($p45Tax)) {
            array_push($this->openAPINullablesSetToNull, 'p45Tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('p45Tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['p45Tax'] = $p45Tax;

        return $this;
    }

    /**
     * Gets totalCost
     *
     * @return float|null
     */
    public function getTotalCost(): ?float
    {
        return $this->container['totalCost'];
    }

    /**
     * Sets totalCost
     *
     * @param float|null $totalCost totalCost
     *
     * @return $this
     */
    public function setTotalCost(?float $totalCost): static
    {
        if (is_null($totalCost)) {
            throw new InvalidArgumentException('non-nullable totalCost cannot be null');
        }
        $this->container['totalCost'] = $totalCost;

        return $this;
    }

    /**
     * Gets recoverableAmounts
     *
     * @return \SynergiTech\Staffology\Model\RecoverableAmounts|null
     */
    public function getRecoverableAmounts(): ?\SynergiTech\Staffology\Model\RecoverableAmounts
    {
        return $this->container['recoverableAmounts'];
    }

    /**
     * Sets recoverableAmounts
     *
     * @param \SynergiTech\Staffology\Model\RecoverableAmounts|null $recoverableAmounts recoverableAmounts
     *
     * @return $this
     */
    public function setRecoverableAmounts(?\SynergiTech\Staffology\Model\RecoverableAmounts $recoverableAmounts): static
    {
        if (is_null($recoverableAmounts)) {
            throw new InvalidArgumentException('non-nullable recoverableAmounts cannot be null');
        }
        $this->container['recoverableAmounts'] = $recoverableAmounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


