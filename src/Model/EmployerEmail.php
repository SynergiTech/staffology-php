<?php
/**
 * EmployerEmail
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EmployerEmail Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class EmployerEmail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'EmployerEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'toName' => 'string',
        'toEmail' => 'string',
        'subject' => 'string',
        'buttonText' => 'string',
        'buttonLink' => 'string',
        'bodyPreview' => 'string',
        'body' => 'string',
        'afterBtnBody' => 'string',
        'status' => '\SynergiTech\Staffology\Model\BackgroundTaskStatus',
        'statusDate' => '\DateTime',
        'statusMessage' => 'string',
        'sendAttempts' => 'int',
        'webAppBaseUrl' => 'string',
        'attachments' => '\SynergiTech\Staffology\Model\EmailAttachment[]',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'toName' => null,
        'toEmail' => null,
        'subject' => null,
        'buttonText' => null,
        'buttonLink' => null,
        'bodyPreview' => null,
        'body' => null,
        'afterBtnBody' => null,
        'status' => null,
        'statusDate' => 'date-time',
        'statusMessage' => null,
        'sendAttempts' => 'int32',
        'webAppBaseUrl' => null,
        'attachments' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'toName' => false,
        'toEmail' => false,
        'subject' => false,
        'buttonText' => true,
        'buttonLink' => true,
        'bodyPreview' => true,
        'body' => true,
        'afterBtnBody' => true,
        'status' => false,
        'statusDate' => false,
        'statusMessage' => true,
        'sendAttempts' => false,
        'webAppBaseUrl' => true,
        'attachments' => true,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'toName' => 'toName',
        'toEmail' => 'toEmail',
        'subject' => 'subject',
        'buttonText' => 'buttonText',
        'buttonLink' => 'buttonLink',
        'bodyPreview' => 'bodyPreview',
        'body' => 'body',
        'afterBtnBody' => 'afterBtnBody',
        'status' => 'status',
        'statusDate' => 'statusDate',
        'statusMessage' => 'statusMessage',
        'sendAttempts' => 'sendAttempts',
        'webAppBaseUrl' => 'webAppBaseUrl',
        'attachments' => 'attachments',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'toName' => 'setToName',
        'toEmail' => 'setToEmail',
        'subject' => 'setSubject',
        'buttonText' => 'setButtonText',
        'buttonLink' => 'setButtonLink',
        'bodyPreview' => 'setBodyPreview',
        'body' => 'setBody',
        'afterBtnBody' => 'setAfterBtnBody',
        'status' => 'setStatus',
        'statusDate' => 'setStatusDate',
        'statusMessage' => 'setStatusMessage',
        'sendAttempts' => 'setSendAttempts',
        'webAppBaseUrl' => 'setWebAppBaseUrl',
        'attachments' => 'setAttachments',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'toName' => 'getToName',
        'toEmail' => 'getToEmail',
        'subject' => 'getSubject',
        'buttonText' => 'getButtonText',
        'buttonLink' => 'getButtonLink',
        'bodyPreview' => 'getBodyPreview',
        'body' => 'getBody',
        'afterBtnBody' => 'getAfterBtnBody',
        'status' => 'getStatus',
        'statusDate' => 'getStatusDate',
        'statusMessage' => 'getStatusMessage',
        'sendAttempts' => 'getSendAttempts',
        'webAppBaseUrl' => 'getWebAppBaseUrl',
        'attachments' => 'getAttachments',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('toName', $data ?? [], null);
        $this->setIfExists('toEmail', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('buttonText', $data ?? [], null);
        $this->setIfExists('buttonLink', $data ?? [], null);
        $this->setIfExists('bodyPreview', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('afterBtnBody', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusDate', $data ?? [], null);
        $this->setIfExists('statusMessage', $data ?? [], null);
        $this->setIfExists('sendAttempts', $data ?? [], null);
        $this->setIfExists('webAppBaseUrl', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['toName'] === null) {
            $invalidProperties[] = "'toName' can't be null";
        }
        if ((mb_strlen($this->container['toName']) > 150)) {
            $invalidProperties[] = "invalid value for 'toName', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['toName']) < 1)) {
            $invalidProperties[] = "invalid value for 'toName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['toEmail'] === null) {
            $invalidProperties[] = "'toEmail' can't be null";
        }
        if ((mb_strlen($this->container['toEmail']) > 150)) {
            $invalidProperties[] = "invalid value for 'toEmail', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['toEmail']) < 1)) {
            $invalidProperties[] = "invalid value for 'toEmail', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ((mb_strlen($this->container['subject']) > 150)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['subject']) < 1)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['buttonText']) && (mb_strlen($this->container['buttonText']) > 100)) {
            $invalidProperties[] = "invalid value for 'buttonText', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['buttonLink']) && (mb_strlen($this->container['buttonLink']) > 250)) {
            $invalidProperties[] = "invalid value for 'buttonLink', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['bodyPreview']) && (mb_strlen($this->container['bodyPreview']) > 100)) {
            $invalidProperties[] = "invalid value for 'bodyPreview', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets toName
     *
     * @return string
     */
    public function getToName(): string
    {
        return $this->container['toName'];
    }

    /**
     * Sets toName
     *
     * @param string $toName toName
     *
     * @return $this
     */
    public function setToName(string $toName): static
    {
        if (is_null($toName)) {
            throw new InvalidArgumentException('non-nullable toName cannot be null');
        }
        if ((mb_strlen($toName) > 150)) {
            throw new InvalidArgumentException('invalid length for $toName when calling EmployerEmail., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($toName) < 1)) {
            throw new InvalidArgumentException('invalid length for $toName when calling EmployerEmail., must be bigger than or equal to 1.');
        }

        $this->container['toName'] = $toName;

        return $this;
    }

    /**
     * Gets toEmail
     *
     * @return string
     */
    public function getToEmail(): string
    {
        return $this->container['toEmail'];
    }

    /**
     * Sets toEmail
     *
     * @param string $toEmail toEmail
     *
     * @return $this
     */
    public function setToEmail(string $toEmail): static
    {
        if (is_null($toEmail)) {
            throw new InvalidArgumentException('non-nullable toEmail cannot be null');
        }
        if ((mb_strlen($toEmail) > 150)) {
            throw new InvalidArgumentException('invalid length for $toEmail when calling EmployerEmail., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($toEmail) < 1)) {
            throw new InvalidArgumentException('invalid length for $toEmail when calling EmployerEmail., must be bigger than or equal to 1.');
        }

        $this->container['toEmail'] = $toEmail;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject(): string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject(string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        if ((mb_strlen($subject) > 150)) {
            throw new InvalidArgumentException('invalid length for $subject when calling EmployerEmail., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($subject) < 1)) {
            throw new InvalidArgumentException('invalid length for $subject when calling EmployerEmail., must be bigger than or equal to 1.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets buttonText
     *
     * @return string|null
     */
    public function getButtonText(): ?string
    {
        return $this->container['buttonText'];
    }

    /**
     * Sets buttonText
     *
     * @param string|null $buttonText buttonText
     *
     * @return $this
     */
    public function setButtonText(?string $buttonText): static
    {
        if (is_null($buttonText)) {
            array_push($this->openAPINullablesSetToNull, 'buttonText');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buttonText', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($buttonText) && (mb_strlen($buttonText) > 100)) {
            throw new InvalidArgumentException('invalid length for $buttonText when calling EmployerEmail., must be smaller than or equal to 100.');
        }

        $this->container['buttonText'] = $buttonText;

        return $this;
    }

    /**
     * Gets buttonLink
     *
     * @return string|null
     */
    public function getButtonLink(): ?string
    {
        return $this->container['buttonLink'];
    }

    /**
     * Sets buttonLink
     *
     * @param string|null $buttonLink buttonLink
     *
     * @return $this
     */
    public function setButtonLink(?string $buttonLink): static
    {
        if (is_null($buttonLink)) {
            array_push($this->openAPINullablesSetToNull, 'buttonLink');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buttonLink', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($buttonLink) && (mb_strlen($buttonLink) > 250)) {
            throw new InvalidArgumentException('invalid length for $buttonLink when calling EmployerEmail., must be smaller than or equal to 250.');
        }

        $this->container['buttonLink'] = $buttonLink;

        return $this;
    }

    /**
     * Gets bodyPreview
     *
     * @return string|null
     */
    public function getBodyPreview(): ?string
    {
        return $this->container['bodyPreview'];
    }

    /**
     * Sets bodyPreview
     *
     * @param string|null $bodyPreview bodyPreview
     *
     * @return $this
     */
    public function setBodyPreview(?string $bodyPreview): static
    {
        if (is_null($bodyPreview)) {
            array_push($this->openAPINullablesSetToNull, 'bodyPreview');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bodyPreview', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bodyPreview) && (mb_strlen($bodyPreview) > 100)) {
            throw new InvalidArgumentException('invalid length for $bodyPreview when calling EmployerEmail., must be smaller than or equal to 100.');
        }

        $this->container['bodyPreview'] = $bodyPreview;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody(): ?string
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return $this
     */
    public function setBody(?string $body): static
    {
        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets afterBtnBody
     *
     * @return string|null
     */
    public function getAfterBtnBody(): ?string
    {
        return $this->container['afterBtnBody'];
    }

    /**
     * Sets afterBtnBody
     *
     * @param string|null $afterBtnBody afterBtnBody
     *
     * @return $this
     */
    public function setAfterBtnBody(?string $afterBtnBody): static
    {
        if (is_null($afterBtnBody)) {
            array_push($this->openAPINullablesSetToNull, 'afterBtnBody');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('afterBtnBody', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['afterBtnBody'] = $afterBtnBody;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SynergiTech\Staffology\Model\BackgroundTaskStatus|null
     */
    public function getStatus(): ?\SynergiTech\Staffology\Model\BackgroundTaskStatus
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SynergiTech\Staffology\Model\BackgroundTaskStatus|null $status status
     *
     * @return $this
     */
    public function setStatus(?\SynergiTech\Staffology\Model\BackgroundTaskStatus $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusDate
     *
     * @return \DateTime|null
     */
    public function getStatusDate(): ?\DateTime
    {
        return $this->container['statusDate'];
    }

    /**
     * Sets statusDate
     *
     * @param \DateTime|null $statusDate statusDate
     *
     * @return $this
     */
    public function setStatusDate(?\DateTime $statusDate): static
    {
        if (is_null($statusDate)) {
            throw new InvalidArgumentException('non-nullable statusDate cannot be null');
        }
        $this->container['statusDate'] = $statusDate;

        return $this;
    }

    /**
     * Gets statusMessage
     *
     * @return string|null
     */
    public function getStatusMessage(): ?string
    {
        return $this->container['statusMessage'];
    }

    /**
     * Sets statusMessage
     *
     * @param string|null $statusMessage statusMessage
     *
     * @return $this
     */
    public function setStatusMessage(?string $statusMessage): static
    {
        if (is_null($statusMessage)) {
            array_push($this->openAPINullablesSetToNull, 'statusMessage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statusMessage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statusMessage'] = $statusMessage;

        return $this;
    }

    /**
     * Gets sendAttempts
     *
     * @return int|null
     */
    public function getSendAttempts(): ?int
    {
        return $this->container['sendAttempts'];
    }

    /**
     * Sets sendAttempts
     *
     * @param int|null $sendAttempts sendAttempts
     *
     * @return $this
     */
    public function setSendAttempts(?int $sendAttempts): static
    {
        if (is_null($sendAttempts)) {
            throw new InvalidArgumentException('non-nullable sendAttempts cannot be null');
        }
        $this->container['sendAttempts'] = $sendAttempts;

        return $this;
    }

    /**
     * Gets webAppBaseUrl
     *
     * @return string|null
     */
    public function getWebAppBaseUrl(): ?string
    {
        return $this->container['webAppBaseUrl'];
    }

    /**
     * Sets webAppBaseUrl
     *
     * @param string|null $webAppBaseUrl webAppBaseUrl
     *
     * @return $this
     */
    public function setWebAppBaseUrl(?string $webAppBaseUrl): static
    {
        if (is_null($webAppBaseUrl)) {
            array_push($this->openAPINullablesSetToNull, 'webAppBaseUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webAppBaseUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webAppBaseUrl'] = $webAppBaseUrl;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \SynergiTech\Staffology\Model\EmailAttachment[]|null
     */
    public function getAttachments(): ?array
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \SynergiTech\Staffology\Model\EmailAttachment[]|null $attachments attachments
     *
     * @return $this
     */
    public function setAttachments(?array $attachments): static
    {
        if (is_null($attachments)) {
            array_push($this->openAPINullablesSetToNull, 'attachments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attachments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


