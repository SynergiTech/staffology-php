<?php
/**
 * FurloughReport
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * FurloughReport Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FurloughReport implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FurloughReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'maxClaimPerEmployee' => 'float',
        'percentageOfNIAndPensionToClaim' => 'float',
        'govtContribRate' => 'float',
        'companyName' => 'string',
        'employerReference' => 'string',
        'companyCrn' => 'string',
        'ctUtr' => 'string',
        'saUtr' => 'string',
        'claimPeriodStartDate' => '\DateTime',
        'claimPeriodEndDate' => '\DateTime',
        'numberOfEmployeesBeingFurloughed' => 'int',
        'totalClaimAmount' => 'float',
        'totalGrossPay' => 'float',
        'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod' => 'float',
        'amountClaimedForEmployerNICsContributionsForFurloughedEmployees' => 'float',
        'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees' => 'float',
        'lines' => '\SynergiTech\Staffology\Model\FurloughReportLine[]',
        'bankAccountNumber' => 'string',
        'bankSortCode' => 'string',
        'bankAccountHoldersFirstName' => 'string',
        'bankAccountHoldersLastName' => 'string',
        'bankAccountHoldersAddress' => 'string',
        'buildingSocietyRollNumber' => 'string',
        'companyAddress' => 'string',
        'contactName' => 'string',
        'contactNumber' => 'string',
        'employer' => '\SynergiTech\Staffology\Model\Item',
        'payPeriod' => '\SynergiTech\Staffology\Model\PayPeriods',
        'ordinal' => 'int',
        'period' => 'int',
        'periodTo' => 'int',
        'startPeriodName' => 'string',
        'endPeriodName' => 'string',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'report' => '\SynergiTech\Staffology\Model\Report',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'title' => 'string',
        'isDraft' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'maxClaimPerEmployee' => 'double',
        'percentageOfNIAndPensionToClaim' => 'double',
        'govtContribRate' => 'double',
        'companyName' => null,
        'employerReference' => null,
        'companyCrn' => null,
        'ctUtr' => null,
        'saUtr' => null,
        'claimPeriodStartDate' => 'date',
        'claimPeriodEndDate' => 'date',
        'numberOfEmployeesBeingFurloughed' => 'int32',
        'totalClaimAmount' => 'double',
        'totalGrossPay' => 'double',
        'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod' => 'double',
        'amountClaimedForEmployerNICsContributionsForFurloughedEmployees' => 'double',
        'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees' => 'double',
        'lines' => null,
        'bankAccountNumber' => null,
        'bankSortCode' => null,
        'bankAccountHoldersFirstName' => null,
        'bankAccountHoldersLastName' => null,
        'bankAccountHoldersAddress' => null,
        'buildingSocietyRollNumber' => null,
        'companyAddress' => null,
        'contactName' => null,
        'contactNumber' => null,
        'employer' => null,
        'payPeriod' => null,
        'ordinal' => 'int32',
        'period' => 'int32',
        'periodTo' => 'int32',
        'startPeriodName' => null,
        'endPeriodName' => null,
        'startDate' => 'date',
        'endDate' => 'date',
        'report' => null,
        'taxYear' => null,
        'title' => null,
        'isDraft' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'maxClaimPerEmployee' => false,
        'percentageOfNIAndPensionToClaim' => false,
        'govtContribRate' => false,
        'companyName' => true,
        'employerReference' => true,
        'companyCrn' => true,
        'ctUtr' => true,
        'saUtr' => true,
        'claimPeriodStartDate' => false,
        'claimPeriodEndDate' => false,
        'numberOfEmployeesBeingFurloughed' => false,
        'totalClaimAmount' => false,
        'totalGrossPay' => false,
        'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod' => false,
        'amountClaimedForEmployerNICsContributionsForFurloughedEmployees' => false,
        'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees' => false,
        'lines' => true,
        'bankAccountNumber' => true,
        'bankSortCode' => true,
        'bankAccountHoldersFirstName' => true,
        'bankAccountHoldersLastName' => true,
        'bankAccountHoldersAddress' => true,
        'buildingSocietyRollNumber' => true,
        'companyAddress' => true,
        'contactName' => true,
        'contactNumber' => true,
        'employer' => false,
        'payPeriod' => false,
        'ordinal' => false,
        'period' => false,
        'periodTo' => false,
        'startPeriodName' => true,
        'endPeriodName' => true,
        'startDate' => false,
        'endDate' => false,
        'report' => false,
        'taxYear' => false,
        'title' => true,
        'isDraft' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'maxClaimPerEmployee' => 'maxClaimPerEmployee',
        'percentageOfNIAndPensionToClaim' => 'percentageOfNIAndPensionToClaim',
        'govtContribRate' => 'govtContribRate',
        'companyName' => 'companyName',
        'employerReference' => 'employerReference',
        'companyCrn' => 'companyCrn',
        'ctUtr' => 'ctUtr',
        'saUtr' => 'saUtr',
        'claimPeriodStartDate' => 'claimPeriodStartDate',
        'claimPeriodEndDate' => 'claimPeriodEndDate',
        'numberOfEmployeesBeingFurloughed' => 'numberOfEmployeesBeingFurloughed',
        'totalClaimAmount' => 'totalClaimAmount',
        'totalGrossPay' => 'totalGrossPay',
        'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod' => 'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod',
        'amountClaimedForEmployerNICsContributionsForFurloughedEmployees' => 'amountClaimedForEmployerNICsContributionsForFurloughedEmployees',
        'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees' => 'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees',
        'lines' => 'lines',
        'bankAccountNumber' => 'bankAccountNumber',
        'bankSortCode' => 'bankSortCode',
        'bankAccountHoldersFirstName' => 'bankAccountHoldersFirstName',
        'bankAccountHoldersLastName' => 'bankAccountHoldersLastName',
        'bankAccountHoldersAddress' => 'bankAccountHoldersAddress',
        'buildingSocietyRollNumber' => 'buildingSocietyRollNumber',
        'companyAddress' => 'companyAddress',
        'contactName' => 'contactName',
        'contactNumber' => 'contactNumber',
        'employer' => 'employer',
        'payPeriod' => 'payPeriod',
        'ordinal' => 'ordinal',
        'period' => 'period',
        'periodTo' => 'periodTo',
        'startPeriodName' => 'startPeriodName',
        'endPeriodName' => 'endPeriodName',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'report' => 'report',
        'taxYear' => 'taxYear',
        'title' => 'title',
        'isDraft' => 'isDraft'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'maxClaimPerEmployee' => 'setMaxClaimPerEmployee',
        'percentageOfNIAndPensionToClaim' => 'setPercentageOfNIAndPensionToClaim',
        'govtContribRate' => 'setGovtContribRate',
        'companyName' => 'setCompanyName',
        'employerReference' => 'setEmployerReference',
        'companyCrn' => 'setCompanyCrn',
        'ctUtr' => 'setCtUtr',
        'saUtr' => 'setSaUtr',
        'claimPeriodStartDate' => 'setClaimPeriodStartDate',
        'claimPeriodEndDate' => 'setClaimPeriodEndDate',
        'numberOfEmployeesBeingFurloughed' => 'setNumberOfEmployeesBeingFurloughed',
        'totalClaimAmount' => 'setTotalClaimAmount',
        'totalGrossPay' => 'setTotalGrossPay',
        'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod' => 'setAmountClaimedForGrossPayToEmployeesOnFurloughForThePeriod',
        'amountClaimedForEmployerNICsContributionsForFurloughedEmployees' => 'setAmountClaimedForEmployerNICsContributionsForFurloughedEmployees',
        'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees' => 'setAmountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees',
        'lines' => 'setLines',
        'bankAccountNumber' => 'setBankAccountNumber',
        'bankSortCode' => 'setBankSortCode',
        'bankAccountHoldersFirstName' => 'setBankAccountHoldersFirstName',
        'bankAccountHoldersLastName' => 'setBankAccountHoldersLastName',
        'bankAccountHoldersAddress' => 'setBankAccountHoldersAddress',
        'buildingSocietyRollNumber' => 'setBuildingSocietyRollNumber',
        'companyAddress' => 'setCompanyAddress',
        'contactName' => 'setContactName',
        'contactNumber' => 'setContactNumber',
        'employer' => 'setEmployer',
        'payPeriod' => 'setPayPeriod',
        'ordinal' => 'setOrdinal',
        'period' => 'setPeriod',
        'periodTo' => 'setPeriodTo',
        'startPeriodName' => 'setStartPeriodName',
        'endPeriodName' => 'setEndPeriodName',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'report' => 'setReport',
        'taxYear' => 'setTaxYear',
        'title' => 'setTitle',
        'isDraft' => 'setIsDraft'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'maxClaimPerEmployee' => 'getMaxClaimPerEmployee',
        'percentageOfNIAndPensionToClaim' => 'getPercentageOfNIAndPensionToClaim',
        'govtContribRate' => 'getGovtContribRate',
        'companyName' => 'getCompanyName',
        'employerReference' => 'getEmployerReference',
        'companyCrn' => 'getCompanyCrn',
        'ctUtr' => 'getCtUtr',
        'saUtr' => 'getSaUtr',
        'claimPeriodStartDate' => 'getClaimPeriodStartDate',
        'claimPeriodEndDate' => 'getClaimPeriodEndDate',
        'numberOfEmployeesBeingFurloughed' => 'getNumberOfEmployeesBeingFurloughed',
        'totalClaimAmount' => 'getTotalClaimAmount',
        'totalGrossPay' => 'getTotalGrossPay',
        'amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod' => 'getAmountClaimedForGrossPayToEmployeesOnFurloughForThePeriod',
        'amountClaimedForEmployerNICsContributionsForFurloughedEmployees' => 'getAmountClaimedForEmployerNICsContributionsForFurloughedEmployees',
        'amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees' => 'getAmountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees',
        'lines' => 'getLines',
        'bankAccountNumber' => 'getBankAccountNumber',
        'bankSortCode' => 'getBankSortCode',
        'bankAccountHoldersFirstName' => 'getBankAccountHoldersFirstName',
        'bankAccountHoldersLastName' => 'getBankAccountHoldersLastName',
        'bankAccountHoldersAddress' => 'getBankAccountHoldersAddress',
        'buildingSocietyRollNumber' => 'getBuildingSocietyRollNumber',
        'companyAddress' => 'getCompanyAddress',
        'contactName' => 'getContactName',
        'contactNumber' => 'getContactNumber',
        'employer' => 'getEmployer',
        'payPeriod' => 'getPayPeriod',
        'ordinal' => 'getOrdinal',
        'period' => 'getPeriod',
        'periodTo' => 'getPeriodTo',
        'startPeriodName' => 'getStartPeriodName',
        'endPeriodName' => 'getEndPeriodName',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'report' => 'getReport',
        'taxYear' => 'getTaxYear',
        'title' => 'getTitle',
        'isDraft' => 'getIsDraft'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('maxClaimPerEmployee', $data ?? [], null);
        $this->setIfExists('percentageOfNIAndPensionToClaim', $data ?? [], null);
        $this->setIfExists('govtContribRate', $data ?? [], null);
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('employerReference', $data ?? [], null);
        $this->setIfExists('companyCrn', $data ?? [], null);
        $this->setIfExists('ctUtr', $data ?? [], null);
        $this->setIfExists('saUtr', $data ?? [], null);
        $this->setIfExists('claimPeriodStartDate', $data ?? [], null);
        $this->setIfExists('claimPeriodEndDate', $data ?? [], null);
        $this->setIfExists('numberOfEmployeesBeingFurloughed', $data ?? [], null);
        $this->setIfExists('totalClaimAmount', $data ?? [], null);
        $this->setIfExists('totalGrossPay', $data ?? [], null);
        $this->setIfExists('amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod', $data ?? [], null);
        $this->setIfExists('amountClaimedForEmployerNICsContributionsForFurloughedEmployees', $data ?? [], null);
        $this->setIfExists('amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('bankAccountNumber', $data ?? [], null);
        $this->setIfExists('bankSortCode', $data ?? [], null);
        $this->setIfExists('bankAccountHoldersFirstName', $data ?? [], null);
        $this->setIfExists('bankAccountHoldersLastName', $data ?? [], null);
        $this->setIfExists('bankAccountHoldersAddress', $data ?? [], null);
        $this->setIfExists('buildingSocietyRollNumber', $data ?? [], null);
        $this->setIfExists('companyAddress', $data ?? [], null);
        $this->setIfExists('contactName', $data ?? [], null);
        $this->setIfExists('contactNumber', $data ?? [], null);
        $this->setIfExists('employer', $data ?? [], null);
        $this->setIfExists('payPeriod', $data ?? [], null);
        $this->setIfExists('ordinal', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('periodTo', $data ?? [], null);
        $this->setIfExists('startPeriodName', $data ?? [], null);
        $this->setIfExists('endPeriodName', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('report', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('isDraft', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maxClaimPerEmployee
     *
     * @return float|null
     */
    public function getMaxClaimPerEmployee(): ?float
    {
        return $this->container['maxClaimPerEmployee'];
    }

    /**
     * Sets maxClaimPerEmployee
     *
     * @param float|null $maxClaimPerEmployee maxClaimPerEmployee
     *
     * @return $this
     */
    public function setMaxClaimPerEmployee(?float $maxClaimPerEmployee): static
    {
        if (is_null($maxClaimPerEmployee)) {
            throw new InvalidArgumentException('non-nullable maxClaimPerEmployee cannot be null');
        }
        $this->container['maxClaimPerEmployee'] = $maxClaimPerEmployee;

        return $this;
    }

    /**
     * Gets percentageOfNIAndPensionToClaim
     *
     * @return float|null
     */
    public function getPercentageOfNIAndPensionToClaim(): ?float
    {
        return $this->container['percentageOfNIAndPensionToClaim'];
    }

    /**
     * Sets percentageOfNIAndPensionToClaim
     *
     * @param float|null $percentageOfNIAndPensionToClaim percentageOfNIAndPensionToClaim
     *
     * @return $this
     */
    public function setPercentageOfNIAndPensionToClaim(?float $percentageOfNIAndPensionToClaim): static
    {
        if (is_null($percentageOfNIAndPensionToClaim)) {
            throw new InvalidArgumentException('non-nullable percentageOfNIAndPensionToClaim cannot be null');
        }
        $this->container['percentageOfNIAndPensionToClaim'] = $percentageOfNIAndPensionToClaim;

        return $this;
    }

    /**
     * Gets govtContribRate
     *
     * @return float|null
     */
    public function getGovtContribRate(): ?float
    {
        return $this->container['govtContribRate'];
    }

    /**
     * Sets govtContribRate
     *
     * @param float|null $govtContribRate govtContribRate
     *
     * @return $this
     */
    public function setGovtContribRate(?float $govtContribRate): static
    {
        if (is_null($govtContribRate)) {
            throw new InvalidArgumentException('non-nullable govtContribRate cannot be null');
        }
        $this->container['govtContribRate'] = $govtContribRate;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string|null
     */
    public function getCompanyName(): ?string
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string|null $companyName companyName
     *
     * @return $this
     */
    public function setCompanyName(?string $companyName): static
    {
        if (is_null($companyName)) {
            array_push($this->openAPINullablesSetToNull, 'companyName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets employerReference
     *
     * @return string|null
     */
    public function getEmployerReference(): ?string
    {
        return $this->container['employerReference'];
    }

    /**
     * Sets employerReference
     *
     * @param string|null $employerReference employerReference
     *
     * @return $this
     */
    public function setEmployerReference(?string $employerReference): static
    {
        if (is_null($employerReference)) {
            array_push($this->openAPINullablesSetToNull, 'employerReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerReference'] = $employerReference;

        return $this;
    }

    /**
     * Gets companyCrn
     *
     * @return string|null
     */
    public function getCompanyCrn(): ?string
    {
        return $this->container['companyCrn'];
    }

    /**
     * Sets companyCrn
     *
     * @param string|null $companyCrn companyCrn
     *
     * @return $this
     */
    public function setCompanyCrn(?string $companyCrn): static
    {
        if (is_null($companyCrn)) {
            array_push($this->openAPINullablesSetToNull, 'companyCrn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyCrn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyCrn'] = $companyCrn;

        return $this;
    }

    /**
     * Gets ctUtr
     *
     * @return string|null
     */
    public function getCtUtr(): ?string
    {
        return $this->container['ctUtr'];
    }

    /**
     * Sets ctUtr
     *
     * @param string|null $ctUtr ctUtr
     *
     * @return $this
     */
    public function setCtUtr(?string $ctUtr): static
    {
        if (is_null($ctUtr)) {
            array_push($this->openAPINullablesSetToNull, 'ctUtr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ctUtr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ctUtr'] = $ctUtr;

        return $this;
    }

    /**
     * Gets saUtr
     *
     * @return string|null
     */
    public function getSaUtr(): ?string
    {
        return $this->container['saUtr'];
    }

    /**
     * Sets saUtr
     *
     * @param string|null $saUtr saUtr
     *
     * @return $this
     */
    public function setSaUtr(?string $saUtr): static
    {
        if (is_null($saUtr)) {
            array_push($this->openAPINullablesSetToNull, 'saUtr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('saUtr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['saUtr'] = $saUtr;

        return $this;
    }

    /**
     * Gets claimPeriodStartDate
     *
     * @return \DateTime|null
     */
    public function getClaimPeriodStartDate(): ?\DateTime
    {
        return $this->container['claimPeriodStartDate'];
    }

    /**
     * Sets claimPeriodStartDate
     *
     * @param \DateTime|null $claimPeriodStartDate claimPeriodStartDate
     *
     * @return $this
     */
    public function setClaimPeriodStartDate(?\DateTime $claimPeriodStartDate): static
    {
        if (is_null($claimPeriodStartDate)) {
            throw new InvalidArgumentException('non-nullable claimPeriodStartDate cannot be null');
        }
        $this->container['claimPeriodStartDate'] = $claimPeriodStartDate;

        return $this;
    }

    /**
     * Gets claimPeriodEndDate
     *
     * @return \DateTime|null
     */
    public function getClaimPeriodEndDate(): ?\DateTime
    {
        return $this->container['claimPeriodEndDate'];
    }

    /**
     * Sets claimPeriodEndDate
     *
     * @param \DateTime|null $claimPeriodEndDate claimPeriodEndDate
     *
     * @return $this
     */
    public function setClaimPeriodEndDate(?\DateTime $claimPeriodEndDate): static
    {
        if (is_null($claimPeriodEndDate)) {
            throw new InvalidArgumentException('non-nullable claimPeriodEndDate cannot be null');
        }
        $this->container['claimPeriodEndDate'] = $claimPeriodEndDate;

        return $this;
    }

    /**
     * Gets numberOfEmployeesBeingFurloughed
     *
     * @return int|null
     */
    public function getNumberOfEmployeesBeingFurloughed(): ?int
    {
        return $this->container['numberOfEmployeesBeingFurloughed'];
    }

    /**
     * Sets numberOfEmployeesBeingFurloughed
     *
     * @param int|null $numberOfEmployeesBeingFurloughed numberOfEmployeesBeingFurloughed
     *
     * @return $this
     */
    public function setNumberOfEmployeesBeingFurloughed(?int $numberOfEmployeesBeingFurloughed): static
    {
        if (is_null($numberOfEmployeesBeingFurloughed)) {
            throw new InvalidArgumentException('non-nullable numberOfEmployeesBeingFurloughed cannot be null');
        }
        $this->container['numberOfEmployeesBeingFurloughed'] = $numberOfEmployeesBeingFurloughed;

        return $this;
    }

    /**
     * Gets totalClaimAmount
     *
     * @return float|null
     */
    public function getTotalClaimAmount(): ?float
    {
        return $this->container['totalClaimAmount'];
    }

    /**
     * Sets totalClaimAmount
     *
     * @param float|null $totalClaimAmount totalClaimAmount
     *
     * @return $this
     */
    public function setTotalClaimAmount(?float $totalClaimAmount): static
    {
        if (is_null($totalClaimAmount)) {
            throw new InvalidArgumentException('non-nullable totalClaimAmount cannot be null');
        }
        $this->container['totalClaimAmount'] = $totalClaimAmount;

        return $this;
    }

    /**
     * Gets totalGrossPay
     *
     * @return float|null
     */
    public function getTotalGrossPay(): ?float
    {
        return $this->container['totalGrossPay'];
    }

    /**
     * Sets totalGrossPay
     *
     * @param float|null $totalGrossPay totalGrossPay
     *
     * @return $this
     */
    public function setTotalGrossPay(?float $totalGrossPay): static
    {
        if (is_null($totalGrossPay)) {
            throw new InvalidArgumentException('non-nullable totalGrossPay cannot be null');
        }
        $this->container['totalGrossPay'] = $totalGrossPay;

        return $this;
    }

    /**
     * Gets amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod
     *
     * @return float|null
     */
    public function getAmountClaimedForGrossPayToEmployeesOnFurloughForThePeriod(): ?float
    {
        return $this->container['amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod'];
    }

    /**
     * Sets amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod
     *
     * @param float|null $amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod
     *
     * @return $this
     */
    public function setAmountClaimedForGrossPayToEmployeesOnFurloughForThePeriod(?float $amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod): static
    {
        if (is_null($amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod)) {
            throw new InvalidArgumentException('non-nullable amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod cannot be null');
        }
        $this->container['amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod'] = $amountClaimedForGrossPayToEmployeesOnFurloughForThePeriod;

        return $this;
    }

    /**
     * Gets amountClaimedForEmployerNICsContributionsForFurloughedEmployees
     *
     * @return float|null
     */
    public function getAmountClaimedForEmployerNICsContributionsForFurloughedEmployees(): ?float
    {
        return $this->container['amountClaimedForEmployerNICsContributionsForFurloughedEmployees'];
    }

    /**
     * Sets amountClaimedForEmployerNICsContributionsForFurloughedEmployees
     *
     * @param float|null $amountClaimedForEmployerNICsContributionsForFurloughedEmployees amountClaimedForEmployerNICsContributionsForFurloughedEmployees
     *
     * @return $this
     */
    public function setAmountClaimedForEmployerNICsContributionsForFurloughedEmployees(?float $amountClaimedForEmployerNICsContributionsForFurloughedEmployees): static
    {
        if (is_null($amountClaimedForEmployerNICsContributionsForFurloughedEmployees)) {
            throw new InvalidArgumentException('non-nullable amountClaimedForEmployerNICsContributionsForFurloughedEmployees cannot be null');
        }
        $this->container['amountClaimedForEmployerNICsContributionsForFurloughedEmployees'] = $amountClaimedForEmployerNICsContributionsForFurloughedEmployees;

        return $this;
    }

    /**
     * Gets amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees
     *
     * @return float|null
     */
    public function getAmountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees(): ?float
    {
        return $this->container['amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees'];
    }

    /**
     * Sets amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees
     *
     * @param float|null $amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees
     *
     * @return $this
     */
    public function setAmountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees(?float $amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees): static
    {
        if (is_null($amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees)) {
            throw new InvalidArgumentException('non-nullable amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees cannot be null');
        }
        $this->container['amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees'] = $amountClaimedForEmployersAutoEnrolmentPensionCostsForFurloughedEmployees;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \SynergiTech\Staffology\Model\FurloughReportLine[]|null
     */
    public function getLines(): ?array
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \SynergiTech\Staffology\Model\FurloughReportLine[]|null $lines lines
     *
     * @return $this
     */
    public function setLines(?array $lines): static
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets bankAccountNumber
     *
     * @return string|null
     */
    public function getBankAccountNumber(): ?string
    {
        return $this->container['bankAccountNumber'];
    }

    /**
     * Sets bankAccountNumber
     *
     * @param string|null $bankAccountNumber bankAccountNumber
     *
     * @return $this
     */
    public function setBankAccountNumber(?string $bankAccountNumber): static
    {
        if (is_null($bankAccountNumber)) {
            array_push($this->openAPINullablesSetToNull, 'bankAccountNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAccountNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankAccountNumber'] = $bankAccountNumber;

        return $this;
    }

    /**
     * Gets bankSortCode
     *
     * @return string|null
     */
    public function getBankSortCode(): ?string
    {
        return $this->container['bankSortCode'];
    }

    /**
     * Sets bankSortCode
     *
     * @param string|null $bankSortCode bankSortCode
     *
     * @return $this
     */
    public function setBankSortCode(?string $bankSortCode): static
    {
        if (is_null($bankSortCode)) {
            array_push($this->openAPINullablesSetToNull, 'bankSortCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankSortCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankSortCode'] = $bankSortCode;

        return $this;
    }

    /**
     * Gets bankAccountHoldersFirstName
     *
     * @return string|null
     */
    public function getBankAccountHoldersFirstName(): ?string
    {
        return $this->container['bankAccountHoldersFirstName'];
    }

    /**
     * Sets bankAccountHoldersFirstName
     *
     * @param string|null $bankAccountHoldersFirstName bankAccountHoldersFirstName
     *
     * @return $this
     */
    public function setBankAccountHoldersFirstName(?string $bankAccountHoldersFirstName): static
    {
        if (is_null($bankAccountHoldersFirstName)) {
            array_push($this->openAPINullablesSetToNull, 'bankAccountHoldersFirstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAccountHoldersFirstName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankAccountHoldersFirstName'] = $bankAccountHoldersFirstName;

        return $this;
    }

    /**
     * Gets bankAccountHoldersLastName
     *
     * @return string|null
     */
    public function getBankAccountHoldersLastName(): ?string
    {
        return $this->container['bankAccountHoldersLastName'];
    }

    /**
     * Sets bankAccountHoldersLastName
     *
     * @param string|null $bankAccountHoldersLastName bankAccountHoldersLastName
     *
     * @return $this
     */
    public function setBankAccountHoldersLastName(?string $bankAccountHoldersLastName): static
    {
        if (is_null($bankAccountHoldersLastName)) {
            array_push($this->openAPINullablesSetToNull, 'bankAccountHoldersLastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAccountHoldersLastName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankAccountHoldersLastName'] = $bankAccountHoldersLastName;

        return $this;
    }

    /**
     * Gets bankAccountHoldersAddress
     *
     * @return string|null
     */
    public function getBankAccountHoldersAddress(): ?string
    {
        return $this->container['bankAccountHoldersAddress'];
    }

    /**
     * Sets bankAccountHoldersAddress
     *
     * @param string|null $bankAccountHoldersAddress bankAccountHoldersAddress
     *
     * @return $this
     */
    public function setBankAccountHoldersAddress(?string $bankAccountHoldersAddress): static
    {
        if (is_null($bankAccountHoldersAddress)) {
            array_push($this->openAPINullablesSetToNull, 'bankAccountHoldersAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankAccountHoldersAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankAccountHoldersAddress'] = $bankAccountHoldersAddress;

        return $this;
    }

    /**
     * Gets buildingSocietyRollNumber
     *
     * @return string|null
     */
    public function getBuildingSocietyRollNumber(): ?string
    {
        return $this->container['buildingSocietyRollNumber'];
    }

    /**
     * Sets buildingSocietyRollNumber
     *
     * @param string|null $buildingSocietyRollNumber buildingSocietyRollNumber
     *
     * @return $this
     */
    public function setBuildingSocietyRollNumber(?string $buildingSocietyRollNumber): static
    {
        if (is_null($buildingSocietyRollNumber)) {
            array_push($this->openAPINullablesSetToNull, 'buildingSocietyRollNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingSocietyRollNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingSocietyRollNumber'] = $buildingSocietyRollNumber;

        return $this;
    }

    /**
     * Gets companyAddress
     *
     * @return string|null
     */
    public function getCompanyAddress(): ?string
    {
        return $this->container['companyAddress'];
    }

    /**
     * Sets companyAddress
     *
     * @param string|null $companyAddress companyAddress
     *
     * @return $this
     */
    public function setCompanyAddress(?string $companyAddress): static
    {
        if (is_null($companyAddress)) {
            array_push($this->openAPINullablesSetToNull, 'companyAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyAddress'] = $companyAddress;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string|null
     */
    public function getContactName(): ?string
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string|null $contactName contactName
     *
     * @return $this
     */
    public function setContactName(?string $contactName): static
    {
        if (is_null($contactName)) {
            array_push($this->openAPINullablesSetToNull, 'contactName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets contactNumber
     *
     * @return string|null
     */
    public function getContactNumber(): ?string
    {
        return $this->container['contactNumber'];
    }

    /**
     * Sets contactNumber
     *
     * @param string|null $contactNumber contactNumber
     *
     * @return $this
     */
    public function setContactNumber(?string $contactNumber): static
    {
        if (is_null($contactNumber)) {
            array_push($this->openAPINullablesSetToNull, 'contactNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contactNumber'] = $contactNumber;

        return $this;
    }

    /**
     * Gets employer
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployer(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employer'];
    }

    /**
     * Sets employer
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employer employer
     *
     * @return $this
     */
    public function setEmployer(?\SynergiTech\Staffology\Model\Item $employer): static
    {
        if (is_null($employer)) {
            throw new InvalidArgumentException('non-nullable employer cannot be null');
        }
        $this->container['employer'] = $employer;

        return $this;
    }

    /**
     * Gets payPeriod
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getPayPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['payPeriod'];
    }

    /**
     * Sets payPeriod
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod
     *
     * @return $this
     */
    public function setPayPeriod(?\SynergiTech\Staffology\Model\PayPeriods $payPeriod): static
    {
        if (is_null($payPeriod)) {
            throw new InvalidArgumentException('non-nullable payPeriod cannot be null');
        }
        $this->container['payPeriod'] = $payPeriod;

        return $this;
    }

    /**
     * Gets ordinal
     *
     * @return int|null
     */
    public function getOrdinal(): ?int
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param int|null $ordinal ordinal
     *
     * @return $this
     */
    public function setOrdinal(?int $ordinal): static
    {
        if (is_null($ordinal)) {
            throw new InvalidArgumentException('non-nullable ordinal cannot be null');
        }
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod(): ?int
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period period
     *
     * @return $this
     */
    public function setPeriod(?int $period): static
    {
        if (is_null($period)) {
            throw new InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets periodTo
     *
     * @return int|null
     */
    public function getPeriodTo(): ?int
    {
        return $this->container['periodTo'];
    }

    /**
     * Sets periodTo
     *
     * @param int|null $periodTo periodTo
     *
     * @return $this
     */
    public function setPeriodTo(?int $periodTo): static
    {
        if (is_null($periodTo)) {
            throw new InvalidArgumentException('non-nullable periodTo cannot be null');
        }
        $this->container['periodTo'] = $periodTo;

        return $this;
    }

    /**
     * Gets startPeriodName
     *
     * @return string|null
     */
    public function getStartPeriodName(): ?string
    {
        return $this->container['startPeriodName'];
    }

    /**
     * Sets startPeriodName
     *
     * @param string|null $startPeriodName startPeriodName
     *
     * @return $this
     */
    public function setStartPeriodName(?string $startPeriodName): static
    {
        if (is_null($startPeriodName)) {
            array_push($this->openAPINullablesSetToNull, 'startPeriodName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startPeriodName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startPeriodName'] = $startPeriodName;

        return $this;
    }

    /**
     * Gets endPeriodName
     *
     * @return string|null
     */
    public function getEndPeriodName(): ?string
    {
        return $this->container['endPeriodName'];
    }

    /**
     * Sets endPeriodName
     *
     * @param string|null $endPeriodName endPeriodName
     *
     * @return $this
     */
    public function setEndPeriodName(?string $endPeriodName): static
    {
        if (is_null($endPeriodName)) {
            array_push($this->openAPINullablesSetToNull, 'endPeriodName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endPeriodName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endPeriodName'] = $endPeriodName;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate startDate
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $startDate): static
    {
        if (is_null($startDate)) {
            throw new InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate endDate
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $endDate): static
    {
        if (is_null($endDate)) {
            throw new InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets report
     *
     * @return \SynergiTech\Staffology\Model\Report|null
     */
    public function getReport(): ?\SynergiTech\Staffology\Model\Report
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     *
     * @param \SynergiTech\Staffology\Model\Report|null $report report
     *
     * @return $this
     */
    public function setReport(?\SynergiTech\Staffology\Model\Report $report): static
    {
        if (is_null($report)) {
            throw new InvalidArgumentException('non-nullable report cannot be null');
        }
        $this->container['report'] = $report;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets isDraft
     *
     * @return bool|null
     */
    public function getIsDraft(): ?bool
    {
        return $this->container['isDraft'];
    }

    /**
     * Sets isDraft
     *
     * @param bool|null $isDraft isDraft
     *
     * @return $this
     */
    public function setIsDraft(?bool $isDraft): static
    {
        if (is_null($isDraft)) {
            throw new InvalidArgumentException('non-nullable isDraft cannot be null');
        }
        $this->container['isDraft'] = $isDraft;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


