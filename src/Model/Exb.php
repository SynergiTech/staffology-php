<?php
/**
 * Exb
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Exb Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Exb implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Exb';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'additionsAmount' => 'float',
        'additionsDescription' => 'string',
        'deductionsAmount' => 'float',
        'deductionsDescription' => 'string',
        'employeeCount' => 'int',
        'totalBenefits' => 'float',
        'totalAdjustedBenefits' => 'float',
        'nicsRate' => 'float',
        'nicsPayable' => 'float',
        'expensesAndBenefits' => '\SynergiTech\Staffology\Model\ExpensesAndBenefits',
        'iRmark' => 'string',
        'xml' => 'string',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'employerReferences' => '\SynergiTech\Staffology\Model\EmpRefs',
        'govTalkSubmission' => '\SynergiTech\Staffology\Model\GovTalkSubmission',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'additionsAmount' => 'double',
        'additionsDescription' => null,
        'deductionsAmount' => 'double',
        'deductionsDescription' => null,
        'employeeCount' => 'int32',
        'totalBenefits' => 'double',
        'totalAdjustedBenefits' => 'double',
        'nicsRate' => 'double',
        'nicsPayable' => 'double',
        'expensesAndBenefits' => null,
        'iRmark' => null,
        'xml' => null,
        'taxYear' => null,
        'employerReferences' => null,
        'govTalkSubmission' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'additionsAmount' => false,
        'additionsDescription' => true,
        'deductionsAmount' => false,
        'deductionsDescription' => true,
        'employeeCount' => false,
        'totalBenefits' => false,
        'totalAdjustedBenefits' => false,
        'nicsRate' => false,
        'nicsPayable' => false,
        'expensesAndBenefits' => false,
        'iRmark' => true,
        'xml' => true,
        'taxYear' => false,
        'employerReferences' => false,
        'govTalkSubmission' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'additionsAmount' => 'additionsAmount',
        'additionsDescription' => 'additionsDescription',
        'deductionsAmount' => 'deductionsAmount',
        'deductionsDescription' => 'deductionsDescription',
        'employeeCount' => 'employeeCount',
        'totalBenefits' => 'totalBenefits',
        'totalAdjustedBenefits' => 'totalAdjustedBenefits',
        'nicsRate' => 'nicsRate',
        'nicsPayable' => 'nicsPayable',
        'expensesAndBenefits' => 'expensesAndBenefits',
        'iRmark' => 'iRmark',
        'xml' => 'xml',
        'taxYear' => 'taxYear',
        'employerReferences' => 'employerReferences',
        'govTalkSubmission' => 'govTalkSubmission',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'additionsAmount' => 'setAdditionsAmount',
        'additionsDescription' => 'setAdditionsDescription',
        'deductionsAmount' => 'setDeductionsAmount',
        'deductionsDescription' => 'setDeductionsDescription',
        'employeeCount' => 'setEmployeeCount',
        'totalBenefits' => 'setTotalBenefits',
        'totalAdjustedBenefits' => 'setTotalAdjustedBenefits',
        'nicsRate' => 'setNicsRate',
        'nicsPayable' => 'setNicsPayable',
        'expensesAndBenefits' => 'setExpensesAndBenefits',
        'iRmark' => 'setIRmark',
        'xml' => 'setXml',
        'taxYear' => 'setTaxYear',
        'employerReferences' => 'setEmployerReferences',
        'govTalkSubmission' => 'setGovTalkSubmission',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'additionsAmount' => 'getAdditionsAmount',
        'additionsDescription' => 'getAdditionsDescription',
        'deductionsAmount' => 'getDeductionsAmount',
        'deductionsDescription' => 'getDeductionsDescription',
        'employeeCount' => 'getEmployeeCount',
        'totalBenefits' => 'getTotalBenefits',
        'totalAdjustedBenefits' => 'getTotalAdjustedBenefits',
        'nicsRate' => 'getNicsRate',
        'nicsPayable' => 'getNicsPayable',
        'expensesAndBenefits' => 'getExpensesAndBenefits',
        'iRmark' => 'getIRmark',
        'xml' => 'getXml',
        'taxYear' => 'getTaxYear',
        'employerReferences' => 'getEmployerReferences',
        'govTalkSubmission' => 'getGovTalkSubmission',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additionsAmount', $data ?? [], null);
        $this->setIfExists('additionsDescription', $data ?? [], null);
        $this->setIfExists('deductionsAmount', $data ?? [], null);
        $this->setIfExists('deductionsDescription', $data ?? [], null);
        $this->setIfExists('employeeCount', $data ?? [], null);
        $this->setIfExists('totalBenefits', $data ?? [], null);
        $this->setIfExists('totalAdjustedBenefits', $data ?? [], null);
        $this->setIfExists('nicsRate', $data ?? [], null);
        $this->setIfExists('nicsPayable', $data ?? [], null);
        $this->setIfExists('expensesAndBenefits', $data ?? [], null);
        $this->setIfExists('iRmark', $data ?? [], null);
        $this->setIfExists('xml', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('employerReferences', $data ?? [], null);
        $this->setIfExists('govTalkSubmission', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['additionsDescription']) && (mb_strlen($this->container['additionsDescription']) > 35)) {
            $invalidProperties[] = "invalid value for 'additionsDescription', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['deductionsDescription']) && (mb_strlen($this->container['deductionsDescription']) > 35)) {
            $invalidProperties[] = "invalid value for 'deductionsDescription', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionsAmount
     *
     * @return float|null
     */
    public function getAdditionsAmount(): ?float
    {
        return $this->container['additionsAmount'];
    }

    /**
     * Sets additionsAmount
     *
     * @param float|null $additionsAmount additionsAmount
     *
     * @return $this
     */
    public function setAdditionsAmount(?float $additionsAmount): static
    {
        if (is_null($additionsAmount)) {
            throw new InvalidArgumentException('non-nullable additionsAmount cannot be null');
        }
        $this->container['additionsAmount'] = $additionsAmount;

        return $this;
    }

    /**
     * Gets additionsDescription
     *
     * @return string|null
     */
    public function getAdditionsDescription(): ?string
    {
        return $this->container['additionsDescription'];
    }

    /**
     * Sets additionsDescription
     *
     * @param string|null $additionsDescription additionsDescription
     *
     * @return $this
     */
    public function setAdditionsDescription(?string $additionsDescription): static
    {
        if (is_null($additionsDescription)) {
            array_push($this->openAPINullablesSetToNull, 'additionsDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionsDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additionsDescription) && (mb_strlen($additionsDescription) > 35)) {
            throw new InvalidArgumentException('invalid length for $additionsDescription when calling Exb., must be smaller than or equal to 35.');
        }

        $this->container['additionsDescription'] = $additionsDescription;

        return $this;
    }

    /**
     * Gets deductionsAmount
     *
     * @return float|null
     */
    public function getDeductionsAmount(): ?float
    {
        return $this->container['deductionsAmount'];
    }

    /**
     * Sets deductionsAmount
     *
     * @param float|null $deductionsAmount deductionsAmount
     *
     * @return $this
     */
    public function setDeductionsAmount(?float $deductionsAmount): static
    {
        if (is_null($deductionsAmount)) {
            throw new InvalidArgumentException('non-nullable deductionsAmount cannot be null');
        }
        $this->container['deductionsAmount'] = $deductionsAmount;

        return $this;
    }

    /**
     * Gets deductionsDescription
     *
     * @return string|null
     */
    public function getDeductionsDescription(): ?string
    {
        return $this->container['deductionsDescription'];
    }

    /**
     * Sets deductionsDescription
     *
     * @param string|null $deductionsDescription deductionsDescription
     *
     * @return $this
     */
    public function setDeductionsDescription(?string $deductionsDescription): static
    {
        if (is_null($deductionsDescription)) {
            array_push($this->openAPINullablesSetToNull, 'deductionsDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deductionsDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($deductionsDescription) && (mb_strlen($deductionsDescription) > 35)) {
            throw new InvalidArgumentException('invalid length for $deductionsDescription when calling Exb., must be smaller than or equal to 35.');
        }

        $this->container['deductionsDescription'] = $deductionsDescription;

        return $this;
    }

    /**
     * Gets employeeCount
     *
     * @return int|null
     */
    public function getEmployeeCount(): ?int
    {
        return $this->container['employeeCount'];
    }

    /**
     * Sets employeeCount
     *
     * @param int|null $employeeCount [readonly] The number of employees with a P11D
     *
     * @return $this
     */
    public function setEmployeeCount(?int $employeeCount): static
    {
        if (is_null($employeeCount)) {
            throw new InvalidArgumentException('non-nullable employeeCount cannot be null');
        }
        $this->container['employeeCount'] = $employeeCount;

        return $this;
    }

    /**
     * Gets totalBenefits
     *
     * @return float|null
     */
    public function getTotalBenefits(): ?float
    {
        return $this->container['totalBenefits'];
    }

    /**
     * Sets totalBenefits
     *
     * @param float|null $totalBenefits [readonly] Total value of benefits, not including any deductions or additions
     *
     * @return $this
     */
    public function setTotalBenefits(?float $totalBenefits): static
    {
        if (is_null($totalBenefits)) {
            throw new InvalidArgumentException('non-nullable totalBenefits cannot be null');
        }
        $this->container['totalBenefits'] = $totalBenefits;

        return $this;
    }

    /**
     * Gets totalAdjustedBenefits
     *
     * @return float|null
     */
    public function getTotalAdjustedBenefits(): ?float
    {
        return $this->container['totalAdjustedBenefits'];
    }

    /**
     * Sets totalAdjustedBenefits
     *
     * @param float|null $totalAdjustedBenefits [readonly] Total value of benefits
     *
     * @return $this
     */
    public function setTotalAdjustedBenefits(?float $totalAdjustedBenefits): static
    {
        if (is_null($totalAdjustedBenefits)) {
            throw new InvalidArgumentException('non-nullable totalAdjustedBenefits cannot be null');
        }
        $this->container['totalAdjustedBenefits'] = $totalAdjustedBenefits;

        return $this;
    }

    /**
     * Gets nicsRate
     *
     * @return float|null
     */
    public function getNicsRate(): ?float
    {
        return $this->container['nicsRate'];
    }

    /**
     * Sets nicsRate
     *
     * @param float|null $nicsRate [readonly] The Class 1A NICS Rate
     *
     * @return $this
     */
    public function setNicsRate(?float $nicsRate): static
    {
        if (is_null($nicsRate)) {
            throw new InvalidArgumentException('non-nullable nicsRate cannot be null');
        }
        $this->container['nicsRate'] = $nicsRate;

        return $this;
    }

    /**
     * Gets nicsPayable
     *
     * @return float|null
     */
    public function getNicsPayable(): ?float
    {
        return $this->container['nicsPayable'];
    }

    /**
     * Sets nicsPayable
     *
     * @param float|null $nicsPayable [readonly] NICs Payable
     *
     * @return $this
     */
    public function setNicsPayable(?float $nicsPayable): static
    {
        if (is_null($nicsPayable)) {
            throw new InvalidArgumentException('non-nullable nicsPayable cannot be null');
        }
        $this->container['nicsPayable'] = $nicsPayable;

        return $this;
    }

    /**
     * Gets expensesAndBenefits
     *
     * @return \SynergiTech\Staffology\Model\ExpensesAndBenefits|null
     */
    public function getExpensesAndBenefits(): ?\SynergiTech\Staffology\Model\ExpensesAndBenefits
    {
        return $this->container['expensesAndBenefits'];
    }

    /**
     * Sets expensesAndBenefits
     *
     * @param \SynergiTech\Staffology\Model\ExpensesAndBenefits|null $expensesAndBenefits expensesAndBenefits
     *
     * @return $this
     */
    public function setExpensesAndBenefits(?\SynergiTech\Staffology\Model\ExpensesAndBenefits $expensesAndBenefits): static
    {
        if (is_null($expensesAndBenefits)) {
            throw new InvalidArgumentException('non-nullable expensesAndBenefits cannot be null');
        }
        $this->container['expensesAndBenefits'] = $expensesAndBenefits;

        return $this;
    }

    /**
     * Gets iRmark
     *
     * @return string|null
     */
    public function getIRmark(): ?string
    {
        return $this->container['iRmark'];
    }

    /**
     * Sets iRmark
     *
     * @param string|null $iRmark iRmark
     *
     * @return $this
     */
    public function setIRmark(?string $iRmark): static
    {
        if (is_null($iRmark)) {
            array_push($this->openAPINullablesSetToNull, 'iRmark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iRmark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iRmark'] = $iRmark;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return string|null
     */
    public function getXml(): ?string
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param string|null $xml This property will soon be removed and should not be used.  There is now a dedicated API endpoint for retrieving the XML for a submission.
     *
     * @return $this
     */
    public function setXml(?string $xml): static
    {
        if (is_null($xml)) {
            array_push($this->openAPINullablesSetToNull, 'xml');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xml', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets employerReferences
     *
     * @return \SynergiTech\Staffology\Model\EmpRefs|null
     */
    public function getEmployerReferences(): ?\SynergiTech\Staffology\Model\EmpRefs
    {
        return $this->container['employerReferences'];
    }

    /**
     * Sets employerReferences
     *
     * @param \SynergiTech\Staffology\Model\EmpRefs|null $employerReferences employerReferences
     *
     * @return $this
     */
    public function setEmployerReferences(?\SynergiTech\Staffology\Model\EmpRefs $employerReferences): static
    {
        if (is_null($employerReferences)) {
            throw new InvalidArgumentException('non-nullable employerReferences cannot be null');
        }
        $this->container['employerReferences'] = $employerReferences;

        return $this;
    }

    /**
     * Gets govTalkSubmission
     *
     * @return \SynergiTech\Staffology\Model\GovTalkSubmission|null
     */
    public function getGovTalkSubmission(): ?\SynergiTech\Staffology\Model\GovTalkSubmission
    {
        return $this->container['govTalkSubmission'];
    }

    /**
     * Sets govTalkSubmission
     *
     * @param \SynergiTech\Staffology\Model\GovTalkSubmission|null $govTalkSubmission govTalkSubmission
     *
     * @return $this
     */
    public function setGovTalkSubmission(?\SynergiTech\Staffology\Model\GovTalkSubmission $govTalkSubmission): static
    {
        if (is_null($govTalkSubmission)) {
            throw new InvalidArgumentException('non-nullable govTalkSubmission cannot be null');
        }
        $this->container['govTalkSubmission'] = $govTalkSubmission;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


