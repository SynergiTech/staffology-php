<?php
/**
 * CisVerificationDetails
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * CisVerificationDetails Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CisVerificationDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CisVerificationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'manuallyEntered' => 'bool',
        'matchInsteadOfVerify' => 'bool',
        'number' => 'string',
        'date' => '\DateTime',
        'taxStatus' => '\SynergiTech\Staffology\Model\CISTaxStatus',
        'verificationRequest' => 'string',
        'verificationResponse' => '\SynergiTech\Staffology\Model\CisSubContractor'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'manuallyEntered' => null,
        'matchInsteadOfVerify' => null,
        'number' => null,
        'date' => 'date',
        'taxStatus' => null,
        'verificationRequest' => 'uuid',
        'verificationResponse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'manuallyEntered' => false,
        'matchInsteadOfVerify' => false,
        'number' => true,
        'date' => true,
        'taxStatus' => false,
        'verificationRequest' => true,
        'verificationResponse' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'manuallyEntered' => 'manuallyEntered',
        'matchInsteadOfVerify' => 'matchInsteadOfVerify',
        'number' => 'number',
        'date' => 'date',
        'taxStatus' => 'taxStatus',
        'verificationRequest' => 'verificationRequest',
        'verificationResponse' => 'verificationResponse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'manuallyEntered' => 'setManuallyEntered',
        'matchInsteadOfVerify' => 'setMatchInsteadOfVerify',
        'number' => 'setNumber',
        'date' => 'setDate',
        'taxStatus' => 'setTaxStatus',
        'verificationRequest' => 'setVerificationRequest',
        'verificationResponse' => 'setVerificationResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'manuallyEntered' => 'getManuallyEntered',
        'matchInsteadOfVerify' => 'getMatchInsteadOfVerify',
        'number' => 'getNumber',
        'date' => 'getDate',
        'taxStatus' => 'getTaxStatus',
        'verificationRequest' => 'getVerificationRequest',
        'verificationResponse' => 'getVerificationResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('manuallyEntered', $data ?? [], null);
        $this->setIfExists('matchInsteadOfVerify', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('taxStatus', $data ?? [], null);
        $this->setIfExists('verificationRequest', $data ?? [], null);
        $this->setIfExists('verificationResponse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manuallyEntered
     *
     * @return bool|null
     */
    public function getManuallyEntered(): ?bool
    {
        return $this->container['manuallyEntered'];
    }

    /**
     * Sets manuallyEntered
     *
     * @param bool|null $manuallyEntered manuallyEntered
     *
     * @return $this
     */
    public function setManuallyEntered(?bool $manuallyEntered): static
    {
        if (is_null($manuallyEntered)) {
            throw new InvalidArgumentException('non-nullable manuallyEntered cannot be null');
        }
        $this->container['manuallyEntered'] = $manuallyEntered;

        return $this;
    }

    /**
     * Gets matchInsteadOfVerify
     *
     * @return bool|null
     */
    public function getMatchInsteadOfVerify(): ?bool
    {
        return $this->container['matchInsteadOfVerify'];
    }

    /**
     * Sets matchInsteadOfVerify
     *
     * @param bool|null $matchInsteadOfVerify matchInsteadOfVerify
     *
     * @return $this
     */
    public function setMatchInsteadOfVerify(?bool $matchInsteadOfVerify): static
    {
        if (is_null($matchInsteadOfVerify)) {
            throw new InvalidArgumentException('non-nullable matchInsteadOfVerify cannot be null');
        }
        $this->container['matchInsteadOfVerify'] = $matchInsteadOfVerify;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return $this
     */
    public function setNumber(?string $number): static
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets taxStatus
     *
     * @return \SynergiTech\Staffology\Model\CISTaxStatus|null
     */
    public function getTaxStatus(): ?\SynergiTech\Staffology\Model\CISTaxStatus
    {
        return $this->container['taxStatus'];
    }

    /**
     * Sets taxStatus
     *
     * @param \SynergiTech\Staffology\Model\CISTaxStatus|null $taxStatus taxStatus
     *
     * @return $this
     */
    public function setTaxStatus(?\SynergiTech\Staffology\Model\CISTaxStatus $taxStatus): static
    {
        if (is_null($taxStatus)) {
            throw new InvalidArgumentException('non-nullable taxStatus cannot be null');
        }
        $this->container['taxStatus'] = $taxStatus;

        return $this;
    }

    /**
     * Gets verificationRequest
     *
     * @return string|null
     */
    public function getVerificationRequest(): ?string
    {
        return $this->container['verificationRequest'];
    }

    /**
     * Sets verificationRequest
     *
     * @param string|null $verificationRequest [readonly] If a Verification request has been made for this employee then this will show its ID
     *
     * @return $this
     */
    public function setVerificationRequest(?string $verificationRequest): static
    {
        if (is_null($verificationRequest)) {
            array_push($this->openAPINullablesSetToNull, 'verificationRequest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verificationRequest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verificationRequest'] = $verificationRequest;

        return $this;
    }

    /**
     * Gets verificationResponse
     *
     * @return \SynergiTech\Staffology\Model\CisSubContractor|null
     */
    public function getVerificationResponse(): ?\SynergiTech\Staffology\Model\CisSubContractor
    {
        return $this->container['verificationResponse'];
    }

    /**
     * Sets verificationResponse
     *
     * @param \SynergiTech\Staffology\Model\CisSubContractor|null $verificationResponse verificationResponse
     *
     * @return $this
     */
    public function setVerificationResponse(?\SynergiTech\Staffology\Model\CisSubContractor $verificationResponse): static
    {
        if (is_null($verificationResponse)) {
            throw new InvalidArgumentException('non-nullable verificationResponse cannot be null');
        }
        $this->container['verificationResponse'] = $verificationResponse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


