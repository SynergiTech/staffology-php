<?php
/**
 * ContractEmployerLeaveSettingsRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractEmployerLeaveSettingsRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractEmployerLeaveSettingsRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.EmployerLeaveSettingsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'useDefaultHolidayType' => 'bool',
        'useDefaultAllowanceResetDate' => 'bool',
        'useDefaultAllowance' => 'bool',
        'useDefaultAccruePaymentInLieu' => 'bool',
        'useDefaultAccruePaymentInLieuRate' => 'bool',
        'useDefaultHolidayAccrualBasis' => 'bool',
        'useDefaultAccruePaymentInLieuPayAutomatically' => 'bool',
        'useDefaultAccrueHoursPerDay' => 'bool',
        'useDefaultMaximumAccruePeriod' => 'bool',
        'allowanceResetDate' => '\DateTime',
        'allowance' => 'float',
        'adjustment' => 'float',
        'allowanceUsed' => 'float',
        'allowanceUsedPreviousPeriod' => 'float',
        'allowanceRemaining' => 'float',
        'holidayType' => '\SynergiTech\Staffology\Model\HolidayType',
        'accrueSetAmount' => 'bool',
        'accrueHoursPerDay' => 'float',
        'showAllowanceOnPayslip' => 'bool',
        'showAhpOnPayslip' => 'bool',
        'accruePaymentInLieuRate' => 'float',
        'accruePaymentInLieuAllGrossPay' => 'bool',
        'accruePaymentInLieuPayAutomatically' => 'bool',
        'accruePayCodeSetUniqueId' => 'string',
        'maximumAccruePeriod' => 'float',
        'holidayAccrualBasis' => '\SynergiTech\Staffology\Model\HolidayAccrual',
        'holidayAccrualDefaultRateType' => '\SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType',
        'occupationalSicknessUniqueId' => 'string',
        'accruedPaymentLiability' => 'float',
        'accruedPaymentAdjustment' => 'float',
        'accruedPaymentPaid' => 'float',
        'accruedPaymentBalance' => 'float',
        'accruedHoursAmount' => 'float',
        'accruedHoursAdjustment' => 'float',
        'accruedHoursPaid' => 'float',
        'accruedHoursAmountLastPeriod' => 'float',
        'paidHoursAmountLastPeriod' => 'float',
        'accruedHoursBalance' => 'float',
        'aggregatedServiceDate' => '\DateTime',
        'useAggregatedServiceDate' => 'bool',
        'useDefaultHolidayAccrualDefaultRateType' => 'bool',
        'unauthorisedLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'holidayLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'sickLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'parentalLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'bereavementLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'useDefaultHolidayType' => null,
        'useDefaultAllowanceResetDate' => null,
        'useDefaultAllowance' => null,
        'useDefaultAccruePaymentInLieu' => null,
        'useDefaultAccruePaymentInLieuRate' => null,
        'useDefaultHolidayAccrualBasis' => null,
        'useDefaultAccruePaymentInLieuPayAutomatically' => null,
        'useDefaultAccrueHoursPerDay' => null,
        'useDefaultMaximumAccruePeriod' => null,
        'allowanceResetDate' => 'date',
        'allowance' => 'double',
        'adjustment' => 'double',
        'allowanceUsed' => 'double',
        'allowanceUsedPreviousPeriod' => 'double',
        'allowanceRemaining' => 'double',
        'holidayType' => null,
        'accrueSetAmount' => null,
        'accrueHoursPerDay' => 'double',
        'showAllowanceOnPayslip' => null,
        'showAhpOnPayslip' => null,
        'accruePaymentInLieuRate' => 'double',
        'accruePaymentInLieuAllGrossPay' => null,
        'accruePaymentInLieuPayAutomatically' => null,
        'accruePayCodeSetUniqueId' => 'uuid',
        'maximumAccruePeriod' => 'double',
        'holidayAccrualBasis' => null,
        'holidayAccrualDefaultRateType' => null,
        'occupationalSicknessUniqueId' => 'uuid',
        'accruedPaymentLiability' => 'double',
        'accruedPaymentAdjustment' => 'double',
        'accruedPaymentPaid' => 'double',
        'accruedPaymentBalance' => 'double',
        'accruedHoursAmount' => 'double',
        'accruedHoursAdjustment' => 'double',
        'accruedHoursPaid' => 'double',
        'accruedHoursAmountLastPeriod' => 'double',
        'paidHoursAmountLastPeriod' => 'double',
        'accruedHoursBalance' => 'double',
        'aggregatedServiceDate' => 'date',
        'useAggregatedServiceDate' => null,
        'useDefaultHolidayAccrualDefaultRateType' => null,
        'unauthorisedLeaveProRataRule' => null,
        'holidayLeaveProRataRule' => null,
        'sickLeaveProRataRule' => null,
        'parentalLeaveProRataRule' => null,
        'bereavementLeaveProRataRule' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'useDefaultHolidayType' => false,
        'useDefaultAllowanceResetDate' => false,
        'useDefaultAllowance' => false,
        'useDefaultAccruePaymentInLieu' => false,
        'useDefaultAccruePaymentInLieuRate' => false,
        'useDefaultHolidayAccrualBasis' => false,
        'useDefaultAccruePaymentInLieuPayAutomatically' => false,
        'useDefaultAccrueHoursPerDay' => false,
        'useDefaultMaximumAccruePeriod' => false,
        'allowanceResetDate' => false,
        'allowance' => false,
        'adjustment' => true,
        'allowanceUsed' => false,
        'allowanceUsedPreviousPeriod' => false,
        'allowanceRemaining' => false,
        'holidayType' => false,
        'accrueSetAmount' => false,
        'accrueHoursPerDay' => false,
        'showAllowanceOnPayslip' => false,
        'showAhpOnPayslip' => false,
        'accruePaymentInLieuRate' => false,
        'accruePaymentInLieuAllGrossPay' => false,
        'accruePaymentInLieuPayAutomatically' => false,
        'accruePayCodeSetUniqueId' => true,
        'maximumAccruePeriod' => true,
        'holidayAccrualBasis' => false,
        'holidayAccrualDefaultRateType' => false,
        'occupationalSicknessUniqueId' => true,
        'accruedPaymentLiability' => false,
        'accruedPaymentAdjustment' => false,
        'accruedPaymentPaid' => false,
        'accruedPaymentBalance' => false,
        'accruedHoursAmount' => false,
        'accruedHoursAdjustment' => false,
        'accruedHoursPaid' => false,
        'accruedHoursAmountLastPeriod' => false,
        'paidHoursAmountLastPeriod' => false,
        'accruedHoursBalance' => false,
        'aggregatedServiceDate' => true,
        'useAggregatedServiceDate' => false,
        'useDefaultHolidayAccrualDefaultRateType' => false,
        'unauthorisedLeaveProRataRule' => false,
        'holidayLeaveProRataRule' => false,
        'sickLeaveProRataRule' => false,
        'parentalLeaveProRataRule' => false,
        'bereavementLeaveProRataRule' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'useDefaultHolidayType' => 'useDefaultHolidayType',
        'useDefaultAllowanceResetDate' => 'useDefaultAllowanceResetDate',
        'useDefaultAllowance' => 'useDefaultAllowance',
        'useDefaultAccruePaymentInLieu' => 'useDefaultAccruePaymentInLieu',
        'useDefaultAccruePaymentInLieuRate' => 'useDefaultAccruePaymentInLieuRate',
        'useDefaultHolidayAccrualBasis' => 'useDefaultHolidayAccrualBasis',
        'useDefaultAccruePaymentInLieuPayAutomatically' => 'useDefaultAccruePaymentInLieuPayAutomatically',
        'useDefaultAccrueHoursPerDay' => 'useDefaultAccrueHoursPerDay',
        'useDefaultMaximumAccruePeriod' => 'useDefaultMaximumAccruePeriod',
        'allowanceResetDate' => 'allowanceResetDate',
        'allowance' => 'allowance',
        'adjustment' => 'adjustment',
        'allowanceUsed' => 'allowanceUsed',
        'allowanceUsedPreviousPeriod' => 'allowanceUsedPreviousPeriod',
        'allowanceRemaining' => 'allowanceRemaining',
        'holidayType' => 'holidayType',
        'accrueSetAmount' => 'accrueSetAmount',
        'accrueHoursPerDay' => 'accrueHoursPerDay',
        'showAllowanceOnPayslip' => 'showAllowanceOnPayslip',
        'showAhpOnPayslip' => 'showAhpOnPayslip',
        'accruePaymentInLieuRate' => 'accruePaymentInLieuRate',
        'accruePaymentInLieuAllGrossPay' => 'accruePaymentInLieuAllGrossPay',
        'accruePaymentInLieuPayAutomatically' => 'accruePaymentInLieuPayAutomatically',
        'accruePayCodeSetUniqueId' => 'accruePayCodeSetUniqueId',
        'maximumAccruePeriod' => 'maximumAccruePeriod',
        'holidayAccrualBasis' => 'holidayAccrualBasis',
        'holidayAccrualDefaultRateType' => 'holidayAccrualDefaultRateType',
        'occupationalSicknessUniqueId' => 'occupationalSicknessUniqueId',
        'accruedPaymentLiability' => 'accruedPaymentLiability',
        'accruedPaymentAdjustment' => 'accruedPaymentAdjustment',
        'accruedPaymentPaid' => 'accruedPaymentPaid',
        'accruedPaymentBalance' => 'accruedPaymentBalance',
        'accruedHoursAmount' => 'accruedHoursAmount',
        'accruedHoursAdjustment' => 'accruedHoursAdjustment',
        'accruedHoursPaid' => 'accruedHoursPaid',
        'accruedHoursAmountLastPeriod' => 'accruedHoursAmountLastPeriod',
        'paidHoursAmountLastPeriod' => 'paidHoursAmountLastPeriod',
        'accruedHoursBalance' => 'accruedHoursBalance',
        'aggregatedServiceDate' => 'aggregatedServiceDate',
        'useAggregatedServiceDate' => 'useAggregatedServiceDate',
        'useDefaultHolidayAccrualDefaultRateType' => 'useDefaultHolidayAccrualDefaultRateType',
        'unauthorisedLeaveProRataRule' => 'unauthorisedLeaveProRataRule',
        'holidayLeaveProRataRule' => 'holidayLeaveProRataRule',
        'sickLeaveProRataRule' => 'sickLeaveProRataRule',
        'parentalLeaveProRataRule' => 'parentalLeaveProRataRule',
        'bereavementLeaveProRataRule' => 'bereavementLeaveProRataRule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'useDefaultHolidayType' => 'setUseDefaultHolidayType',
        'useDefaultAllowanceResetDate' => 'setUseDefaultAllowanceResetDate',
        'useDefaultAllowance' => 'setUseDefaultAllowance',
        'useDefaultAccruePaymentInLieu' => 'setUseDefaultAccruePaymentInLieu',
        'useDefaultAccruePaymentInLieuRate' => 'setUseDefaultAccruePaymentInLieuRate',
        'useDefaultHolidayAccrualBasis' => 'setUseDefaultHolidayAccrualBasis',
        'useDefaultAccruePaymentInLieuPayAutomatically' => 'setUseDefaultAccruePaymentInLieuPayAutomatically',
        'useDefaultAccrueHoursPerDay' => 'setUseDefaultAccrueHoursPerDay',
        'useDefaultMaximumAccruePeriod' => 'setUseDefaultMaximumAccruePeriod',
        'allowanceResetDate' => 'setAllowanceResetDate',
        'allowance' => 'setAllowance',
        'adjustment' => 'setAdjustment',
        'allowanceUsed' => 'setAllowanceUsed',
        'allowanceUsedPreviousPeriod' => 'setAllowanceUsedPreviousPeriod',
        'allowanceRemaining' => 'setAllowanceRemaining',
        'holidayType' => 'setHolidayType',
        'accrueSetAmount' => 'setAccrueSetAmount',
        'accrueHoursPerDay' => 'setAccrueHoursPerDay',
        'showAllowanceOnPayslip' => 'setShowAllowanceOnPayslip',
        'showAhpOnPayslip' => 'setShowAhpOnPayslip',
        'accruePaymentInLieuRate' => 'setAccruePaymentInLieuRate',
        'accruePaymentInLieuAllGrossPay' => 'setAccruePaymentInLieuAllGrossPay',
        'accruePaymentInLieuPayAutomatically' => 'setAccruePaymentInLieuPayAutomatically',
        'accruePayCodeSetUniqueId' => 'setAccruePayCodeSetUniqueId',
        'maximumAccruePeriod' => 'setMaximumAccruePeriod',
        'holidayAccrualBasis' => 'setHolidayAccrualBasis',
        'holidayAccrualDefaultRateType' => 'setHolidayAccrualDefaultRateType',
        'occupationalSicknessUniqueId' => 'setOccupationalSicknessUniqueId',
        'accruedPaymentLiability' => 'setAccruedPaymentLiability',
        'accruedPaymentAdjustment' => 'setAccruedPaymentAdjustment',
        'accruedPaymentPaid' => 'setAccruedPaymentPaid',
        'accruedPaymentBalance' => 'setAccruedPaymentBalance',
        'accruedHoursAmount' => 'setAccruedHoursAmount',
        'accruedHoursAdjustment' => 'setAccruedHoursAdjustment',
        'accruedHoursPaid' => 'setAccruedHoursPaid',
        'accruedHoursAmountLastPeriod' => 'setAccruedHoursAmountLastPeriod',
        'paidHoursAmountLastPeriod' => 'setPaidHoursAmountLastPeriod',
        'accruedHoursBalance' => 'setAccruedHoursBalance',
        'aggregatedServiceDate' => 'setAggregatedServiceDate',
        'useAggregatedServiceDate' => 'setUseAggregatedServiceDate',
        'useDefaultHolidayAccrualDefaultRateType' => 'setUseDefaultHolidayAccrualDefaultRateType',
        'unauthorisedLeaveProRataRule' => 'setUnauthorisedLeaveProRataRule',
        'holidayLeaveProRataRule' => 'setHolidayLeaveProRataRule',
        'sickLeaveProRataRule' => 'setSickLeaveProRataRule',
        'parentalLeaveProRataRule' => 'setParentalLeaveProRataRule',
        'bereavementLeaveProRataRule' => 'setBereavementLeaveProRataRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'useDefaultHolidayType' => 'getUseDefaultHolidayType',
        'useDefaultAllowanceResetDate' => 'getUseDefaultAllowanceResetDate',
        'useDefaultAllowance' => 'getUseDefaultAllowance',
        'useDefaultAccruePaymentInLieu' => 'getUseDefaultAccruePaymentInLieu',
        'useDefaultAccruePaymentInLieuRate' => 'getUseDefaultAccruePaymentInLieuRate',
        'useDefaultHolidayAccrualBasis' => 'getUseDefaultHolidayAccrualBasis',
        'useDefaultAccruePaymentInLieuPayAutomatically' => 'getUseDefaultAccruePaymentInLieuPayAutomatically',
        'useDefaultAccrueHoursPerDay' => 'getUseDefaultAccrueHoursPerDay',
        'useDefaultMaximumAccruePeriod' => 'getUseDefaultMaximumAccruePeriod',
        'allowanceResetDate' => 'getAllowanceResetDate',
        'allowance' => 'getAllowance',
        'adjustment' => 'getAdjustment',
        'allowanceUsed' => 'getAllowanceUsed',
        'allowanceUsedPreviousPeriod' => 'getAllowanceUsedPreviousPeriod',
        'allowanceRemaining' => 'getAllowanceRemaining',
        'holidayType' => 'getHolidayType',
        'accrueSetAmount' => 'getAccrueSetAmount',
        'accrueHoursPerDay' => 'getAccrueHoursPerDay',
        'showAllowanceOnPayslip' => 'getShowAllowanceOnPayslip',
        'showAhpOnPayslip' => 'getShowAhpOnPayslip',
        'accruePaymentInLieuRate' => 'getAccruePaymentInLieuRate',
        'accruePaymentInLieuAllGrossPay' => 'getAccruePaymentInLieuAllGrossPay',
        'accruePaymentInLieuPayAutomatically' => 'getAccruePaymentInLieuPayAutomatically',
        'accruePayCodeSetUniqueId' => 'getAccruePayCodeSetUniqueId',
        'maximumAccruePeriod' => 'getMaximumAccruePeriod',
        'holidayAccrualBasis' => 'getHolidayAccrualBasis',
        'holidayAccrualDefaultRateType' => 'getHolidayAccrualDefaultRateType',
        'occupationalSicknessUniqueId' => 'getOccupationalSicknessUniqueId',
        'accruedPaymentLiability' => 'getAccruedPaymentLiability',
        'accruedPaymentAdjustment' => 'getAccruedPaymentAdjustment',
        'accruedPaymentPaid' => 'getAccruedPaymentPaid',
        'accruedPaymentBalance' => 'getAccruedPaymentBalance',
        'accruedHoursAmount' => 'getAccruedHoursAmount',
        'accruedHoursAdjustment' => 'getAccruedHoursAdjustment',
        'accruedHoursPaid' => 'getAccruedHoursPaid',
        'accruedHoursAmountLastPeriod' => 'getAccruedHoursAmountLastPeriod',
        'paidHoursAmountLastPeriod' => 'getPaidHoursAmountLastPeriod',
        'accruedHoursBalance' => 'getAccruedHoursBalance',
        'aggregatedServiceDate' => 'getAggregatedServiceDate',
        'useAggregatedServiceDate' => 'getUseAggregatedServiceDate',
        'useDefaultHolidayAccrualDefaultRateType' => 'getUseDefaultHolidayAccrualDefaultRateType',
        'unauthorisedLeaveProRataRule' => 'getUnauthorisedLeaveProRataRule',
        'holidayLeaveProRataRule' => 'getHolidayLeaveProRataRule',
        'sickLeaveProRataRule' => 'getSickLeaveProRataRule',
        'parentalLeaveProRataRule' => 'getParentalLeaveProRataRule',
        'bereavementLeaveProRataRule' => 'getBereavementLeaveProRataRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('useDefaultHolidayType', $data ?? [], null);
        $this->setIfExists('useDefaultAllowanceResetDate', $data ?? [], null);
        $this->setIfExists('useDefaultAllowance', $data ?? [], null);
        $this->setIfExists('useDefaultAccruePaymentInLieu', $data ?? [], null);
        $this->setIfExists('useDefaultAccruePaymentInLieuRate', $data ?? [], null);
        $this->setIfExists('useDefaultHolidayAccrualBasis', $data ?? [], null);
        $this->setIfExists('useDefaultAccruePaymentInLieuPayAutomatically', $data ?? [], null);
        $this->setIfExists('useDefaultAccrueHoursPerDay', $data ?? [], null);
        $this->setIfExists('useDefaultMaximumAccruePeriod', $data ?? [], null);
        $this->setIfExists('allowanceResetDate', $data ?? [], null);
        $this->setIfExists('allowance', $data ?? [], null);
        $this->setIfExists('adjustment', $data ?? [], null);
        $this->setIfExists('allowanceUsed', $data ?? [], null);
        $this->setIfExists('allowanceUsedPreviousPeriod', $data ?? [], null);
        $this->setIfExists('allowanceRemaining', $data ?? [], null);
        $this->setIfExists('holidayType', $data ?? [], null);
        $this->setIfExists('accrueSetAmount', $data ?? [], null);
        $this->setIfExists('accrueHoursPerDay', $data ?? [], null);
        $this->setIfExists('showAllowanceOnPayslip', $data ?? [], null);
        $this->setIfExists('showAhpOnPayslip', $data ?? [], null);
        $this->setIfExists('accruePaymentInLieuRate', $data ?? [], null);
        $this->setIfExists('accruePaymentInLieuAllGrossPay', $data ?? [], null);
        $this->setIfExists('accruePaymentInLieuPayAutomatically', $data ?? [], null);
        $this->setIfExists('accruePayCodeSetUniqueId', $data ?? [], null);
        $this->setIfExists('maximumAccruePeriod', $data ?? [], null);
        $this->setIfExists('holidayAccrualBasis', $data ?? [], null);
        $this->setIfExists('holidayAccrualDefaultRateType', $data ?? [], null);
        $this->setIfExists('occupationalSicknessUniqueId', $data ?? [], null);
        $this->setIfExists('accruedPaymentLiability', $data ?? [], null);
        $this->setIfExists('accruedPaymentAdjustment', $data ?? [], null);
        $this->setIfExists('accruedPaymentPaid', $data ?? [], null);
        $this->setIfExists('accruedPaymentBalance', $data ?? [], null);
        $this->setIfExists('accruedHoursAmount', $data ?? [], null);
        $this->setIfExists('accruedHoursAdjustment', $data ?? [], null);
        $this->setIfExists('accruedHoursPaid', $data ?? [], null);
        $this->setIfExists('accruedHoursAmountLastPeriod', $data ?? [], null);
        $this->setIfExists('paidHoursAmountLastPeriod', $data ?? [], null);
        $this->setIfExists('accruedHoursBalance', $data ?? [], null);
        $this->setIfExists('aggregatedServiceDate', $data ?? [], null);
        $this->setIfExists('useAggregatedServiceDate', $data ?? [], null);
        $this->setIfExists('useDefaultHolidayAccrualDefaultRateType', $data ?? [], null);
        $this->setIfExists('unauthorisedLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('holidayLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('sickLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('parentalLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('bereavementLeaveProRataRule', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets useDefaultHolidayType
     *
     * @return bool|null
     */
    public function getUseDefaultHolidayType(): ?bool
    {
        return $this->container['useDefaultHolidayType'];
    }

    /**
     * Sets useDefaultHolidayType
     *
     * @param bool|null $useDefaultHolidayType If true then the value for HolidayType comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultHolidayType(?bool $useDefaultHolidayType): static
    {
        if (is_null($useDefaultHolidayType)) {
            throw new InvalidArgumentException('non-nullable useDefaultHolidayType cannot be null');
        }
        $this->container['useDefaultHolidayType'] = $useDefaultHolidayType;

        return $this;
    }

    /**
     * Gets useDefaultAllowanceResetDate
     *
     * @return bool|null
     */
    public function getUseDefaultAllowanceResetDate(): ?bool
    {
        return $this->container['useDefaultAllowanceResetDate'];
    }

    /**
     * Sets useDefaultAllowanceResetDate
     *
     * @param bool|null $useDefaultAllowanceResetDate If true then the value for the AllowanceResetDate comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultAllowanceResetDate(?bool $useDefaultAllowanceResetDate): static
    {
        if (is_null($useDefaultAllowanceResetDate)) {
            throw new InvalidArgumentException('non-nullable useDefaultAllowanceResetDate cannot be null');
        }
        $this->container['useDefaultAllowanceResetDate'] = $useDefaultAllowanceResetDate;

        return $this;
    }

    /**
     * Gets useDefaultAllowance
     *
     * @return bool|null
     */
    public function getUseDefaultAllowance(): ?bool
    {
        return $this->container['useDefaultAllowance'];
    }

    /**
     * Sets useDefaultAllowance
     *
     * @param bool|null $useDefaultAllowance If true then the value for the Allowance comes from the Employer record.  This property only appears if the LeaveSettings if a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultAllowance(?bool $useDefaultAllowance): static
    {
        if (is_null($useDefaultAllowance)) {
            throw new InvalidArgumentException('non-nullable useDefaultAllowance cannot be null');
        }
        $this->container['useDefaultAllowance'] = $useDefaultAllowance;

        return $this;
    }

    /**
     * Gets useDefaultAccruePaymentInLieu
     *
     * @return bool|null
     */
    public function getUseDefaultAccruePaymentInLieu(): ?bool
    {
        return $this->container['useDefaultAccruePaymentInLieu'];
    }

    /**
     * Sets useDefaultAccruePaymentInLieu
     *
     * @param bool|null $useDefaultAccruePaymentInLieu If true then the value for AccruePaymentInLieu comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultAccruePaymentInLieu(?bool $useDefaultAccruePaymentInLieu): static
    {
        if (is_null($useDefaultAccruePaymentInLieu)) {
            throw new InvalidArgumentException('non-nullable useDefaultAccruePaymentInLieu cannot be null');
        }
        $this->container['useDefaultAccruePaymentInLieu'] = $useDefaultAccruePaymentInLieu;

        return $this;
    }

    /**
     * Gets useDefaultAccruePaymentInLieuRate
     *
     * @return bool|null
     */
    public function getUseDefaultAccruePaymentInLieuRate(): ?bool
    {
        return $this->container['useDefaultAccruePaymentInLieuRate'];
    }

    /**
     * Sets useDefaultAccruePaymentInLieuRate
     *
     * @param bool|null $useDefaultAccruePaymentInLieuRate If true then the value for AccruePaymentInLieuRate comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultAccruePaymentInLieuRate(?bool $useDefaultAccruePaymentInLieuRate): static
    {
        if (is_null($useDefaultAccruePaymentInLieuRate)) {
            throw new InvalidArgumentException('non-nullable useDefaultAccruePaymentInLieuRate cannot be null');
        }
        $this->container['useDefaultAccruePaymentInLieuRate'] = $useDefaultAccruePaymentInLieuRate;

        return $this;
    }

    /**
     * Gets useDefaultHolidayAccrualBasis
     *
     * @return bool|null
     */
    public function getUseDefaultHolidayAccrualBasis(): ?bool
    {
        return $this->container['useDefaultHolidayAccrualBasis'];
    }

    /**
     * Sets useDefaultHolidayAccrualBasis
     *
     * @param bool|null $useDefaultHolidayAccrualBasis If true then the value for HolidayAccrualBasis comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultHolidayAccrualBasis(?bool $useDefaultHolidayAccrualBasis): static
    {
        if (is_null($useDefaultHolidayAccrualBasis)) {
            throw new InvalidArgumentException('non-nullable useDefaultHolidayAccrualBasis cannot be null');
        }
        $this->container['useDefaultHolidayAccrualBasis'] = $useDefaultHolidayAccrualBasis;

        return $this;
    }

    /**
     * Gets useDefaultAccruePaymentInLieuPayAutomatically
     *
     * @return bool|null
     */
    public function getUseDefaultAccruePaymentInLieuPayAutomatically(): ?bool
    {
        return $this->container['useDefaultAccruePaymentInLieuPayAutomatically'];
    }

    /**
     * Sets useDefaultAccruePaymentInLieuPayAutomatically
     *
     * @param bool|null $useDefaultAccruePaymentInLieuPayAutomatically If true then the value for AccruePaymentInLieu comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultAccruePaymentInLieuPayAutomatically(?bool $useDefaultAccruePaymentInLieuPayAutomatically): static
    {
        if (is_null($useDefaultAccruePaymentInLieuPayAutomatically)) {
            throw new InvalidArgumentException('non-nullable useDefaultAccruePaymentInLieuPayAutomatically cannot be null');
        }
        $this->container['useDefaultAccruePaymentInLieuPayAutomatically'] = $useDefaultAccruePaymentInLieuPayAutomatically;

        return $this;
    }

    /**
     * Gets useDefaultAccrueHoursPerDay
     *
     * @return bool|null
     */
    public function getUseDefaultAccrueHoursPerDay(): ?bool
    {
        return $this->container['useDefaultAccrueHoursPerDay'];
    }

    /**
     * Sets useDefaultAccrueHoursPerDay
     *
     * @param bool|null $useDefaultAccrueHoursPerDay If true then the value for AccrueHoursPerDay comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultAccrueHoursPerDay(?bool $useDefaultAccrueHoursPerDay): static
    {
        if (is_null($useDefaultAccrueHoursPerDay)) {
            throw new InvalidArgumentException('non-nullable useDefaultAccrueHoursPerDay cannot be null');
        }
        $this->container['useDefaultAccrueHoursPerDay'] = $useDefaultAccrueHoursPerDay;

        return $this;
    }

    /**
     * Gets useDefaultMaximumAccruePeriod
     *
     * @return bool|null
     */
    public function getUseDefaultMaximumAccruePeriod(): ?bool
    {
        return $this->container['useDefaultMaximumAccruePeriod'];
    }

    /**
     * Sets useDefaultMaximumAccruePeriod
     *
     * @param bool|null $useDefaultMaximumAccruePeriod If true then the value for MaximumAccruePeriod comes from the Employer record.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setUseDefaultMaximumAccruePeriod(?bool $useDefaultMaximumAccruePeriod): static
    {
        if (is_null($useDefaultMaximumAccruePeriod)) {
            throw new InvalidArgumentException('non-nullable useDefaultMaximumAccruePeriod cannot be null');
        }
        $this->container['useDefaultMaximumAccruePeriod'] = $useDefaultMaximumAccruePeriod;

        return $this;
    }

    /**
     * Gets allowanceResetDate
     *
     * @return \DateTime|null
     */
    public function getAllowanceResetDate(): ?\DateTime
    {
        return $this->container['allowanceResetDate'];
    }

    /**
     * Sets allowanceResetDate
     *
     * @param \DateTime|null $allowanceResetDate The date that the holiday allowance resets. Only the day/month part of the value is relevant.
     *
     * @return $this
     */
    public function setAllowanceResetDate(?\DateTime $allowanceResetDate): static
    {
        if (is_null($allowanceResetDate)) {
            throw new InvalidArgumentException('non-nullable allowanceResetDate cannot be null');
        }
        $this->container['allowanceResetDate'] = $allowanceResetDate;

        return $this;
    }

    /**
     * Gets allowance
     *
     * @return float|null
     */
    public function getAllowance(): ?float
    {
        return $this->container['allowance'];
    }

    /**
     * Sets allowance
     *
     * @param float|null $allowance The number of days holiday an employee can take per year if HolidayType is Days.  Otherwise this is readonly and gives you the number of days accrued since the last reset
     *
     * @return $this
     */
    public function setAllowance(?float $allowance): static
    {
        if (is_null($allowance)) {
            throw new InvalidArgumentException('non-nullable allowance cannot be null');
        }
        $this->container['allowance'] = $allowance;

        return $this;
    }

    /**
     * Gets adjustment
     *
     * @return float|null
     */
    public function getAdjustment(): ?float
    {
        return $this->container['adjustment'];
    }

    /**
     * Sets adjustment
     *
     * @param float|null $adjustment Adjustment to number of hours/days/weeks holiday this employee can take per year.  Will reset to 0 when the Allowance resets.  This property only appears if the LeaveSettings is a child of an Employee (not of an Employer)
     *
     * @return $this
     */
    public function setAdjustment(?float $adjustment): static
    {
        if (is_null($adjustment)) {
            array_push($this->openAPINullablesSetToNull, 'adjustment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adjustment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adjustment'] = $adjustment;

        return $this;
    }

    /**
     * Gets allowanceUsed
     *
     * @return float|null
     */
    public function getAllowanceUsed(): ?float
    {
        return $this->container['allowanceUsed'];
    }

    /**
     * Sets allowanceUsed
     *
     * @param float|null $allowanceUsed [readonly] The number of days used from the allowance since last reset
     *
     * @return $this
     */
    public function setAllowanceUsed(?float $allowanceUsed): static
    {
        if (is_null($allowanceUsed)) {
            throw new InvalidArgumentException('non-nullable allowanceUsed cannot be null');
        }
        $this->container['allowanceUsed'] = $allowanceUsed;

        return $this;
    }

    /**
     * Gets allowanceUsedPreviousPeriod
     *
     * @return float|null
     */
    public function getAllowanceUsedPreviousPeriod(): ?float
    {
        return $this->container['allowanceUsedPreviousPeriod'];
    }

    /**
     * Sets allowanceUsedPreviousPeriod
     *
     * @param float|null $allowanceUsedPreviousPeriod [readonly] The number of days used in the 12 months prior to the last reset
     *
     * @return $this
     */
    public function setAllowanceUsedPreviousPeriod(?float $allowanceUsedPreviousPeriod): static
    {
        if (is_null($allowanceUsedPreviousPeriod)) {
            throw new InvalidArgumentException('non-nullable allowanceUsedPreviousPeriod cannot be null');
        }
        $this->container['allowanceUsedPreviousPeriod'] = $allowanceUsedPreviousPeriod;

        return $this;
    }

    /**
     * Gets allowanceRemaining
     *
     * @return float|null
     */
    public function getAllowanceRemaining(): ?float
    {
        return $this->container['allowanceRemaining'];
    }

    /**
     * Sets allowanceRemaining
     *
     * @param float|null $allowanceRemaining [readonly] The number of days remaining of the allowance until next reset
     *
     * @return $this
     */
    public function setAllowanceRemaining(?float $allowanceRemaining): static
    {
        if (is_null($allowanceRemaining)) {
            throw new InvalidArgumentException('non-nullable allowanceRemaining cannot be null');
        }
        $this->container['allowanceRemaining'] = $allowanceRemaining;

        return $this;
    }

    /**
     * Gets holidayType
     *
     * @return \SynergiTech\Staffology\Model\HolidayType|null
     */
    public function getHolidayType(): ?\SynergiTech\Staffology\Model\HolidayType
    {
        return $this->container['holidayType'];
    }

    /**
     * Sets holidayType
     *
     * @param \SynergiTech\Staffology\Model\HolidayType|null $holidayType holidayType
     *
     * @return $this
     */
    public function setHolidayType(?\SynergiTech\Staffology\Model\HolidayType $holidayType): static
    {
        if (is_null($holidayType)) {
            throw new InvalidArgumentException('non-nullable holidayType cannot be null');
        }
        $this->container['holidayType'] = $holidayType;

        return $this;
    }

    /**
     * Gets accrueSetAmount
     *
     * @return bool|null
     */
    public function getAccrueSetAmount(): ?bool
    {
        return $this->container['accrueSetAmount'];
    }

    /**
     * Sets accrueSetAmount
     *
     * @param bool|null $accrueSetAmount If true and HolidayType is Accrual_Days then the AccruePaymentInLieuRate will be treated as the set amount to accrue per period worked.
     *
     * @return $this
     */
    public function setAccrueSetAmount(?bool $accrueSetAmount): static
    {
        if (is_null($accrueSetAmount)) {
            throw new InvalidArgumentException('non-nullable accrueSetAmount cannot be null');
        }
        $this->container['accrueSetAmount'] = $accrueSetAmount;

        return $this;
    }

    /**
     * Gets accrueHoursPerDay
     *
     * @return float|null
     */
    public function getAccrueHoursPerDay(): ?float
    {
        return $this->container['accrueHoursPerDay'];
    }

    /**
     * Sets accrueHoursPerDay
     *
     * @param float|null $accrueHoursPerDay If HolidayType is Accrual_Days then this value is used to help convert hours worked into days accrued
     *
     * @return $this
     */
    public function setAccrueHoursPerDay(?float $accrueHoursPerDay): static
    {
        if (is_null($accrueHoursPerDay)) {
            throw new InvalidArgumentException('non-nullable accrueHoursPerDay cannot be null');
        }
        $this->container['accrueHoursPerDay'] = $accrueHoursPerDay;

        return $this;
    }

    /**
     * Gets showAllowanceOnPayslip
     *
     * @return bool|null
     */
    public function getShowAllowanceOnPayslip(): ?bool
    {
        return $this->container['showAllowanceOnPayslip'];
    }

    /**
     * Sets showAllowanceOnPayslip
     *
     * @param bool|null $showAllowanceOnPayslip If true then the remaining Allowance will be shown on the employees payslip.
     *
     * @return $this
     */
    public function setShowAllowanceOnPayslip(?bool $showAllowanceOnPayslip): static
    {
        if (is_null($showAllowanceOnPayslip)) {
            throw new InvalidArgumentException('non-nullable showAllowanceOnPayslip cannot be null');
        }
        $this->container['showAllowanceOnPayslip'] = $showAllowanceOnPayslip;

        return $this;
    }

    /**
     * Gets showAhpOnPayslip
     *
     * @return bool|null
     */
    public function getShowAhpOnPayslip(): ?bool
    {
        return $this->container['showAhpOnPayslip'];
    }

    /**
     * Sets showAhpOnPayslip
     *
     * @param bool|null $showAhpOnPayslip If true then the AHP balance will be shown on the employees payslip.
     *
     * @return $this
     */
    public function setShowAhpOnPayslip(?bool $showAhpOnPayslip): static
    {
        if (is_null($showAhpOnPayslip)) {
            throw new InvalidArgumentException('non-nullable showAhpOnPayslip cannot be null');
        }
        $this->container['showAhpOnPayslip'] = $showAhpOnPayslip;

        return $this;
    }

    /**
     * Gets accruePaymentInLieuRate
     *
     * @return float|null
     */
    public function getAccruePaymentInLieuRate(): ?float
    {
        return $this->container['accruePaymentInLieuRate'];
    }

    /**
     * Sets accruePaymentInLieuRate
     *
     * @param float|null $accruePaymentInLieuRate The rate at which Payments in Lieu acrrue. Typically this should be 12.07%.
     *
     * @return $this
     */
    public function setAccruePaymentInLieuRate(?float $accruePaymentInLieuRate): static
    {
        if (is_null($accruePaymentInLieuRate)) {
            throw new InvalidArgumentException('non-nullable accruePaymentInLieuRate cannot be null');
        }
        $this->container['accruePaymentInLieuRate'] = $accruePaymentInLieuRate;

        return $this;
    }

    /**
     * Gets accruePaymentInLieuAllGrossPay
     *
     * @return bool|null
     */
    public function getAccruePaymentInLieuAllGrossPay(): ?bool
    {
        return $this->container['accruePaymentInLieuAllGrossPay'];
    }

    /**
     * Sets accruePaymentInLieuAllGrossPay
     *
     * @param bool|null $accruePaymentInLieuAllGrossPay Set to true if you want accrued holiday payments to be calculated on the total gross pay for the employee or just on the single regular pay element
     *
     * @return $this
     */
    public function setAccruePaymentInLieuAllGrossPay(?bool $accruePaymentInLieuAllGrossPay): static
    {
        if (is_null($accruePaymentInLieuAllGrossPay)) {
            throw new InvalidArgumentException('non-nullable accruePaymentInLieuAllGrossPay cannot be null');
        }
        $this->container['accruePaymentInLieuAllGrossPay'] = $accruePaymentInLieuAllGrossPay;

        return $this;
    }

    /**
     * Gets accruePaymentInLieuPayAutomatically
     *
     * @return bool|null
     */
    public function getAccruePaymentInLieuPayAutomatically(): ?bool
    {
        return $this->container['accruePaymentInLieuPayAutomatically'];
    }

    /**
     * Sets accruePaymentInLieuPayAutomatically
     *
     * @param bool|null $accruePaymentInLieuPayAutomatically Set to true if you want employees to be automatically paid any outstanding holiday pay
     *
     * @return $this
     */
    public function setAccruePaymentInLieuPayAutomatically(?bool $accruePaymentInLieuPayAutomatically): static
    {
        if (is_null($accruePaymentInLieuPayAutomatically)) {
            throw new InvalidArgumentException('non-nullable accruePaymentInLieuPayAutomatically cannot be null');
        }
        $this->container['accruePaymentInLieuPayAutomatically'] = $accruePaymentInLieuPayAutomatically;

        return $this;
    }

    /**
     * Gets accruePayCodeSetUniqueId
     *
     * @return string|null
     */
    public function getAccruePayCodeSetUniqueId(): ?string
    {
        return $this->container['accruePayCodeSetUniqueId'];
    }

    /**
     * Sets accruePayCodeSetUniqueId
     *
     * @param string|null $accruePayCodeSetUniqueId accruePayCodeSetUniqueId
     *
     * @return $this
     */
    public function setAccruePayCodeSetUniqueId(?string $accruePayCodeSetUniqueId): static
    {
        if (is_null($accruePayCodeSetUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'accruePayCodeSetUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accruePayCodeSetUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accruePayCodeSetUniqueId'] = $accruePayCodeSetUniqueId;

        return $this;
    }

    /**
     * Gets maximumAccruePeriod
     *
     * @return float|null
     */
    public function getMaximumAccruePeriod(): ?float
    {
        return $this->container['maximumAccruePeriod'];
    }

    /**
     * Sets maximumAccruePeriod
     *
     * @param float|null $maximumAccruePeriod The maximum number of hours capable of being accrued in a single period
     *
     * @return $this
     */
    public function setMaximumAccruePeriod(?float $maximumAccruePeriod): static
    {
        if (is_null($maximumAccruePeriod)) {
            array_push($this->openAPINullablesSetToNull, 'maximumAccruePeriod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximumAccruePeriod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maximumAccruePeriod'] = $maximumAccruePeriod;

        return $this;
    }

    /**
     * Gets holidayAccrualBasis
     *
     * @return \SynergiTech\Staffology\Model\HolidayAccrual|null
     */
    public function getHolidayAccrualBasis(): ?\SynergiTech\Staffology\Model\HolidayAccrual
    {
        return $this->container['holidayAccrualBasis'];
    }

    /**
     * Sets holidayAccrualBasis
     *
     * @param \SynergiTech\Staffology\Model\HolidayAccrual|null $holidayAccrualBasis holidayAccrualBasis
     *
     * @return $this
     */
    public function setHolidayAccrualBasis(?\SynergiTech\Staffology\Model\HolidayAccrual $holidayAccrualBasis): static
    {
        if (is_null($holidayAccrualBasis)) {
            throw new InvalidArgumentException('non-nullable holidayAccrualBasis cannot be null');
        }
        $this->container['holidayAccrualBasis'] = $holidayAccrualBasis;

        return $this;
    }

    /**
     * Gets holidayAccrualDefaultRateType
     *
     * @return \SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType|null
     */
    public function getHolidayAccrualDefaultRateType(): ?\SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType
    {
        return $this->container['holidayAccrualDefaultRateType'];
    }

    /**
     * Sets holidayAccrualDefaultRateType
     *
     * @param \SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType|null $holidayAccrualDefaultRateType holidayAccrualDefaultRateType
     *
     * @return $this
     */
    public function setHolidayAccrualDefaultRateType(?\SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType $holidayAccrualDefaultRateType): static
    {
        if (is_null($holidayAccrualDefaultRateType)) {
            throw new InvalidArgumentException('non-nullable holidayAccrualDefaultRateType cannot be null');
        }
        $this->container['holidayAccrualDefaultRateType'] = $holidayAccrualDefaultRateType;

        return $this;
    }

    /**
     * Gets occupationalSicknessUniqueId
     *
     * @return string|null
     */
    public function getOccupationalSicknessUniqueId(): ?string
    {
        return $this->container['occupationalSicknessUniqueId'];
    }

    /**
     * Sets occupationalSicknessUniqueId
     *
     * @param string|null $occupationalSicknessUniqueId occupationalSicknessUniqueId
     *
     * @return $this
     */
    public function setOccupationalSicknessUniqueId(?string $occupationalSicknessUniqueId): static
    {
        if (is_null($occupationalSicknessUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'occupationalSicknessUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('occupationalSicknessUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['occupationalSicknessUniqueId'] = $occupationalSicknessUniqueId;

        return $this;
    }

    /**
     * Gets accruedPaymentLiability
     *
     * @return float|null
     */
    public function getAccruedPaymentLiability(): ?float
    {
        return $this->container['accruedPaymentLiability'];
    }

    /**
     * Sets accruedPaymentLiability
     *
     * @param float|null $accruedPaymentLiability [readonly] The total accrued payments for this employee over the lifetime of their employment so far
     *
     * @return $this
     */
    public function setAccruedPaymentLiability(?float $accruedPaymentLiability): static
    {
        if (is_null($accruedPaymentLiability)) {
            throw new InvalidArgumentException('non-nullable accruedPaymentLiability cannot be null');
        }
        $this->container['accruedPaymentLiability'] = $accruedPaymentLiability;

        return $this;
    }

    /**
     * Gets accruedPaymentAdjustment
     *
     * @return float|null
     */
    public function getAccruedPaymentAdjustment(): ?float
    {
        return $this->container['accruedPaymentAdjustment'];
    }

    /**
     * Sets accruedPaymentAdjustment
     *
     * @param float|null $accruedPaymentAdjustment Any manual adjustment to the total accrued
     *
     * @return $this
     */
    public function setAccruedPaymentAdjustment(?float $accruedPaymentAdjustment): static
    {
        if (is_null($accruedPaymentAdjustment)) {
            throw new InvalidArgumentException('non-nullable accruedPaymentAdjustment cannot be null');
        }
        $this->container['accruedPaymentAdjustment'] = $accruedPaymentAdjustment;

        return $this;
    }

    /**
     * Gets accruedPaymentPaid
     *
     * @return float|null
     */
    public function getAccruedPaymentPaid(): ?float
    {
        return $this->container['accruedPaymentPaid'];
    }

    /**
     * Sets accruedPaymentPaid
     *
     * @param float|null $accruedPaymentPaid [readonly] The Total amount paid to this employee in lieu of holidays
     *
     * @return $this
     */
    public function setAccruedPaymentPaid(?float $accruedPaymentPaid): static
    {
        if (is_null($accruedPaymentPaid)) {
            throw new InvalidArgumentException('non-nullable accruedPaymentPaid cannot be null');
        }
        $this->container['accruedPaymentPaid'] = $accruedPaymentPaid;

        return $this;
    }

    /**
     * Gets accruedPaymentBalance
     *
     * @return float|null
     */
    public function getAccruedPaymentBalance(): ?float
    {
        return $this->container['accruedPaymentBalance'];
    }

    /**
     * Sets accruedPaymentBalance
     *
     * @param float|null $accruedPaymentBalance [readonly] The balance of what is owed to this employee in lieu of holidays
     *
     * @return $this
     */
    public function setAccruedPaymentBalance(?float $accruedPaymentBalance): static
    {
        if (is_null($accruedPaymentBalance)) {
            throw new InvalidArgumentException('non-nullable accruedPaymentBalance cannot be null');
        }
        $this->container['accruedPaymentBalance'] = $accruedPaymentBalance;

        return $this;
    }

    /**
     * Gets accruedHoursAmount
     *
     * @return float|null
     */
    public function getAccruedHoursAmount(): ?float
    {
        return $this->container['accruedHoursAmount'];
    }

    /**
     * Sets accruedHoursAmount
     *
     * @param float|null $accruedHoursAmount [readonly] The total accrued hours for this employee over the lifetime of their employment so far
     *
     * @return $this
     */
    public function setAccruedHoursAmount(?float $accruedHoursAmount): static
    {
        if (is_null($accruedHoursAmount)) {
            throw new InvalidArgumentException('non-nullable accruedHoursAmount cannot be null');
        }
        $this->container['accruedHoursAmount'] = $accruedHoursAmount;

        return $this;
    }

    /**
     * Gets accruedHoursAdjustment
     *
     * @return float|null
     */
    public function getAccruedHoursAdjustment(): ?float
    {
        return $this->container['accruedHoursAdjustment'];
    }

    /**
     * Sets accruedHoursAdjustment
     *
     * @param float|null $accruedHoursAdjustment Any manual adjustment to the total hours accrued
     *
     * @return $this
     */
    public function setAccruedHoursAdjustment(?float $accruedHoursAdjustment): static
    {
        if (is_null($accruedHoursAdjustment)) {
            throw new InvalidArgumentException('non-nullable accruedHoursAdjustment cannot be null');
        }
        $this->container['accruedHoursAdjustment'] = $accruedHoursAdjustment;

        return $this;
    }

    /**
     * Gets accruedHoursPaid
     *
     * @return float|null
     */
    public function getAccruedHoursPaid(): ?float
    {
        return $this->container['accruedHoursPaid'];
    }

    /**
     * Sets accruedHoursPaid
     *
     * @param float|null $accruedHoursPaid [readonly] The Total amount of hours paid to this employee in lieu of holidays
     *
     * @return $this
     */
    public function setAccruedHoursPaid(?float $accruedHoursPaid): static
    {
        if (is_null($accruedHoursPaid)) {
            throw new InvalidArgumentException('non-nullable accruedHoursPaid cannot be null');
        }
        $this->container['accruedHoursPaid'] = $accruedHoursPaid;

        return $this;
    }

    /**
     * Gets accruedHoursAmountLastPeriod
     *
     * @return float|null
     */
    public function getAccruedHoursAmountLastPeriod(): ?float
    {
        return $this->container['accruedHoursAmountLastPeriod'];
    }

    /**
     * Sets accruedHoursAmountLastPeriod
     *
     * @param float|null $accruedHoursAmountLastPeriod [readonly] The total accrued hours for this employee in the last pay period
     *
     * @return $this
     */
    public function setAccruedHoursAmountLastPeriod(?float $accruedHoursAmountLastPeriod): static
    {
        if (is_null($accruedHoursAmountLastPeriod)) {
            throw new InvalidArgumentException('non-nullable accruedHoursAmountLastPeriod cannot be null');
        }
        $this->container['accruedHoursAmountLastPeriod'] = $accruedHoursAmountLastPeriod;

        return $this;
    }

    /**
     * Gets paidHoursAmountLastPeriod
     *
     * @return float|null
     */
    public function getPaidHoursAmountLastPeriod(): ?float
    {
        return $this->container['paidHoursAmountLastPeriod'];
    }

    /**
     * Sets paidHoursAmountLastPeriod
     *
     * @param float|null $paidHoursAmountLastPeriod [readonly] The number of hours paid against the pay code
     *
     * @return $this
     */
    public function setPaidHoursAmountLastPeriod(?float $paidHoursAmountLastPeriod): static
    {
        if (is_null($paidHoursAmountLastPeriod)) {
            throw new InvalidArgumentException('non-nullable paidHoursAmountLastPeriod cannot be null');
        }
        $this->container['paidHoursAmountLastPeriod'] = $paidHoursAmountLastPeriod;

        return $this;
    }

    /**
     * Gets accruedHoursBalance
     *
     * @return float|null
     */
    public function getAccruedHoursBalance(): ?float
    {
        return $this->container['accruedHoursBalance'];
    }

    /**
     * Sets accruedHoursBalance
     *
     * @param float|null $accruedHoursBalance [readonly] The balance of hours owed to this employee in lieu of holidays
     *
     * @return $this
     */
    public function setAccruedHoursBalance(?float $accruedHoursBalance): static
    {
        if (is_null($accruedHoursBalance)) {
            throw new InvalidArgumentException('non-nullable accruedHoursBalance cannot be null');
        }
        $this->container['accruedHoursBalance'] = $accruedHoursBalance;

        return $this;
    }

    /**
     * Gets aggregatedServiceDate
     *
     * @return \DateTime|null
     */
    public function getAggregatedServiceDate(): ?\DateTime
    {
        return $this->container['aggregatedServiceDate'];
    }

    /**
     * Sets aggregatedServiceDate
     *
     * @param \DateTime|null $aggregatedServiceDate aggregatedServiceDate
     *
     * @return $this
     */
    public function setAggregatedServiceDate(?\DateTime $aggregatedServiceDate): static
    {
        if (is_null($aggregatedServiceDate)) {
            array_push($this->openAPINullablesSetToNull, 'aggregatedServiceDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregatedServiceDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregatedServiceDate'] = $aggregatedServiceDate;

        return $this;
    }

    /**
     * Gets useAggregatedServiceDate
     *
     * @return bool|null
     */
    public function getUseAggregatedServiceDate(): ?bool
    {
        return $this->container['useAggregatedServiceDate'];
    }

    /**
     * Sets useAggregatedServiceDate
     *
     * @param bool|null $useAggregatedServiceDate useAggregatedServiceDate
     *
     * @return $this
     */
    public function setUseAggregatedServiceDate(?bool $useAggregatedServiceDate): static
    {
        if (is_null($useAggregatedServiceDate)) {
            throw new InvalidArgumentException('non-nullable useAggregatedServiceDate cannot be null');
        }
        $this->container['useAggregatedServiceDate'] = $useAggregatedServiceDate;

        return $this;
    }

    /**
     * Gets useDefaultHolidayAccrualDefaultRateType
     *
     * @return bool|null
     */
    public function getUseDefaultHolidayAccrualDefaultRateType(): ?bool
    {
        return $this->container['useDefaultHolidayAccrualDefaultRateType'];
    }

    /**
     * Sets useDefaultHolidayAccrualDefaultRateType
     *
     * @param bool|null $useDefaultHolidayAccrualDefaultRateType If true then the value for HolidayAccrualDefaultRateType comes from the Employer record.
     *
     * @return $this
     */
    public function setUseDefaultHolidayAccrualDefaultRateType(?bool $useDefaultHolidayAccrualDefaultRateType): static
    {
        if (is_null($useDefaultHolidayAccrualDefaultRateType)) {
            throw new InvalidArgumentException('non-nullable useDefaultHolidayAccrualDefaultRateType cannot be null');
        }
        $this->container['useDefaultHolidayAccrualDefaultRateType'] = $useDefaultHolidayAccrualDefaultRateType;

        return $this;
    }

    /**
     * Gets unauthorisedLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getUnauthorisedLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['unauthorisedLeaveProRataRule'];
    }

    /**
     * Sets unauthorisedLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $unauthorisedLeaveProRataRule unauthorisedLeaveProRataRule
     *
     * @return $this
     */
    public function setUnauthorisedLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $unauthorisedLeaveProRataRule): static
    {
        if (is_null($unauthorisedLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable unauthorisedLeaveProRataRule cannot be null');
        }
        $this->container['unauthorisedLeaveProRataRule'] = $unauthorisedLeaveProRataRule;

        return $this;
    }

    /**
     * Gets holidayLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getHolidayLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['holidayLeaveProRataRule'];
    }

    /**
     * Sets holidayLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $holidayLeaveProRataRule holidayLeaveProRataRule
     *
     * @return $this
     */
    public function setHolidayLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $holidayLeaveProRataRule): static
    {
        if (is_null($holidayLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable holidayLeaveProRataRule cannot be null');
        }
        $this->container['holidayLeaveProRataRule'] = $holidayLeaveProRataRule;

        return $this;
    }

    /**
     * Gets sickLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getSickLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['sickLeaveProRataRule'];
    }

    /**
     * Sets sickLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $sickLeaveProRataRule sickLeaveProRataRule
     *
     * @return $this
     */
    public function setSickLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $sickLeaveProRataRule): static
    {
        if (is_null($sickLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable sickLeaveProRataRule cannot be null');
        }
        $this->container['sickLeaveProRataRule'] = $sickLeaveProRataRule;

        return $this;
    }

    /**
     * Gets parentalLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getParentalLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['parentalLeaveProRataRule'];
    }

    /**
     * Sets parentalLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $parentalLeaveProRataRule parentalLeaveProRataRule
     *
     * @return $this
     */
    public function setParentalLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $parentalLeaveProRataRule): static
    {
        if (is_null($parentalLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable parentalLeaveProRataRule cannot be null');
        }
        $this->container['parentalLeaveProRataRule'] = $parentalLeaveProRataRule;

        return $this;
    }

    /**
     * Gets bereavementLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getBereavementLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['bereavementLeaveProRataRule'];
    }

    /**
     * Sets bereavementLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $bereavementLeaveProRataRule bereavementLeaveProRataRule
     *
     * @return $this
     */
    public function setBereavementLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $bereavementLeaveProRataRule): static
    {
        if (is_null($bereavementLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable bereavementLeaveProRataRule cannot be null');
        }
        $this->container['bereavementLeaveProRataRule'] = $bereavementLeaveProRataRule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


