<?php
/**
 * ContractJobResponse
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractJobResponse Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractJobResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.JobResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'employerId' => 'string',
        'employerName' => 'string',
        'type' => '\SynergiTech\Staffology\Model\JobType',
        'name' => 'string',
        'outputFormat' => 'string',
        'status' => '\SynergiTech\Staffology\Model\JobStatus',
        'executionStartTime' => '\DateTime',
        'timeInQueue' => 'int',
        'executionTime' => 'int',
        'result' => '\SynergiTech\Staffology\Model\ContractJobResultResponse',
        'createdDate' => '\DateTime',
        'updatedDate' => '\DateTime',
        'requestedByName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'employerId' => 'uuid',
        'employerName' => null,
        'type' => null,
        'name' => null,
        'outputFormat' => null,
        'status' => null,
        'executionStartTime' => 'date',
        'timeInQueue' => 'int32',
        'executionTime' => 'int32',
        'result' => null,
        'createdDate' => 'date',
        'updatedDate' => 'date',
        'requestedByName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employerId' => false,
        'employerName' => true,
        'type' => false,
        'name' => true,
        'outputFormat' => true,
        'status' => false,
        'executionStartTime' => true,
        'timeInQueue' => true,
        'executionTime' => true,
        'result' => false,
        'createdDate' => false,
        'updatedDate' => true,
        'requestedByName' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'employerId' => 'employerId',
        'employerName' => 'employerName',
        'type' => 'type',
        'name' => 'name',
        'outputFormat' => 'outputFormat',
        'status' => 'status',
        'executionStartTime' => 'executionStartTime',
        'timeInQueue' => 'timeInQueue',
        'executionTime' => 'executionTime',
        'result' => 'result',
        'createdDate' => 'createdDate',
        'updatedDate' => 'updatedDate',
        'requestedByName' => 'requestedByName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'employerId' => 'setEmployerId',
        'employerName' => 'setEmployerName',
        'type' => 'setType',
        'name' => 'setName',
        'outputFormat' => 'setOutputFormat',
        'status' => 'setStatus',
        'executionStartTime' => 'setExecutionStartTime',
        'timeInQueue' => 'setTimeInQueue',
        'executionTime' => 'setExecutionTime',
        'result' => 'setResult',
        'createdDate' => 'setCreatedDate',
        'updatedDate' => 'setUpdatedDate',
        'requestedByName' => 'setRequestedByName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'employerId' => 'getEmployerId',
        'employerName' => 'getEmployerName',
        'type' => 'getType',
        'name' => 'getName',
        'outputFormat' => 'getOutputFormat',
        'status' => 'getStatus',
        'executionStartTime' => 'getExecutionStartTime',
        'timeInQueue' => 'getTimeInQueue',
        'executionTime' => 'getExecutionTime',
        'result' => 'getResult',
        'createdDate' => 'getCreatedDate',
        'updatedDate' => 'getUpdatedDate',
        'requestedByName' => 'getRequestedByName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employerId', $data ?? [], null);
        $this->setIfExists('employerName', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('outputFormat', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('executionStartTime', $data ?? [], null);
        $this->setIfExists('timeInQueue', $data ?? [], null);
        $this->setIfExists('executionTime', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('updatedDate', $data ?? [], null);
        $this->setIfExists('requestedByName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Job public Id.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employerId
     *
     * @return string|null
     */
    public function getEmployerId(): ?string
    {
        return $this->container['employerId'];
    }

    /**
     * Sets employerId
     *
     * @param string|null $employerId Employer public Id.
     *
     * @return $this
     */
    public function setEmployerId(?string $employerId): static
    {
        if (is_null($employerId)) {
            throw new InvalidArgumentException('non-nullable employerId cannot be null');
        }
        $this->container['employerId'] = $employerId;

        return $this;
    }

    /**
     * Gets employerName
     *
     * @return string|null
     */
    public function getEmployerName(): ?string
    {
        return $this->container['employerName'];
    }

    /**
     * Sets employerName
     *
     * @param string|null $employerName Employer name.
     *
     * @return $this
     */
    public function setEmployerName(?string $employerName): static
    {
        if (is_null($employerName)) {
            array_push($this->openAPINullablesSetToNull, 'employerName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerName'] = $employerName;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\JobType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\JobType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\JobType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\JobType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The Job name, e.g. uploaded file for Import, or report display name for Report
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets outputFormat
     *
     * @return string|null
     */
    public function getOutputFormat(): ?string
    {
        return $this->container['outputFormat'];
    }

    /**
     * Sets outputFormat
     *
     * @param string|null $outputFormat The Job output format, e.g. json/csv/pdf for Report, or something else for other Job types.
     *
     * @return $this
     */
    public function setOutputFormat(?string $outputFormat): static
    {
        if (is_null($outputFormat)) {
            array_push($this->openAPINullablesSetToNull, 'outputFormat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outputFormat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outputFormat'] = $outputFormat;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SynergiTech\Staffology\Model\JobStatus|null
     */
    public function getStatus(): ?\SynergiTech\Staffology\Model\JobStatus
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SynergiTech\Staffology\Model\JobStatus|null $status status
     *
     * @return $this
     */
    public function setStatus(?\SynergiTech\Staffology\Model\JobStatus $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets executionStartTime
     *
     * @return \DateTime|null
     */
    public function getExecutionStartTime(): ?\DateTime
    {
        return $this->container['executionStartTime'];
    }

    /**
     * Sets executionStartTime
     *
     * @param \DateTime|null $executionStartTime The Job excution start time.
     *
     * @return $this
     */
    public function setExecutionStartTime(?\DateTime $executionStartTime): static
    {
        if (is_null($executionStartTime)) {
            array_push($this->openAPINullablesSetToNull, 'executionStartTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executionStartTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executionStartTime'] = $executionStartTime;

        return $this;
    }

    /**
     * Gets timeInQueue
     *
     * @return int|null
     */
    public function getTimeInQueue(): ?int
    {
        return $this->container['timeInQueue'];
    }

    /**
     * Sets timeInQueue
     *
     * @param int|null $timeInQueue The time the Job spent in the queue before execution in seconds.
     *
     * @return $this
     */
    public function setTimeInQueue(?int $timeInQueue): static
    {
        if (is_null($timeInQueue)) {
            array_push($this->openAPINullablesSetToNull, 'timeInQueue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeInQueue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timeInQueue'] = $timeInQueue;

        return $this;
    }

    /**
     * Gets executionTime
     *
     * @return int|null
     */
    public function getExecutionTime(): ?int
    {
        return $this->container['executionTime'];
    }

    /**
     * Sets executionTime
     *
     * @param int|null $executionTime The time it took the Job to execute in seconds.
     *
     * @return $this
     */
    public function setExecutionTime(?int $executionTime): static
    {
        if (is_null($executionTime)) {
            array_push($this->openAPINullablesSetToNull, 'executionTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executionTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executionTime'] = $executionTime;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \SynergiTech\Staffology\Model\ContractJobResultResponse|null
     */
    public function getResult(): ?\SynergiTech\Staffology\Model\ContractJobResultResponse
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \SynergiTech\Staffology\Model\ContractJobResultResponse|null $result result
     *
     * @return $this
     */
    public function setResult(?\SynergiTech\Staffology\Model\ContractJobResultResponse $result): static
    {
        if (is_null($result)) {
            throw new InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate(): ?\DateTime
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate Job Created date.
     *
     * @return $this
     */
    public function setCreatedDate(?\DateTime $createdDate): static
    {
        if (is_null($createdDate)) {
            throw new InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets updatedDate
     *
     * @return \DateTime|null
     */
    public function getUpdatedDate(): ?\DateTime
    {
        return $this->container['updatedDate'];
    }

    /**
     * Sets updatedDate
     *
     * @param \DateTime|null $updatedDate Job Updated date where applicable.
     *
     * @return $this
     */
    public function setUpdatedDate(?\DateTime $updatedDate): static
    {
        if (is_null($updatedDate)) {
            array_push($this->openAPINullablesSetToNull, 'updatedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedDate'] = $updatedDate;

        return $this;
    }

    /**
     * Gets requestedByName
     *
     * @return string|null
     */
    public function getRequestedByName(): ?string
    {
        return $this->container['requestedByName'];
    }

    /**
     * Sets requestedByName
     *
     * @param string|null $requestedByName The name of the user that requested this job
     *
     * @return $this
     */
    public function setRequestedByName(?string $requestedByName): static
    {
        if (is_null($requestedByName)) {
            array_push($this->openAPINullablesSetToNull, 'requestedByName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requestedByName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requestedByName'] = $requestedByName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


