<?php
/**
 * Fps
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Fps Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Fps implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Fps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'lateReason' => '\SynergiTech\Staffology\Model\FpsLateReason',
        'paymentDate' => '\DateTime',
        'overridePaymentDate' => '\DateTime',
        'employeeCount' => 'int',
        'isCorrection' => 'bool',
        'supersededCount' => 'int',
        'fullPaymentSubmission' => '\SynergiTech\Staffology\Model\FullPaymentSubmission',
        'versions' => '\SynergiTech\Staffology\Model\FpsPriorVersion[]',
        'validationWarnings' => '\SynergiTech\Staffology\Model\RtiValidationWarning[]',
        'iRmark' => 'string',
        'xml' => 'string',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'employerReferences' => '\SynergiTech\Staffology\Model\EmpRefs',
        'govTalkSubmission' => '\SynergiTech\Staffology\Model\GovTalkSubmission',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'lateReason' => null,
        'paymentDate' => 'date',
        'overridePaymentDate' => 'date',
        'employeeCount' => 'int32',
        'isCorrection' => null,
        'supersededCount' => 'int32',
        'fullPaymentSubmission' => null,
        'versions' => null,
        'validationWarnings' => null,
        'iRmark' => null,
        'xml' => null,
        'taxYear' => null,
        'employerReferences' => null,
        'govTalkSubmission' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'lateReason' => false,
        'paymentDate' => false,
        'overridePaymentDate' => true,
        'employeeCount' => false,
        'isCorrection' => false,
        'supersededCount' => false,
        'fullPaymentSubmission' => false,
        'versions' => true,
        'validationWarnings' => true,
        'iRmark' => true,
        'xml' => true,
        'taxYear' => false,
        'employerReferences' => false,
        'govTalkSubmission' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'lateReason' => 'lateReason',
        'paymentDate' => 'paymentDate',
        'overridePaymentDate' => 'overridePaymentDate',
        'employeeCount' => 'employeeCount',
        'isCorrection' => 'isCorrection',
        'supersededCount' => 'supersededCount',
        'fullPaymentSubmission' => 'fullPaymentSubmission',
        'versions' => 'versions',
        'validationWarnings' => 'validationWarnings',
        'iRmark' => 'iRmark',
        'xml' => 'xml',
        'taxYear' => 'taxYear',
        'employerReferences' => 'employerReferences',
        'govTalkSubmission' => 'govTalkSubmission',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'lateReason' => 'setLateReason',
        'paymentDate' => 'setPaymentDate',
        'overridePaymentDate' => 'setOverridePaymentDate',
        'employeeCount' => 'setEmployeeCount',
        'isCorrection' => 'setIsCorrection',
        'supersededCount' => 'setSupersededCount',
        'fullPaymentSubmission' => 'setFullPaymentSubmission',
        'versions' => 'setVersions',
        'validationWarnings' => 'setValidationWarnings',
        'iRmark' => 'setIRmark',
        'xml' => 'setXml',
        'taxYear' => 'setTaxYear',
        'employerReferences' => 'setEmployerReferences',
        'govTalkSubmission' => 'setGovTalkSubmission',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'lateReason' => 'getLateReason',
        'paymentDate' => 'getPaymentDate',
        'overridePaymentDate' => 'getOverridePaymentDate',
        'employeeCount' => 'getEmployeeCount',
        'isCorrection' => 'getIsCorrection',
        'supersededCount' => 'getSupersededCount',
        'fullPaymentSubmission' => 'getFullPaymentSubmission',
        'versions' => 'getVersions',
        'validationWarnings' => 'getValidationWarnings',
        'iRmark' => 'getIRmark',
        'xml' => 'getXml',
        'taxYear' => 'getTaxYear',
        'employerReferences' => 'getEmployerReferences',
        'govTalkSubmission' => 'getGovTalkSubmission',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lateReason', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('overridePaymentDate', $data ?? [], null);
        $this->setIfExists('employeeCount', $data ?? [], null);
        $this->setIfExists('isCorrection', $data ?? [], null);
        $this->setIfExists('supersededCount', $data ?? [], null);
        $this->setIfExists('fullPaymentSubmission', $data ?? [], null);
        $this->setIfExists('versions', $data ?? [], null);
        $this->setIfExists('validationWarnings', $data ?? [], null);
        $this->setIfExists('iRmark', $data ?? [], null);
        $this->setIfExists('xml', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('employerReferences', $data ?? [], null);
        $this->setIfExists('govTalkSubmission', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lateReason
     *
     * @return \SynergiTech\Staffology\Model\FpsLateReason|null
     */
    public function getLateReason(): ?\SynergiTech\Staffology\Model\FpsLateReason
    {
        return $this->container['lateReason'];
    }

    /**
     * Sets lateReason
     *
     * @param \SynergiTech\Staffology\Model\FpsLateReason|null $lateReason lateReason
     *
     * @return $this
     */
    public function setLateReason(?\SynergiTech\Staffology\Model\FpsLateReason $lateReason): static
    {
        if (is_null($lateReason)) {
            throw new InvalidArgumentException('non-nullable lateReason cannot be null');
        }
        $this->container['lateReason'] = $lateReason;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return \DateTime|null
     */
    public function getPaymentDate(): ?\DateTime
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param \DateTime|null $paymentDate paymentDate
     *
     * @return $this
     */
    public function setPaymentDate(?\DateTime $paymentDate): static
    {
        if (is_null($paymentDate)) {
            throw new InvalidArgumentException('non-nullable paymentDate cannot be null');
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets overridePaymentDate
     *
     * @return \DateTime|null
     */
    public function getOverridePaymentDate(): ?\DateTime
    {
        return $this->container['overridePaymentDate'];
    }

    /**
     * Sets overridePaymentDate
     *
     * @param \DateTime|null $overridePaymentDate If a value if provided here then it will be used in place of the actual PaymentDate on the FPS.  The value must fall in to the same Tax Period as the PaymentDate
     *
     * @return $this
     */
    public function setOverridePaymentDate(?\DateTime $overridePaymentDate): static
    {
        if (is_null($overridePaymentDate)) {
            array_push($this->openAPINullablesSetToNull, 'overridePaymentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overridePaymentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overridePaymentDate'] = $overridePaymentDate;

        return $this;
    }

    /**
     * Gets employeeCount
     *
     * @return int|null
     */
    public function getEmployeeCount(): ?int
    {
        return $this->container['employeeCount'];
    }

    /**
     * Sets employeeCount
     *
     * @param int|null $employeeCount employeeCount
     *
     * @return $this
     */
    public function setEmployeeCount(?int $employeeCount): static
    {
        if (is_null($employeeCount)) {
            throw new InvalidArgumentException('non-nullable employeeCount cannot be null');
        }
        $this->container['employeeCount'] = $employeeCount;

        return $this;
    }

    /**
     * Gets isCorrection
     *
     * @return bool|null
     */
    public function getIsCorrection(): ?bool
    {
        return $this->container['isCorrection'];
    }

    /**
     * Sets isCorrection
     *
     * @param bool|null $isCorrection isCorrection
     *
     * @return $this
     */
    public function setIsCorrection(?bool $isCorrection): static
    {
        if (is_null($isCorrection)) {
            throw new InvalidArgumentException('non-nullable isCorrection cannot be null');
        }
        $this->container['isCorrection'] = $isCorrection;

        return $this;
    }

    /**
     * Gets supersededCount
     *
     * @return int|null
     */
    public function getSupersededCount(): ?int
    {
        return $this->container['supersededCount'];
    }

    /**
     * Sets supersededCount
     *
     * @param int|null $supersededCount The number of payments on this FPS that have been superseded by later versions
     *
     * @return $this
     */
    public function setSupersededCount(?int $supersededCount): static
    {
        if (is_null($supersededCount)) {
            throw new InvalidArgumentException('non-nullable supersededCount cannot be null');
        }
        $this->container['supersededCount'] = $supersededCount;

        return $this;
    }

    /**
     * Gets fullPaymentSubmission
     *
     * @return \SynergiTech\Staffology\Model\FullPaymentSubmission|null
     */
    public function getFullPaymentSubmission(): ?\SynergiTech\Staffology\Model\FullPaymentSubmission
    {
        return $this->container['fullPaymentSubmission'];
    }

    /**
     * Sets fullPaymentSubmission
     *
     * @param \SynergiTech\Staffology\Model\FullPaymentSubmission|null $fullPaymentSubmission fullPaymentSubmission
     *
     * @return $this
     */
    public function setFullPaymentSubmission(?\SynergiTech\Staffology\Model\FullPaymentSubmission $fullPaymentSubmission): static
    {
        if (is_null($fullPaymentSubmission)) {
            throw new InvalidArgumentException('non-nullable fullPaymentSubmission cannot be null');
        }
        $this->container['fullPaymentSubmission'] = $fullPaymentSubmission;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \SynergiTech\Staffology\Model\FpsPriorVersion[]|null
     */
    public function getVersions(): ?array
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \SynergiTech\Staffology\Model\FpsPriorVersion[]|null $versions If any of the payments on this FPS appear on another FPS then  then there will be an entry here for each of them.  If there is an entry where the FpsId matches this FPS then that means the FpsEmployee on this Fps  is itself a prior version (ie, it's been superseded)
     *
     * @return $this
     */
    public function setVersions(?array $versions): static
    {
        if (is_null($versions)) {
            array_push($this->openAPINullablesSetToNull, 'versions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets validationWarnings
     *
     * @return \SynergiTech\Staffology\Model\RtiValidationWarning[]|null
     */
    public function getValidationWarnings(): ?array
    {
        return $this->container['validationWarnings'];
    }

    /**
     * Sets validationWarnings
     *
     * @param \SynergiTech\Staffology\Model\RtiValidationWarning[]|null $validationWarnings validationWarnings
     *
     * @return $this
     */
    public function setValidationWarnings(?array $validationWarnings): static
    {
        if (is_null($validationWarnings)) {
            array_push($this->openAPINullablesSetToNull, 'validationWarnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validationWarnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validationWarnings'] = $validationWarnings;

        return $this;
    }

    /**
     * Gets iRmark
     *
     * @return string|null
     */
    public function getIRmark(): ?string
    {
        return $this->container['iRmark'];
    }

    /**
     * Sets iRmark
     *
     * @param string|null $iRmark iRmark
     *
     * @return $this
     */
    public function setIRmark(?string $iRmark): static
    {
        if (is_null($iRmark)) {
            array_push($this->openAPINullablesSetToNull, 'iRmark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iRmark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iRmark'] = $iRmark;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return string|null
     */
    public function getXml(): ?string
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param string|null $xml This property will soon be removed and should not be used.  There is now a dedicated API endpoint for retrieving the XML for a submission.
     *
     * @return $this
     */
    public function setXml(?string $xml): static
    {
        if (is_null($xml)) {
            array_push($this->openAPINullablesSetToNull, 'xml');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xml', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets employerReferences
     *
     * @return \SynergiTech\Staffology\Model\EmpRefs|null
     */
    public function getEmployerReferences(): ?\SynergiTech\Staffology\Model\EmpRefs
    {
        return $this->container['employerReferences'];
    }

    /**
     * Sets employerReferences
     *
     * @param \SynergiTech\Staffology\Model\EmpRefs|null $employerReferences employerReferences
     *
     * @return $this
     */
    public function setEmployerReferences(?\SynergiTech\Staffology\Model\EmpRefs $employerReferences): static
    {
        if (is_null($employerReferences)) {
            throw new InvalidArgumentException('non-nullable employerReferences cannot be null');
        }
        $this->container['employerReferences'] = $employerReferences;

        return $this;
    }

    /**
     * Gets govTalkSubmission
     *
     * @return \SynergiTech\Staffology\Model\GovTalkSubmission|null
     */
    public function getGovTalkSubmission(): ?\SynergiTech\Staffology\Model\GovTalkSubmission
    {
        return $this->container['govTalkSubmission'];
    }

    /**
     * Sets govTalkSubmission
     *
     * @param \SynergiTech\Staffology\Model\GovTalkSubmission|null $govTalkSubmission govTalkSubmission
     *
     * @return $this
     */
    public function setGovTalkSubmission(?\SynergiTech\Staffology\Model\GovTalkSubmission $govTalkSubmission): static
    {
        if (is_null($govTalkSubmission)) {
            throw new InvalidArgumentException('non-nullable govTalkSubmission cannot be null');
        }
        $this->container['govTalkSubmission'] = $govTalkSubmission;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


