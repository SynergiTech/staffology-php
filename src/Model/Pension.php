<?php
/**
 * Pension
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Pension Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Pension implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Pension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'contributionLevelType' => '\SynergiTech\Staffology\Model\PensionContributionLevelType',
        'endDate' => '\DateTime',
        'endReason' => '\SynergiTech\Staffology\Model\PensionEndReason',
        'joinReason' => '\SynergiTech\Staffology\Model\PensionJoinReason',
        'startPayRunEntryId' => 'int',
        'endPayRunEntryId' => 'int',
        'startReportingType' => '\SynergiTech\Staffology\Model\PensionReportingType',
        'endReportingType' => '\SynergiTech\Staffology\Model\PensionReportingType',
        'pensionOpeningBalances' => '\SynergiTech\Staffology\Model\PensionOpeningBalances',
        'reasonForLeaving' => 'string',
        'id' => 'string',
        'pensionSchemeId' => 'string',
        'pensionScheme' => '\SynergiTech\Staffology\Model\PensionScheme',
        'workerGroupId' => 'string',
        'workerGroup' => '\SynergiTech\Staffology\Model\WorkerGroup',
        'startDate' => '\DateTime',
        'memberReferenceNumber' => 'string',
        'overrideContributions' => 'bool',
        'employeeContribution' => 'float',
        'employeeContributionIsPercentage' => 'bool',
        'employerContribution' => 'float',
        'employerContributionIsPercentage' => 'bool',
        'employerContributionTopUpPercentage' => 'float',
        'isAeQualifyingScheme' => 'bool',
        'isTeachersPension' => 'bool',
        'aeStatusAtJoining' => '\SynergiTech\Staffology\Model\AeStatus',
        'externalEmployeeId' => 'string',
        'additionalVoluntaryContribution' => 'float',
        'avcIsPercentage' => 'bool',
        'exitViaProvider' => 'bool',
        'teachersPensionDetails' => '\SynergiTech\Staffology\Model\TeachersPensionDetails',
        'forcedTier' => 'string',
        'forceEnrolment' => 'bool',
        'employerContributionIncludesNiSaving' => 'bool',
        'employerContributionNiSavingPercentage' => 'float',
        'fiftyFiftySchemeMember' => 'bool',
        'associatedEmployeeRoles' => '\SynergiTech\Staffology\Model\Item[]',
        'autoEnrolled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employee' => null,
        'contributionLevelType' => null,
        'endDate' => 'date',
        'endReason' => null,
        'joinReason' => null,
        'startPayRunEntryId' => 'int32',
        'endPayRunEntryId' => 'int32',
        'startReportingType' => null,
        'endReportingType' => null,
        'pensionOpeningBalances' => null,
        'reasonForLeaving' => null,
        'id' => 'uuid',
        'pensionSchemeId' => 'uuid',
        'pensionScheme' => null,
        'workerGroupId' => 'uuid',
        'workerGroup' => null,
        'startDate' => 'date',
        'memberReferenceNumber' => null,
        'overrideContributions' => null,
        'employeeContribution' => 'double',
        'employeeContributionIsPercentage' => null,
        'employerContribution' => 'double',
        'employerContributionIsPercentage' => null,
        'employerContributionTopUpPercentage' => 'double',
        'isAeQualifyingScheme' => null,
        'isTeachersPension' => null,
        'aeStatusAtJoining' => null,
        'externalEmployeeId' => null,
        'additionalVoluntaryContribution' => 'double',
        'avcIsPercentage' => null,
        'exitViaProvider' => null,
        'teachersPensionDetails' => null,
        'forcedTier' => null,
        'forceEnrolment' => null,
        'employerContributionIncludesNiSaving' => null,
        'employerContributionNiSavingPercentage' => 'double',
        'fiftyFiftySchemeMember' => null,
        'associatedEmployeeRoles' => null,
        'autoEnrolled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employee' => false,
        'contributionLevelType' => false,
        'endDate' => true,
        'endReason' => false,
        'joinReason' => false,
        'startPayRunEntryId' => true,
        'endPayRunEntryId' => true,
        'startReportingType' => false,
        'endReportingType' => false,
        'pensionOpeningBalances' => false,
        'reasonForLeaving' => true,
        'id' => false,
        'pensionSchemeId' => false,
        'pensionScheme' => false,
        'workerGroupId' => false,
        'workerGroup' => false,
        'startDate' => false,
        'memberReferenceNumber' => true,
        'overrideContributions' => false,
        'employeeContribution' => false,
        'employeeContributionIsPercentage' => false,
        'employerContribution' => false,
        'employerContributionIsPercentage' => false,
        'employerContributionTopUpPercentage' => false,
        'isAeQualifyingScheme' => false,
        'isTeachersPension' => false,
        'aeStatusAtJoining' => false,
        'externalEmployeeId' => true,
        'additionalVoluntaryContribution' => false,
        'avcIsPercentage' => false,
        'exitViaProvider' => false,
        'teachersPensionDetails' => false,
        'forcedTier' => true,
        'forceEnrolment' => false,
        'employerContributionIncludesNiSaving' => false,
        'employerContributionNiSavingPercentage' => false,
        'fiftyFiftySchemeMember' => false,
        'associatedEmployeeRoles' => true,
        'autoEnrolled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employee' => 'employee',
        'contributionLevelType' => 'contributionLevelType',
        'endDate' => 'endDate',
        'endReason' => 'endReason',
        'joinReason' => 'joinReason',
        'startPayRunEntryId' => 'startPayRunEntryId',
        'endPayRunEntryId' => 'endPayRunEntryId',
        'startReportingType' => 'startReportingType',
        'endReportingType' => 'endReportingType',
        'pensionOpeningBalances' => 'pensionOpeningBalances',
        'reasonForLeaving' => 'reasonForLeaving',
        'id' => 'id',
        'pensionSchemeId' => 'pensionSchemeId',
        'pensionScheme' => 'pensionScheme',
        'workerGroupId' => 'workerGroupId',
        'workerGroup' => 'workerGroup',
        'startDate' => 'startDate',
        'memberReferenceNumber' => 'memberReferenceNumber',
        'overrideContributions' => 'overrideContributions',
        'employeeContribution' => 'employeeContribution',
        'employeeContributionIsPercentage' => 'employeeContributionIsPercentage',
        'employerContribution' => 'employerContribution',
        'employerContributionIsPercentage' => 'employerContributionIsPercentage',
        'employerContributionTopUpPercentage' => 'employerContributionTopUpPercentage',
        'isAeQualifyingScheme' => 'isAeQualifyingScheme',
        'isTeachersPension' => 'isTeachersPension',
        'aeStatusAtJoining' => 'aeStatusAtJoining',
        'externalEmployeeId' => 'externalEmployeeId',
        'additionalVoluntaryContribution' => 'additionalVoluntaryContribution',
        'avcIsPercentage' => 'avcIsPercentage',
        'exitViaProvider' => 'exitViaProvider',
        'teachersPensionDetails' => 'teachersPensionDetails',
        'forcedTier' => 'forcedTier',
        'forceEnrolment' => 'forceEnrolment',
        'employerContributionIncludesNiSaving' => 'employerContributionIncludesNiSaving',
        'employerContributionNiSavingPercentage' => 'employerContributionNiSavingPercentage',
        'fiftyFiftySchemeMember' => 'fiftyFiftySchemeMember',
        'associatedEmployeeRoles' => 'associatedEmployeeRoles',
        'autoEnrolled' => 'autoEnrolled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employee' => 'setEmployee',
        'contributionLevelType' => 'setContributionLevelType',
        'endDate' => 'setEndDate',
        'endReason' => 'setEndReason',
        'joinReason' => 'setJoinReason',
        'startPayRunEntryId' => 'setStartPayRunEntryId',
        'endPayRunEntryId' => 'setEndPayRunEntryId',
        'startReportingType' => 'setStartReportingType',
        'endReportingType' => 'setEndReportingType',
        'pensionOpeningBalances' => 'setPensionOpeningBalances',
        'reasonForLeaving' => 'setReasonForLeaving',
        'id' => 'setId',
        'pensionSchemeId' => 'setPensionSchemeId',
        'pensionScheme' => 'setPensionScheme',
        'workerGroupId' => 'setWorkerGroupId',
        'workerGroup' => 'setWorkerGroup',
        'startDate' => 'setStartDate',
        'memberReferenceNumber' => 'setMemberReferenceNumber',
        'overrideContributions' => 'setOverrideContributions',
        'employeeContribution' => 'setEmployeeContribution',
        'employeeContributionIsPercentage' => 'setEmployeeContributionIsPercentage',
        'employerContribution' => 'setEmployerContribution',
        'employerContributionIsPercentage' => 'setEmployerContributionIsPercentage',
        'employerContributionTopUpPercentage' => 'setEmployerContributionTopUpPercentage',
        'isAeQualifyingScheme' => 'setIsAeQualifyingScheme',
        'isTeachersPension' => 'setIsTeachersPension',
        'aeStatusAtJoining' => 'setAeStatusAtJoining',
        'externalEmployeeId' => 'setExternalEmployeeId',
        'additionalVoluntaryContribution' => 'setAdditionalVoluntaryContribution',
        'avcIsPercentage' => 'setAvcIsPercentage',
        'exitViaProvider' => 'setExitViaProvider',
        'teachersPensionDetails' => 'setTeachersPensionDetails',
        'forcedTier' => 'setForcedTier',
        'forceEnrolment' => 'setForceEnrolment',
        'employerContributionIncludesNiSaving' => 'setEmployerContributionIncludesNiSaving',
        'employerContributionNiSavingPercentage' => 'setEmployerContributionNiSavingPercentage',
        'fiftyFiftySchemeMember' => 'setFiftyFiftySchemeMember',
        'associatedEmployeeRoles' => 'setAssociatedEmployeeRoles',
        'autoEnrolled' => 'setAutoEnrolled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employee' => 'getEmployee',
        'contributionLevelType' => 'getContributionLevelType',
        'endDate' => 'getEndDate',
        'endReason' => 'getEndReason',
        'joinReason' => 'getJoinReason',
        'startPayRunEntryId' => 'getStartPayRunEntryId',
        'endPayRunEntryId' => 'getEndPayRunEntryId',
        'startReportingType' => 'getStartReportingType',
        'endReportingType' => 'getEndReportingType',
        'pensionOpeningBalances' => 'getPensionOpeningBalances',
        'reasonForLeaving' => 'getReasonForLeaving',
        'id' => 'getId',
        'pensionSchemeId' => 'getPensionSchemeId',
        'pensionScheme' => 'getPensionScheme',
        'workerGroupId' => 'getWorkerGroupId',
        'workerGroup' => 'getWorkerGroup',
        'startDate' => 'getStartDate',
        'memberReferenceNumber' => 'getMemberReferenceNumber',
        'overrideContributions' => 'getOverrideContributions',
        'employeeContribution' => 'getEmployeeContribution',
        'employeeContributionIsPercentage' => 'getEmployeeContributionIsPercentage',
        'employerContribution' => 'getEmployerContribution',
        'employerContributionIsPercentage' => 'getEmployerContributionIsPercentage',
        'employerContributionTopUpPercentage' => 'getEmployerContributionTopUpPercentage',
        'isAeQualifyingScheme' => 'getIsAeQualifyingScheme',
        'isTeachersPension' => 'getIsTeachersPension',
        'aeStatusAtJoining' => 'getAeStatusAtJoining',
        'externalEmployeeId' => 'getExternalEmployeeId',
        'additionalVoluntaryContribution' => 'getAdditionalVoluntaryContribution',
        'avcIsPercentage' => 'getAvcIsPercentage',
        'exitViaProvider' => 'getExitViaProvider',
        'teachersPensionDetails' => 'getTeachersPensionDetails',
        'forcedTier' => 'getForcedTier',
        'forceEnrolment' => 'getForceEnrolment',
        'employerContributionIncludesNiSaving' => 'getEmployerContributionIncludesNiSaving',
        'employerContributionNiSavingPercentage' => 'getEmployerContributionNiSavingPercentage',
        'fiftyFiftySchemeMember' => 'getFiftyFiftySchemeMember',
        'associatedEmployeeRoles' => 'getAssociatedEmployeeRoles',
        'autoEnrolled' => 'getAutoEnrolled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('contributionLevelType', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('endReason', $data ?? [], null);
        $this->setIfExists('joinReason', $data ?? [], null);
        $this->setIfExists('startPayRunEntryId', $data ?? [], null);
        $this->setIfExists('endPayRunEntryId', $data ?? [], null);
        $this->setIfExists('startReportingType', $data ?? [], null);
        $this->setIfExists('endReportingType', $data ?? [], null);
        $this->setIfExists('pensionOpeningBalances', $data ?? [], null);
        $this->setIfExists('reasonForLeaving', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('pensionSchemeId', $data ?? [], null);
        $this->setIfExists('pensionScheme', $data ?? [], null);
        $this->setIfExists('workerGroupId', $data ?? [], null);
        $this->setIfExists('workerGroup', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('memberReferenceNumber', $data ?? [], null);
        $this->setIfExists('overrideContributions', $data ?? [], null);
        $this->setIfExists('employeeContribution', $data ?? [], null);
        $this->setIfExists('employeeContributionIsPercentage', $data ?? [], null);
        $this->setIfExists('employerContribution', $data ?? [], null);
        $this->setIfExists('employerContributionIsPercentage', $data ?? [], null);
        $this->setIfExists('employerContributionTopUpPercentage', $data ?? [], null);
        $this->setIfExists('isAeQualifyingScheme', $data ?? [], null);
        $this->setIfExists('isTeachersPension', $data ?? [], null);
        $this->setIfExists('aeStatusAtJoining', $data ?? [], null);
        $this->setIfExists('externalEmployeeId', $data ?? [], null);
        $this->setIfExists('additionalVoluntaryContribution', $data ?? [], null);
        $this->setIfExists('avcIsPercentage', $data ?? [], null);
        $this->setIfExists('exitViaProvider', $data ?? [], null);
        $this->setIfExists('teachersPensionDetails', $data ?? [], null);
        $this->setIfExists('forcedTier', $data ?? [], null);
        $this->setIfExists('forceEnrolment', $data ?? [], null);
        $this->setIfExists('employerContributionIncludesNiSaving', $data ?? [], null);
        $this->setIfExists('employerContributionNiSavingPercentage', $data ?? [], null);
        $this->setIfExists('fiftyFiftySchemeMember', $data ?? [], null);
        $this->setIfExists('associatedEmployeeRoles', $data ?? [], null);
        $this->setIfExists('autoEnrolled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['reasonForLeaving']) && (mb_strlen($this->container['reasonForLeaving']) > 100)) {
            $invalidProperties[] = "invalid value for 'reasonForLeaving', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['memberReferenceNumber']) && (mb_strlen($this->container['memberReferenceNumber']) > 25)) {
            $invalidProperties[] = "invalid value for 'memberReferenceNumber', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets contributionLevelType
     *
     * @return \SynergiTech\Staffology\Model\PensionContributionLevelType|null
     */
    public function getContributionLevelType(): ?\SynergiTech\Staffology\Model\PensionContributionLevelType
    {
        return $this->container['contributionLevelType'];
    }

    /**
     * Sets contributionLevelType
     *
     * @param \SynergiTech\Staffology\Model\PensionContributionLevelType|null $contributionLevelType contributionLevelType
     *
     * @return $this
     */
    public function setContributionLevelType(?\SynergiTech\Staffology\Model\PensionContributionLevelType $contributionLevelType): static
    {
        if (is_null($contributionLevelType)) {
            throw new InvalidArgumentException('non-nullable contributionLevelType cannot be null');
        }
        $this->container['contributionLevelType'] = $contributionLevelType;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The date the employee left the scheme
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $endDate): static
    {
        if (is_null($endDate)) {
            array_push($this->openAPINullablesSetToNull, 'endDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets endReason
     *
     * @return \SynergiTech\Staffology\Model\PensionEndReason|null
     */
    public function getEndReason(): ?\SynergiTech\Staffology\Model\PensionEndReason
    {
        return $this->container['endReason'];
    }

    /**
     * Sets endReason
     *
     * @param \SynergiTech\Staffology\Model\PensionEndReason|null $endReason endReason
     *
     * @return $this
     */
    public function setEndReason(?\SynergiTech\Staffology\Model\PensionEndReason $endReason): static
    {
        if (is_null($endReason)) {
            throw new InvalidArgumentException('non-nullable endReason cannot be null');
        }
        $this->container['endReason'] = $endReason;

        return $this;
    }

    /**
     * Gets joinReason
     *
     * @return \SynergiTech\Staffology\Model\PensionJoinReason|null
     */
    public function getJoinReason(): ?\SynergiTech\Staffology\Model\PensionJoinReason
    {
        return $this->container['joinReason'];
    }

    /**
     * Sets joinReason
     *
     * @param \SynergiTech\Staffology\Model\PensionJoinReason|null $joinReason joinReason
     *
     * @return $this
     */
    public function setJoinReason(?\SynergiTech\Staffology\Model\PensionJoinReason $joinReason): static
    {
        if (is_null($joinReason)) {
            throw new InvalidArgumentException('non-nullable joinReason cannot be null');
        }
        $this->container['joinReason'] = $joinReason;

        return $this;
    }

    /**
     * Gets startPayRunEntryId
     *
     * @return int|null
     */
    public function getStartPayRunEntryId(): ?int
    {
        return $this->container['startPayRunEntryId'];
    }

    /**
     * Sets startPayRunEntryId
     *
     * @param int|null $startPayRunEntryId [readonly] Holds the Id for the payroll that the employee joined the scheme
     *
     * @return $this
     */
    public function setStartPayRunEntryId(?int $startPayRunEntryId): static
    {
        if (is_null($startPayRunEntryId)) {
            array_push($this->openAPINullablesSetToNull, 'startPayRunEntryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startPayRunEntryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startPayRunEntryId'] = $startPayRunEntryId;

        return $this;
    }

    /**
     * Gets endPayRunEntryId
     *
     * @return int|null
     */
    public function getEndPayRunEntryId(): ?int
    {
        return $this->container['endPayRunEntryId'];
    }

    /**
     * Sets endPayRunEntryId
     *
     * @param int|null $endPayRunEntryId [readonly] Holds the Id for the payroll that the employee left the scheme
     *
     * @return $this
     */
    public function setEndPayRunEntryId(?int $endPayRunEntryId): static
    {
        if (is_null($endPayRunEntryId)) {
            array_push($this->openAPINullablesSetToNull, 'endPayRunEntryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endPayRunEntryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endPayRunEntryId'] = $endPayRunEntryId;

        return $this;
    }

    /**
     * Gets startReportingType
     *
     * @return \SynergiTech\Staffology\Model\PensionReportingType|null
     */
    public function getStartReportingType(): ?\SynergiTech\Staffology\Model\PensionReportingType
    {
        return $this->container['startReportingType'];
    }

    /**
     * Sets startReportingType
     *
     * @param \SynergiTech\Staffology\Model\PensionReportingType|null $startReportingType startReportingType
     *
     * @return $this
     */
    public function setStartReportingType(?\SynergiTech\Staffology\Model\PensionReportingType $startReportingType): static
    {
        if (is_null($startReportingType)) {
            throw new InvalidArgumentException('non-nullable startReportingType cannot be null');
        }
        $this->container['startReportingType'] = $startReportingType;

        return $this;
    }

    /**
     * Gets endReportingType
     *
     * @return \SynergiTech\Staffology\Model\PensionReportingType|null
     */
    public function getEndReportingType(): ?\SynergiTech\Staffology\Model\PensionReportingType
    {
        return $this->container['endReportingType'];
    }

    /**
     * Sets endReportingType
     *
     * @param \SynergiTech\Staffology\Model\PensionReportingType|null $endReportingType endReportingType
     *
     * @return $this
     */
    public function setEndReportingType(?\SynergiTech\Staffology\Model\PensionReportingType $endReportingType): static
    {
        if (is_null($endReportingType)) {
            throw new InvalidArgumentException('non-nullable endReportingType cannot be null');
        }
        $this->container['endReportingType'] = $endReportingType;

        return $this;
    }

    /**
     * Gets pensionOpeningBalances
     *
     * @return \SynergiTech\Staffology\Model\PensionOpeningBalances|null
     */
    public function getPensionOpeningBalances(): ?\SynergiTech\Staffology\Model\PensionOpeningBalances
    {
        return $this->container['pensionOpeningBalances'];
    }

    /**
     * Sets pensionOpeningBalances
     *
     * @param \SynergiTech\Staffology\Model\PensionOpeningBalances|null $pensionOpeningBalances pensionOpeningBalances
     *
     * @return $this
     */
    public function setPensionOpeningBalances(?\SynergiTech\Staffology\Model\PensionOpeningBalances $pensionOpeningBalances): static
    {
        if (is_null($pensionOpeningBalances)) {
            throw new InvalidArgumentException('non-nullable pensionOpeningBalances cannot be null');
        }
        $this->container['pensionOpeningBalances'] = $pensionOpeningBalances;

        return $this;
    }

    /**
     * Gets reasonForLeaving
     *
     * @return string|null
     */
    public function getReasonForLeaving(): ?string
    {
        return $this->container['reasonForLeaving'];
    }

    /**
     * Sets reasonForLeaving
     *
     * @param string|null $reasonForLeaving If a value is provided for EndDate then this is the reason for leaving the employee left the scheme
     *
     * @return $this
     */
    public function setReasonForLeaving(?string $reasonForLeaving): static
    {
        if (is_null($reasonForLeaving)) {
            array_push($this->openAPINullablesSetToNull, 'reasonForLeaving');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reasonForLeaving', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reasonForLeaving) && (mb_strlen($reasonForLeaving) > 100)) {
            throw new InvalidArgumentException('invalid length for $reasonForLeaving when calling Pension., must be smaller than or equal to 100.');
        }

        $this->container['reasonForLeaving'] = $reasonForLeaving;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pensionSchemeId
     *
     * @return string|null
     */
    public function getPensionSchemeId(): ?string
    {
        return $this->container['pensionSchemeId'];
    }

    /**
     * Sets pensionSchemeId
     *
     * @param string|null $pensionSchemeId pensionSchemeId
     *
     * @return $this
     */
    public function setPensionSchemeId(?string $pensionSchemeId): static
    {
        if (is_null($pensionSchemeId)) {
            throw new InvalidArgumentException('non-nullable pensionSchemeId cannot be null');
        }
        $this->container['pensionSchemeId'] = $pensionSchemeId;

        return $this;
    }

    /**
     * Gets pensionScheme
     *
     * @return \SynergiTech\Staffology\Model\PensionScheme|null
     */
    public function getPensionScheme(): ?\SynergiTech\Staffology\Model\PensionScheme
    {
        return $this->container['pensionScheme'];
    }

    /**
     * Sets pensionScheme
     *
     * @param \SynergiTech\Staffology\Model\PensionScheme|null $pensionScheme pensionScheme
     *
     * @return $this
     */
    public function setPensionScheme(?\SynergiTech\Staffology\Model\PensionScheme $pensionScheme): static
    {
        if (is_null($pensionScheme)) {
            throw new InvalidArgumentException('non-nullable pensionScheme cannot be null');
        }
        $this->container['pensionScheme'] = $pensionScheme;

        return $this;
    }

    /**
     * Gets workerGroupId
     *
     * @return string|null
     */
    public function getWorkerGroupId(): ?string
    {
        return $this->container['workerGroupId'];
    }

    /**
     * Sets workerGroupId
     *
     * @param string|null $workerGroupId workerGroupId
     *
     * @return $this
     */
    public function setWorkerGroupId(?string $workerGroupId): static
    {
        if (is_null($workerGroupId)) {
            throw new InvalidArgumentException('non-nullable workerGroupId cannot be null');
        }
        $this->container['workerGroupId'] = $workerGroupId;

        return $this;
    }

    /**
     * Gets workerGroup
     *
     * @return \SynergiTech\Staffology\Model\WorkerGroup|null
     */
    public function getWorkerGroup(): ?\SynergiTech\Staffology\Model\WorkerGroup
    {
        return $this->container['workerGroup'];
    }

    /**
     * Sets workerGroup
     *
     * @param \SynergiTech\Staffology\Model\WorkerGroup|null $workerGroup workerGroup
     *
     * @return $this
     */
    public function setWorkerGroup(?\SynergiTech\Staffology\Model\WorkerGroup $workerGroup): static
    {
        if (is_null($workerGroup)) {
            throw new InvalidArgumentException('non-nullable workerGroup cannot be null');
        }
        $this->container['workerGroup'] = $workerGroup;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate startDate
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $startDate): static
    {
        if (is_null($startDate)) {
            throw new InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets memberReferenceNumber
     *
     * @return string|null
     */
    public function getMemberReferenceNumber(): ?string
    {
        return $this->container['memberReferenceNumber'];
    }

    /**
     * Sets memberReferenceNumber
     *
     * @param string|null $memberReferenceNumber memberReferenceNumber
     *
     * @return $this
     */
    public function setMemberReferenceNumber(?string $memberReferenceNumber): static
    {
        if (is_null($memberReferenceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'memberReferenceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memberReferenceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($memberReferenceNumber) && (mb_strlen($memberReferenceNumber) > 25)) {
            throw new InvalidArgumentException('invalid length for $memberReferenceNumber when calling Pension., must be smaller than or equal to 25.');
        }

        $this->container['memberReferenceNumber'] = $memberReferenceNumber;

        return $this;
    }

    /**
     * Gets overrideContributions
     *
     * @return bool|null
     */
    public function getOverrideContributions(): ?bool
    {
        return $this->container['overrideContributions'];
    }

    /**
     * Sets overrideContributions
     *
     * @param bool|null $overrideContributions If this is set to true then the Contributions levels set for the WorkerGroup will be replaced with the values provided here
     *
     * @return $this
     */
    public function setOverrideContributions(?bool $overrideContributions): static
    {
        if (is_null($overrideContributions)) {
            throw new InvalidArgumentException('non-nullable overrideContributions cannot be null');
        }
        $this->container['overrideContributions'] = $overrideContributions;

        return $this;
    }

    /**
     * Gets employeeContribution
     *
     * @return float|null
     */
    public function getEmployeeContribution(): ?float
    {
        return $this->container['employeeContribution'];
    }

    /**
     * Sets employeeContribution
     *
     * @param float|null $employeeContribution The amount the employee contributes towards the pension. Could be a percentage or a fixed amount depending on EmployeeContributionIsPercentage.  This is read-only if OverrideContributions is false
     *
     * @return $this
     */
    public function setEmployeeContribution(?float $employeeContribution): static
    {
        if (is_null($employeeContribution)) {
            throw new InvalidArgumentException('non-nullable employeeContribution cannot be null');
        }
        $this->container['employeeContribution'] = $employeeContribution;

        return $this;
    }

    /**
     * Gets employeeContributionIsPercentage
     *
     * @return bool|null
     */
    public function getEmployeeContributionIsPercentage(): ?bool
    {
        return $this->container['employeeContributionIsPercentage'];
    }

    /**
     * Sets employeeContributionIsPercentage
     *
     * @param bool|null $employeeContributionIsPercentage Determines whether the Value of the EmployeeContribution is a fixed amount or a percentage,
     *
     * @return $this
     */
    public function setEmployeeContributionIsPercentage(?bool $employeeContributionIsPercentage): static
    {
        if (is_null($employeeContributionIsPercentage)) {
            throw new InvalidArgumentException('non-nullable employeeContributionIsPercentage cannot be null');
        }
        $this->container['employeeContributionIsPercentage'] = $employeeContributionIsPercentage;

        return $this;
    }

    /**
     * Gets employerContribution
     *
     * @return float|null
     */
    public function getEmployerContribution(): ?float
    {
        return $this->container['employerContribution'];
    }

    /**
     * Sets employerContribution
     *
     * @param float|null $employerContribution The amount the employer contributes towards the pension. Could be a percentage or a fixed amount depending on EmployerContributionIsPercentage.  This is read-only if OverrideContributions is false
     *
     * @return $this
     */
    public function setEmployerContribution(?float $employerContribution): static
    {
        if (is_null($employerContribution)) {
            throw new InvalidArgumentException('non-nullable employerContribution cannot be null');
        }
        $this->container['employerContribution'] = $employerContribution;

        return $this;
    }

    /**
     * Gets employerContributionIsPercentage
     *
     * @return bool|null
     */
    public function getEmployerContributionIsPercentage(): ?bool
    {
        return $this->container['employerContributionIsPercentage'];
    }

    /**
     * Sets employerContributionIsPercentage
     *
     * @param bool|null $employerContributionIsPercentage Determines whether the Value of the EmployerContribution is a fixed amount or a percentage,
     *
     * @return $this
     */
    public function setEmployerContributionIsPercentage(?bool $employerContributionIsPercentage): static
    {
        if (is_null($employerContributionIsPercentage)) {
            throw new InvalidArgumentException('non-nullable employerContributionIsPercentage cannot be null');
        }
        $this->container['employerContributionIsPercentage'] = $employerContributionIsPercentage;

        return $this;
    }

    /**
     * Gets employerContributionTopUpPercentage
     *
     * @return float|null
     */
    public function getEmployerContributionTopUpPercentage(): ?float
    {
        return $this->container['employerContributionTopUpPercentage'];
    }

    /**
     * Sets employerContributionTopUpPercentage
     *
     * @param float|null $employerContributionTopUpPercentage Increase Employer Contribution by this percentage of the Employee Contribution
     *
     * @return $this
     */
    public function setEmployerContributionTopUpPercentage(?float $employerContributionTopUpPercentage): static
    {
        if (is_null($employerContributionTopUpPercentage)) {
            throw new InvalidArgumentException('non-nullable employerContributionTopUpPercentage cannot be null');
        }
        $this->container['employerContributionTopUpPercentage'] = $employerContributionTopUpPercentage;

        return $this;
    }

    /**
     * Gets isAeQualifyingScheme
     *
     * @return bool|null
     */
    public function getIsAeQualifyingScheme(): ?bool
    {
        return $this->container['isAeQualifyingScheme'];
    }

    /**
     * Sets isAeQualifyingScheme
     *
     * @param bool|null $isAeQualifyingScheme [readonly] Whether or not the associated PensionScheme is a Qualifying Scheme for AutoEnrolment
     *
     * @return $this
     */
    public function setIsAeQualifyingScheme(?bool $isAeQualifyingScheme): static
    {
        if (is_null($isAeQualifyingScheme)) {
            throw new InvalidArgumentException('non-nullable isAeQualifyingScheme cannot be null');
        }
        $this->container['isAeQualifyingScheme'] = $isAeQualifyingScheme;

        return $this;
    }

    /**
     * Gets isTeachersPension
     *
     * @return bool|null
     */
    public function getIsTeachersPension(): ?bool
    {
        return $this->container['isTeachersPension'];
    }

    /**
     * Sets isTeachersPension
     *
     * @param bool|null $isTeachersPension [readonly] Whether or not the associated PensionScheme is a Teachers' Pension (determined by its CsvFormat)
     *
     * @return $this
     */
    public function setIsTeachersPension(?bool $isTeachersPension): static
    {
        if (is_null($isTeachersPension)) {
            throw new InvalidArgumentException('non-nullable isTeachersPension cannot be null');
        }
        $this->container['isTeachersPension'] = $isTeachersPension;

        return $this;
    }

    /**
     * Gets aeStatusAtJoining
     *
     * @return \SynergiTech\Staffology\Model\AeStatus|null
     */
    public function getAeStatusAtJoining(): ?\SynergiTech\Staffology\Model\AeStatus
    {
        return $this->container['aeStatusAtJoining'];
    }

    /**
     * Sets aeStatusAtJoining
     *
     * @param \SynergiTech\Staffology\Model\AeStatus|null $aeStatusAtJoining aeStatusAtJoining
     *
     * @return $this
     */
    public function setAeStatusAtJoining(?\SynergiTech\Staffology\Model\AeStatus $aeStatusAtJoining): static
    {
        if (is_null($aeStatusAtJoining)) {
            throw new InvalidArgumentException('non-nullable aeStatusAtJoining cannot be null');
        }
        $this->container['aeStatusAtJoining'] = $aeStatusAtJoining;

        return $this;
    }

    /**
     * Gets externalEmployeeId
     *
     * @return string|null
     */
    public function getExternalEmployeeId(): ?string
    {
        return $this->container['externalEmployeeId'];
    }

    /**
     * Sets externalEmployeeId
     *
     * @param string|null $externalEmployeeId [readonly]
     *
     * @return $this
     */
    public function setExternalEmployeeId(?string $externalEmployeeId): static
    {
        if (is_null($externalEmployeeId)) {
            array_push($this->openAPINullablesSetToNull, 'externalEmployeeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalEmployeeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalEmployeeId'] = $externalEmployeeId;

        return $this;
    }

    /**
     * Gets additionalVoluntaryContribution
     *
     * @return float|null
     */
    public function getAdditionalVoluntaryContribution(): ?float
    {
        return $this->container['additionalVoluntaryContribution'];
    }

    /**
     * Sets additionalVoluntaryContribution
     *
     * @param float|null $additionalVoluntaryContribution Any additional voluntary amount the employer contributes towards the pension. Could be a percentage or a fixed amount depending on AvcIsPercentage.
     *
     * @return $this
     */
    public function setAdditionalVoluntaryContribution(?float $additionalVoluntaryContribution): static
    {
        if (is_null($additionalVoluntaryContribution)) {
            throw new InvalidArgumentException('non-nullable additionalVoluntaryContribution cannot be null');
        }
        $this->container['additionalVoluntaryContribution'] = $additionalVoluntaryContribution;

        return $this;
    }

    /**
     * Gets avcIsPercentage
     *
     * @return bool|null
     */
    public function getAvcIsPercentage(): ?bool
    {
        return $this->container['avcIsPercentage'];
    }

    /**
     * Sets avcIsPercentage
     *
     * @param bool|null $avcIsPercentage Determines whether the Value of the Additional Voluntary Contribution is a fixed amount or a percentage,
     *
     * @return $this
     */
    public function setAvcIsPercentage(?bool $avcIsPercentage): static
    {
        if (is_null($avcIsPercentage)) {
            throw new InvalidArgumentException('non-nullable avcIsPercentage cannot be null');
        }
        $this->container['avcIsPercentage'] = $avcIsPercentage;

        return $this;
    }

    /**
     * Gets exitViaProvider
     *
     * @return bool|null
     */
    public function getExitViaProvider(): ?bool
    {
        return $this->container['exitViaProvider'];
    }

    /**
     * Sets exitViaProvider
     *
     * @param bool|null $exitViaProvider exitViaProvider
     *
     * @return $this
     */
    public function setExitViaProvider(?bool $exitViaProvider): static
    {
        if (is_null($exitViaProvider)) {
            throw new InvalidArgumentException('non-nullable exitViaProvider cannot be null');
        }
        $this->container['exitViaProvider'] = $exitViaProvider;

        return $this;
    }

    /**
     * Gets teachersPensionDetails
     *
     * @return \SynergiTech\Staffology\Model\TeachersPensionDetails|null
     */
    public function getTeachersPensionDetails(): ?\SynergiTech\Staffology\Model\TeachersPensionDetails
    {
        return $this->container['teachersPensionDetails'];
    }

    /**
     * Sets teachersPensionDetails
     *
     * @param \SynergiTech\Staffology\Model\TeachersPensionDetails|null $teachersPensionDetails teachersPensionDetails
     *
     * @return $this
     */
    public function setTeachersPensionDetails(?\SynergiTech\Staffology\Model\TeachersPensionDetails $teachersPensionDetails): static
    {
        if (is_null($teachersPensionDetails)) {
            throw new InvalidArgumentException('non-nullable teachersPensionDetails cannot be null');
        }
        $this->container['teachersPensionDetails'] = $teachersPensionDetails;

        return $this;
    }

    /**
     * Gets forcedTier
     *
     * @return string|null
     */
    public function getForcedTier(): ?string
    {
        return $this->container['forcedTier'];
    }

    /**
     * Sets forcedTier
     *
     * @param string|null $forcedTier If the WorkerGroup ContributionLevelType is a Tiered Scheme then you can specify the name of the tier to force the employee on to.  If none is specified then the Tier is determined by the earnings in the period
     *
     * @return $this
     */
    public function setForcedTier(?string $forcedTier): static
    {
        if (is_null($forcedTier)) {
            array_push($this->openAPINullablesSetToNull, 'forcedTier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forcedTier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forcedTier'] = $forcedTier;

        return $this;
    }

    /**
     * Gets forceEnrolment
     *
     * @return bool|null
     */
    public function getForceEnrolment(): ?bool
    {
        return $this->container['forceEnrolment'];
    }

    /**
     * Sets forceEnrolment
     *
     * @param bool|null $forceEnrolment If the PensionScheme is connected to an ExternalDataProvider that supports enrolment then setting this to true will force this employee to be enrolled with the next submission.
     *
     * @return $this
     */
    public function setForceEnrolment(?bool $forceEnrolment): static
    {
        if (is_null($forceEnrolment)) {
            throw new InvalidArgumentException('non-nullable forceEnrolment cannot be null');
        }
        $this->container['forceEnrolment'] = $forceEnrolment;

        return $this;
    }

    /**
     * Gets employerContributionIncludesNiSaving
     *
     * @return bool|null
     */
    public function getEmployerContributionIncludesNiSaving(): ?bool
    {
        return $this->container['employerContributionIncludesNiSaving'];
    }

    /**
     * Sets employerContributionIncludesNiSaving
     *
     * @param bool|null $employerContributionIncludesNiSaving Employer Contribution includes the Employers NI saving
     *
     * @return $this
     */
    public function setEmployerContributionIncludesNiSaving(?bool $employerContributionIncludesNiSaving): static
    {
        if (is_null($employerContributionIncludesNiSaving)) {
            throw new InvalidArgumentException('non-nullable employerContributionIncludesNiSaving cannot be null');
        }
        $this->container['employerContributionIncludesNiSaving'] = $employerContributionIncludesNiSaving;

        return $this;
    }

    /**
     * Gets employerContributionNiSavingPercentage
     *
     * @return float|null
     */
    public function getEmployerContributionNiSavingPercentage(): ?float
    {
        return $this->container['employerContributionNiSavingPercentage'];
    }

    /**
     * Sets employerContributionNiSavingPercentage
     *
     * @param float|null $employerContributionNiSavingPercentage Increase Employer Contribution by this percentage of the Employers NI saving
     *
     * @return $this
     */
    public function setEmployerContributionNiSavingPercentage(?float $employerContributionNiSavingPercentage): static
    {
        if (is_null($employerContributionNiSavingPercentage)) {
            throw new InvalidArgumentException('non-nullable employerContributionNiSavingPercentage cannot be null');
        }
        $this->container['employerContributionNiSavingPercentage'] = $employerContributionNiSavingPercentage;

        return $this;
    }

    /**
     * Gets fiftyFiftySchemeMember
     *
     * @return bool|null
     */
    public function getFiftyFiftySchemeMember(): ?bool
    {
        return $this->container['fiftyFiftySchemeMember'];
    }

    /**
     * Sets fiftyFiftySchemeMember
     *
     * @param bool|null $fiftyFiftySchemeMember if an employee as a member of the 50/50 LGPS scheme, they can enable contribution to 50% of the normal contributions.
     *
     * @return $this
     */
    public function setFiftyFiftySchemeMember(?bool $fiftyFiftySchemeMember): static
    {
        if (is_null($fiftyFiftySchemeMember)) {
            throw new InvalidArgumentException('non-nullable fiftyFiftySchemeMember cannot be null');
        }
        $this->container['fiftyFiftySchemeMember'] = $fiftyFiftySchemeMember;

        return $this;
    }

    /**
     * Gets associatedEmployeeRoles
     *
     * @return \SynergiTech\Staffology\Model\Item[]|null
     */
    public function getAssociatedEmployeeRoles(): ?array
    {
        return $this->container['associatedEmployeeRoles'];
    }

    /**
     * Sets associatedEmployeeRoles
     *
     * @param \SynergiTech\Staffology\Model\Item[]|null $associatedEmployeeRoles The list of employee roles associated with the pension membership
     *
     * @return $this
     */
    public function setAssociatedEmployeeRoles(?array $associatedEmployeeRoles): static
    {
        if (is_null($associatedEmployeeRoles)) {
            array_push($this->openAPINullablesSetToNull, 'associatedEmployeeRoles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('associatedEmployeeRoles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['associatedEmployeeRoles'] = $associatedEmployeeRoles;

        return $this;
    }

    /**
     * Gets autoEnrolled
     *
     * @return bool|null
     */
    public function getAutoEnrolled(): ?bool
    {
        return $this->container['autoEnrolled'];
    }

    /**
     * Sets autoEnrolled
     *
     * @param bool|null $autoEnrolled [readonly] Is True if the employee joined this Pension due to an AutoEnrolment action
     *
     * @return $this
     */
    public function setAutoEnrolled(?bool $autoEnrolled): static
    {
        if (is_null($autoEnrolled)) {
            throw new InvalidArgumentException('non-nullable autoEnrolled cannot be null');
        }
        $this->container['autoEnrolled'] = $autoEnrolled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


