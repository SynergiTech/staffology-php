<?php
/**
 * PaySchedulePeriodEventsConfig
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PaySchedulePeriodEventsConfig Class Doc Comment
 *
 * @description Only applicable if Bureau functionality is enabled. Defines the number of days each event occurs before the Payment Date.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PaySchedulePeriodEventsConfig implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PaySchedule_periodEventsConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'submitForProcessing' => 'int',
        'sendForApproval' => 'int',
        'approval' => 'int',
        'finalise' => 'int',
        'sendPaySlip' => 'int',
        'submitRti' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'submitForProcessing' => 'int32',
        'sendForApproval' => 'int32',
        'approval' => 'int32',
        'finalise' => 'int32',
        'sendPaySlip' => 'int32',
        'submitRti' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'submitForProcessing' => false,
        'sendForApproval' => false,
        'approval' => false,
        'finalise' => false,
        'sendPaySlip' => false,
        'submitRti' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'submitForProcessing' => 'SubmitForProcessing',
        'sendForApproval' => 'SendForApproval',
        'approval' => 'Approval',
        'finalise' => 'Finalise',
        'sendPaySlip' => 'SendPaySlip',
        'submitRti' => 'SubmitRti'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'submitForProcessing' => 'setSubmitForProcessing',
        'sendForApproval' => 'setSendForApproval',
        'approval' => 'setApproval',
        'finalise' => 'setFinalise',
        'sendPaySlip' => 'setSendPaySlip',
        'submitRti' => 'setSubmitRti'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'submitForProcessing' => 'getSubmitForProcessing',
        'sendForApproval' => 'getSendForApproval',
        'approval' => 'getApproval',
        'finalise' => 'getFinalise',
        'sendPaySlip' => 'getSendPaySlip',
        'submitRti' => 'getSubmitRti'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('submitForProcessing', $data ?? [], null);
        $this->setIfExists('sendForApproval', $data ?? [], null);
        $this->setIfExists('approval', $data ?? [], null);
        $this->setIfExists('finalise', $data ?? [], null);
        $this->setIfExists('sendPaySlip', $data ?? [], null);
        $this->setIfExists('submitRti', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets submitForProcessing
     *
     * @return int|null
     */
    public function getSubmitForProcessing(): ?int
    {
        return $this->container['submitForProcessing'];
    }

    /**
     * Sets submitForProcessing
     *
     * @param int|null $submitForProcessing submitForProcessing
     *
     * @return $this
     */
    public function setSubmitForProcessing(?int $submitForProcessing): static
    {
        if (is_null($submitForProcessing)) {
            throw new InvalidArgumentException('non-nullable submitForProcessing cannot be null');
        }
        $this->container['submitForProcessing'] = $submitForProcessing;

        return $this;
    }

    /**
     * Gets sendForApproval
     *
     * @return int|null
     */
    public function getSendForApproval(): ?int
    {
        return $this->container['sendForApproval'];
    }

    /**
     * Sets sendForApproval
     *
     * @param int|null $sendForApproval sendForApproval
     *
     * @return $this
     */
    public function setSendForApproval(?int $sendForApproval): static
    {
        if (is_null($sendForApproval)) {
            throw new InvalidArgumentException('non-nullable sendForApproval cannot be null');
        }
        $this->container['sendForApproval'] = $sendForApproval;

        return $this;
    }

    /**
     * Gets approval
     *
     * @return int|null
     */
    public function getApproval(): ?int
    {
        return $this->container['approval'];
    }

    /**
     * Sets approval
     *
     * @param int|null $approval approval
     *
     * @return $this
     */
    public function setApproval(?int $approval): static
    {
        if (is_null($approval)) {
            throw new InvalidArgumentException('non-nullable approval cannot be null');
        }
        $this->container['approval'] = $approval;

        return $this;
    }

    /**
     * Gets finalise
     *
     * @return int|null
     */
    public function getFinalise(): ?int
    {
        return $this->container['finalise'];
    }

    /**
     * Sets finalise
     *
     * @param int|null $finalise finalise
     *
     * @return $this
     */
    public function setFinalise(?int $finalise): static
    {
        if (is_null($finalise)) {
            throw new InvalidArgumentException('non-nullable finalise cannot be null');
        }
        $this->container['finalise'] = $finalise;

        return $this;
    }

    /**
     * Gets sendPaySlip
     *
     * @return int|null
     */
    public function getSendPaySlip(): ?int
    {
        return $this->container['sendPaySlip'];
    }

    /**
     * Sets sendPaySlip
     *
     * @param int|null $sendPaySlip sendPaySlip
     *
     * @return $this
     */
    public function setSendPaySlip(?int $sendPaySlip): static
    {
        if (is_null($sendPaySlip)) {
            throw new InvalidArgumentException('non-nullable sendPaySlip cannot be null');
        }
        $this->container['sendPaySlip'] = $sendPaySlip;

        return $this;
    }

    /**
     * Gets submitRti
     *
     * @return int|null
     */
    public function getSubmitRti(): ?int
    {
        return $this->container['submitRti'];
    }

    /**
     * Sets submitRti
     *
     * @param int|null $submitRti submitRti
     *
     * @return $this
     */
    public function setSubmitRti(?int $submitRti): static
    {
        if (is_null($submitRti)) {
            throw new InvalidArgumentException('non-nullable submitRti cannot be null');
        }
        $this->container['submitRti'] = $submitRti;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


