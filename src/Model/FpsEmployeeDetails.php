<?php
/**
 * FpsEmployeeDetails
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * FpsEmployeeDetails Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FpsEmployeeDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FpsEmployeeDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'nino' => 'string',
        'name' => '\SynergiTech\Staffology\Model\RtiEmployeeName',
        'address' => '\SynergiTech\Staffology\Model\RtiEmployeeAddress',
        'birthDate' => 'string',
        'gender' => 'string',
        'passportNumber' => 'string',
        'partnerDetails' => '\SynergiTech\Staffology\Model\FpsEmployeeDetailsPartnerDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'nino' => null,
        'name' => null,
        'address' => null,
        'birthDate' => null,
        'gender' => null,
        'passportNumber' => null,
        'partnerDetails' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'nino' => true,
        'name' => false,
        'address' => false,
        'birthDate' => true,
        'gender' => true,
        'passportNumber' => true,
        'partnerDetails' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'nino' => 'nino',
        'name' => 'name',
        'address' => 'address',
        'birthDate' => 'birthDate',
        'gender' => 'gender',
        'passportNumber' => 'passportNumber',
        'partnerDetails' => 'partnerDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'nino' => 'setNino',
        'name' => 'setName',
        'address' => 'setAddress',
        'birthDate' => 'setBirthDate',
        'gender' => 'setGender',
        'passportNumber' => 'setPassportNumber',
        'partnerDetails' => 'setPartnerDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'nino' => 'getNino',
        'name' => 'getName',
        'address' => 'getAddress',
        'birthDate' => 'getBirthDate',
        'gender' => 'getGender',
        'passportNumber' => 'getPassportNumber',
        'partnerDetails' => 'getPartnerDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('nino', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('birthDate', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('passportNumber', $data ?? [], null);
        $this->setIfExists('partnerDetails', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nino
     *
     * @return string|null
     */
    public function getNino(): ?string
    {
        return $this->container['nino'];
    }

    /**
     * Sets nino
     *
     * @param string|null $nino nino
     *
     * @return $this
     */
    public function setNino(?string $nino): static
    {
        if (is_null($nino)) {
            array_push($this->openAPINullablesSetToNull, 'nino');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nino', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nino'] = $nino;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \SynergiTech\Staffology\Model\RtiEmployeeName|null
     */
    public function getName(): ?\SynergiTech\Staffology\Model\RtiEmployeeName
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \SynergiTech\Staffology\Model\RtiEmployeeName|null $name name
     *
     * @return $this
     */
    public function setName(?\SynergiTech\Staffology\Model\RtiEmployeeName $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \SynergiTech\Staffology\Model\RtiEmployeeAddress|null
     */
    public function getAddress(): ?\SynergiTech\Staffology\Model\RtiEmployeeAddress
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Staffology\Model\RtiEmployeeAddress|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Staffology\Model\RtiEmployeeAddress $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return string|null
     */
    public function getBirthDate(): ?string
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param string|null $birthDate birthDate
     *
     * @return $this
     */
    public function setBirthDate(?string $birthDate): static
    {
        if (is_null($birthDate)) {
            array_push($this->openAPINullablesSetToNull, 'birthDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender(): ?string
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return $this
     */
    public function setGender(?string $gender): static
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets passportNumber
     *
     * @return string|null
     */
    public function getPassportNumber(): ?string
    {
        return $this->container['passportNumber'];
    }

    /**
     * Sets passportNumber
     *
     * @param string|null $passportNumber passportNumber
     *
     * @return $this
     */
    public function setPassportNumber(?string $passportNumber): static
    {
        if (is_null($passportNumber)) {
            array_push($this->openAPINullablesSetToNull, 'passportNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('passportNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['passportNumber'] = $passportNumber;

        return $this;
    }

    /**
     * Gets partnerDetails
     *
     * @return \SynergiTech\Staffology\Model\FpsEmployeeDetailsPartnerDetails|null
     */
    public function getPartnerDetails(): ?\SynergiTech\Staffology\Model\FpsEmployeeDetailsPartnerDetails
    {
        return $this->container['partnerDetails'];
    }

    /**
     * Sets partnerDetails
     *
     * @param \SynergiTech\Staffology\Model\FpsEmployeeDetailsPartnerDetails|null $partnerDetails partnerDetails
     *
     * @return $this
     */
    public function setPartnerDetails(?\SynergiTech\Staffology\Model\FpsEmployeeDetailsPartnerDetails $partnerDetails): static
    {
        if (is_null($partnerDetails)) {
            throw new InvalidArgumentException('non-nullable partnerDetails cannot be null');
        }
        $this->container['partnerDetails'] = $partnerDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


