<?php
/**
 * ContractEmployerRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractEmployerRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractEmployerRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.EmployerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'address' => '\SynergiTech\Staffology\Model\ContractAddress',
        'bankDetails' => '\SynergiTech\Staffology\Model\ContractBankDetails',
        'defaultPayOptions' => '\SynergiTech\Staffology\Model\ContractPayOptionsRequest',
        'hmrcDetails' => '\SynergiTech\Staffology\Model\ContractHmrcDetailsRequest',
        'defaultPension' => '\SynergiTech\Staffology\Model\ContractPensionSelectionRequest',
        'rtiSubmissionSettings' => '\SynergiTech\Staffology\Model\ContractRtiSubmissionSettingsRequest',
        'leaveSettings' => '\SynergiTech\Staffology\Model\ContractEmployerLeaveSettingsRequest',
        'settings' => '\SynergiTech\Staffology\Model\ContractEmployerSettingsRequest',
        'umbrellaSettings' => '\SynergiTech\Staffology\Model\ContractUmbrellaSettingsRequest',
        'autoEnrolmentSettings' => '\SynergiTech\Staffology\Model\ContractAutoEnrolmentSettingsRequest',
        'id' => 'string',
        'name' => 'string',
        'sourceSystemId' => 'string',
        'crn' => 'string',
        'logoUrl' => 'string',
        'logoSasUrl' => 'string',
        'alternativeId' => 'string',
        'bankPaymentsCsvFormat' => '\SynergiTech\Staffology\Model\BankPaymentInstructionsCsvFormat',
        'bacsServiceUserNumber' => 'string',
        'bacsBureauNumber' => 'string',
        'rejectInvalidBankDetails' => 'bool',
        'bankPaymentsReferenceFormat' => 'string',
        'bacsIncludeAEO' => 'bool',
        'bacsIncludeDeductions' => 'bool',
        'bacsIncludeHmrc' => 'bool',
        'bacsIncludePensions' => 'bool',
        'useTenantRtiSubmissionSettings' => 'bool',
        'accruePayCodeSetUniqueId' => 'string',
        'employeeCount' => 'int',
        'subcontractorCount' => 'int',
        'startYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'currentYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'supportAccessEnabled' => 'bool',
        'archived' => 'bool',
        'canUseBureauFeatures' => 'bool',
        'multiRoleEnabled' => 'bool',
        'educationPayrollEnabled' => 'bool',
        'effectiveDateWorkingPatternsEnabled' => 'bool',
        'backPayEnabled' => 'bool',
        'displayName' => 'string',
        'isOptedInToEvc' => 'bool',
        'evcId' => 'string',
        'holidayAccrualBasis' => '\SynergiTech\Staffology\Model\HolidayAccrual',
        'holidayAccrualDefaultRateType' => '\SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType',
        'mfaEnabled' => 'bool',
        'departmentJournalOverridesEnabled' => 'bool',
        'costCentreJournalOverridesEnabled' => 'bool',
        'settingsSortPayrollNumbersAlphanumerically' => 'bool',
        'unauthorisedLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'holidayLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'sickLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'parentalLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule',
        'bereavementLeaveProRataRule' => '\SynergiTech\Staffology\Model\LeaveProRataRule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'address' => null,
        'bankDetails' => null,
        'defaultPayOptions' => null,
        'hmrcDetails' => null,
        'defaultPension' => null,
        'rtiSubmissionSettings' => null,
        'leaveSettings' => null,
        'settings' => null,
        'umbrellaSettings' => null,
        'autoEnrolmentSettings' => null,
        'id' => 'uuid',
        'name' => null,
        'sourceSystemId' => null,
        'crn' => null,
        'logoUrl' => null,
        'logoSasUrl' => null,
        'alternativeId' => null,
        'bankPaymentsCsvFormat' => null,
        'bacsServiceUserNumber' => null,
        'bacsBureauNumber' => null,
        'rejectInvalidBankDetails' => null,
        'bankPaymentsReferenceFormat' => null,
        'bacsIncludeAEO' => null,
        'bacsIncludeDeductions' => null,
        'bacsIncludeHmrc' => null,
        'bacsIncludePensions' => null,
        'useTenantRtiSubmissionSettings' => null,
        'accruePayCodeSetUniqueId' => 'uuid',
        'employeeCount' => 'int32',
        'subcontractorCount' => 'int32',
        'startYear' => null,
        'currentYear' => null,
        'supportAccessEnabled' => null,
        'archived' => null,
        'canUseBureauFeatures' => null,
        'multiRoleEnabled' => null,
        'educationPayrollEnabled' => null,
        'effectiveDateWorkingPatternsEnabled' => null,
        'backPayEnabled' => null,
        'displayName' => null,
        'isOptedInToEvc' => null,
        'evcId' => 'uuid',
        'holidayAccrualBasis' => null,
        'holidayAccrualDefaultRateType' => null,
        'mfaEnabled' => null,
        'departmentJournalOverridesEnabled' => null,
        'costCentreJournalOverridesEnabled' => null,
        'settingsSortPayrollNumbersAlphanumerically' => null,
        'unauthorisedLeaveProRataRule' => null,
        'holidayLeaveProRataRule' => null,
        'sickLeaveProRataRule' => null,
        'parentalLeaveProRataRule' => null,
        'bereavementLeaveProRataRule' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'address' => false,
        'bankDetails' => false,
        'defaultPayOptions' => false,
        'hmrcDetails' => false,
        'defaultPension' => false,
        'rtiSubmissionSettings' => false,
        'leaveSettings' => false,
        'settings' => false,
        'umbrellaSettings' => false,
        'autoEnrolmentSettings' => false,
        'id' => false,
        'name' => true,
        'sourceSystemId' => true,
        'crn' => true,
        'logoUrl' => true,
        'logoSasUrl' => true,
        'alternativeId' => true,
        'bankPaymentsCsvFormat' => false,
        'bacsServiceUserNumber' => true,
        'bacsBureauNumber' => true,
        'rejectInvalidBankDetails' => false,
        'bankPaymentsReferenceFormat' => true,
        'bacsIncludeAEO' => false,
        'bacsIncludeDeductions' => false,
        'bacsIncludeHmrc' => false,
        'bacsIncludePensions' => false,
        'useTenantRtiSubmissionSettings' => false,
        'accruePayCodeSetUniqueId' => true,
        'employeeCount' => false,
        'subcontractorCount' => false,
        'startYear' => false,
        'currentYear' => false,
        'supportAccessEnabled' => false,
        'archived' => false,
        'canUseBureauFeatures' => false,
        'multiRoleEnabled' => false,
        'educationPayrollEnabled' => false,
        'effectiveDateWorkingPatternsEnabled' => false,
        'backPayEnabled' => false,
        'displayName' => true,
        'isOptedInToEvc' => false,
        'evcId' => true,
        'holidayAccrualBasis' => false,
        'holidayAccrualDefaultRateType' => false,
        'mfaEnabled' => false,
        'departmentJournalOverridesEnabled' => false,
        'costCentreJournalOverridesEnabled' => false,
        'settingsSortPayrollNumbersAlphanumerically' => false,
        'unauthorisedLeaveProRataRule' => false,
        'holidayLeaveProRataRule' => false,
        'sickLeaveProRataRule' => false,
        'parentalLeaveProRataRule' => false,
        'bereavementLeaveProRataRule' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'address' => 'address',
        'bankDetails' => 'bankDetails',
        'defaultPayOptions' => 'defaultPayOptions',
        'hmrcDetails' => 'hmrcDetails',
        'defaultPension' => 'defaultPension',
        'rtiSubmissionSettings' => 'rtiSubmissionSettings',
        'leaveSettings' => 'leaveSettings',
        'settings' => 'settings',
        'umbrellaSettings' => 'umbrellaSettings',
        'autoEnrolmentSettings' => 'autoEnrolmentSettings',
        'id' => 'id',
        'name' => 'name',
        'sourceSystemId' => 'sourceSystemId',
        'crn' => 'crn',
        'logoUrl' => 'logoUrl',
        'logoSasUrl' => 'logoSasUrl',
        'alternativeId' => 'alternativeId',
        'bankPaymentsCsvFormat' => 'bankPaymentsCsvFormat',
        'bacsServiceUserNumber' => 'bacsServiceUserNumber',
        'bacsBureauNumber' => 'bacsBureauNumber',
        'rejectInvalidBankDetails' => 'rejectInvalidBankDetails',
        'bankPaymentsReferenceFormat' => 'bankPaymentsReferenceFormat',
        'bacsIncludeAEO' => 'bacsIncludeAEO',
        'bacsIncludeDeductions' => 'bacsIncludeDeductions',
        'bacsIncludeHmrc' => 'bacsIncludeHmrc',
        'bacsIncludePensions' => 'bacsIncludePensions',
        'useTenantRtiSubmissionSettings' => 'useTenantRtiSubmissionSettings',
        'accruePayCodeSetUniqueId' => 'accruePayCodeSetUniqueId',
        'employeeCount' => 'employeeCount',
        'subcontractorCount' => 'subcontractorCount',
        'startYear' => 'startYear',
        'currentYear' => 'currentYear',
        'supportAccessEnabled' => 'supportAccessEnabled',
        'archived' => 'archived',
        'canUseBureauFeatures' => 'canUseBureauFeatures',
        'multiRoleEnabled' => 'multiRoleEnabled',
        'educationPayrollEnabled' => 'educationPayrollEnabled',
        'effectiveDateWorkingPatternsEnabled' => 'effectiveDateWorkingPatternsEnabled',
        'backPayEnabled' => 'backPayEnabled',
        'displayName' => 'displayName',
        'isOptedInToEvc' => 'isOptedInToEvc',
        'evcId' => 'evcId',
        'holidayAccrualBasis' => 'holidayAccrualBasis',
        'holidayAccrualDefaultRateType' => 'holidayAccrualDefaultRateType',
        'mfaEnabled' => 'mfaEnabled',
        'departmentJournalOverridesEnabled' => 'departmentJournalOverridesEnabled',
        'costCentreJournalOverridesEnabled' => 'costCentreJournalOverridesEnabled',
        'settingsSortPayrollNumbersAlphanumerically' => 'settingsSortPayrollNumbersAlphanumerically',
        'unauthorisedLeaveProRataRule' => 'unauthorisedLeaveProRataRule',
        'holidayLeaveProRataRule' => 'holidayLeaveProRataRule',
        'sickLeaveProRataRule' => 'sickLeaveProRataRule',
        'parentalLeaveProRataRule' => 'parentalLeaveProRataRule',
        'bereavementLeaveProRataRule' => 'bereavementLeaveProRataRule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'address' => 'setAddress',
        'bankDetails' => 'setBankDetails',
        'defaultPayOptions' => 'setDefaultPayOptions',
        'hmrcDetails' => 'setHmrcDetails',
        'defaultPension' => 'setDefaultPension',
        'rtiSubmissionSettings' => 'setRtiSubmissionSettings',
        'leaveSettings' => 'setLeaveSettings',
        'settings' => 'setSettings',
        'umbrellaSettings' => 'setUmbrellaSettings',
        'autoEnrolmentSettings' => 'setAutoEnrolmentSettings',
        'id' => 'setId',
        'name' => 'setName',
        'sourceSystemId' => 'setSourceSystemId',
        'crn' => 'setCrn',
        'logoUrl' => 'setLogoUrl',
        'logoSasUrl' => 'setLogoSasUrl',
        'alternativeId' => 'setAlternativeId',
        'bankPaymentsCsvFormat' => 'setBankPaymentsCsvFormat',
        'bacsServiceUserNumber' => 'setBacsServiceUserNumber',
        'bacsBureauNumber' => 'setBacsBureauNumber',
        'rejectInvalidBankDetails' => 'setRejectInvalidBankDetails',
        'bankPaymentsReferenceFormat' => 'setBankPaymentsReferenceFormat',
        'bacsIncludeAEO' => 'setBacsIncludeAEO',
        'bacsIncludeDeductions' => 'setBacsIncludeDeductions',
        'bacsIncludeHmrc' => 'setBacsIncludeHmrc',
        'bacsIncludePensions' => 'setBacsIncludePensions',
        'useTenantRtiSubmissionSettings' => 'setUseTenantRtiSubmissionSettings',
        'accruePayCodeSetUniqueId' => 'setAccruePayCodeSetUniqueId',
        'employeeCount' => 'setEmployeeCount',
        'subcontractorCount' => 'setSubcontractorCount',
        'startYear' => 'setStartYear',
        'currentYear' => 'setCurrentYear',
        'supportAccessEnabled' => 'setSupportAccessEnabled',
        'archived' => 'setArchived',
        'canUseBureauFeatures' => 'setCanUseBureauFeatures',
        'multiRoleEnabled' => 'setMultiRoleEnabled',
        'educationPayrollEnabled' => 'setEducationPayrollEnabled',
        'effectiveDateWorkingPatternsEnabled' => 'setEffectiveDateWorkingPatternsEnabled',
        'backPayEnabled' => 'setBackPayEnabled',
        'displayName' => 'setDisplayName',
        'isOptedInToEvc' => 'setIsOptedInToEvc',
        'evcId' => 'setEvcId',
        'holidayAccrualBasis' => 'setHolidayAccrualBasis',
        'holidayAccrualDefaultRateType' => 'setHolidayAccrualDefaultRateType',
        'mfaEnabled' => 'setMfaEnabled',
        'departmentJournalOverridesEnabled' => 'setDepartmentJournalOverridesEnabled',
        'costCentreJournalOverridesEnabled' => 'setCostCentreJournalOverridesEnabled',
        'settingsSortPayrollNumbersAlphanumerically' => 'setSettingsSortPayrollNumbersAlphanumerically',
        'unauthorisedLeaveProRataRule' => 'setUnauthorisedLeaveProRataRule',
        'holidayLeaveProRataRule' => 'setHolidayLeaveProRataRule',
        'sickLeaveProRataRule' => 'setSickLeaveProRataRule',
        'parentalLeaveProRataRule' => 'setParentalLeaveProRataRule',
        'bereavementLeaveProRataRule' => 'setBereavementLeaveProRataRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'address' => 'getAddress',
        'bankDetails' => 'getBankDetails',
        'defaultPayOptions' => 'getDefaultPayOptions',
        'hmrcDetails' => 'getHmrcDetails',
        'defaultPension' => 'getDefaultPension',
        'rtiSubmissionSettings' => 'getRtiSubmissionSettings',
        'leaveSettings' => 'getLeaveSettings',
        'settings' => 'getSettings',
        'umbrellaSettings' => 'getUmbrellaSettings',
        'autoEnrolmentSettings' => 'getAutoEnrolmentSettings',
        'id' => 'getId',
        'name' => 'getName',
        'sourceSystemId' => 'getSourceSystemId',
        'crn' => 'getCrn',
        'logoUrl' => 'getLogoUrl',
        'logoSasUrl' => 'getLogoSasUrl',
        'alternativeId' => 'getAlternativeId',
        'bankPaymentsCsvFormat' => 'getBankPaymentsCsvFormat',
        'bacsServiceUserNumber' => 'getBacsServiceUserNumber',
        'bacsBureauNumber' => 'getBacsBureauNumber',
        'rejectInvalidBankDetails' => 'getRejectInvalidBankDetails',
        'bankPaymentsReferenceFormat' => 'getBankPaymentsReferenceFormat',
        'bacsIncludeAEO' => 'getBacsIncludeAEO',
        'bacsIncludeDeductions' => 'getBacsIncludeDeductions',
        'bacsIncludeHmrc' => 'getBacsIncludeHmrc',
        'bacsIncludePensions' => 'getBacsIncludePensions',
        'useTenantRtiSubmissionSettings' => 'getUseTenantRtiSubmissionSettings',
        'accruePayCodeSetUniqueId' => 'getAccruePayCodeSetUniqueId',
        'employeeCount' => 'getEmployeeCount',
        'subcontractorCount' => 'getSubcontractorCount',
        'startYear' => 'getStartYear',
        'currentYear' => 'getCurrentYear',
        'supportAccessEnabled' => 'getSupportAccessEnabled',
        'archived' => 'getArchived',
        'canUseBureauFeatures' => 'getCanUseBureauFeatures',
        'multiRoleEnabled' => 'getMultiRoleEnabled',
        'educationPayrollEnabled' => 'getEducationPayrollEnabled',
        'effectiveDateWorkingPatternsEnabled' => 'getEffectiveDateWorkingPatternsEnabled',
        'backPayEnabled' => 'getBackPayEnabled',
        'displayName' => 'getDisplayName',
        'isOptedInToEvc' => 'getIsOptedInToEvc',
        'evcId' => 'getEvcId',
        'holidayAccrualBasis' => 'getHolidayAccrualBasis',
        'holidayAccrualDefaultRateType' => 'getHolidayAccrualDefaultRateType',
        'mfaEnabled' => 'getMfaEnabled',
        'departmentJournalOverridesEnabled' => 'getDepartmentJournalOverridesEnabled',
        'costCentreJournalOverridesEnabled' => 'getCostCentreJournalOverridesEnabled',
        'settingsSortPayrollNumbersAlphanumerically' => 'getSettingsSortPayrollNumbersAlphanumerically',
        'unauthorisedLeaveProRataRule' => 'getUnauthorisedLeaveProRataRule',
        'holidayLeaveProRataRule' => 'getHolidayLeaveProRataRule',
        'sickLeaveProRataRule' => 'getSickLeaveProRataRule',
        'parentalLeaveProRataRule' => 'getParentalLeaveProRataRule',
        'bereavementLeaveProRataRule' => 'getBereavementLeaveProRataRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('bankDetails', $data ?? [], null);
        $this->setIfExists('defaultPayOptions', $data ?? [], null);
        $this->setIfExists('hmrcDetails', $data ?? [], null);
        $this->setIfExists('defaultPension', $data ?? [], null);
        $this->setIfExists('rtiSubmissionSettings', $data ?? [], null);
        $this->setIfExists('leaveSettings', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('umbrellaSettings', $data ?? [], null);
        $this->setIfExists('autoEnrolmentSettings', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('sourceSystemId', $data ?? [], null);
        $this->setIfExists('crn', $data ?? [], null);
        $this->setIfExists('logoUrl', $data ?? [], null);
        $this->setIfExists('logoSasUrl', $data ?? [], null);
        $this->setIfExists('alternativeId', $data ?? [], null);
        $this->setIfExists('bankPaymentsCsvFormat', $data ?? [], null);
        $this->setIfExists('bacsServiceUserNumber', $data ?? [], null);
        $this->setIfExists('bacsBureauNumber', $data ?? [], null);
        $this->setIfExists('rejectInvalidBankDetails', $data ?? [], null);
        $this->setIfExists('bankPaymentsReferenceFormat', $data ?? [], null);
        $this->setIfExists('bacsIncludeAEO', $data ?? [], null);
        $this->setIfExists('bacsIncludeDeductions', $data ?? [], null);
        $this->setIfExists('bacsIncludeHmrc', $data ?? [], null);
        $this->setIfExists('bacsIncludePensions', $data ?? [], null);
        $this->setIfExists('useTenantRtiSubmissionSettings', $data ?? [], null);
        $this->setIfExists('accruePayCodeSetUniqueId', $data ?? [], null);
        $this->setIfExists('employeeCount', $data ?? [], null);
        $this->setIfExists('subcontractorCount', $data ?? [], null);
        $this->setIfExists('startYear', $data ?? [], null);
        $this->setIfExists('currentYear', $data ?? [], null);
        $this->setIfExists('supportAccessEnabled', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('canUseBureauFeatures', $data ?? [], null);
        $this->setIfExists('multiRoleEnabled', $data ?? [], null);
        $this->setIfExists('educationPayrollEnabled', $data ?? [], null);
        $this->setIfExists('effectiveDateWorkingPatternsEnabled', $data ?? [], null);
        $this->setIfExists('backPayEnabled', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('isOptedInToEvc', $data ?? [], null);
        $this->setIfExists('evcId', $data ?? [], null);
        $this->setIfExists('holidayAccrualBasis', $data ?? [], null);
        $this->setIfExists('holidayAccrualDefaultRateType', $data ?? [], null);
        $this->setIfExists('mfaEnabled', $data ?? [], null);
        $this->setIfExists('departmentJournalOverridesEnabled', $data ?? [], null);
        $this->setIfExists('costCentreJournalOverridesEnabled', $data ?? [], null);
        $this->setIfExists('settingsSortPayrollNumbersAlphanumerically', $data ?? [], null);
        $this->setIfExists('unauthorisedLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('holidayLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('sickLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('parentalLeaveProRataRule', $data ?? [], null);
        $this->setIfExists('bereavementLeaveProRataRule', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \SynergiTech\Staffology\Model\ContractAddress|null
     */
    public function getAddress(): ?\SynergiTech\Staffology\Model\ContractAddress
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Staffology\Model\ContractAddress|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Staffology\Model\ContractAddress $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets bankDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractBankDetails|null
     */
    public function getBankDetails(): ?\SynergiTech\Staffology\Model\ContractBankDetails
    {
        return $this->container['bankDetails'];
    }

    /**
     * Sets bankDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractBankDetails|null $bankDetails bankDetails
     *
     * @return $this
     */
    public function setBankDetails(?\SynergiTech\Staffology\Model\ContractBankDetails $bankDetails): static
    {
        if (is_null($bankDetails)) {
            throw new InvalidArgumentException('non-nullable bankDetails cannot be null');
        }
        $this->container['bankDetails'] = $bankDetails;

        return $this;
    }

    /**
     * Gets defaultPayOptions
     *
     * @return \SynergiTech\Staffology\Model\ContractPayOptionsRequest|null
     */
    public function getDefaultPayOptions(): ?\SynergiTech\Staffology\Model\ContractPayOptionsRequest
    {
        return $this->container['defaultPayOptions'];
    }

    /**
     * Sets defaultPayOptions
     *
     * @param \SynergiTech\Staffology\Model\ContractPayOptionsRequest|null $defaultPayOptions defaultPayOptions
     *
     * @return $this
     */
    public function setDefaultPayOptions(?\SynergiTech\Staffology\Model\ContractPayOptionsRequest $defaultPayOptions): static
    {
        if (is_null($defaultPayOptions)) {
            throw new InvalidArgumentException('non-nullable defaultPayOptions cannot be null');
        }
        $this->container['defaultPayOptions'] = $defaultPayOptions;

        return $this;
    }

    /**
     * Gets hmrcDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractHmrcDetailsRequest|null
     */
    public function getHmrcDetails(): ?\SynergiTech\Staffology\Model\ContractHmrcDetailsRequest
    {
        return $this->container['hmrcDetails'];
    }

    /**
     * Sets hmrcDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractHmrcDetailsRequest|null $hmrcDetails hmrcDetails
     *
     * @return $this
     */
    public function setHmrcDetails(?\SynergiTech\Staffology\Model\ContractHmrcDetailsRequest $hmrcDetails): static
    {
        if (is_null($hmrcDetails)) {
            throw new InvalidArgumentException('non-nullable hmrcDetails cannot be null');
        }
        $this->container['hmrcDetails'] = $hmrcDetails;

        return $this;
    }

    /**
     * Gets defaultPension
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionSelectionRequest|null
     */
    public function getDefaultPension(): ?\SynergiTech\Staffology\Model\ContractPensionSelectionRequest
    {
        return $this->container['defaultPension'];
    }

    /**
     * Sets defaultPension
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionSelectionRequest|null $defaultPension defaultPension
     *
     * @return $this
     */
    public function setDefaultPension(?\SynergiTech\Staffology\Model\ContractPensionSelectionRequest $defaultPension): static
    {
        if (is_null($defaultPension)) {
            throw new InvalidArgumentException('non-nullable defaultPension cannot be null');
        }
        $this->container['defaultPension'] = $defaultPension;

        return $this;
    }

    /**
     * Gets rtiSubmissionSettings
     *
     * @return \SynergiTech\Staffology\Model\ContractRtiSubmissionSettingsRequest|null
     */
    public function getRtiSubmissionSettings(): ?\SynergiTech\Staffology\Model\ContractRtiSubmissionSettingsRequest
    {
        return $this->container['rtiSubmissionSettings'];
    }

    /**
     * Sets rtiSubmissionSettings
     *
     * @param \SynergiTech\Staffology\Model\ContractRtiSubmissionSettingsRequest|null $rtiSubmissionSettings rtiSubmissionSettings
     *
     * @return $this
     */
    public function setRtiSubmissionSettings(?\SynergiTech\Staffology\Model\ContractRtiSubmissionSettingsRequest $rtiSubmissionSettings): static
    {
        if (is_null($rtiSubmissionSettings)) {
            throw new InvalidArgumentException('non-nullable rtiSubmissionSettings cannot be null');
        }
        $this->container['rtiSubmissionSettings'] = $rtiSubmissionSettings;

        return $this;
    }

    /**
     * Gets leaveSettings
     *
     * @return \SynergiTech\Staffology\Model\ContractEmployerLeaveSettingsRequest|null
     */
    public function getLeaveSettings(): ?\SynergiTech\Staffology\Model\ContractEmployerLeaveSettingsRequest
    {
        return $this->container['leaveSettings'];
    }

    /**
     * Sets leaveSettings
     *
     * @param \SynergiTech\Staffology\Model\ContractEmployerLeaveSettingsRequest|null $leaveSettings leaveSettings
     *
     * @return $this
     */
    public function setLeaveSettings(?\SynergiTech\Staffology\Model\ContractEmployerLeaveSettingsRequest $leaveSettings): static
    {
        if (is_null($leaveSettings)) {
            throw new InvalidArgumentException('non-nullable leaveSettings cannot be null');
        }
        $this->container['leaveSettings'] = $leaveSettings;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \SynergiTech\Staffology\Model\ContractEmployerSettingsRequest|null
     */
    public function getSettings(): ?\SynergiTech\Staffology\Model\ContractEmployerSettingsRequest
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \SynergiTech\Staffology\Model\ContractEmployerSettingsRequest|null $settings settings
     *
     * @return $this
     */
    public function setSettings(?\SynergiTech\Staffology\Model\ContractEmployerSettingsRequest $settings): static
    {
        if (is_null($settings)) {
            throw new InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets umbrellaSettings
     *
     * @return \SynergiTech\Staffology\Model\ContractUmbrellaSettingsRequest|null
     */
    public function getUmbrellaSettings(): ?\SynergiTech\Staffology\Model\ContractUmbrellaSettingsRequest
    {
        return $this->container['umbrellaSettings'];
    }

    /**
     * Sets umbrellaSettings
     *
     * @param \SynergiTech\Staffology\Model\ContractUmbrellaSettingsRequest|null $umbrellaSettings umbrellaSettings
     *
     * @return $this
     */
    public function setUmbrellaSettings(?\SynergiTech\Staffology\Model\ContractUmbrellaSettingsRequest $umbrellaSettings): static
    {
        if (is_null($umbrellaSettings)) {
            throw new InvalidArgumentException('non-nullable umbrellaSettings cannot be null');
        }
        $this->container['umbrellaSettings'] = $umbrellaSettings;

        return $this;
    }

    /**
     * Gets autoEnrolmentSettings
     *
     * @return \SynergiTech\Staffology\Model\ContractAutoEnrolmentSettingsRequest|null
     */
    public function getAutoEnrolmentSettings(): ?\SynergiTech\Staffology\Model\ContractAutoEnrolmentSettingsRequest
    {
        return $this->container['autoEnrolmentSettings'];
    }

    /**
     * Sets autoEnrolmentSettings
     *
     * @param \SynergiTech\Staffology\Model\ContractAutoEnrolmentSettingsRequest|null $autoEnrolmentSettings autoEnrolmentSettings
     *
     * @return $this
     */
    public function setAutoEnrolmentSettings(?\SynergiTech\Staffology\Model\ContractAutoEnrolmentSettingsRequest $autoEnrolmentSettings): static
    {
        if (is_null($autoEnrolmentSettings)) {
            throw new InvalidArgumentException('non-nullable autoEnrolmentSettings cannot be null');
        }
        $this->container['autoEnrolmentSettings'] = $autoEnrolmentSettings;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sourceSystemId
     *
     * @return string|null
     */
    public function getSourceSystemId(): ?string
    {
        return $this->container['sourceSystemId'];
    }

    /**
     * Sets sourceSystemId
     *
     * @param string|null $sourceSystemId [readonly] Can only be given a value when the employer is created. It can then never be changed.  Used by external systems so they can store an immutable reference
     *
     * @return $this
     */
    public function setSourceSystemId(?string $sourceSystemId): static
    {
        if (is_null($sourceSystemId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceSystemId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceSystemId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceSystemId'] = $sourceSystemId;

        return $this;
    }

    /**
     * Gets crn
     *
     * @return string|null
     */
    public function getCrn(): ?string
    {
        return $this->container['crn'];
    }

    /**
     * Sets crn
     *
     * @param string|null $crn Company Registration Number
     *
     * @return $this
     */
    public function setCrn(?string $crn): static
    {
        if (is_null($crn)) {
            array_push($this->openAPINullablesSetToNull, 'crn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crn'] = $crn;

        return $this;
    }

    /**
     * Gets logoUrl
     *
     * @return string|null
     */
    public function getLogoUrl(): ?string
    {
        return $this->container['logoUrl'];
    }

    /**
     * Sets logoUrl
     *
     * @param string|null $logoUrl logoUrl
     *
     * @return $this
     */
    public function setLogoUrl(?string $logoUrl): static
    {
        if (is_null($logoUrl)) {
            array_push($this->openAPINullablesSetToNull, 'logoUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logoUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logoUrl'] = $logoUrl;

        return $this;
    }

    /**
     * Gets logoSasUrl
     *
     * @return string|null
     */
    public function getLogoSasUrl(): ?string
    {
        return $this->container['logoSasUrl'];
    }

    /**
     * Sets logoSasUrl
     *
     * @param string|null $logoSasUrl logoSasUrl
     *
     * @return $this
     */
    public function setLogoSasUrl(?string $logoSasUrl): static
    {
        if (is_null($logoSasUrl)) {
            array_push($this->openAPINullablesSetToNull, 'logoSasUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logoSasUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logoSasUrl'] = $logoSasUrl;

        return $this;
    }

    /**
     * Gets alternativeId
     *
     * @return string|null
     */
    public function getAlternativeId(): ?string
    {
        return $this->container['alternativeId'];
    }

    /**
     * Sets alternativeId
     *
     * @param string|null $alternativeId alternativeId
     *
     * @return $this
     */
    public function setAlternativeId(?string $alternativeId): static
    {
        if (is_null($alternativeId)) {
            array_push($this->openAPINullablesSetToNull, 'alternativeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternativeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alternativeId'] = $alternativeId;

        return $this;
    }

    /**
     * Gets bankPaymentsCsvFormat
     *
     * @return \SynergiTech\Staffology\Model\BankPaymentInstructionsCsvFormat|null
     */
    public function getBankPaymentsCsvFormat(): ?\SynergiTech\Staffology\Model\BankPaymentInstructionsCsvFormat
    {
        return $this->container['bankPaymentsCsvFormat'];
    }

    /**
     * Sets bankPaymentsCsvFormat
     *
     * @param \SynergiTech\Staffology\Model\BankPaymentInstructionsCsvFormat|null $bankPaymentsCsvFormat bankPaymentsCsvFormat
     *
     * @return $this
     */
    public function setBankPaymentsCsvFormat(?\SynergiTech\Staffology\Model\BankPaymentInstructionsCsvFormat $bankPaymentsCsvFormat): static
    {
        if (is_null($bankPaymentsCsvFormat)) {
            throw new InvalidArgumentException('non-nullable bankPaymentsCsvFormat cannot be null');
        }
        $this->container['bankPaymentsCsvFormat'] = $bankPaymentsCsvFormat;

        return $this;
    }

    /**
     * Gets bacsServiceUserNumber
     *
     * @return string|null
     */
    public function getBacsServiceUserNumber(): ?string
    {
        return $this->container['bacsServiceUserNumber'];
    }

    /**
     * Sets bacsServiceUserNumber
     *
     * @param string|null $bacsServiceUserNumber bacsServiceUserNumber
     *
     * @return $this
     */
    public function setBacsServiceUserNumber(?string $bacsServiceUserNumber): static
    {
        if (is_null($bacsServiceUserNumber)) {
            array_push($this->openAPINullablesSetToNull, 'bacsServiceUserNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsServiceUserNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsServiceUserNumber'] = $bacsServiceUserNumber;

        return $this;
    }

    /**
     * Gets bacsBureauNumber
     *
     * @return string|null
     */
    public function getBacsBureauNumber(): ?string
    {
        return $this->container['bacsBureauNumber'];
    }

    /**
     * Sets bacsBureauNumber
     *
     * @param string|null $bacsBureauNumber bacsBureauNumber
     *
     * @return $this
     */
    public function setBacsBureauNumber(?string $bacsBureauNumber): static
    {
        if (is_null($bacsBureauNumber)) {
            array_push($this->openAPINullablesSetToNull, 'bacsBureauNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsBureauNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsBureauNumber'] = $bacsBureauNumber;

        return $this;
    }

    /**
     * Gets rejectInvalidBankDetails
     *
     * @return bool|null
     */
    public function getRejectInvalidBankDetails(): ?bool
    {
        return $this->container['rejectInvalidBankDetails'];
    }

    /**
     * Sets rejectInvalidBankDetails
     *
     * @param bool|null $rejectInvalidBankDetails rejectInvalidBankDetails
     *
     * @return $this
     */
    public function setRejectInvalidBankDetails(?bool $rejectInvalidBankDetails): static
    {
        if (is_null($rejectInvalidBankDetails)) {
            throw new InvalidArgumentException('non-nullable rejectInvalidBankDetails cannot be null');
        }
        $this->container['rejectInvalidBankDetails'] = $rejectInvalidBankDetails;

        return $this;
    }

    /**
     * Gets bankPaymentsReferenceFormat
     *
     * @return string|null
     */
    public function getBankPaymentsReferenceFormat(): ?string
    {
        return $this->container['bankPaymentsReferenceFormat'];
    }

    /**
     * Sets bankPaymentsReferenceFormat
     *
     * @param string|null $bankPaymentsReferenceFormat bankPaymentsReferenceFormat
     *
     * @return $this
     */
    public function setBankPaymentsReferenceFormat(?string $bankPaymentsReferenceFormat): static
    {
        if (is_null($bankPaymentsReferenceFormat)) {
            array_push($this->openAPINullablesSetToNull, 'bankPaymentsReferenceFormat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankPaymentsReferenceFormat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bankPaymentsReferenceFormat'] = $bankPaymentsReferenceFormat;

        return $this;
    }

    /**
     * Gets bacsIncludeAEO
     *
     * @return bool|null
     */
    public function getBacsIncludeAEO(): ?bool
    {
        return $this->container['bacsIncludeAEO'];
    }

    /**
     * Sets bacsIncludeAEO
     *
     * @param bool|null $bacsIncludeAEO bacsIncludeAEO
     *
     * @return $this
     */
    public function setBacsIncludeAEO(?bool $bacsIncludeAEO): static
    {
        if (is_null($bacsIncludeAEO)) {
            throw new InvalidArgumentException('non-nullable bacsIncludeAEO cannot be null');
        }
        $this->container['bacsIncludeAEO'] = $bacsIncludeAEO;

        return $this;
    }

    /**
     * Gets bacsIncludeDeductions
     *
     * @return bool|null
     */
    public function getBacsIncludeDeductions(): ?bool
    {
        return $this->container['bacsIncludeDeductions'];
    }

    /**
     * Sets bacsIncludeDeductions
     *
     * @param bool|null $bacsIncludeDeductions bacsIncludeDeductions
     *
     * @return $this
     */
    public function setBacsIncludeDeductions(?bool $bacsIncludeDeductions): static
    {
        if (is_null($bacsIncludeDeductions)) {
            throw new InvalidArgumentException('non-nullable bacsIncludeDeductions cannot be null');
        }
        $this->container['bacsIncludeDeductions'] = $bacsIncludeDeductions;

        return $this;
    }

    /**
     * Gets bacsIncludeHmrc
     *
     * @return bool|null
     */
    public function getBacsIncludeHmrc(): ?bool
    {
        return $this->container['bacsIncludeHmrc'];
    }

    /**
     * Sets bacsIncludeHmrc
     *
     * @param bool|null $bacsIncludeHmrc bacsIncludeHmrc
     *
     * @return $this
     */
    public function setBacsIncludeHmrc(?bool $bacsIncludeHmrc): static
    {
        if (is_null($bacsIncludeHmrc)) {
            throw new InvalidArgumentException('non-nullable bacsIncludeHmrc cannot be null');
        }
        $this->container['bacsIncludeHmrc'] = $bacsIncludeHmrc;

        return $this;
    }

    /**
     * Gets bacsIncludePensions
     *
     * @return bool|null
     */
    public function getBacsIncludePensions(): ?bool
    {
        return $this->container['bacsIncludePensions'];
    }

    /**
     * Sets bacsIncludePensions
     *
     * @param bool|null $bacsIncludePensions bacsIncludePensions
     *
     * @return $this
     */
    public function setBacsIncludePensions(?bool $bacsIncludePensions): static
    {
        if (is_null($bacsIncludePensions)) {
            throw new InvalidArgumentException('non-nullable bacsIncludePensions cannot be null');
        }
        $this->container['bacsIncludePensions'] = $bacsIncludePensions;

        return $this;
    }

    /**
     * Gets useTenantRtiSubmissionSettings
     *
     * @return bool|null
     */
    public function getUseTenantRtiSubmissionSettings(): ?bool
    {
        return $this->container['useTenantRtiSubmissionSettings'];
    }

    /**
     * Sets useTenantRtiSubmissionSettings
     *
     * @param bool|null $useTenantRtiSubmissionSettings If the Tenant for this employer has Bureau Features enabled then they can set RtiSubmissionSettings to be used across multiple employers.  If this is set to true then those settings will be used instead of any set at the Employer level
     *
     * @return $this
     */
    public function setUseTenantRtiSubmissionSettings(?bool $useTenantRtiSubmissionSettings): static
    {
        if (is_null($useTenantRtiSubmissionSettings)) {
            throw new InvalidArgumentException('non-nullable useTenantRtiSubmissionSettings cannot be null');
        }
        $this->container['useTenantRtiSubmissionSettings'] = $useTenantRtiSubmissionSettings;

        return $this;
    }

    /**
     * Gets accruePayCodeSetUniqueId
     *
     * @return string|null
     */
    public function getAccruePayCodeSetUniqueId(): ?string
    {
        return $this->container['accruePayCodeSetUniqueId'];
    }

    /**
     * Sets accruePayCodeSetUniqueId
     *
     * @param string|null $accruePayCodeSetUniqueId accruePayCodeSetUniqueId
     *
     * @return $this
     */
    public function setAccruePayCodeSetUniqueId(?string $accruePayCodeSetUniqueId): static
    {
        if (is_null($accruePayCodeSetUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'accruePayCodeSetUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accruePayCodeSetUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accruePayCodeSetUniqueId'] = $accruePayCodeSetUniqueId;

        return $this;
    }

    /**
     * Gets employeeCount
     *
     * @return int|null
     */
    public function getEmployeeCount(): ?int
    {
        return $this->container['employeeCount'];
    }

    /**
     * Sets employeeCount
     *
     * @param int|null $employeeCount [readonly] The number of Employees this Employer has, including CIS Subcontractors.
     *
     * @return $this
     */
    public function setEmployeeCount(?int $employeeCount): static
    {
        if (is_null($employeeCount)) {
            throw new InvalidArgumentException('non-nullable employeeCount cannot be null');
        }
        $this->container['employeeCount'] = $employeeCount;

        return $this;
    }

    /**
     * Gets subcontractorCount
     *
     * @return int|null
     */
    public function getSubcontractorCount(): ?int
    {
        return $this->container['subcontractorCount'];
    }

    /**
     * Sets subcontractorCount
     *
     * @param int|null $subcontractorCount [readonly] The number of CIS Subcontractors this Employer has.
     *
     * @return $this
     */
    public function setSubcontractorCount(?int $subcontractorCount): static
    {
        if (is_null($subcontractorCount)) {
            throw new InvalidArgumentException('non-nullable subcontractorCount cannot be null');
        }
        $this->container['subcontractorCount'] = $subcontractorCount;

        return $this;
    }

    /**
     * Gets startYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getStartYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['startYear'];
    }

    /**
     * Sets startYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $startYear startYear
     *
     * @return $this
     */
    public function setStartYear(?\SynergiTech\Staffology\Model\TaxYear $startYear): static
    {
        if (is_null($startYear)) {
            throw new InvalidArgumentException('non-nullable startYear cannot be null');
        }
        $this->container['startYear'] = $startYear;

        return $this;
    }

    /**
     * Gets currentYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getCurrentYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['currentYear'];
    }

    /**
     * Sets currentYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $currentYear currentYear
     *
     * @return $this
     */
    public function setCurrentYear(?\SynergiTech\Staffology\Model\TaxYear $currentYear): static
    {
        if (is_null($currentYear)) {
            throw new InvalidArgumentException('non-nullable currentYear cannot be null');
        }
        $this->container['currentYear'] = $currentYear;

        return $this;
    }

    /**
     * Gets supportAccessEnabled
     *
     * @return bool|null
     */
    public function getSupportAccessEnabled(): ?bool
    {
        return $this->container['supportAccessEnabled'];
    }

    /**
     * Sets supportAccessEnabled
     *
     * @param bool|null $supportAccessEnabled If set to true then the support team can access this employer to help resolve  support queries
     *
     * @return $this
     */
    public function setSupportAccessEnabled(?bool $supportAccessEnabled): static
    {
        if (is_null($supportAccessEnabled)) {
            throw new InvalidArgumentException('non-nullable supportAccessEnabled cannot be null');
        }
        $this->container['supportAccessEnabled'] = $supportAccessEnabled;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived(): ?bool
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived A flag to indicate whather or not the employer is Archived, ie no longer actively used
     *
     * @return $this
     */
    public function setArchived(?bool $archived): static
    {
        if (is_null($archived)) {
            throw new InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets canUseBureauFeatures
     *
     * @return bool|null
     */
    public function getCanUseBureauFeatures(): ?bool
    {
        return $this->container['canUseBureauFeatures'];
    }

    /**
     * Sets canUseBureauFeatures
     *
     * @param bool|null $canUseBureauFeatures canUseBureauFeatures
     *
     * @return $this
     */
    public function setCanUseBureauFeatures(?bool $canUseBureauFeatures): static
    {
        if (is_null($canUseBureauFeatures)) {
            throw new InvalidArgumentException('non-nullable canUseBureauFeatures cannot be null');
        }
        $this->container['canUseBureauFeatures'] = $canUseBureauFeatures;

        return $this;
    }

    /**
     * Gets multiRoleEnabled
     *
     * @return bool|null
     */
    public function getMultiRoleEnabled(): ?bool
    {
        return $this->container['multiRoleEnabled'];
    }

    /**
     * Sets multiRoleEnabled
     *
     * @param bool|null $multiRoleEnabled multiRoleEnabled
     *
     * @return $this
     */
    public function setMultiRoleEnabled(?bool $multiRoleEnabled): static
    {
        if (is_null($multiRoleEnabled)) {
            throw new InvalidArgumentException('non-nullable multiRoleEnabled cannot be null');
        }
        $this->container['multiRoleEnabled'] = $multiRoleEnabled;

        return $this;
    }

    /**
     * Gets educationPayrollEnabled
     *
     * @return bool|null
     */
    public function getEducationPayrollEnabled(): ?bool
    {
        return $this->container['educationPayrollEnabled'];
    }

    /**
     * Sets educationPayrollEnabled
     *
     * @param bool|null $educationPayrollEnabled educationPayrollEnabled
     *
     * @return $this
     */
    public function setEducationPayrollEnabled(?bool $educationPayrollEnabled): static
    {
        if (is_null($educationPayrollEnabled)) {
            throw new InvalidArgumentException('non-nullable educationPayrollEnabled cannot be null');
        }
        $this->container['educationPayrollEnabled'] = $educationPayrollEnabled;

        return $this;
    }

    /**
     * Gets effectiveDateWorkingPatternsEnabled
     *
     * @return bool|null
     */
    public function getEffectiveDateWorkingPatternsEnabled(): ?bool
    {
        return $this->container['effectiveDateWorkingPatternsEnabled'];
    }

    /**
     * Sets effectiveDateWorkingPatternsEnabled
     *
     * @param bool|null $effectiveDateWorkingPatternsEnabled effectiveDateWorkingPatternsEnabled
     *
     * @return $this
     */
    public function setEffectiveDateWorkingPatternsEnabled(?bool $effectiveDateWorkingPatternsEnabled): static
    {
        if (is_null($effectiveDateWorkingPatternsEnabled)) {
            throw new InvalidArgumentException('non-nullable effectiveDateWorkingPatternsEnabled cannot be null');
        }
        $this->container['effectiveDateWorkingPatternsEnabled'] = $effectiveDateWorkingPatternsEnabled;

        return $this;
    }

    /**
     * Gets backPayEnabled
     *
     * @return bool|null
     */
    public function getBackPayEnabled(): ?bool
    {
        return $this->container['backPayEnabled'];
    }

    /**
     * Sets backPayEnabled
     *
     * @param bool|null $backPayEnabled backPayEnabled
     *
     * @return $this
     */
    public function setBackPayEnabled(?bool $backPayEnabled): static
    {
        if (is_null($backPayEnabled)) {
            throw new InvalidArgumentException('non-nullable backPayEnabled cannot be null');
        }
        $this->container['backPayEnabled'] = $backPayEnabled;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName(?string $displayName): static
    {
        if (is_null($displayName)) {
            array_push($this->openAPINullablesSetToNull, 'displayName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets isOptedInToEvc
     *
     * @return bool|null
     */
    public function getIsOptedInToEvc(): ?bool
    {
        return $this->container['isOptedInToEvc'];
    }

    /**
     * Sets isOptedInToEvc
     *
     * @param bool|null $isOptedInToEvc [readonly] Indicates whether or not the Employer is opted in to the Employee Verification Programme.  Value can only be changed by its dedicated API end point.
     *
     * @return $this
     */
    public function setIsOptedInToEvc(?bool $isOptedInToEvc): static
    {
        if (is_null($isOptedInToEvc)) {
            throw new InvalidArgumentException('non-nullable isOptedInToEvc cannot be null');
        }
        $this->container['isOptedInToEvc'] = $isOptedInToEvc;

        return $this;
    }

    /**
     * Gets evcId
     *
     * @return string|null
     */
    public function getEvcId(): ?string
    {
        return $this->container['evcId'];
    }

    /**
     * Sets evcId
     *
     * @param string|null $evcId If set then this will be used as the Employer ID sent to EVC in place of the standard EmployerId.
     *
     * @return $this
     */
    public function setEvcId(?string $evcId): static
    {
        if (is_null($evcId)) {
            array_push($this->openAPINullablesSetToNull, 'evcId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evcId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['evcId'] = $evcId;

        return $this;
    }

    /**
     * Gets holidayAccrualBasis
     *
     * @return \SynergiTech\Staffology\Model\HolidayAccrual|null
     */
    public function getHolidayAccrualBasis(): ?\SynergiTech\Staffology\Model\HolidayAccrual
    {
        return $this->container['holidayAccrualBasis'];
    }

    /**
     * Sets holidayAccrualBasis
     *
     * @param \SynergiTech\Staffology\Model\HolidayAccrual|null $holidayAccrualBasis holidayAccrualBasis
     *
     * @return $this
     */
    public function setHolidayAccrualBasis(?\SynergiTech\Staffology\Model\HolidayAccrual $holidayAccrualBasis): static
    {
        if (is_null($holidayAccrualBasis)) {
            throw new InvalidArgumentException('non-nullable holidayAccrualBasis cannot be null');
        }
        $this->container['holidayAccrualBasis'] = $holidayAccrualBasis;

        return $this;
    }

    /**
     * Gets holidayAccrualDefaultRateType
     *
     * @return \SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType|null
     */
    public function getHolidayAccrualDefaultRateType(): ?\SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType
    {
        return $this->container['holidayAccrualDefaultRateType'];
    }

    /**
     * Sets holidayAccrualDefaultRateType
     *
     * @param \SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType|null $holidayAccrualDefaultRateType holidayAccrualDefaultRateType
     *
     * @return $this
     */
    public function setHolidayAccrualDefaultRateType(?\SynergiTech\Staffology\Model\HolidayAccrualDefaultRateType $holidayAccrualDefaultRateType): static
    {
        if (is_null($holidayAccrualDefaultRateType)) {
            throw new InvalidArgumentException('non-nullable holidayAccrualDefaultRateType cannot be null');
        }
        $this->container['holidayAccrualDefaultRateType'] = $holidayAccrualDefaultRateType;

        return $this;
    }

    /**
     * Gets mfaEnabled
     *
     * @return bool|null
     */
    public function getMfaEnabled(): ?bool
    {
        return $this->container['mfaEnabled'];
    }

    /**
     * Sets mfaEnabled
     *
     * @param bool|null $mfaEnabled if set to true requires all users to setup MFA  support queries
     *
     * @return $this
     */
    public function setMfaEnabled(?bool $mfaEnabled): static
    {
        if (is_null($mfaEnabled)) {
            throw new InvalidArgumentException('non-nullable mfaEnabled cannot be null');
        }
        $this->container['mfaEnabled'] = $mfaEnabled;

        return $this;
    }

    /**
     * Gets departmentJournalOverridesEnabled
     *
     * @return bool|null
     */
    public function getDepartmentJournalOverridesEnabled(): ?bool
    {
        return $this->container['departmentJournalOverridesEnabled'];
    }

    /**
     * Sets departmentJournalOverridesEnabled
     *
     * @param bool|null $departmentJournalOverridesEnabled Enables the journal overrides for departments, if set to true.
     *
     * @return $this
     */
    public function setDepartmentJournalOverridesEnabled(?bool $departmentJournalOverridesEnabled): static
    {
        if (is_null($departmentJournalOverridesEnabled)) {
            throw new InvalidArgumentException('non-nullable departmentJournalOverridesEnabled cannot be null');
        }
        $this->container['departmentJournalOverridesEnabled'] = $departmentJournalOverridesEnabled;

        return $this;
    }

    /**
     * Gets costCentreJournalOverridesEnabled
     *
     * @return bool|null
     */
    public function getCostCentreJournalOverridesEnabled(): ?bool
    {
        return $this->container['costCentreJournalOverridesEnabled'];
    }

    /**
     * Sets costCentreJournalOverridesEnabled
     *
     * @param bool|null $costCentreJournalOverridesEnabled Enables the journal overrides for cost centre, if set to true.
     *
     * @return $this
     */
    public function setCostCentreJournalOverridesEnabled(?bool $costCentreJournalOverridesEnabled): static
    {
        if (is_null($costCentreJournalOverridesEnabled)) {
            throw new InvalidArgumentException('non-nullable costCentreJournalOverridesEnabled cannot be null');
        }
        $this->container['costCentreJournalOverridesEnabled'] = $costCentreJournalOverridesEnabled;

        return $this;
    }

    /**
     * Gets settingsSortPayrollNumbersAlphanumerically
     *
     * @return bool|null
     */
    public function getSettingsSortPayrollNumbersAlphanumerically(): ?bool
    {
        return $this->container['settingsSortPayrollNumbersAlphanumerically'];
    }

    /**
     * Sets settingsSortPayrollNumbersAlphanumerically
     *
     * @param bool|null $settingsSortPayrollNumbersAlphanumerically Enables the default sorting to be alphanumerically for payroll code, if set to true else numerical sorting will be applied
     *
     * @return $this
     */
    public function setSettingsSortPayrollNumbersAlphanumerically(?bool $settingsSortPayrollNumbersAlphanumerically): static
    {
        if (is_null($settingsSortPayrollNumbersAlphanumerically)) {
            throw new InvalidArgumentException('non-nullable settingsSortPayrollNumbersAlphanumerically cannot be null');
        }
        $this->container['settingsSortPayrollNumbersAlphanumerically'] = $settingsSortPayrollNumbersAlphanumerically;

        return $this;
    }

    /**
     * Gets unauthorisedLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getUnauthorisedLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['unauthorisedLeaveProRataRule'];
    }

    /**
     * Sets unauthorisedLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $unauthorisedLeaveProRataRule unauthorisedLeaveProRataRule
     *
     * @return $this
     */
    public function setUnauthorisedLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $unauthorisedLeaveProRataRule): static
    {
        if (is_null($unauthorisedLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable unauthorisedLeaveProRataRule cannot be null');
        }
        $this->container['unauthorisedLeaveProRataRule'] = $unauthorisedLeaveProRataRule;

        return $this;
    }

    /**
     * Gets holidayLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getHolidayLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['holidayLeaveProRataRule'];
    }

    /**
     * Sets holidayLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $holidayLeaveProRataRule holidayLeaveProRataRule
     *
     * @return $this
     */
    public function setHolidayLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $holidayLeaveProRataRule): static
    {
        if (is_null($holidayLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable holidayLeaveProRataRule cannot be null');
        }
        $this->container['holidayLeaveProRataRule'] = $holidayLeaveProRataRule;

        return $this;
    }

    /**
     * Gets sickLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getSickLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['sickLeaveProRataRule'];
    }

    /**
     * Sets sickLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $sickLeaveProRataRule sickLeaveProRataRule
     *
     * @return $this
     */
    public function setSickLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $sickLeaveProRataRule): static
    {
        if (is_null($sickLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable sickLeaveProRataRule cannot be null');
        }
        $this->container['sickLeaveProRataRule'] = $sickLeaveProRataRule;

        return $this;
    }

    /**
     * Gets parentalLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getParentalLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['parentalLeaveProRataRule'];
    }

    /**
     * Sets parentalLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $parentalLeaveProRataRule parentalLeaveProRataRule
     *
     * @return $this
     */
    public function setParentalLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $parentalLeaveProRataRule): static
    {
        if (is_null($parentalLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable parentalLeaveProRataRule cannot be null');
        }
        $this->container['parentalLeaveProRataRule'] = $parentalLeaveProRataRule;

        return $this;
    }

    /**
     * Gets bereavementLeaveProRataRule
     *
     * @return \SynergiTech\Staffology\Model\LeaveProRataRule|null
     */
    public function getBereavementLeaveProRataRule(): ?\SynergiTech\Staffology\Model\LeaveProRataRule
    {
        return $this->container['bereavementLeaveProRataRule'];
    }

    /**
     * Sets bereavementLeaveProRataRule
     *
     * @param \SynergiTech\Staffology\Model\LeaveProRataRule|null $bereavementLeaveProRataRule bereavementLeaveProRataRule
     *
     * @return $this
     */
    public function setBereavementLeaveProRataRule(?\SynergiTech\Staffology\Model\LeaveProRataRule $bereavementLeaveProRataRule): static
    {
        if (is_null($bereavementLeaveProRataRule)) {
            throw new InvalidArgumentException('non-nullable bereavementLeaveProRataRule cannot be null');
        }
        $this->container['bereavementLeaveProRataRule'] = $bereavementLeaveProRataRule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


