<?php
/**
 * BankDetails
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * BankDetails Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BankDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BankDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'bankName' => 'string',
        'bankBranch' => 'string',
        'bankReference' => 'string',
        'accountName' => 'string',
        'accountNumber' => 'string',
        'sortCode' => 'string',
        'note' => 'string',
        'buildingSocietyRollNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'bankName' => null,
        'bankBranch' => null,
        'bankReference' => null,
        'accountName' => null,
        'accountNumber' => null,
        'sortCode' => null,
        'note' => null,
        'buildingSocietyRollNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'bankName' => true,
        'bankBranch' => true,
        'bankReference' => true,
        'accountName' => true,
        'accountNumber' => true,
        'sortCode' => true,
        'note' => true,
        'buildingSocietyRollNumber' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'bankName' => 'bankName',
        'bankBranch' => 'bankBranch',
        'bankReference' => 'bankReference',
        'accountName' => 'accountName',
        'accountNumber' => 'accountNumber',
        'sortCode' => 'sortCode',
        'note' => 'note',
        'buildingSocietyRollNumber' => 'buildingSocietyRollNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'bankName' => 'setBankName',
        'bankBranch' => 'setBankBranch',
        'bankReference' => 'setBankReference',
        'accountName' => 'setAccountName',
        'accountNumber' => 'setAccountNumber',
        'sortCode' => 'setSortCode',
        'note' => 'setNote',
        'buildingSocietyRollNumber' => 'setBuildingSocietyRollNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'bankName' => 'getBankName',
        'bankBranch' => 'getBankBranch',
        'bankReference' => 'getBankReference',
        'accountName' => 'getAccountName',
        'accountNumber' => 'getAccountNumber',
        'sortCode' => 'getSortCode',
        'note' => 'getNote',
        'buildingSocietyRollNumber' => 'getBuildingSocietyRollNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('bankBranch', $data ?? [], null);
        $this->setIfExists('bankReference', $data ?? [], null);
        $this->setIfExists('accountName', $data ?? [], null);
        $this->setIfExists('accountNumber', $data ?? [], null);
        $this->setIfExists('sortCode', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('buildingSocietyRollNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['bankName']) && (mb_strlen($this->container['bankName']) > 100)) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['bankBranch']) && (mb_strlen($this->container['bankBranch']) > 100)) {
            $invalidProperties[] = "invalid value for 'bankBranch', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['bankReference']) && (mb_strlen($this->container['bankReference']) > 100)) {
            $invalidProperties[] = "invalid value for 'bankReference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['accountName']) && (mb_strlen($this->container['accountName']) > 100)) {
            $invalidProperties[] = "invalid value for 'accountName', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['accountNumber']) && !preg_match("/^\\d{8}$/", $this->container['accountNumber'])) {
            $invalidProperties[] = "invalid value for 'accountNumber', must be conform to the pattern /^\\d{8}$/.";
        }

        if (!is_null($this->container['sortCode']) && !preg_match("/^(\\d{6}|\\d{2}-\\d{2}-\\d{2}|\\d{2} \\d{2} \\d{2})$/", $this->container['sortCode'])) {
            $invalidProperties[] = "invalid value for 'sortCode', must be conform to the pattern /^(\\d{6}|\\d{2}-\\d{2}-\\d{2}|\\d{2} \\d{2} \\d{2})$/.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 200)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['buildingSocietyRollNumber']) && (mb_strlen($this->container['buildingSocietyRollNumber']) > 18)) {
            $invalidProperties[] = "invalid value for 'buildingSocietyRollNumber', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['buildingSocietyRollNumber']) && (mb_strlen($this->container['buildingSocietyRollNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'buildingSocietyRollNumber', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['buildingSocietyRollNumber']) && !preg_match("/^[a-zA-Z0-9\\s\/\\.-]+$/", $this->container['buildingSocietyRollNumber'])) {
            $invalidProperties[] = "invalid value for 'buildingSocietyRollNumber', must be conform to the pattern /^[a-zA-Z0-9\\s\/\\.-]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankName
     *
     * @return string|null
     */
    public function getBankName(): ?string
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName
     *
     * @param string|null $bankName bankName
     *
     * @return $this
     */
    public function setBankName(?string $bankName): static
    {
        if (is_null($bankName)) {
            array_push($this->openAPINullablesSetToNull, 'bankName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankName) && (mb_strlen($bankName) > 100)) {
            throw new InvalidArgumentException('invalid length for $bankName when calling BankDetails., must be smaller than or equal to 100.');
        }

        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets bankBranch
     *
     * @return string|null
     */
    public function getBankBranch(): ?string
    {
        return $this->container['bankBranch'];
    }

    /**
     * Sets bankBranch
     *
     * @param string|null $bankBranch bankBranch
     *
     * @return $this
     */
    public function setBankBranch(?string $bankBranch): static
    {
        if (is_null($bankBranch)) {
            array_push($this->openAPINullablesSetToNull, 'bankBranch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankBranch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankBranch) && (mb_strlen($bankBranch) > 100)) {
            throw new InvalidArgumentException('invalid length for $bankBranch when calling BankDetails., must be smaller than or equal to 100.');
        }

        $this->container['bankBranch'] = $bankBranch;

        return $this;
    }

    /**
     * Gets bankReference
     *
     * @return string|null
     */
    public function getBankReference(): ?string
    {
        return $this->container['bankReference'];
    }

    /**
     * Sets bankReference
     *
     * @param string|null $bankReference bankReference
     *
     * @return $this
     */
    public function setBankReference(?string $bankReference): static
    {
        if (is_null($bankReference)) {
            array_push($this->openAPINullablesSetToNull, 'bankReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankReference) && (mb_strlen($bankReference) > 100)) {
            throw new InvalidArgumentException('invalid length for $bankReference when calling BankDetails., must be smaller than or equal to 100.');
        }

        $this->container['bankReference'] = $bankReference;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string|null
     */
    public function getAccountName(): ?string
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string|null $accountName accountName
     *
     * @return $this
     */
    public function setAccountName(?string $accountName): static
    {
        if (is_null($accountName)) {
            array_push($this->openAPINullablesSetToNull, 'accountName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountName) && (mb_strlen($accountName) > 100)) {
            throw new InvalidArgumentException('invalid length for $accountName when calling BankDetails., must be smaller than or equal to 100.');
        }

        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets accountNumber
     *
     * @return string|null
     */
    public function getAccountNumber(): ?string
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     *
     * @param string|null $accountNumber accountNumber
     *
     * @return $this
     */
    public function setAccountNumber(?string $accountNumber): static
    {
        if (is_null($accountNumber)) {
            array_push($this->openAPINullablesSetToNull, 'accountNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($accountNumber) && (!preg_match("/^\\d{8}$/", ObjectSerializer::toString($accountNumber)))) {
            throw new InvalidArgumentException("invalid value for \$accountNumber when calling BankDetails., must conform to the pattern /^\\d{8}$/.");
        }

        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets sortCode
     *
     * @return string|null
     */
    public function getSortCode(): ?string
    {
        return $this->container['sortCode'];
    }

    /**
     * Sets sortCode
     *
     * @param string|null $sortCode sortCode
     *
     * @return $this
     */
    public function setSortCode(?string $sortCode): static
    {
        if (is_null($sortCode)) {
            array_push($this->openAPINullablesSetToNull, 'sortCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sortCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sortCode) && (!preg_match("/^(\\d{6}|\\d{2}-\\d{2}-\\d{2}|\\d{2} \\d{2} \\d{2})$/", ObjectSerializer::toString($sortCode)))) {
            throw new InvalidArgumentException("invalid value for \$sortCode when calling BankDetails., must conform to the pattern /^(\\d{6}|\\d{2}-\\d{2}-\\d{2}|\\d{2} \\d{2} \\d{2})$/.");
        }

        $this->container['sortCode'] = $sortCode;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote(): ?string
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return $this
     */
    public function setNote(?string $note): static
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($note) && (mb_strlen($note) > 200)) {
            throw new InvalidArgumentException('invalid length for $note when calling BankDetails., must be smaller than or equal to 200.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets buildingSocietyRollNumber
     *
     * @return string|null
     */
    public function getBuildingSocietyRollNumber(): ?string
    {
        return $this->container['buildingSocietyRollNumber'];
    }

    /**
     * Sets buildingSocietyRollNumber
     *
     * @param string|null $buildingSocietyRollNumber buildingSocietyRollNumber
     *
     * @return $this
     */
    public function setBuildingSocietyRollNumber(?string $buildingSocietyRollNumber): static
    {
        if (is_null($buildingSocietyRollNumber)) {
            array_push($this->openAPINullablesSetToNull, 'buildingSocietyRollNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingSocietyRollNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($buildingSocietyRollNumber) && (mb_strlen($buildingSocietyRollNumber) > 18)) {
            throw new InvalidArgumentException('invalid length for $buildingSocietyRollNumber when calling BankDetails., must be smaller than or equal to 18.');
        }
        if (!is_null($buildingSocietyRollNumber) && (mb_strlen($buildingSocietyRollNumber) < 1)) {
            throw new InvalidArgumentException('invalid length for $buildingSocietyRollNumber when calling BankDetails., must be bigger than or equal to 1.');
        }
        if (!is_null($buildingSocietyRollNumber) && (!preg_match("/^[a-zA-Z0-9\\s\/\\.-]+$/", ObjectSerializer::toString($buildingSocietyRollNumber)))) {
            throw new InvalidArgumentException("invalid value for \$buildingSocietyRollNumber when calling BankDetails., must conform to the pattern /^[a-zA-Z0-9\\s\/\\.-]+$/.");
        }

        $this->container['buildingSocietyRollNumber'] = $buildingSocietyRollNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


