<?php
/**
 * NationalInsuranceCalculationPeriodValues
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * NationalInsuranceCalculationPeriodValues Class Doc Comment
 *
 * @description Part of the TaxYearConfig that our engine uses to calculate National Insurance Contributions.  It is used internally when our engine performs calculations.  You do not need to do anything with this model, it&#39;s provided purely for informational purposes.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class NationalInsuranceCalculationPeriodValues implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'NationalInsuranceCalculationPeriodValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'lel' => 'float',
        'pt' => 'float',
        'st' => 'float',
        'fust' => 'float',
        'uap' => 'float',
        'ust' => 'float',
        'aust' => 'float',
        'uel' => 'float',
        'vust' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'lel' => 'double',
        'pt' => 'double',
        'st' => 'double',
        'fust' => 'double',
        'uap' => 'double',
        'ust' => 'double',
        'aust' => 'double',
        'uel' => 'double',
        'vust' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'lel' => false,
        'pt' => false,
        'st' => false,
        'fust' => false,
        'uap' => false,
        'ust' => false,
        'aust' => false,
        'uel' => false,
        'vust' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'lel' => 'lel',
        'pt' => 'pt',
        'st' => 'st',
        'fust' => 'fust',
        'uap' => 'uap',
        'ust' => 'ust',
        'aust' => 'aust',
        'uel' => 'uel',
        'vust' => 'vust'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'lel' => 'setLel',
        'pt' => 'setPt',
        'st' => 'setSt',
        'fust' => 'setFust',
        'uap' => 'setUap',
        'ust' => 'setUst',
        'aust' => 'setAust',
        'uel' => 'setUel',
        'vust' => 'setVust'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'lel' => 'getLel',
        'pt' => 'getPt',
        'st' => 'getSt',
        'fust' => 'getFust',
        'uap' => 'getUap',
        'ust' => 'getUst',
        'aust' => 'getAust',
        'uel' => 'getUel',
        'vust' => 'getVust'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lel', $data ?? [], null);
        $this->setIfExists('pt', $data ?? [], null);
        $this->setIfExists('st', $data ?? [], null);
        $this->setIfExists('fust', $data ?? [], null);
        $this->setIfExists('uap', $data ?? [], null);
        $this->setIfExists('ust', $data ?? [], null);
        $this->setIfExists('aust', $data ?? [], null);
        $this->setIfExists('uel', $data ?? [], null);
        $this->setIfExists('vust', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lel
     *
     * @return float|null
     */
    public function getLel(): ?float
    {
        return $this->container['lel'];
    }

    /**
     * Sets lel
     *
     * @param float|null $lel [readonly] Lower Earnings Limit
     *
     * @return $this
     */
    public function setLel(?float $lel): static
    {
        if (is_null($lel)) {
            throw new InvalidArgumentException('non-nullable lel cannot be null');
        }
        $this->container['lel'] = $lel;

        return $this;
    }

    /**
     * Gets pt
     *
     * @return float|null
     */
    public function getPt(): ?float
    {
        return $this->container['pt'];
    }

    /**
     * Sets pt
     *
     * @param float|null $pt [readonly] Primary Threshold
     *
     * @return $this
     */
    public function setPt(?float $pt): static
    {
        if (is_null($pt)) {
            throw new InvalidArgumentException('non-nullable pt cannot be null');
        }
        $this->container['pt'] = $pt;

        return $this;
    }

    /**
     * Gets st
     *
     * @return float|null
     */
    public function getSt(): ?float
    {
        return $this->container['st'];
    }

    /**
     * Sets st
     *
     * @param float|null $st [readonly] Secondary Threshold
     *
     * @return $this
     */
    public function setSt(?float $st): static
    {
        if (is_null($st)) {
            throw new InvalidArgumentException('non-nullable st cannot be null');
        }
        $this->container['st'] = $st;

        return $this;
    }

    /**
     * Gets fust
     *
     * @return float|null
     */
    public function getFust(): ?float
    {
        return $this->container['fust'];
    }

    /**
     * Sets fust
     *
     * @param float|null $fust [readonly] Freeports Upper Accrual Threshold
     *
     * @return $this
     */
    public function setFust(?float $fust): static
    {
        if (is_null($fust)) {
            throw new InvalidArgumentException('non-nullable fust cannot be null');
        }
        $this->container['fust'] = $fust;

        return $this;
    }

    /**
     * Gets uap
     *
     * @return float|null
     */
    public function getUap(): ?float
    {
        return $this->container['uap'];
    }

    /**
     * Sets uap
     *
     * @param float|null $uap [readonly] Upper Accrual Point
     *
     * @return $this
     */
    public function setUap(?float $uap): static
    {
        if (is_null($uap)) {
            throw new InvalidArgumentException('non-nullable uap cannot be null');
        }
        $this->container['uap'] = $uap;

        return $this;
    }

    /**
     * Gets ust
     *
     * @return float|null
     */
    public function getUst(): ?float
    {
        return $this->container['ust'];
    }

    /**
     * Sets ust
     *
     * @param float|null $ust [readonly] Upper Secondary Threshold (under 21)
     *
     * @return $this
     */
    public function setUst(?float $ust): static
    {
        if (is_null($ust)) {
            throw new InvalidArgumentException('non-nullable ust cannot be null');
        }
        $this->container['ust'] = $ust;

        return $this;
    }

    /**
     * Gets aust
     *
     * @return float|null
     */
    public function getAust(): ?float
    {
        return $this->container['aust'];
    }

    /**
     * Sets aust
     *
     * @param float|null $aust [readonly] Apprentice Upper Secondary Threshold (apprentice under 25)
     *
     * @return $this
     */
    public function setAust(?float $aust): static
    {
        if (is_null($aust)) {
            throw new InvalidArgumentException('non-nullable aust cannot be null');
        }
        $this->container['aust'] = $aust;

        return $this;
    }

    /**
     * Gets uel
     *
     * @return float|null
     */
    public function getUel(): ?float
    {
        return $this->container['uel'];
    }

    /**
     * Sets uel
     *
     * @param float|null $uel [readonly] Upper Earnings Limit
     *
     * @return $this
     */
    public function setUel(?float $uel): static
    {
        if (is_null($uel)) {
            throw new InvalidArgumentException('non-nullable uel cannot be null');
        }
        $this->container['uel'] = $uel;

        return $this;
    }

    /**
     * Gets vust
     *
     * @return float|null
     */
    public function getVust(): ?float
    {
        return $this->container['vust'];
    }

    /**
     * Sets vust
     *
     * @param float|null $vust [readonly] Veterian Upper Secondary Threshold
     *
     * @return $this
     */
    public function setVust(?float $vust): static
    {
        if (is_null($vust)) {
            throw new InvalidArgumentException('non-nullable vust cannot be null');
        }
        $this->container['vust'] = $vust;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


