<?php
/**
 * ContractEmploymentDetailsRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractEmploymentDetailsRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractEmploymentDetailsRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.EmploymentDetailsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'cis' => '\SynergiTech\Staffology\Model\ContractCisDetailsRequest',
        'department' => '\SynergiTech\Staffology\Model\ContractDepartmentRequest',
        'cisSubContractor' => 'bool',
        'payrollCode' => 'string',
        'jobTitle' => 'string',
        'onHold' => 'bool',
        'onFurlough' => 'bool',
        'furloughStart' => '\DateTime',
        'furloughEnd' => '\DateTime',
        'furloughCalculationBasis' => '\SynergiTech\Staffology\Model\FurloughCalculationBasis',
        'furloughCalculationBasisAmount' => 'float',
        'partialFurlough' => 'bool',
        'furloughHoursNormallyWorked' => 'float',
        'furloughHoursOnFurlough' => 'float',
        'isApprentice' => 'bool',
        'apprenticeshipStartDate' => '\DateTime',
        'apprenticeshipEndDate' => '\DateTime',
        'workingPattern' => 'string',
        'forcePreviousPayrollCode' => 'string',
        'starterDetails' => '\SynergiTech\Staffology\Model\ContractStarterDetails',
        'directorshipDetails' => '\SynergiTech\Staffology\Model\ContractDirectorshipDetails',
        'leaverDetails' => '\SynergiTech\Staffology\Model\ContractLeaverDetails',
        'roles' => '\SynergiTech\Staffology\Model\ContractEmployeeRoleItem[]',
        'isWorkingInFreePort' => 'bool',
        'isWorkingInInvestmentZone' => 'bool',
        'veteranDetails' => '\SynergiTech\Staffology\Model\ContractVeteranDetails',
        'continuousEmploymentDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'cis' => null,
        'department' => null,
        'cisSubContractor' => null,
        'payrollCode' => null,
        'jobTitle' => null,
        'onHold' => null,
        'onFurlough' => null,
        'furloughStart' => 'date',
        'furloughEnd' => 'date',
        'furloughCalculationBasis' => null,
        'furloughCalculationBasisAmount' => 'double',
        'partialFurlough' => null,
        'furloughHoursNormallyWorked' => 'double',
        'furloughHoursOnFurlough' => 'double',
        'isApprentice' => null,
        'apprenticeshipStartDate' => 'date',
        'apprenticeshipEndDate' => 'date',
        'workingPattern' => 'uuid',
        'forcePreviousPayrollCode' => null,
        'starterDetails' => null,
        'directorshipDetails' => null,
        'leaverDetails' => null,
        'roles' => null,
        'isWorkingInFreePort' => null,
        'isWorkingInInvestmentZone' => null,
        'veteranDetails' => null,
        'continuousEmploymentDate' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'cis' => false,
        'department' => false,
        'cisSubContractor' => false,
        'payrollCode' => false,
        'jobTitle' => true,
        'onHold' => false,
        'onFurlough' => false,
        'furloughStart' => true,
        'furloughEnd' => true,
        'furloughCalculationBasis' => false,
        'furloughCalculationBasisAmount' => false,
        'partialFurlough' => false,
        'furloughHoursNormallyWorked' => false,
        'furloughHoursOnFurlough' => false,
        'isApprentice' => false,
        'apprenticeshipStartDate' => true,
        'apprenticeshipEndDate' => true,
        'workingPattern' => true,
        'forcePreviousPayrollCode' => true,
        'starterDetails' => false,
        'directorshipDetails' => false,
        'leaverDetails' => false,
        'roles' => true,
        'isWorkingInFreePort' => false,
        'isWorkingInInvestmentZone' => false,
        'veteranDetails' => false,
        'continuousEmploymentDate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'cis' => 'cis',
        'department' => 'department',
        'cisSubContractor' => 'cisSubContractor',
        'payrollCode' => 'payrollCode',
        'jobTitle' => 'jobTitle',
        'onHold' => 'onHold',
        'onFurlough' => 'onFurlough',
        'furloughStart' => 'furloughStart',
        'furloughEnd' => 'furloughEnd',
        'furloughCalculationBasis' => 'furloughCalculationBasis',
        'furloughCalculationBasisAmount' => 'furloughCalculationBasisAmount',
        'partialFurlough' => 'partialFurlough',
        'furloughHoursNormallyWorked' => 'furloughHoursNormallyWorked',
        'furloughHoursOnFurlough' => 'furloughHoursOnFurlough',
        'isApprentice' => 'isApprentice',
        'apprenticeshipStartDate' => 'apprenticeshipStartDate',
        'apprenticeshipEndDate' => 'apprenticeshipEndDate',
        'workingPattern' => 'workingPattern',
        'forcePreviousPayrollCode' => 'forcePreviousPayrollCode',
        'starterDetails' => 'starterDetails',
        'directorshipDetails' => 'directorshipDetails',
        'leaverDetails' => 'leaverDetails',
        'roles' => 'roles',
        'isWorkingInFreePort' => 'isWorkingInFreePort',
        'isWorkingInInvestmentZone' => 'isWorkingInInvestmentZone',
        'veteranDetails' => 'veteranDetails',
        'continuousEmploymentDate' => 'continuousEmploymentDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'cis' => 'setCis',
        'department' => 'setDepartment',
        'cisSubContractor' => 'setCisSubContractor',
        'payrollCode' => 'setPayrollCode',
        'jobTitle' => 'setJobTitle',
        'onHold' => 'setOnHold',
        'onFurlough' => 'setOnFurlough',
        'furloughStart' => 'setFurloughStart',
        'furloughEnd' => 'setFurloughEnd',
        'furloughCalculationBasis' => 'setFurloughCalculationBasis',
        'furloughCalculationBasisAmount' => 'setFurloughCalculationBasisAmount',
        'partialFurlough' => 'setPartialFurlough',
        'furloughHoursNormallyWorked' => 'setFurloughHoursNormallyWorked',
        'furloughHoursOnFurlough' => 'setFurloughHoursOnFurlough',
        'isApprentice' => 'setIsApprentice',
        'apprenticeshipStartDate' => 'setApprenticeshipStartDate',
        'apprenticeshipEndDate' => 'setApprenticeshipEndDate',
        'workingPattern' => 'setWorkingPattern',
        'forcePreviousPayrollCode' => 'setForcePreviousPayrollCode',
        'starterDetails' => 'setStarterDetails',
        'directorshipDetails' => 'setDirectorshipDetails',
        'leaverDetails' => 'setLeaverDetails',
        'roles' => 'setRoles',
        'isWorkingInFreePort' => 'setIsWorkingInFreePort',
        'isWorkingInInvestmentZone' => 'setIsWorkingInInvestmentZone',
        'veteranDetails' => 'setVeteranDetails',
        'continuousEmploymentDate' => 'setContinuousEmploymentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'cis' => 'getCis',
        'department' => 'getDepartment',
        'cisSubContractor' => 'getCisSubContractor',
        'payrollCode' => 'getPayrollCode',
        'jobTitle' => 'getJobTitle',
        'onHold' => 'getOnHold',
        'onFurlough' => 'getOnFurlough',
        'furloughStart' => 'getFurloughStart',
        'furloughEnd' => 'getFurloughEnd',
        'furloughCalculationBasis' => 'getFurloughCalculationBasis',
        'furloughCalculationBasisAmount' => 'getFurloughCalculationBasisAmount',
        'partialFurlough' => 'getPartialFurlough',
        'furloughHoursNormallyWorked' => 'getFurloughHoursNormallyWorked',
        'furloughHoursOnFurlough' => 'getFurloughHoursOnFurlough',
        'isApprentice' => 'getIsApprentice',
        'apprenticeshipStartDate' => 'getApprenticeshipStartDate',
        'apprenticeshipEndDate' => 'getApprenticeshipEndDate',
        'workingPattern' => 'getWorkingPattern',
        'forcePreviousPayrollCode' => 'getForcePreviousPayrollCode',
        'starterDetails' => 'getStarterDetails',
        'directorshipDetails' => 'getDirectorshipDetails',
        'leaverDetails' => 'getLeaverDetails',
        'roles' => 'getRoles',
        'isWorkingInFreePort' => 'getIsWorkingInFreePort',
        'isWorkingInInvestmentZone' => 'getIsWorkingInInvestmentZone',
        'veteranDetails' => 'getVeteranDetails',
        'continuousEmploymentDate' => 'getContinuousEmploymentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cis', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('cisSubContractor', $data ?? [], null);
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('jobTitle', $data ?? [], null);
        $this->setIfExists('onHold', $data ?? [], null);
        $this->setIfExists('onFurlough', $data ?? [], null);
        $this->setIfExists('furloughStart', $data ?? [], null);
        $this->setIfExists('furloughEnd', $data ?? [], null);
        $this->setIfExists('furloughCalculationBasis', $data ?? [], null);
        $this->setIfExists('furloughCalculationBasisAmount', $data ?? [], null);
        $this->setIfExists('partialFurlough', $data ?? [], null);
        $this->setIfExists('furloughHoursNormallyWorked', $data ?? [], null);
        $this->setIfExists('furloughHoursOnFurlough', $data ?? [], null);
        $this->setIfExists('isApprentice', $data ?? [], null);
        $this->setIfExists('apprenticeshipStartDate', $data ?? [], null);
        $this->setIfExists('apprenticeshipEndDate', $data ?? [], null);
        $this->setIfExists('workingPattern', $data ?? [], null);
        $this->setIfExists('forcePreviousPayrollCode', $data ?? [], null);
        $this->setIfExists('starterDetails', $data ?? [], null);
        $this->setIfExists('directorshipDetails', $data ?? [], null);
        $this->setIfExists('leaverDetails', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('isWorkingInFreePort', $data ?? [], null);
        $this->setIfExists('isWorkingInInvestmentZone', $data ?? [], null);
        $this->setIfExists('veteranDetails', $data ?? [], null);
        $this->setIfExists('continuousEmploymentDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['payrollCode'] === null) {
            $invalidProperties[] = "'payrollCode' can't be null";
        }
        if ((mb_strlen($this->container['payrollCode']) > 35)) {
            $invalidProperties[] = "invalid value for 'payrollCode', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['payrollCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'payrollCode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['jobTitle']) && (mb_strlen($this->container['jobTitle']) > 120)) {
            $invalidProperties[] = "invalid value for 'jobTitle', the character length must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['forcePreviousPayrollCode']) && (mb_strlen($this->container['forcePreviousPayrollCode']) > 35)) {
            $invalidProperties[] = "invalid value for 'forcePreviousPayrollCode', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cis
     *
     * @return \SynergiTech\Staffology\Model\ContractCisDetailsRequest|null
     */
    public function getCis(): ?\SynergiTech\Staffology\Model\ContractCisDetailsRequest
    {
        return $this->container['cis'];
    }

    /**
     * Sets cis
     *
     * @param \SynergiTech\Staffology\Model\ContractCisDetailsRequest|null $cis cis
     *
     * @return $this
     */
    public function setCis(?\SynergiTech\Staffology\Model\ContractCisDetailsRequest $cis): static
    {
        if (is_null($cis)) {
            throw new InvalidArgumentException('non-nullable cis cannot be null');
        }
        $this->container['cis'] = $cis;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \SynergiTech\Staffology\Model\ContractDepartmentRequest|null
     */
    public function getDepartment(): ?\SynergiTech\Staffology\Model\ContractDepartmentRequest
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \SynergiTech\Staffology\Model\ContractDepartmentRequest|null $department department
     *
     * @return $this
     */
    public function setDepartment(?\SynergiTech\Staffology\Model\ContractDepartmentRequest $department): static
    {
        if (is_null($department)) {
            throw new InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets cisSubContractor
     *
     * @return bool|null
     */
    public function getCisSubContractor(): ?bool
    {
        return $this->container['cisSubContractor'];
    }

    /**
     * Sets cisSubContractor
     *
     * @param bool|null $cisSubContractor Set to True if this Employee is a CIS Subcontractor. The ```Cis``` property contains further information
     *
     * @return $this
     */
    public function setCisSubContractor(?bool $cisSubContractor): static
    {
        if (is_null($cisSubContractor)) {
            throw new InvalidArgumentException('non-nullable cisSubContractor cannot be null');
        }
        $this->container['cisSubContractor'] = $cisSubContractor;

        return $this;
    }

    /**
     * Gets payrollCode
     *
     * @return string
     */
    public function getPayrollCode(): string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string $payrollCode The Employees Payroll Code. Must be unique within the Employer.
     *
     * @return $this
     */
    public function setPayrollCode(string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            throw new InvalidArgumentException('non-nullable payrollCode cannot be null');
        }
        if ((mb_strlen($payrollCode) > 35)) {
            throw new InvalidArgumentException('invalid length for $payrollCode when calling ContractEmploymentDetailsRequest., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($payrollCode) < 1)) {
            throw new InvalidArgumentException('invalid length for $payrollCode when calling ContractEmploymentDetailsRequest., must be bigger than or equal to 1.');
        }

        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return string|null
     */
    public function getJobTitle(): ?string
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     *
     * @param string|null $jobTitle Job Title of Primary role of the Employee
     *
     * @return $this
     */
    public function setJobTitle(?string $jobTitle): static
    {
        if (is_null($jobTitle)) {
            array_push($this->openAPINullablesSetToNull, 'jobTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobTitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($jobTitle) && (mb_strlen($jobTitle) > 120)) {
            throw new InvalidArgumentException('invalid length for $jobTitle when calling ContractEmploymentDetailsRequest., must be smaller than or equal to 120.');
        }

        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets onHold
     *
     * @return bool|null
     */
    public function getOnHold(): ?bool
    {
        return $this->container['onHold'];
    }

    /**
     * Sets onHold
     *
     * @param bool|null $onHold Set to true to temporarily exclude the employee from payruns
     *
     * @return $this
     */
    public function setOnHold(?bool $onHold): static
    {
        if (is_null($onHold)) {
            throw new InvalidArgumentException('non-nullable onHold cannot be null');
        }
        $this->container['onHold'] = $onHold;

        return $this;
    }

    /**
     * Gets onFurlough
     *
     * @return bool|null
     */
    public function getOnFurlough(): ?bool
    {
        return $this->container['onFurlough'];
    }

    /**
     * Sets onFurlough
     *
     * @param bool|null $onFurlough Set to true if the employee is on furlough.
     *
     * @return $this
     */
    public function setOnFurlough(?bool $onFurlough): static
    {
        if (is_null($onFurlough)) {
            throw new InvalidArgumentException('non-nullable onFurlough cannot be null');
        }
        $this->container['onFurlough'] = $onFurlough;

        return $this;
    }

    /**
     * Gets furloughStart
     *
     * @return \DateTime|null
     */
    public function getFurloughStart(): ?\DateTime
    {
        return $this->container['furloughStart'];
    }

    /**
     * Sets furloughStart
     *
     * @param \DateTime|null $furloughStart Furlough Start Date.
     *
     * @return $this
     */
    public function setFurloughStart(?\DateTime $furloughStart): static
    {
        if (is_null($furloughStart)) {
            array_push($this->openAPINullablesSetToNull, 'furloughStart');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('furloughStart', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['furloughStart'] = $furloughStart;

        return $this;
    }

    /**
     * Gets furloughEnd
     *
     * @return \DateTime|null
     */
    public function getFurloughEnd(): ?\DateTime
    {
        return $this->container['furloughEnd'];
    }

    /**
     * Sets furloughEnd
     *
     * @param \DateTime|null $furloughEnd Furlough End Date.
     *
     * @return $this
     */
    public function setFurloughEnd(?\DateTime $furloughEnd): static
    {
        if (is_null($furloughEnd)) {
            array_push($this->openAPINullablesSetToNull, 'furloughEnd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('furloughEnd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['furloughEnd'] = $furloughEnd;

        return $this;
    }

    /**
     * Gets furloughCalculationBasis
     *
     * @return \SynergiTech\Staffology\Model\FurloughCalculationBasis|null
     */
    public function getFurloughCalculationBasis(): ?\SynergiTech\Staffology\Model\FurloughCalculationBasis
    {
        return $this->container['furloughCalculationBasis'];
    }

    /**
     * Sets furloughCalculationBasis
     *
     * @param \SynergiTech\Staffology\Model\FurloughCalculationBasis|null $furloughCalculationBasis furloughCalculationBasis
     *
     * @return $this
     */
    public function setFurloughCalculationBasis(?\SynergiTech\Staffology\Model\FurloughCalculationBasis $furloughCalculationBasis): static
    {
        if (is_null($furloughCalculationBasis)) {
            throw new InvalidArgumentException('non-nullable furloughCalculationBasis cannot be null');
        }
        $this->container['furloughCalculationBasis'] = $furloughCalculationBasis;

        return $this;
    }

    /**
     * Gets furloughCalculationBasisAmount
     *
     * @return float|null
     */
    public function getFurloughCalculationBasisAmount(): ?float
    {
        return $this->container['furloughCalculationBasisAmount'];
    }

    /**
     * Sets furloughCalculationBasisAmount
     *
     * @param float|null $furloughCalculationBasisAmount furloughCalculationBasisAmount
     *
     * @return $this
     */
    public function setFurloughCalculationBasisAmount(?float $furloughCalculationBasisAmount): static
    {
        if (is_null($furloughCalculationBasisAmount)) {
            throw new InvalidArgumentException('non-nullable furloughCalculationBasisAmount cannot be null');
        }
        $this->container['furloughCalculationBasisAmount'] = $furloughCalculationBasisAmount;

        return $this;
    }

    /**
     * Gets partialFurlough
     *
     * @return bool|null
     */
    public function getPartialFurlough(): ?bool
    {
        return $this->container['partialFurlough'];
    }

    /**
     * Sets partialFurlough
     *
     * @param bool|null $partialFurlough Set to true if the employee is partially furloughed.
     *
     * @return $this
     */
    public function setPartialFurlough(?bool $partialFurlough): static
    {
        if (is_null($partialFurlough)) {
            throw new InvalidArgumentException('non-nullable partialFurlough cannot be null');
        }
        $this->container['partialFurlough'] = $partialFurlough;

        return $this;
    }

    /**
     * Gets furloughHoursNormallyWorked
     *
     * @return float|null
     */
    public function getFurloughHoursNormallyWorked(): ?float
    {
        return $this->container['furloughHoursNormallyWorked'];
    }

    /**
     * Sets furloughHoursNormallyWorked
     *
     * @param float|null $furloughHoursNormallyWorked furloughHoursNormallyWorked
     *
     * @return $this
     */
    public function setFurloughHoursNormallyWorked(?float $furloughHoursNormallyWorked): static
    {
        if (is_null($furloughHoursNormallyWorked)) {
            throw new InvalidArgumentException('non-nullable furloughHoursNormallyWorked cannot be null');
        }
        $this->container['furloughHoursNormallyWorked'] = $furloughHoursNormallyWorked;

        return $this;
    }

    /**
     * Gets furloughHoursOnFurlough
     *
     * @return float|null
     */
    public function getFurloughHoursOnFurlough(): ?float
    {
        return $this->container['furloughHoursOnFurlough'];
    }

    /**
     * Sets furloughHoursOnFurlough
     *
     * @param float|null $furloughHoursOnFurlough furloughHoursOnFurlough
     *
     * @return $this
     */
    public function setFurloughHoursOnFurlough(?float $furloughHoursOnFurlough): static
    {
        if (is_null($furloughHoursOnFurlough)) {
            throw new InvalidArgumentException('non-nullable furloughHoursOnFurlough cannot be null');
        }
        $this->container['furloughHoursOnFurlough'] = $furloughHoursOnFurlough;

        return $this;
    }

    /**
     * Gets isApprentice
     *
     * @return bool|null
     */
    public function getIsApprentice(): ?bool
    {
        return $this->container['isApprentice'];
    }

    /**
     * Sets isApprentice
     *
     * @param bool|null $isApprentice Set to True if this Employee is an apprentice. This affects the calculations for National Minimum Wage
     *
     * @return $this
     */
    public function setIsApprentice(?bool $isApprentice): static
    {
        if (is_null($isApprentice)) {
            throw new InvalidArgumentException('non-nullable isApprentice cannot be null');
        }
        $this->container['isApprentice'] = $isApprentice;

        return $this;
    }

    /**
     * Gets apprenticeshipStartDate
     *
     * @return \DateTime|null
     */
    public function getApprenticeshipStartDate(): ?\DateTime
    {
        return $this->container['apprenticeshipStartDate'];
    }

    /**
     * Sets apprenticeshipStartDate
     *
     * @param \DateTime|null $apprenticeshipStartDate apprenticeshipStartDate
     *
     * @return $this
     */
    public function setApprenticeshipStartDate(?\DateTime $apprenticeshipStartDate): static
    {
        if (is_null($apprenticeshipStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'apprenticeshipStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apprenticeshipStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apprenticeshipStartDate'] = $apprenticeshipStartDate;

        return $this;
    }

    /**
     * Gets apprenticeshipEndDate
     *
     * @return \DateTime|null
     */
    public function getApprenticeshipEndDate(): ?\DateTime
    {
        return $this->container['apprenticeshipEndDate'];
    }

    /**
     * Sets apprenticeshipEndDate
     *
     * @param \DateTime|null $apprenticeshipEndDate apprenticeshipEndDate
     *
     * @return $this
     */
    public function setApprenticeshipEndDate(?\DateTime $apprenticeshipEndDate): static
    {
        if (is_null($apprenticeshipEndDate)) {
            array_push($this->openAPINullablesSetToNull, 'apprenticeshipEndDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apprenticeshipEndDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apprenticeshipEndDate'] = $apprenticeshipEndDate;

        return $this;
    }

    /**
     * Gets workingPattern
     *
     * @return string|null
     */
    public function getWorkingPattern(): ?string
    {
        return $this->container['workingPattern'];
    }

    /**
     * Sets workingPattern
     *
     * @param string|null $workingPattern Used when calculating payments for Leave.  If null then the default Working Pattern is used
     *
     * @return $this
     */
    public function setWorkingPattern(?string $workingPattern): static
    {
        if (is_null($workingPattern)) {
            array_push($this->openAPINullablesSetToNull, 'workingPattern');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workingPattern', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workingPattern'] = $workingPattern;

        return $this;
    }

    /**
     * Gets forcePreviousPayrollCode
     *
     * @return string|null
     */
    public function getForcePreviousPayrollCode(): ?string
    {
        return $this->container['forcePreviousPayrollCode'];
    }

    /**
     * Sets forcePreviousPayrollCode
     *
     * @param string|null $forcePreviousPayrollCode If this property has a non-empty value then a change of Payroll code will be declared on the next FPS.
     *
     * @return $this
     */
    public function setForcePreviousPayrollCode(?string $forcePreviousPayrollCode): static
    {
        if (is_null($forcePreviousPayrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'forcePreviousPayrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forcePreviousPayrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($forcePreviousPayrollCode) && (mb_strlen($forcePreviousPayrollCode) > 35)) {
            throw new InvalidArgumentException('invalid length for $forcePreviousPayrollCode when calling ContractEmploymentDetailsRequest., must be smaller than or equal to 35.');
        }

        $this->container['forcePreviousPayrollCode'] = $forcePreviousPayrollCode;

        return $this;
    }

    /**
     * Gets starterDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractStarterDetails|null
     */
    public function getStarterDetails(): ?\SynergiTech\Staffology\Model\ContractStarterDetails
    {
        return $this->container['starterDetails'];
    }

    /**
     * Sets starterDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractStarterDetails|null $starterDetails starterDetails
     *
     * @return $this
     */
    public function setStarterDetails(?\SynergiTech\Staffology\Model\ContractStarterDetails $starterDetails): static
    {
        if (is_null($starterDetails)) {
            throw new InvalidArgumentException('non-nullable starterDetails cannot be null');
        }
        $this->container['starterDetails'] = $starterDetails;

        return $this;
    }

    /**
     * Gets directorshipDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractDirectorshipDetails|null
     */
    public function getDirectorshipDetails(): ?\SynergiTech\Staffology\Model\ContractDirectorshipDetails
    {
        return $this->container['directorshipDetails'];
    }

    /**
     * Sets directorshipDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractDirectorshipDetails|null $directorshipDetails directorshipDetails
     *
     * @return $this
     */
    public function setDirectorshipDetails(?\SynergiTech\Staffology\Model\ContractDirectorshipDetails $directorshipDetails): static
    {
        if (is_null($directorshipDetails)) {
            throw new InvalidArgumentException('non-nullable directorshipDetails cannot be null');
        }
        $this->container['directorshipDetails'] = $directorshipDetails;

        return $this;
    }

    /**
     * Gets leaverDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractLeaverDetails|null
     */
    public function getLeaverDetails(): ?\SynergiTech\Staffology\Model\ContractLeaverDetails
    {
        return $this->container['leaverDetails'];
    }

    /**
     * Sets leaverDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractLeaverDetails|null $leaverDetails leaverDetails
     *
     * @return $this
     */
    public function setLeaverDetails(?\SynergiTech\Staffology\Model\ContractLeaverDetails $leaverDetails): static
    {
        if (is_null($leaverDetails)) {
            throw new InvalidArgumentException('non-nullable leaverDetails cannot be null');
        }
        $this->container['leaverDetails'] = $leaverDetails;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleItem[]|null
     */
    public function getRoles(): ?array
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \SynergiTech\Staffology\Model\ContractEmployeeRoleItem[]|null $roles List of Roles held by Employee
     *
     * @return $this
     */
    public function setRoles(?array $roles): static
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets isWorkingInFreePort
     *
     * @return bool|null
     */
    public function getIsWorkingInFreePort(): ?bool
    {
        return $this->container['isWorkingInFreePort'];
    }

    /**
     * Sets isWorkingInFreePort
     *
     * @param bool|null $isWorkingInFreePort Flag indicating the employee is employed in a Freeport
     *
     * @return $this
     */
    public function setIsWorkingInFreePort(?bool $isWorkingInFreePort): static
    {
        if (is_null($isWorkingInFreePort)) {
            throw new InvalidArgumentException('non-nullable isWorkingInFreePort cannot be null');
        }
        $this->container['isWorkingInFreePort'] = $isWorkingInFreePort;

        return $this;
    }

    /**
     * Gets isWorkingInInvestmentZone
     *
     * @return bool|null
     */
    public function getIsWorkingInInvestmentZone(): ?bool
    {
        return $this->container['isWorkingInInvestmentZone'];
    }

    /**
     * Sets isWorkingInInvestmentZone
     *
     * @param bool|null $isWorkingInInvestmentZone Flag indicating the employee is employed in an Investment Zone
     *
     * @return $this
     */
    public function setIsWorkingInInvestmentZone(?bool $isWorkingInInvestmentZone): static
    {
        if (is_null($isWorkingInInvestmentZone)) {
            throw new InvalidArgumentException('non-nullable isWorkingInInvestmentZone cannot be null');
        }
        $this->container['isWorkingInInvestmentZone'] = $isWorkingInInvestmentZone;

        return $this;
    }

    /**
     * Gets veteranDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractVeteranDetails|null
     */
    public function getVeteranDetails(): ?\SynergiTech\Staffology\Model\ContractVeteranDetails
    {
        return $this->container['veteranDetails'];
    }

    /**
     * Sets veteranDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractVeteranDetails|null $veteranDetails veteranDetails
     *
     * @return $this
     */
    public function setVeteranDetails(?\SynergiTech\Staffology\Model\ContractVeteranDetails $veteranDetails): static
    {
        if (is_null($veteranDetails)) {
            throw new InvalidArgumentException('non-nullable veteranDetails cannot be null');
        }
        $this->container['veteranDetails'] = $veteranDetails;

        return $this;
    }

    /**
     * Gets continuousEmploymentDate
     *
     * @return \DateTime|null
     */
    public function getContinuousEmploymentDate(): ?\DateTime
    {
        return $this->container['continuousEmploymentDate'];
    }

    /**
     * Sets continuousEmploymentDate
     *
     * @param \DateTime|null $continuousEmploymentDate Date of continuous employment
     *
     * @return $this
     */
    public function setContinuousEmploymentDate(?\DateTime $continuousEmploymentDate): static
    {
        if (is_null($continuousEmploymentDate)) {
            array_push($this->openAPINullablesSetToNull, 'continuousEmploymentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('continuousEmploymentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['continuousEmploymentDate'] = $continuousEmploymentDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


