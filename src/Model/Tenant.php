<?php
/**
 * Tenant
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Tenant Class Doc Comment
 *
 * @description The Tenant model represents the brand that provides the account.  This is used by our White Label partners to manage and brand their user accounts.  Unless you are an admin for a White Label account you&#39;ll have no interest in this model.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Tenant implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Tenant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'brandCode' => 'string',
        'appName' => 'string',
        'homeUrl' => 'string',
        'headContent' => 'string',
        'logOutUrl' => 'string',
        'loginImgUrl' => 'string',
        'homeImgUrl' => 'string',
        'favIcon' => 'string',
        'cssColorsFile' => 'string',
        'cssFile' => 'string',
        'mailingList' => 'bool',
        'htmlInsertions' => '\SynergiTech\Staffology\Model\TenantHtmlInsertion[]',
        'mailSettings' => '\SynergiTech\Staffology\Model\MailSettings',
        'signupUrl' => 'string',
        'termsUrl' => 'string',
        'helpUrl' => 'string',
        'supportEmail' => 'string',
        'newUserSignupEmail' => 'string',
        'approveNewUsers' => 'bool',
        'enableBureauFeatures' => 'bool',
        'requireDdMandateBeforeAllowingBillableActivity' => 'bool',
        'whiteLabelMode' => 'bool',
        'enableReportWriterFeature' => 'bool',
        'disableEvc' => 'bool',
        'tenantOwnsBilling' => 'bool',
        'billingSettings' => '\SynergiTech\Staffology\Model\TenantBillingSettings',
        'usersCanManageAccountSecuritySettings' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'brandCode' => null,
        'appName' => null,
        'homeUrl' => null,
        'headContent' => null,
        'logOutUrl' => null,
        'loginImgUrl' => null,
        'homeImgUrl' => null,
        'favIcon' => null,
        'cssColorsFile' => null,
        'cssFile' => null,
        'mailingList' => null,
        'htmlInsertions' => null,
        'mailSettings' => null,
        'signupUrl' => null,
        'termsUrl' => null,
        'helpUrl' => null,
        'supportEmail' => 'email',
        'newUserSignupEmail' => 'email',
        'approveNewUsers' => null,
        'enableBureauFeatures' => null,
        'requireDdMandateBeforeAllowingBillableActivity' => null,
        'whiteLabelMode' => null,
        'enableReportWriterFeature' => null,
        'disableEvc' => null,
        'tenantOwnsBilling' => null,
        'billingSettings' => null,
        'usersCanManageAccountSecuritySettings' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'brandCode' => true,
        'appName' => true,
        'homeUrl' => true,
        'headContent' => true,
        'logOutUrl' => true,
        'loginImgUrl' => true,
        'homeImgUrl' => true,
        'favIcon' => true,
        'cssColorsFile' => true,
        'cssFile' => true,
        'mailingList' => false,
        'htmlInsertions' => true,
        'mailSettings' => false,
        'signupUrl' => true,
        'termsUrl' => true,
        'helpUrl' => true,
        'supportEmail' => true,
        'newUserSignupEmail' => true,
        'approveNewUsers' => false,
        'enableBureauFeatures' => false,
        'requireDdMandateBeforeAllowingBillableActivity' => false,
        'whiteLabelMode' => false,
        'enableReportWriterFeature' => false,
        'disableEvc' => false,
        'tenantOwnsBilling' => false,
        'billingSettings' => false,
        'usersCanManageAccountSecuritySettings' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'brandCode' => 'brandCode',
        'appName' => 'appName',
        'homeUrl' => 'homeUrl',
        'headContent' => 'headContent',
        'logOutUrl' => 'logOutUrl',
        'loginImgUrl' => 'loginImgUrl',
        'homeImgUrl' => 'homeImgUrl',
        'favIcon' => 'favIcon',
        'cssColorsFile' => 'cssColorsFile',
        'cssFile' => 'cssFile',
        'mailingList' => 'mailingList',
        'htmlInsertions' => 'htmlInsertions',
        'mailSettings' => 'mailSettings',
        'signupUrl' => 'signupUrl',
        'termsUrl' => 'termsUrl',
        'helpUrl' => 'helpUrl',
        'supportEmail' => 'supportEmail',
        'newUserSignupEmail' => 'newUserSignupEmail',
        'approveNewUsers' => 'approveNewUsers',
        'enableBureauFeatures' => 'enableBureauFeatures',
        'requireDdMandateBeforeAllowingBillableActivity' => 'requireDdMandateBeforeAllowingBillableActivity',
        'whiteLabelMode' => 'whiteLabelMode',
        'enableReportWriterFeature' => 'enableReportWriterFeature',
        'disableEvc' => 'disableEvc',
        'tenantOwnsBilling' => 'tenantOwnsBilling',
        'billingSettings' => 'billingSettings',
        'usersCanManageAccountSecuritySettings' => 'usersCanManageAccountSecuritySettings',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'brandCode' => 'setBrandCode',
        'appName' => 'setAppName',
        'homeUrl' => 'setHomeUrl',
        'headContent' => 'setHeadContent',
        'logOutUrl' => 'setLogOutUrl',
        'loginImgUrl' => 'setLoginImgUrl',
        'homeImgUrl' => 'setHomeImgUrl',
        'favIcon' => 'setFavIcon',
        'cssColorsFile' => 'setCssColorsFile',
        'cssFile' => 'setCssFile',
        'mailingList' => 'setMailingList',
        'htmlInsertions' => 'setHtmlInsertions',
        'mailSettings' => 'setMailSettings',
        'signupUrl' => 'setSignupUrl',
        'termsUrl' => 'setTermsUrl',
        'helpUrl' => 'setHelpUrl',
        'supportEmail' => 'setSupportEmail',
        'newUserSignupEmail' => 'setNewUserSignupEmail',
        'approveNewUsers' => 'setApproveNewUsers',
        'enableBureauFeatures' => 'setEnableBureauFeatures',
        'requireDdMandateBeforeAllowingBillableActivity' => 'setRequireDdMandateBeforeAllowingBillableActivity',
        'whiteLabelMode' => 'setWhiteLabelMode',
        'enableReportWriterFeature' => 'setEnableReportWriterFeature',
        'disableEvc' => 'setDisableEvc',
        'tenantOwnsBilling' => 'setTenantOwnsBilling',
        'billingSettings' => 'setBillingSettings',
        'usersCanManageAccountSecuritySettings' => 'setUsersCanManageAccountSecuritySettings',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'brandCode' => 'getBrandCode',
        'appName' => 'getAppName',
        'homeUrl' => 'getHomeUrl',
        'headContent' => 'getHeadContent',
        'logOutUrl' => 'getLogOutUrl',
        'loginImgUrl' => 'getLoginImgUrl',
        'homeImgUrl' => 'getHomeImgUrl',
        'favIcon' => 'getFavIcon',
        'cssColorsFile' => 'getCssColorsFile',
        'cssFile' => 'getCssFile',
        'mailingList' => 'getMailingList',
        'htmlInsertions' => 'getHtmlInsertions',
        'mailSettings' => 'getMailSettings',
        'signupUrl' => 'getSignupUrl',
        'termsUrl' => 'getTermsUrl',
        'helpUrl' => 'getHelpUrl',
        'supportEmail' => 'getSupportEmail',
        'newUserSignupEmail' => 'getNewUserSignupEmail',
        'approveNewUsers' => 'getApproveNewUsers',
        'enableBureauFeatures' => 'getEnableBureauFeatures',
        'requireDdMandateBeforeAllowingBillableActivity' => 'getRequireDdMandateBeforeAllowingBillableActivity',
        'whiteLabelMode' => 'getWhiteLabelMode',
        'enableReportWriterFeature' => 'getEnableReportWriterFeature',
        'disableEvc' => 'getDisableEvc',
        'tenantOwnsBilling' => 'getTenantOwnsBilling',
        'billingSettings' => 'getBillingSettings',
        'usersCanManageAccountSecuritySettings' => 'getUsersCanManageAccountSecuritySettings',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('brandCode', $data ?? [], null);
        $this->setIfExists('appName', $data ?? [], null);
        $this->setIfExists('homeUrl', $data ?? [], null);
        $this->setIfExists('headContent', $data ?? [], null);
        $this->setIfExists('logOutUrl', $data ?? [], null);
        $this->setIfExists('loginImgUrl', $data ?? [], null);
        $this->setIfExists('homeImgUrl', $data ?? [], null);
        $this->setIfExists('favIcon', $data ?? [], null);
        $this->setIfExists('cssColorsFile', $data ?? [], null);
        $this->setIfExists('cssFile', $data ?? [], null);
        $this->setIfExists('mailingList', $data ?? [], null);
        $this->setIfExists('htmlInsertions', $data ?? [], null);
        $this->setIfExists('mailSettings', $data ?? [], null);
        $this->setIfExists('signupUrl', $data ?? [], null);
        $this->setIfExists('termsUrl', $data ?? [], null);
        $this->setIfExists('helpUrl', $data ?? [], null);
        $this->setIfExists('supportEmail', $data ?? [], null);
        $this->setIfExists('newUserSignupEmail', $data ?? [], null);
        $this->setIfExists('approveNewUsers', $data ?? [], null);
        $this->setIfExists('enableBureauFeatures', $data ?? [], null);
        $this->setIfExists('requireDdMandateBeforeAllowingBillableActivity', $data ?? [], null);
        $this->setIfExists('whiteLabelMode', $data ?? [], null);
        $this->setIfExists('enableReportWriterFeature', $data ?? [], null);
        $this->setIfExists('disableEvc', $data ?? [], null);
        $this->setIfExists('tenantOwnsBilling', $data ?? [], null);
        $this->setIfExists('billingSettings', $data ?? [], null);
        $this->setIfExists('usersCanManageAccountSecuritySettings', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['brandCode']) && (mb_strlen($this->container['brandCode']) > 100)) {
            $invalidProperties[] = "invalid value for 'brandCode', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['logOutUrl']) && (mb_strlen($this->container['logOutUrl']) > 150)) {
            $invalidProperties[] = "invalid value for 'logOutUrl', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['signupUrl']) && (mb_strlen($this->container['signupUrl']) > 150)) {
            $invalidProperties[] = "invalid value for 'signupUrl', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['termsUrl']) && (mb_strlen($this->container['termsUrl']) > 150)) {
            $invalidProperties[] = "invalid value for 'termsUrl', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['helpUrl']) && (mb_strlen($this->container['helpUrl']) > 250)) {
            $invalidProperties[] = "invalid value for 'helpUrl', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['supportEmail']) && (mb_strlen($this->container['supportEmail']) > 150)) {
            $invalidProperties[] = "invalid value for 'supportEmail', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['newUserSignupEmail']) && (mb_strlen($this->container['newUserSignupEmail']) > 150)) {
            $invalidProperties[] = "invalid value for 'newUserSignupEmail', the character length must be smaller than or equal to 150.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brandCode
     *
     * @return string|null
     */
    public function getBrandCode(): ?string
    {
        return $this->container['brandCode'];
    }

    /**
     * Sets brandCode
     *
     * @param string|null $brandCode [readonly]
     *
     * @return $this
     */
    public function setBrandCode(?string $brandCode): static
    {
        if (is_null($brandCode)) {
            array_push($this->openAPINullablesSetToNull, 'brandCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brandCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($brandCode) && (mb_strlen($brandCode) > 100)) {
            throw new InvalidArgumentException('invalid length for $brandCode when calling Tenant., must be smaller than or equal to 100.');
        }

        $this->container['brandCode'] = $brandCode;

        return $this;
    }

    /**
     * Gets appName
     *
     * @return string|null
     */
    public function getAppName(): ?string
    {
        return $this->container['appName'];
    }

    /**
     * Sets appName
     *
     * @param string|null $appName appName
     *
     * @return $this
     */
    public function setAppName(?string $appName): static
    {
        if (is_null($appName)) {
            array_push($this->openAPINullablesSetToNull, 'appName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appName'] = $appName;

        return $this;
    }

    /**
     * Gets homeUrl
     *
     * @return string|null
     */
    public function getHomeUrl(): ?string
    {
        return $this->container['homeUrl'];
    }

    /**
     * Sets homeUrl
     *
     * @param string|null $homeUrl homeUrl
     *
     * @return $this
     */
    public function setHomeUrl(?string $homeUrl): static
    {
        if (is_null($homeUrl)) {
            array_push($this->openAPINullablesSetToNull, 'homeUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeUrl'] = $homeUrl;

        return $this;
    }

    /**
     * Gets headContent
     *
     * @return string|null
     */
    public function getHeadContent(): ?string
    {
        return $this->container['headContent'];
    }

    /**
     * Sets headContent
     *
     * @param string|null $headContent headContent
     *
     * @return $this
     */
    public function setHeadContent(?string $headContent): static
    {
        if (is_null($headContent)) {
            array_push($this->openAPINullablesSetToNull, 'headContent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('headContent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['headContent'] = $headContent;

        return $this;
    }

    /**
     * Gets logOutUrl
     *
     * @return string|null
     */
    public function getLogOutUrl(): ?string
    {
        return $this->container['logOutUrl'];
    }

    /**
     * Sets logOutUrl
     *
     * @param string|null $logOutUrl logOutUrl
     *
     * @return $this
     */
    public function setLogOutUrl(?string $logOutUrl): static
    {
        if (is_null($logOutUrl)) {
            array_push($this->openAPINullablesSetToNull, 'logOutUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logOutUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($logOutUrl) && (mb_strlen($logOutUrl) > 150)) {
            throw new InvalidArgumentException('invalid length for $logOutUrl when calling Tenant., must be smaller than or equal to 150.');
        }

        $this->container['logOutUrl'] = $logOutUrl;

        return $this;
    }

    /**
     * Gets loginImgUrl
     *
     * @return string|null
     */
    public function getLoginImgUrl(): ?string
    {
        return $this->container['loginImgUrl'];
    }

    /**
     * Sets loginImgUrl
     *
     * @param string|null $loginImgUrl [readonly]
     *
     * @return $this
     */
    public function setLoginImgUrl(?string $loginImgUrl): static
    {
        if (is_null($loginImgUrl)) {
            array_push($this->openAPINullablesSetToNull, 'loginImgUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loginImgUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loginImgUrl'] = $loginImgUrl;

        return $this;
    }

    /**
     * Gets homeImgUrl
     *
     * @return string|null
     */
    public function getHomeImgUrl(): ?string
    {
        return $this->container['homeImgUrl'];
    }

    /**
     * Sets homeImgUrl
     *
     * @param string|null $homeImgUrl [readonly]
     *
     * @return $this
     */
    public function setHomeImgUrl(?string $homeImgUrl): static
    {
        if (is_null($homeImgUrl)) {
            array_push($this->openAPINullablesSetToNull, 'homeImgUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeImgUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeImgUrl'] = $homeImgUrl;

        return $this;
    }

    /**
     * Gets favIcon
     *
     * @return string|null
     */
    public function getFavIcon(): ?string
    {
        return $this->container['favIcon'];
    }

    /**
     * Sets favIcon
     *
     * @param string|null $favIcon [readonly]
     *
     * @return $this
     */
    public function setFavIcon(?string $favIcon): static
    {
        if (is_null($favIcon)) {
            array_push($this->openAPINullablesSetToNull, 'favIcon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favIcon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favIcon'] = $favIcon;

        return $this;
    }

    /**
     * Gets cssColorsFile
     *
     * @return string|null
     */
    public function getCssColorsFile(): ?string
    {
        return $this->container['cssColorsFile'];
    }

    /**
     * Sets cssColorsFile
     *
     * @param string|null $cssColorsFile [readonly]
     *
     * @return $this
     */
    public function setCssColorsFile(?string $cssColorsFile): static
    {
        if (is_null($cssColorsFile)) {
            array_push($this->openAPINullablesSetToNull, 'cssColorsFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cssColorsFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cssColorsFile'] = $cssColorsFile;

        return $this;
    }

    /**
     * Gets cssFile
     *
     * @return string|null
     */
    public function getCssFile(): ?string
    {
        return $this->container['cssFile'];
    }

    /**
     * Sets cssFile
     *
     * @param string|null $cssFile [readonly]
     *
     * @return $this
     */
    public function setCssFile(?string $cssFile): static
    {
        if (is_null($cssFile)) {
            array_push($this->openAPINullablesSetToNull, 'cssFile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cssFile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cssFile'] = $cssFile;

        return $this;
    }

    /**
     * Gets mailingList
     *
     * @return bool|null
     */
    public function getMailingList(): ?bool
    {
        return $this->container['mailingList'];
    }

    /**
     * Sets mailingList
     *
     * @param bool|null $mailingList mailingList
     *
     * @return $this
     */
    public function setMailingList(?bool $mailingList): static
    {
        if (is_null($mailingList)) {
            throw new InvalidArgumentException('non-nullable mailingList cannot be null');
        }
        $this->container['mailingList'] = $mailingList;

        return $this;
    }

    /**
     * Gets htmlInsertions
     *
     * @return \SynergiTech\Staffology\Model\TenantHtmlInsertion[]|null
     */
    public function getHtmlInsertions(): ?array
    {
        return $this->container['htmlInsertions'];
    }

    /**
     * Sets htmlInsertions
     *
     * @param \SynergiTech\Staffology\Model\TenantHtmlInsertion[]|null $htmlInsertions htmlInsertions
     *
     * @return $this
     */
    public function setHtmlInsertions(?array $htmlInsertions): static
    {
        if (is_null($htmlInsertions)) {
            array_push($this->openAPINullablesSetToNull, 'htmlInsertions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('htmlInsertions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['htmlInsertions'] = $htmlInsertions;

        return $this;
    }

    /**
     * Gets mailSettings
     *
     * @return \SynergiTech\Staffology\Model\MailSettings|null
     */
    public function getMailSettings(): ?\SynergiTech\Staffology\Model\MailSettings
    {
        return $this->container['mailSettings'];
    }

    /**
     * Sets mailSettings
     *
     * @param \SynergiTech\Staffology\Model\MailSettings|null $mailSettings mailSettings
     *
     * @return $this
     */
    public function setMailSettings(?\SynergiTech\Staffology\Model\MailSettings $mailSettings): static
    {
        if (is_null($mailSettings)) {
            throw new InvalidArgumentException('non-nullable mailSettings cannot be null');
        }
        $this->container['mailSettings'] = $mailSettings;

        return $this;
    }

    /**
     * Gets signupUrl
     *
     * @return string|null
     */
    public function getSignupUrl(): ?string
    {
        return $this->container['signupUrl'];
    }

    /**
     * Sets signupUrl
     *
     * @param string|null $signupUrl signupUrl
     *
     * @return $this
     */
    public function setSignupUrl(?string $signupUrl): static
    {
        if (is_null($signupUrl)) {
            array_push($this->openAPINullablesSetToNull, 'signupUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signupUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($signupUrl) && (mb_strlen($signupUrl) > 150)) {
            throw new InvalidArgumentException('invalid length for $signupUrl when calling Tenant., must be smaller than or equal to 150.');
        }

        $this->container['signupUrl'] = $signupUrl;

        return $this;
    }

    /**
     * Gets termsUrl
     *
     * @return string|null
     */
    public function getTermsUrl(): ?string
    {
        return $this->container['termsUrl'];
    }

    /**
     * Sets termsUrl
     *
     * @param string|null $termsUrl termsUrl
     *
     * @return $this
     */
    public function setTermsUrl(?string $termsUrl): static
    {
        if (is_null($termsUrl)) {
            array_push($this->openAPINullablesSetToNull, 'termsUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('termsUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($termsUrl) && (mb_strlen($termsUrl) > 150)) {
            throw new InvalidArgumentException('invalid length for $termsUrl when calling Tenant., must be smaller than or equal to 150.');
        }

        $this->container['termsUrl'] = $termsUrl;

        return $this;
    }

    /**
     * Gets helpUrl
     *
     * @return string|null
     */
    public function getHelpUrl(): ?string
    {
        return $this->container['helpUrl'];
    }

    /**
     * Sets helpUrl
     *
     * @param string|null $helpUrl helpUrl
     *
     * @return $this
     */
    public function setHelpUrl(?string $helpUrl): static
    {
        if (is_null($helpUrl)) {
            array_push($this->openAPINullablesSetToNull, 'helpUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('helpUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($helpUrl) && (mb_strlen($helpUrl) > 250)) {
            throw new InvalidArgumentException('invalid length for $helpUrl when calling Tenant., must be smaller than or equal to 250.');
        }

        $this->container['helpUrl'] = $helpUrl;

        return $this;
    }

    /**
     * Gets supportEmail
     *
     * @return string|null
     */
    public function getSupportEmail(): ?string
    {
        return $this->container['supportEmail'];
    }

    /**
     * Sets supportEmail
     *
     * @param string|null $supportEmail supportEmail
     *
     * @return $this
     */
    public function setSupportEmail(?string $supportEmail): static
    {
        if (is_null($supportEmail)) {
            array_push($this->openAPINullablesSetToNull, 'supportEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supportEmail) && (mb_strlen($supportEmail) > 150)) {
            throw new InvalidArgumentException('invalid length for $supportEmail when calling Tenant., must be smaller than or equal to 150.');
        }

        $this->container['supportEmail'] = $supportEmail;

        return $this;
    }

    /**
     * Gets newUserSignupEmail
     *
     * @return string|null
     */
    public function getNewUserSignupEmail(): ?string
    {
        return $this->container['newUserSignupEmail'];
    }

    /**
     * Sets newUserSignupEmail
     *
     * @param string|null $newUserSignupEmail newUserSignupEmail
     *
     * @return $this
     */
    public function setNewUserSignupEmail(?string $newUserSignupEmail): static
    {
        if (is_null($newUserSignupEmail)) {
            array_push($this->openAPINullablesSetToNull, 'newUserSignupEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('newUserSignupEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($newUserSignupEmail) && (mb_strlen($newUserSignupEmail) > 150)) {
            throw new InvalidArgumentException('invalid length for $newUserSignupEmail when calling Tenant., must be smaller than or equal to 150.');
        }

        $this->container['newUserSignupEmail'] = $newUserSignupEmail;

        return $this;
    }

    /**
     * Gets approveNewUsers
     *
     * @return bool|null
     */
    public function getApproveNewUsers(): ?bool
    {
        return $this->container['approveNewUsers'];
    }

    /**
     * Sets approveNewUsers
     *
     * @param bool|null $approveNewUsers approveNewUsers
     *
     * @return $this
     */
    public function setApproveNewUsers(?bool $approveNewUsers): static
    {
        if (is_null($approveNewUsers)) {
            throw new InvalidArgumentException('non-nullable approveNewUsers cannot be null');
        }
        $this->container['approveNewUsers'] = $approveNewUsers;

        return $this;
    }

    /**
     * Gets enableBureauFeatures
     *
     * @return bool|null
     */
    public function getEnableBureauFeatures(): ?bool
    {
        return $this->container['enableBureauFeatures'];
    }

    /**
     * Sets enableBureauFeatures
     *
     * @param bool|null $enableBureauFeatures enableBureauFeatures
     *
     * @return $this
     */
    public function setEnableBureauFeatures(?bool $enableBureauFeatures): static
    {
        if (is_null($enableBureauFeatures)) {
            throw new InvalidArgumentException('non-nullable enableBureauFeatures cannot be null');
        }
        $this->container['enableBureauFeatures'] = $enableBureauFeatures;

        return $this;
    }

    /**
     * Gets requireDdMandateBeforeAllowingBillableActivity
     *
     * @return bool|null
     */
    public function getRequireDdMandateBeforeAllowingBillableActivity(): ?bool
    {
        return $this->container['requireDdMandateBeforeAllowingBillableActivity'];
    }

    /**
     * Sets requireDdMandateBeforeAllowingBillableActivity
     *
     * @param bool|null $requireDdMandateBeforeAllowingBillableActivity requireDdMandateBeforeAllowingBillableActivity
     *
     * @return $this
     */
    public function setRequireDdMandateBeforeAllowingBillableActivity(?bool $requireDdMandateBeforeAllowingBillableActivity): static
    {
        if (is_null($requireDdMandateBeforeAllowingBillableActivity)) {
            throw new InvalidArgumentException('non-nullable requireDdMandateBeforeAllowingBillableActivity cannot be null');
        }
        $this->container['requireDdMandateBeforeAllowingBillableActivity'] = $requireDdMandateBeforeAllowingBillableActivity;

        return $this;
    }

    /**
     * Gets whiteLabelMode
     *
     * @return bool|null
     */
    public function getWhiteLabelMode(): ?bool
    {
        return $this->container['whiteLabelMode'];
    }

    /**
     * Sets whiteLabelMode
     *
     * @param bool|null $whiteLabelMode whiteLabelMode
     *
     * @return $this
     */
    public function setWhiteLabelMode(?bool $whiteLabelMode): static
    {
        if (is_null($whiteLabelMode)) {
            throw new InvalidArgumentException('non-nullable whiteLabelMode cannot be null');
        }
        $this->container['whiteLabelMode'] = $whiteLabelMode;

        return $this;
    }

    /**
     * Gets enableReportWriterFeature
     *
     * @return bool|null
     */
    public function getEnableReportWriterFeature(): ?bool
    {
        return $this->container['enableReportWriterFeature'];
    }

    /**
     * Sets enableReportWriterFeature
     *
     * @param bool|null $enableReportWriterFeature Indicates if the Report Writer feature is enabled for the tenant.
     *
     * @return $this
     */
    public function setEnableReportWriterFeature(?bool $enableReportWriterFeature): static
    {
        if (is_null($enableReportWriterFeature)) {
            throw new InvalidArgumentException('non-nullable enableReportWriterFeature cannot be null');
        }
        $this->container['enableReportWriterFeature'] = $enableReportWriterFeature;

        return $this;
    }

    /**
     * Gets disableEvc
     *
     * @return bool|null
     */
    public function getDisableEvc(): ?bool
    {
        return $this->container['disableEvc'];
    }

    /**
     * Sets disableEvc
     *
     * @param bool|null $disableEvc Indicates whether FPS should be submitted to EVC for employees/employers under this tenant.
     *
     * @return $this
     */
    public function setDisableEvc(?bool $disableEvc): static
    {
        if (is_null($disableEvc)) {
            throw new InvalidArgumentException('non-nullable disableEvc cannot be null');
        }
        $this->container['disableEvc'] = $disableEvc;

        return $this;
    }

    /**
     * Gets tenantOwnsBilling
     *
     * @return bool|null
     */
    public function getTenantOwnsBilling(): ?bool
    {
        return $this->container['tenantOwnsBilling'];
    }

    /**
     * Sets tenantOwnsBilling
     *
     * @param bool|null $tenantOwnsBilling [readonly]
     *
     * @return $this
     */
    public function setTenantOwnsBilling(?bool $tenantOwnsBilling): static
    {
        if (is_null($tenantOwnsBilling)) {
            throw new InvalidArgumentException('non-nullable tenantOwnsBilling cannot be null');
        }
        $this->container['tenantOwnsBilling'] = $tenantOwnsBilling;

        return $this;
    }

    /**
     * Gets billingSettings
     *
     * @return \SynergiTech\Staffology\Model\TenantBillingSettings|null
     */
    public function getBillingSettings(): ?\SynergiTech\Staffology\Model\TenantBillingSettings
    {
        return $this->container['billingSettings'];
    }

    /**
     * Sets billingSettings
     *
     * @param \SynergiTech\Staffology\Model\TenantBillingSettings|null $billingSettings billingSettings
     *
     * @return $this
     */
    public function setBillingSettings(?\SynergiTech\Staffology\Model\TenantBillingSettings $billingSettings): static
    {
        if (is_null($billingSettings)) {
            throw new InvalidArgumentException('non-nullable billingSettings cannot be null');
        }
        $this->container['billingSettings'] = $billingSettings;

        return $this;
    }

    /**
     * Gets usersCanManageAccountSecuritySettings
     *
     * @return bool|null
     */
    public function getUsersCanManageAccountSecuritySettings(): ?bool
    {
        return $this->container['usersCanManageAccountSecuritySettings'];
    }

    /**
     * Sets usersCanManageAccountSecuritySettings
     *
     * @param bool|null $usersCanManageAccountSecuritySettings If the users are allowed manage their own account security settings through a page or portal defined by their current authentication provider
     *
     * @return $this
     */
    public function setUsersCanManageAccountSecuritySettings(?bool $usersCanManageAccountSecuritySettings): static
    {
        if (is_null($usersCanManageAccountSecuritySettings)) {
            throw new InvalidArgumentException('non-nullable usersCanManageAccountSecuritySettings cannot be null');
        }
        $this->container['usersCanManageAccountSecuritySettings'] = $usersCanManageAccountSecuritySettings;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


