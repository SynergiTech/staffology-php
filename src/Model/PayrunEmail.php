<?php
/**
 * PayrunEmail
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayrunEmail Class Doc Comment
 *
 * @description PayrunEmails are sent automatically when a payrun has been finalised
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayrunEmail implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayrunEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'isActive' => 'bool',
        'name' => 'string',
        'templateType' => '\SynergiTech\Staffology\Model\EmployerTemplateType',
        'recipientAddress' => 'string',
        'pdfPassword' => 'string',
        'attachPayslips' => 'bool',
        'payslipsUnemailed' => 'bool',
        'payslipsSingleFile' => 'bool',
        'attachPaymentSummary' => 'bool',
        'attachP32' => 'bool',
        'attachP30' => 'bool',
        'attachGrossToNet' => 'bool',
        'attachPensionContributions' => 'bool',
        'attachCostAnalysis' => 'bool',
        'attachCostOfEmployment' => 'bool',
        'attachFullSummaryOfPay' => 'bool',
        'attachBankPayments' => 'bool',
        'customSubject' => 'string',
        'customBody' => 'string',
        'customBodyIsHtml' => 'bool',
        'childId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'isActive' => null,
        'name' => null,
        'templateType' => null,
        'recipientAddress' => 'email',
        'pdfPassword' => null,
        'attachPayslips' => null,
        'payslipsUnemailed' => null,
        'payslipsSingleFile' => null,
        'attachPaymentSummary' => null,
        'attachP32' => null,
        'attachP30' => null,
        'attachGrossToNet' => null,
        'attachPensionContributions' => null,
        'attachCostAnalysis' => null,
        'attachCostOfEmployment' => null,
        'attachFullSummaryOfPay' => null,
        'attachBankPayments' => null,
        'customSubject' => null,
        'customBody' => null,
        'customBodyIsHtml' => null,
        'childId' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'isActive' => false,
        'name' => false,
        'templateType' => false,
        'recipientAddress' => false,
        'pdfPassword' => true,
        'attachPayslips' => false,
        'payslipsUnemailed' => false,
        'payslipsSingleFile' => false,
        'attachPaymentSummary' => false,
        'attachP32' => false,
        'attachP30' => false,
        'attachGrossToNet' => false,
        'attachPensionContributions' => false,
        'attachCostAnalysis' => false,
        'attachCostOfEmployment' => false,
        'attachFullSummaryOfPay' => false,
        'attachBankPayments' => false,
        'customSubject' => true,
        'customBody' => true,
        'customBodyIsHtml' => false,
        'childId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'isActive' => 'isActive',
        'name' => 'name',
        'templateType' => 'templateType',
        'recipientAddress' => 'recipientAddress',
        'pdfPassword' => 'pdfPassword',
        'attachPayslips' => 'attachPayslips',
        'payslipsUnemailed' => 'payslips_Unemailed',
        'payslipsSingleFile' => 'payslips_SingleFile',
        'attachPaymentSummary' => 'attachPaymentSummary',
        'attachP32' => 'attachP32',
        'attachP30' => 'attachP30',
        'attachGrossToNet' => 'attachGrossToNet',
        'attachPensionContributions' => 'attachPensionContributions',
        'attachCostAnalysis' => 'attachCostAnalysis',
        'attachCostOfEmployment' => 'attachCostOfEmployment',
        'attachFullSummaryOfPay' => 'attachFullSummaryOfPay',
        'attachBankPayments' => 'attachBankPayments',
        'customSubject' => 'customSubject',
        'customBody' => 'customBody',
        'customBodyIsHtml' => 'customBody_IsHtml',
        'childId' => 'childId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'isActive' => 'setIsActive',
        'name' => 'setName',
        'templateType' => 'setTemplateType',
        'recipientAddress' => 'setRecipientAddress',
        'pdfPassword' => 'setPdfPassword',
        'attachPayslips' => 'setAttachPayslips',
        'payslipsUnemailed' => 'setPayslipsUnemailed',
        'payslipsSingleFile' => 'setPayslipsSingleFile',
        'attachPaymentSummary' => 'setAttachPaymentSummary',
        'attachP32' => 'setAttachP32',
        'attachP30' => 'setAttachP30',
        'attachGrossToNet' => 'setAttachGrossToNet',
        'attachPensionContributions' => 'setAttachPensionContributions',
        'attachCostAnalysis' => 'setAttachCostAnalysis',
        'attachCostOfEmployment' => 'setAttachCostOfEmployment',
        'attachFullSummaryOfPay' => 'setAttachFullSummaryOfPay',
        'attachBankPayments' => 'setAttachBankPayments',
        'customSubject' => 'setCustomSubject',
        'customBody' => 'setCustomBody',
        'customBodyIsHtml' => 'setCustomBodyIsHtml',
        'childId' => 'setChildId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'isActive' => 'getIsActive',
        'name' => 'getName',
        'templateType' => 'getTemplateType',
        'recipientAddress' => 'getRecipientAddress',
        'pdfPassword' => 'getPdfPassword',
        'attachPayslips' => 'getAttachPayslips',
        'payslipsUnemailed' => 'getPayslipsUnemailed',
        'payslipsSingleFile' => 'getPayslipsSingleFile',
        'attachPaymentSummary' => 'getAttachPaymentSummary',
        'attachP32' => 'getAttachP32',
        'attachP30' => 'getAttachP30',
        'attachGrossToNet' => 'getAttachGrossToNet',
        'attachPensionContributions' => 'getAttachPensionContributions',
        'attachCostAnalysis' => 'getAttachCostAnalysis',
        'attachCostOfEmployment' => 'getAttachCostOfEmployment',
        'attachFullSummaryOfPay' => 'getAttachFullSummaryOfPay',
        'attachBankPayments' => 'getAttachBankPayments',
        'customSubject' => 'getCustomSubject',
        'customBody' => 'getCustomBody',
        'customBodyIsHtml' => 'getCustomBodyIsHtml',
        'childId' => 'getChildId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('isActive', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('templateType', $data ?? [], null);
        $this->setIfExists('recipientAddress', $data ?? [], null);
        $this->setIfExists('pdfPassword', $data ?? [], null);
        $this->setIfExists('attachPayslips', $data ?? [], null);
        $this->setIfExists('payslipsUnemailed', $data ?? [], null);
        $this->setIfExists('payslipsSingleFile', $data ?? [], null);
        $this->setIfExists('attachPaymentSummary', $data ?? [], null);
        $this->setIfExists('attachP32', $data ?? [], null);
        $this->setIfExists('attachP30', $data ?? [], null);
        $this->setIfExists('attachGrossToNet', $data ?? [], null);
        $this->setIfExists('attachPensionContributions', $data ?? [], null);
        $this->setIfExists('attachCostAnalysis', $data ?? [], null);
        $this->setIfExists('attachCostOfEmployment', $data ?? [], null);
        $this->setIfExists('attachFullSummaryOfPay', $data ?? [], null);
        $this->setIfExists('attachBankPayments', $data ?? [], null);
        $this->setIfExists('customSubject', $data ?? [], null);
        $this->setIfExists('customBody', $data ?? [], null);
        $this->setIfExists('customBodyIsHtml', $data ?? [], null);
        $this->setIfExists('childId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 75)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['recipientAddress'] === null) {
            $invalidProperties[] = "'recipientAddress' can't be null";
        }
        if ((mb_strlen($this->container['recipientAddress']) > 150)) {
            $invalidProperties[] = "invalid value for 'recipientAddress', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['recipientAddress']) < 1)) {
            $invalidProperties[] = "invalid value for 'recipientAddress', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pdfPassword']) && (mb_strlen($this->container['pdfPassword']) > 50)) {
            $invalidProperties[] = "invalid value for 'pdfPassword', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customSubject']) && (mb_strlen($this->container['customSubject']) > 200)) {
            $invalidProperties[] = "invalid value for 'customSubject', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive If false then this email won't be sent
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            throw new InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Only used for reference, not included in the email
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 75)) {
            throw new InvalidArgumentException('invalid length for $name when calling PayrunEmail., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new InvalidArgumentException('invalid length for $name when calling PayrunEmail., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets templateType
     *
     * @return \SynergiTech\Staffology\Model\EmployerTemplateType|null
     */
    public function getTemplateType(): ?\SynergiTech\Staffology\Model\EmployerTemplateType
    {
        return $this->container['templateType'];
    }

    /**
     * Sets templateType
     *
     * @param \SynergiTech\Staffology\Model\EmployerTemplateType|null $templateType templateType
     *
     * @return $this
     */
    public function setTemplateType(?\SynergiTech\Staffology\Model\EmployerTemplateType $templateType): static
    {
        if (is_null($templateType)) {
            throw new InvalidArgumentException('non-nullable templateType cannot be null');
        }
        $this->container['templateType'] = $templateType;

        return $this;
    }

    /**
     * Gets recipientAddress
     *
     * @return string
     */
    public function getRecipientAddress(): string
    {
        return $this->container['recipientAddress'];
    }

    /**
     * Sets recipientAddress
     *
     * @param string $recipientAddress The address to which the email should be sent
     *
     * @return $this
     */
    public function setRecipientAddress(string $recipientAddress): static
    {
        if (is_null($recipientAddress)) {
            throw new InvalidArgumentException('non-nullable recipientAddress cannot be null');
        }
        if ((mb_strlen($recipientAddress) > 150)) {
            throw new InvalidArgumentException('invalid length for $recipientAddress when calling PayrunEmail., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($recipientAddress) < 1)) {
            throw new InvalidArgumentException('invalid length for $recipientAddress when calling PayrunEmail., must be bigger than or equal to 1.');
        }

        $this->container['recipientAddress'] = $recipientAddress;

        return $this;
    }

    /**
     * Gets pdfPassword
     *
     * @return string|null
     */
    public function getPdfPassword(): ?string
    {
        return $this->container['pdfPassword'];
    }

    /**
     * Sets pdfPassword
     *
     * @param string|null $pdfPassword If a value is provided, then all PDFs attached to the email will be encrypted using this password
     *
     * @return $this
     */
    public function setPdfPassword(?string $pdfPassword): static
    {
        if (is_null($pdfPassword)) {
            array_push($this->openAPINullablesSetToNull, 'pdfPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pdfPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pdfPassword) && (mb_strlen($pdfPassword) > 50)) {
            throw new InvalidArgumentException('invalid length for $pdfPassword when calling PayrunEmail., must be smaller than or equal to 50.');
        }

        $this->container['pdfPassword'] = $pdfPassword;

        return $this;
    }

    /**
     * Gets attachPayslips
     *
     * @return bool|null
     */
    public function getAttachPayslips(): ?bool
    {
        return $this->container['attachPayslips'];
    }

    /**
     * Sets attachPayslips
     *
     * @param bool|null $attachPayslips If set to true then Payslips will be attached to the email
     *
     * @return $this
     */
    public function setAttachPayslips(?bool $attachPayslips): static
    {
        if (is_null($attachPayslips)) {
            throw new InvalidArgumentException('non-nullable attachPayslips cannot be null');
        }
        $this->container['attachPayslips'] = $attachPayslips;

        return $this;
    }

    /**
     * Gets payslipsUnemailed
     *
     * @return bool|null
     */
    public function getPayslipsUnemailed(): ?bool
    {
        return $this->container['payslipsUnemailed'];
    }

    /**
     * Sets payslipsUnemailed
     *
     * @param bool|null $payslipsUnemailed If AttachPayslips is true and this property is also true then only payslips that haven't already been sent directly to employees will be attached.
     *
     * @return $this
     */
    public function setPayslipsUnemailed(?bool $payslipsUnemailed): static
    {
        if (is_null($payslipsUnemailed)) {
            throw new InvalidArgumentException('non-nullable payslipsUnemailed cannot be null');
        }
        $this->container['payslipsUnemailed'] = $payslipsUnemailed;

        return $this;
    }

    /**
     * Gets payslipsSingleFile
     *
     * @return bool|null
     */
    public function getPayslipsSingleFile(): ?bool
    {
        return $this->container['payslipsSingleFile'];
    }

    /**
     * Sets payslipsSingleFile
     *
     * @param bool|null $payslipsSingleFile If AttachPayslips is true and this property is also true then the payslips will be attached as a single file rather than as separate PDFs,
     *
     * @return $this
     */
    public function setPayslipsSingleFile(?bool $payslipsSingleFile): static
    {
        if (is_null($payslipsSingleFile)) {
            throw new InvalidArgumentException('non-nullable payslipsSingleFile cannot be null');
        }
        $this->container['payslipsSingleFile'] = $payslipsSingleFile;

        return $this;
    }

    /**
     * Gets attachPaymentSummary
     *
     * @return bool|null
     */
    public function getAttachPaymentSummary(): ?bool
    {
        return $this->container['attachPaymentSummary'];
    }

    /**
     * Sets attachPaymentSummary
     *
     * @param bool|null $attachPaymentSummary If set to True then the PaymentSummary report will be attached to the Email
     *
     * @return $this
     */
    public function setAttachPaymentSummary(?bool $attachPaymentSummary): static
    {
        if (is_null($attachPaymentSummary)) {
            throw new InvalidArgumentException('non-nullable attachPaymentSummary cannot be null');
        }
        $this->container['attachPaymentSummary'] = $attachPaymentSummary;

        return $this;
    }

    /**
     * Gets attachP32
     *
     * @return bool|null
     */
    public function getAttachP32(): ?bool
    {
        return $this->container['attachP32'];
    }

    /**
     * Sets attachP32
     *
     * @param bool|null $attachP32 If set to True then the P32 report will be attached to the email
     *
     * @return $this
     */
    public function setAttachP32(?bool $attachP32): static
    {
        if (is_null($attachP32)) {
            throw new InvalidArgumentException('non-nullable attachP32 cannot be null');
        }
        $this->container['attachP32'] = $attachP32;

        return $this;
    }

    /**
     * Gets attachP30
     *
     * @return bool|null
     */
    public function getAttachP30(): ?bool
    {
        return $this->container['attachP30'];
    }

    /**
     * Sets attachP30
     *
     * @param bool|null $attachP30 If set to True then the P30 report will be attached to the email
     *
     * @return $this
     */
    public function setAttachP30(?bool $attachP30): static
    {
        if (is_null($attachP30)) {
            throw new InvalidArgumentException('non-nullable attachP30 cannot be null');
        }
        $this->container['attachP30'] = $attachP30;

        return $this;
    }

    /**
     * Gets attachGrossToNet
     *
     * @return bool|null
     */
    public function getAttachGrossToNet(): ?bool
    {
        return $this->container['attachGrossToNet'];
    }

    /**
     * Sets attachGrossToNet
     *
     * @param bool|null $attachGrossToNet If set to True then the GrossToNet report will be attached to the email
     *
     * @return $this
     */
    public function setAttachGrossToNet(?bool $attachGrossToNet): static
    {
        if (is_null($attachGrossToNet)) {
            throw new InvalidArgumentException('non-nullable attachGrossToNet cannot be null');
        }
        $this->container['attachGrossToNet'] = $attachGrossToNet;

        return $this;
    }

    /**
     * Gets attachPensionContributions
     *
     * @return bool|null
     */
    public function getAttachPensionContributions(): ?bool
    {
        return $this->container['attachPensionContributions'];
    }

    /**
     * Sets attachPensionContributions
     *
     * @param bool|null $attachPensionContributions If set to True then the Pensions Contributions report will be attached to the email
     *
     * @return $this
     */
    public function setAttachPensionContributions(?bool $attachPensionContributions): static
    {
        if (is_null($attachPensionContributions)) {
            throw new InvalidArgumentException('non-nullable attachPensionContributions cannot be null');
        }
        $this->container['attachPensionContributions'] = $attachPensionContributions;

        return $this;
    }

    /**
     * Gets attachCostAnalysis
     *
     * @return bool|null
     */
    public function getAttachCostAnalysis(): ?bool
    {
        return $this->container['attachCostAnalysis'];
    }

    /**
     * Sets attachCostAnalysis
     *
     * @param bool|null $attachCostAnalysis If set to True then the Cost Analysis report will be attached to the email
     *
     * @return $this
     */
    public function setAttachCostAnalysis(?bool $attachCostAnalysis): static
    {
        if (is_null($attachCostAnalysis)) {
            throw new InvalidArgumentException('non-nullable attachCostAnalysis cannot be null');
        }
        $this->container['attachCostAnalysis'] = $attachCostAnalysis;

        return $this;
    }

    /**
     * Gets attachCostOfEmployment
     *
     * @return bool|null
     */
    public function getAttachCostOfEmployment(): ?bool
    {
        return $this->container['attachCostOfEmployment'];
    }

    /**
     * Sets attachCostOfEmployment
     *
     * @param bool|null $attachCostOfEmployment If set to True then the Cost of Employment report will be attached to the email
     *
     * @return $this
     */
    public function setAttachCostOfEmployment(?bool $attachCostOfEmployment): static
    {
        if (is_null($attachCostOfEmployment)) {
            throw new InvalidArgumentException('non-nullable attachCostOfEmployment cannot be null');
        }
        $this->container['attachCostOfEmployment'] = $attachCostOfEmployment;

        return $this;
    }

    /**
     * Gets attachFullSummaryOfPay
     *
     * @return bool|null
     */
    public function getAttachFullSummaryOfPay(): ?bool
    {
        return $this->container['attachFullSummaryOfPay'];
    }

    /**
     * Sets attachFullSummaryOfPay
     *
     * @param bool|null $attachFullSummaryOfPay If set to True then the Full Summary Of Payment report will be attached to the email
     *
     * @return $this
     */
    public function setAttachFullSummaryOfPay(?bool $attachFullSummaryOfPay): static
    {
        if (is_null($attachFullSummaryOfPay)) {
            throw new InvalidArgumentException('non-nullable attachFullSummaryOfPay cannot be null');
        }
        $this->container['attachFullSummaryOfPay'] = $attachFullSummaryOfPay;

        return $this;
    }

    /**
     * Gets attachBankPayments
     *
     * @return bool|null
     */
    public function getAttachBankPayments(): ?bool
    {
        return $this->container['attachBankPayments'];
    }

    /**
     * Sets attachBankPayments
     *
     * @param bool|null $attachBankPayments If set to True then the Bank Payments CSV file will be attached to the email
     *
     * @return $this
     */
    public function setAttachBankPayments(?bool $attachBankPayments): static
    {
        if (is_null($attachBankPayments)) {
            throw new InvalidArgumentException('non-nullable attachBankPayments cannot be null');
        }
        $this->container['attachBankPayments'] = $attachBankPayments;

        return $this;
    }

    /**
     * Gets customSubject
     *
     * @return string|null
     */
    public function getCustomSubject(): ?string
    {
        return $this->container['customSubject'];
    }

    /**
     * Sets customSubject
     *
     * @param string|null $customSubject If TemplateType is null then you can provide a subject line here to be used for the email
     *
     * @return $this
     */
    public function setCustomSubject(?string $customSubject): static
    {
        if (is_null($customSubject)) {
            array_push($this->openAPINullablesSetToNull, 'customSubject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customSubject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customSubject) && (mb_strlen($customSubject) > 200)) {
            throw new InvalidArgumentException('invalid length for $customSubject when calling PayrunEmail., must be smaller than or equal to 200.');
        }

        $this->container['customSubject'] = $customSubject;

        return $this;
    }

    /**
     * Gets customBody
     *
     * @return string|null
     */
    public function getCustomBody(): ?string
    {
        return $this->container['customBody'];
    }

    /**
     * Sets customBody
     *
     * @param string|null $customBody If TemplateType is null then you can provide the body text here to be used for the email
     *
     * @return $this
     */
    public function setCustomBody(?string $customBody): static
    {
        if (is_null($customBody)) {
            array_push($this->openAPINullablesSetToNull, 'customBody');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customBody', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customBody'] = $customBody;

        return $this;
    }

    /**
     * Gets customBodyIsHtml
     *
     * @return bool|null
     */
    public function getCustomBodyIsHtml(): ?bool
    {
        return $this->container['customBodyIsHtml'];
    }

    /**
     * Sets customBodyIsHtml
     *
     * @param bool|null $customBodyIsHtml If the CustomBody is in HTML format, set this to true.
     *
     * @return $this
     */
    public function setCustomBodyIsHtml(?bool $customBodyIsHtml): static
    {
        if (is_null($customBodyIsHtml)) {
            throw new InvalidArgumentException('non-nullable customBodyIsHtml cannot be null');
        }
        $this->container['customBodyIsHtml'] = $customBodyIsHtml;

        return $this;
    }

    /**
     * Gets childId
     *
     * @return string|null
     */
    public function getChildId(): ?string
    {
        return $this->container['childId'];
    }

    /**
     * Sets childId
     *
     * @param string|null $childId This is nothing but the UniqueId of the model.
     *
     * @return $this
     */
    public function setChildId(?string $childId): static
    {
        if (is_null($childId)) {
            throw new InvalidArgumentException('non-nullable childId cannot be null');
        }
        $this->container['childId'] = $childId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


