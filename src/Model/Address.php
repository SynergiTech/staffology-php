<?php
/**
 * Address
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'line1' => 'string',
        'line2' => 'string',
        'line3' => 'string',
        'line4' => 'string',
        'line5' => 'string',
        'postCode' => 'string',
        'country' => '\SynergiTech\Staffology\Model\Country',
        'foreignCountry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'line1' => null,
        'line2' => null,
        'line3' => null,
        'line4' => null,
        'line5' => null,
        'postCode' => null,
        'country' => null,
        'foreignCountry' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'line1' => true,
        'line2' => true,
        'line3' => true,
        'line4' => true,
        'line5' => true,
        'postCode' => true,
        'country' => false,
        'foreignCountry' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'line1' => 'line1',
        'line2' => 'line2',
        'line3' => 'line3',
        'line4' => 'line4',
        'line5' => 'line5',
        'postCode' => 'postCode',
        'country' => 'country',
        'foreignCountry' => 'foreignCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'line3' => 'setLine3',
        'line4' => 'setLine4',
        'line5' => 'setLine5',
        'postCode' => 'setPostCode',
        'country' => 'setCountry',
        'foreignCountry' => 'setForeignCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'line3' => 'getLine3',
        'line4' => 'getLine4',
        'line5' => 'getLine5',
        'postCode' => 'getPostCode',
        'country' => 'getCountry',
        'foreignCountry' => 'getForeignCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('line1', $data ?? [], null);
        $this->setIfExists('line2', $data ?? [], null);
        $this->setIfExists('line3', $data ?? [], null);
        $this->setIfExists('line4', $data ?? [], null);
        $this->setIfExists('line5', $data ?? [], null);
        $this->setIfExists('postCode', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('foreignCountry', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['line1']) && (mb_strlen($this->container['line1']) > 100)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) > 100)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['line3']) && (mb_strlen($this->container['line3']) > 100)) {
            $invalidProperties[] = "invalid value for 'line3', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['line4']) && (mb_strlen($this->container['line4']) > 100)) {
            $invalidProperties[] = "invalid value for 'line4', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['line5']) && (mb_strlen($this->container['line5']) > 100)) {
            $invalidProperties[] = "invalid value for 'line5', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['postCode']) && (mb_strlen($this->container['postCode']) > 10)) {
            $invalidProperties[] = "invalid value for 'postCode', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['foreignCountry']) && (mb_strlen($this->container['foreignCountry']) > 35)) {
            $invalidProperties[] = "invalid value for 'foreignCountry', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line1
     *
     * @return string|null
     */
    public function getLine1(): ?string
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string|null $line1 line1
     *
     * @return $this
     */
    public function setLine1(?string $line1): static
    {
        if (is_null($line1)) {
            array_push($this->openAPINullablesSetToNull, 'line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($line1) && (mb_strlen($line1) > 100)) {
            throw new InvalidArgumentException('invalid length for $line1 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string|null
     */
    public function getLine2(): ?string
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string|null $line2 line2
     *
     * @return $this
     */
    public function setLine2(?string $line2): static
    {
        if (is_null($line2)) {
            array_push($this->openAPINullablesSetToNull, 'line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($line2) && (mb_strlen($line2) > 100)) {
            throw new InvalidArgumentException('invalid length for $line2 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets line3
     *
     * @return string|null
     */
    public function getLine3(): ?string
    {
        return $this->container['line3'];
    }

    /**
     * Sets line3
     *
     * @param string|null $line3 line3
     *
     * @return $this
     */
    public function setLine3(?string $line3): static
    {
        if (is_null($line3)) {
            array_push($this->openAPINullablesSetToNull, 'line3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('line3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($line3) && (mb_strlen($line3) > 100)) {
            throw new InvalidArgumentException('invalid length for $line3 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['line3'] = $line3;

        return $this;
    }

    /**
     * Gets line4
     *
     * @return string|null
     */
    public function getLine4(): ?string
    {
        return $this->container['line4'];
    }

    /**
     * Sets line4
     *
     * @param string|null $line4 line4
     *
     * @return $this
     */
    public function setLine4(?string $line4): static
    {
        if (is_null($line4)) {
            array_push($this->openAPINullablesSetToNull, 'line4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('line4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($line4) && (mb_strlen($line4) > 100)) {
            throw new InvalidArgumentException('invalid length for $line4 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['line4'] = $line4;

        return $this;
    }

    /**
     * Gets line5
     *
     * @return string|null
     */
    public function getLine5(): ?string
    {
        return $this->container['line5'];
    }

    /**
     * Sets line5
     *
     * @param string|null $line5 line5
     *
     * @return $this
     */
    public function setLine5(?string $line5): static
    {
        if (is_null($line5)) {
            array_push($this->openAPINullablesSetToNull, 'line5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('line5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($line5) && (mb_strlen($line5) > 100)) {
            throw new InvalidArgumentException('invalid length for $line5 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['line5'] = $line5;

        return $this;
    }

    /**
     * Gets postCode
     *
     * @return string|null
     */
    public function getPostCode(): ?string
    {
        return $this->container['postCode'];
    }

    /**
     * Sets postCode
     *
     * @param string|null $postCode postCode
     *
     * @return $this
     */
    public function setPostCode(?string $postCode): static
    {
        if (is_null($postCode)) {
            array_push($this->openAPINullablesSetToNull, 'postCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($postCode) && (mb_strlen($postCode) > 10)) {
            throw new InvalidArgumentException('invalid length for $postCode when calling Address., must be smaller than or equal to 10.');
        }

        $this->container['postCode'] = $postCode;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \SynergiTech\Staffology\Model\Country|null
     */
    public function getCountry(): ?\SynergiTech\Staffology\Model\Country
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \SynergiTech\Staffology\Model\Country|null $country country
     *
     * @return $this
     */
    public function setCountry(?\SynergiTech\Staffology\Model\Country $country): static
    {
        if (is_null($country)) {
            throw new InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets foreignCountry
     *
     * @return string|null
     */
    public function getForeignCountry(): ?string
    {
        return $this->container['foreignCountry'];
    }

    /**
     * Sets foreignCountry
     *
     * @param string|null $foreignCountry foreignCountry
     *
     * @return $this
     */
    public function setForeignCountry(?string $foreignCountry): static
    {
        if (is_null($foreignCountry)) {
            array_push($this->openAPINullablesSetToNull, 'foreignCountry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('foreignCountry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($foreignCountry) && (mb_strlen($foreignCountry) > 35)) {
            throw new InvalidArgumentException('invalid length for $foreignCountry when calling Address., must be smaller than or equal to 35.');
        }

        $this->container['foreignCountry'] = $foreignCountry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


