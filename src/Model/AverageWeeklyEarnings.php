<?php
/**
 * AverageWeeklyEarnings
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * AverageWeeklyEarnings Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AverageWeeklyEarnings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AverageWeeklyEarnings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'result' => '\SynergiTech\Staffology\Model\AverageWeeklyEarningsResult',
        'resultDescription' => 'string',
        'averageEarnings' => 'float',
        'threshold' => 'float',
        'eligibilityThreshold' => 'float',
        'requestedDate' => '\DateTime',
        'relevantPeriodStart' => '\DateTime',
        'relevantPeriodEnd' => '\DateTime',
        'relevantPeriodWeekCount' => 'float',
        'relevantPeriodEarnings' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'result' => null,
        'resultDescription' => null,
        'averageEarnings' => 'double',
        'threshold' => 'double',
        'eligibilityThreshold' => 'double',
        'requestedDate' => 'date',
        'relevantPeriodStart' => 'date',
        'relevantPeriodEnd' => 'date',
        'relevantPeriodWeekCount' => 'double',
        'relevantPeriodEarnings' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'result' => false,
        'resultDescription' => true,
        'averageEarnings' => false,
        'threshold' => false,
        'eligibilityThreshold' => false,
        'requestedDate' => false,
        'relevantPeriodStart' => false,
        'relevantPeriodEnd' => false,
        'relevantPeriodWeekCount' => false,
        'relevantPeriodEarnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'result' => 'result',
        'resultDescription' => 'resultDescription',
        'averageEarnings' => 'averageEarnings',
        'threshold' => 'threshold',
        'eligibilityThreshold' => 'eligibilityThreshold',
        'requestedDate' => 'requestedDate',
        'relevantPeriodStart' => 'relevantPeriodStart',
        'relevantPeriodEnd' => 'relevantPeriodEnd',
        'relevantPeriodWeekCount' => 'relevantPeriodWeekCount',
        'relevantPeriodEarnings' => 'relevantPeriodEarnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'result' => 'setResult',
        'resultDescription' => 'setResultDescription',
        'averageEarnings' => 'setAverageEarnings',
        'threshold' => 'setThreshold',
        'eligibilityThreshold' => 'setEligibilityThreshold',
        'requestedDate' => 'setRequestedDate',
        'relevantPeriodStart' => 'setRelevantPeriodStart',
        'relevantPeriodEnd' => 'setRelevantPeriodEnd',
        'relevantPeriodWeekCount' => 'setRelevantPeriodWeekCount',
        'relevantPeriodEarnings' => 'setRelevantPeriodEarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'result' => 'getResult',
        'resultDescription' => 'getResultDescription',
        'averageEarnings' => 'getAverageEarnings',
        'threshold' => 'getThreshold',
        'eligibilityThreshold' => 'getEligibilityThreshold',
        'requestedDate' => 'getRequestedDate',
        'relevantPeriodStart' => 'getRelevantPeriodStart',
        'relevantPeriodEnd' => 'getRelevantPeriodEnd',
        'relevantPeriodWeekCount' => 'getRelevantPeriodWeekCount',
        'relevantPeriodEarnings' => 'getRelevantPeriodEarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('resultDescription', $data ?? [], null);
        $this->setIfExists('averageEarnings', $data ?? [], null);
        $this->setIfExists('threshold', $data ?? [], null);
        $this->setIfExists('eligibilityThreshold', $data ?? [], null);
        $this->setIfExists('requestedDate', $data ?? [], null);
        $this->setIfExists('relevantPeriodStart', $data ?? [], null);
        $this->setIfExists('relevantPeriodEnd', $data ?? [], null);
        $this->setIfExists('relevantPeriodWeekCount', $data ?? [], null);
        $this->setIfExists('relevantPeriodEarnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result
     *
     * @return \SynergiTech\Staffology\Model\AverageWeeklyEarningsResult|null
     */
    public function getResult(): ?\SynergiTech\Staffology\Model\AverageWeeklyEarningsResult
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \SynergiTech\Staffology\Model\AverageWeeklyEarningsResult|null $result result
     *
     * @return $this
     */
    public function setResult(?\SynergiTech\Staffology\Model\AverageWeeklyEarningsResult $result): static
    {
        if (is_null($result)) {
            throw new InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets resultDescription
     *
     * @return string|null
     */
    public function getResultDescription(): ?string
    {
        return $this->container['resultDescription'];
    }

    /**
     * Sets resultDescription
     *
     * @param string|null $resultDescription resultDescription
     *
     * @return $this
     */
    public function setResultDescription(?string $resultDescription): static
    {
        if (is_null($resultDescription)) {
            array_push($this->openAPINullablesSetToNull, 'resultDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resultDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resultDescription'] = $resultDescription;

        return $this;
    }

    /**
     * Gets averageEarnings
     *
     * @return float|null
     */
    public function getAverageEarnings(): ?float
    {
        return $this->container['averageEarnings'];
    }

    /**
     * Sets averageEarnings
     *
     * @param float|null $averageEarnings averageEarnings
     *
     * @return $this
     */
    public function setAverageEarnings(?float $averageEarnings): static
    {
        if (is_null($averageEarnings)) {
            throw new InvalidArgumentException('non-nullable averageEarnings cannot be null');
        }
        $this->container['averageEarnings'] = $averageEarnings;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return float|null
     */
    public function getThreshold(): ?float
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param float|null $threshold threshold
     *
     * @return $this
     */
    public function setThreshold(?float $threshold): static
    {
        if (is_null($threshold)) {
            throw new InvalidArgumentException('non-nullable threshold cannot be null');
        }
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets eligibilityThreshold
     *
     * @return float|null
     */
    public function getEligibilityThreshold(): ?float
    {
        return $this->container['eligibilityThreshold'];
    }

    /**
     * Sets eligibilityThreshold
     *
     * @param float|null $eligibilityThreshold eligibilityThreshold
     *
     * @return $this
     */
    public function setEligibilityThreshold(?float $eligibilityThreshold): static
    {
        if (is_null($eligibilityThreshold)) {
            throw new InvalidArgumentException('non-nullable eligibilityThreshold cannot be null');
        }
        $this->container['eligibilityThreshold'] = $eligibilityThreshold;

        return $this;
    }

    /**
     * Gets requestedDate
     *
     * @return \DateTime|null
     */
    public function getRequestedDate(): ?\DateTime
    {
        return $this->container['requestedDate'];
    }

    /**
     * Sets requestedDate
     *
     * @param \DateTime|null $requestedDate requestedDate
     *
     * @return $this
     */
    public function setRequestedDate(?\DateTime $requestedDate): static
    {
        if (is_null($requestedDate)) {
            throw new InvalidArgumentException('non-nullable requestedDate cannot be null');
        }
        $this->container['requestedDate'] = $requestedDate;

        return $this;
    }

    /**
     * Gets relevantPeriodStart
     *
     * @return \DateTime|null
     */
    public function getRelevantPeriodStart(): ?\DateTime
    {
        return $this->container['relevantPeriodStart'];
    }

    /**
     * Sets relevantPeriodStart
     *
     * @param \DateTime|null $relevantPeriodStart relevantPeriodStart
     *
     * @return $this
     */
    public function setRelevantPeriodStart(?\DateTime $relevantPeriodStart): static
    {
        if (is_null($relevantPeriodStart)) {
            throw new InvalidArgumentException('non-nullable relevantPeriodStart cannot be null');
        }
        $this->container['relevantPeriodStart'] = $relevantPeriodStart;

        return $this;
    }

    /**
     * Gets relevantPeriodEnd
     *
     * @return \DateTime|null
     */
    public function getRelevantPeriodEnd(): ?\DateTime
    {
        return $this->container['relevantPeriodEnd'];
    }

    /**
     * Sets relevantPeriodEnd
     *
     * @param \DateTime|null $relevantPeriodEnd relevantPeriodEnd
     *
     * @return $this
     */
    public function setRelevantPeriodEnd(?\DateTime $relevantPeriodEnd): static
    {
        if (is_null($relevantPeriodEnd)) {
            throw new InvalidArgumentException('non-nullable relevantPeriodEnd cannot be null');
        }
        $this->container['relevantPeriodEnd'] = $relevantPeriodEnd;

        return $this;
    }

    /**
     * Gets relevantPeriodWeekCount
     *
     * @return float|null
     */
    public function getRelevantPeriodWeekCount(): ?float
    {
        return $this->container['relevantPeriodWeekCount'];
    }

    /**
     * Sets relevantPeriodWeekCount
     *
     * @param float|null $relevantPeriodWeekCount relevantPeriodWeekCount
     *
     * @return $this
     */
    public function setRelevantPeriodWeekCount(?float $relevantPeriodWeekCount): static
    {
        if (is_null($relevantPeriodWeekCount)) {
            throw new InvalidArgumentException('non-nullable relevantPeriodWeekCount cannot be null');
        }
        $this->container['relevantPeriodWeekCount'] = $relevantPeriodWeekCount;

        return $this;
    }

    /**
     * Gets relevantPeriodEarnings
     *
     * @return float|null
     */
    public function getRelevantPeriodEarnings(): ?float
    {
        return $this->container['relevantPeriodEarnings'];
    }

    /**
     * Sets relevantPeriodEarnings
     *
     * @param float|null $relevantPeriodEarnings relevantPeriodEarnings
     *
     * @return $this
     */
    public function setRelevantPeriodEarnings(?float $relevantPeriodEarnings): static
    {
        if (is_null($relevantPeriodEarnings)) {
            throw new InvalidArgumentException('non-nullable relevantPeriodEarnings cannot be null');
        }
        $this->container['relevantPeriodEarnings'] = $relevantPeriodEarnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


