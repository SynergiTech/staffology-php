<?php
/**
 * PayslipLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayslipLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayslipLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayslipLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => '\SynergiTech\Staffology\Model\PayslipLineType',
        'code' => 'string',
        'description' => 'string',
        'secondaryDescription' => 'string',
        'value' => 'float',
        'multiplier' => 'float',
        'attachmentOrderId' => 'string',
        'pensionId' => 'string',
        'loanId' => 'string',
        'currencySymbol' => 'string',
        'formattedValue' => 'string',
        'isNetToGross' => 'bool',
        'targetNetToGrossValue' => 'float',
        'leaveId' => 'string',
        'roleId' => 'string',
        'isAutoCalculatedBackPayLine' => 'bool',
        'isAutomaticBackPay' => 'bool',
        'hasSecondaryDescription' => 'bool',
        'contributesToBasicPay' => 'bool',
        'isNotional' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'code' => null,
        'description' => null,
        'secondaryDescription' => null,
        'value' => 'double',
        'multiplier' => 'double',
        'attachmentOrderId' => 'uuid',
        'pensionId' => 'uuid',
        'loanId' => 'uuid',
        'currencySymbol' => null,
        'formattedValue' => null,
        'isNetToGross' => null,
        'targetNetToGrossValue' => 'double',
        'leaveId' => 'uuid',
        'roleId' => 'uuid',
        'isAutoCalculatedBackPayLine' => null,
        'isAutomaticBackPay' => null,
        'hasSecondaryDescription' => null,
        'contributesToBasicPay' => null,
        'isNotional' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => false,
        'code' => true,
        'description' => true,
        'secondaryDescription' => true,
        'value' => false,
        'multiplier' => true,
        'attachmentOrderId' => true,
        'pensionId' => true,
        'loanId' => true,
        'currencySymbol' => true,
        'formattedValue' => true,
        'isNetToGross' => false,
        'targetNetToGrossValue' => true,
        'leaveId' => true,
        'roleId' => true,
        'isAutoCalculatedBackPayLine' => false,
        'isAutomaticBackPay' => false,
        'hasSecondaryDescription' => false,
        'contributesToBasicPay' => false,
        'isNotional' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'code' => 'code',
        'description' => 'description',
        'secondaryDescription' => 'secondaryDescription',
        'value' => 'value',
        'multiplier' => 'multiplier',
        'attachmentOrderId' => 'attachmentOrderId',
        'pensionId' => 'pensionId',
        'loanId' => 'loanId',
        'currencySymbol' => 'currencySymbol',
        'formattedValue' => 'formattedValue',
        'isNetToGross' => 'isNetToGross',
        'targetNetToGrossValue' => 'targetNetToGrossValue',
        'leaveId' => 'leaveId',
        'roleId' => 'roleId',
        'isAutoCalculatedBackPayLine' => 'isAutoCalculatedBackPayLine',
        'isAutomaticBackPay' => 'isAutomaticBackPay',
        'hasSecondaryDescription' => 'hasSecondaryDescription',
        'contributesToBasicPay' => 'contributesToBasicPay',
        'isNotional' => 'isNotional'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'code' => 'setCode',
        'description' => 'setDescription',
        'secondaryDescription' => 'setSecondaryDescription',
        'value' => 'setValue',
        'multiplier' => 'setMultiplier',
        'attachmentOrderId' => 'setAttachmentOrderId',
        'pensionId' => 'setPensionId',
        'loanId' => 'setLoanId',
        'currencySymbol' => 'setCurrencySymbol',
        'formattedValue' => 'setFormattedValue',
        'isNetToGross' => 'setIsNetToGross',
        'targetNetToGrossValue' => 'setTargetNetToGrossValue',
        'leaveId' => 'setLeaveId',
        'roleId' => 'setRoleId',
        'isAutoCalculatedBackPayLine' => 'setIsAutoCalculatedBackPayLine',
        'isAutomaticBackPay' => 'setIsAutomaticBackPay',
        'hasSecondaryDescription' => 'setHasSecondaryDescription',
        'contributesToBasicPay' => 'setContributesToBasicPay',
        'isNotional' => 'setIsNotional'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'code' => 'getCode',
        'description' => 'getDescription',
        'secondaryDescription' => 'getSecondaryDescription',
        'value' => 'getValue',
        'multiplier' => 'getMultiplier',
        'attachmentOrderId' => 'getAttachmentOrderId',
        'pensionId' => 'getPensionId',
        'loanId' => 'getLoanId',
        'currencySymbol' => 'getCurrencySymbol',
        'formattedValue' => 'getFormattedValue',
        'isNetToGross' => 'getIsNetToGross',
        'targetNetToGrossValue' => 'getTargetNetToGrossValue',
        'leaveId' => 'getLeaveId',
        'roleId' => 'getRoleId',
        'isAutoCalculatedBackPayLine' => 'getIsAutoCalculatedBackPayLine',
        'isAutomaticBackPay' => 'getIsAutomaticBackPay',
        'hasSecondaryDescription' => 'getHasSecondaryDescription',
        'contributesToBasicPay' => 'getContributesToBasicPay',
        'isNotional' => 'getIsNotional'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('secondaryDescription', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('multiplier', $data ?? [], null);
        $this->setIfExists('attachmentOrderId', $data ?? [], null);
        $this->setIfExists('pensionId', $data ?? [], null);
        $this->setIfExists('loanId', $data ?? [], null);
        $this->setIfExists('currencySymbol', $data ?? [], null);
        $this->setIfExists('formattedValue', $data ?? [], null);
        $this->setIfExists('isNetToGross', $data ?? [], null);
        $this->setIfExists('targetNetToGrossValue', $data ?? [], null);
        $this->setIfExists('leaveId', $data ?? [], null);
        $this->setIfExists('roleId', $data ?? [], null);
        $this->setIfExists('isAutoCalculatedBackPayLine', $data ?? [], null);
        $this->setIfExists('isAutomaticBackPay', $data ?? [], null);
        $this->setIfExists('hasSecondaryDescription', $data ?? [], null);
        $this->setIfExists('contributesToBasicPay', $data ?? [], null);
        $this->setIfExists('isNotional', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\PayslipLineType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\PayslipLineType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\PayslipLineType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\PayslipLineType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode(): ?string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return $this
     */
    public function setCode(?string $code): static
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets secondaryDescription
     *
     * @return string|null
     */
    public function getSecondaryDescription(): ?string
    {
        return $this->container['secondaryDescription'];
    }

    /**
     * Sets secondaryDescription
     *
     * @param string|null $secondaryDescription secondaryDescription
     *
     * @return $this
     */
    public function setSecondaryDescription(?string $secondaryDescription): static
    {
        if (is_null($secondaryDescription)) {
            array_push($this->openAPINullablesSetToNull, 'secondaryDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondaryDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondaryDescription'] = $secondaryDescription;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return $this
     */
    public function setValue(?float $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return float|null
     */
    public function getMultiplier(): ?float
    {
        return $this->container['multiplier'];
    }

    /**
     * Sets multiplier
     *
     * @param float|null $multiplier [readonly] If the Code is a multiplier code then this is the multiplier. Value has already been calculated so this is just for reference
     *
     * @return $this
     */
    public function setMultiplier(?float $multiplier): static
    {
        if (is_null($multiplier)) {
            array_push($this->openAPINullablesSetToNull, 'multiplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('multiplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets attachmentOrderId
     *
     * @return string|null
     */
    public function getAttachmentOrderId(): ?string
    {
        return $this->container['attachmentOrderId'];
    }

    /**
     * Sets attachmentOrderId
     *
     * @param string|null $attachmentOrderId [readonly] The Id of the associated AttachmentOrder. Only included if the Code is AEO
     *
     * @return $this
     */
    public function setAttachmentOrderId(?string $attachmentOrderId): static
    {
        if (is_null($attachmentOrderId)) {
            array_push($this->openAPINullablesSetToNull, 'attachmentOrderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attachmentOrderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attachmentOrderId'] = $attachmentOrderId;

        return $this;
    }

    /**
     * Gets pensionId
     *
     * @return string|null
     */
    public function getPensionId(): ?string
    {
        return $this->container['pensionId'];
    }

    /**
     * Sets pensionId
     *
     * @param string|null $pensionId [readonly] The Id of the associated Pension. Only included if the Code is PENSION, PENSIONSS or PENSIONRAS
     *
     * @return $this
     */
    public function setPensionId(?string $pensionId): static
    {
        if (is_null($pensionId)) {
            array_push($this->openAPINullablesSetToNull, 'pensionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionId'] = $pensionId;

        return $this;
    }

    /**
     * Gets loanId
     *
     * @return string|null
     */
    public function getLoanId(): ?string
    {
        return $this->container['loanId'];
    }

    /**
     * Sets loanId
     *
     * @param string|null $loanId [readonly] The Id of the associated Loan, if any.
     *
     * @return $this
     */
    public function setLoanId(?string $loanId): static
    {
        if (is_null($loanId)) {
            array_push($this->openAPINullablesSetToNull, 'loanId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loanId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loanId'] = $loanId;

        return $this;
    }

    /**
     * Gets currencySymbol
     *
     * @return string|null
     */
    public function getCurrencySymbol(): ?string
    {
        return $this->container['currencySymbol'];
    }

    /**
     * Sets currencySymbol
     *
     * @param string|null $currencySymbol currencySymbol
     *
     * @return $this
     */
    public function setCurrencySymbol(?string $currencySymbol): static
    {
        if (is_null($currencySymbol)) {
            array_push($this->openAPINullablesSetToNull, 'currencySymbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currencySymbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currencySymbol'] = $currencySymbol;

        return $this;
    }

    /**
     * Gets formattedValue
     *
     * @return string|null
     */
    public function getFormattedValue(): ?string
    {
        return $this->container['formattedValue'];
    }

    /**
     * Sets formattedValue
     *
     * @param string|null $formattedValue formattedValue
     *
     * @return $this
     */
    public function setFormattedValue(?string $formattedValue): static
    {
        if (is_null($formattedValue)) {
            array_push($this->openAPINullablesSetToNull, 'formattedValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formattedValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formattedValue'] = $formattedValue;

        return $this;
    }

    /**
     * Gets isNetToGross
     *
     * @return bool|null
     */
    public function getIsNetToGross(): ?bool
    {
        return $this->container['isNetToGross'];
    }

    /**
     * Sets isNetToGross
     *
     * @param bool|null $isNetToGross If the PayLine is a fixed ammount addition without multiplier then this property may be set to true so that the amount of the addition to be considered a take home pay target.
     *
     * @return $this
     */
    public function setIsNetToGross(?bool $isNetToGross): static
    {
        if (is_null($isNetToGross)) {
            throw new InvalidArgumentException('non-nullable isNetToGross cannot be null');
        }
        $this->container['isNetToGross'] = $isNetToGross;

        return $this;
    }

    /**
     * Gets targetNetToGrossValue
     *
     * @return float|null
     */
    public function getTargetNetToGrossValue(): ?float
    {
        return $this->container['targetNetToGrossValue'];
    }

    /**
     * Sets targetNetToGrossValue
     *
     * @param float|null $targetNetToGrossValue The orginal net fixed addition amount that is considered to be a take home pay target.
     *
     * @return $this
     */
    public function setTargetNetToGrossValue(?float $targetNetToGrossValue): static
    {
        if (is_null($targetNetToGrossValue)) {
            array_push($this->openAPINullablesSetToNull, 'targetNetToGrossValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetNetToGrossValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetNetToGrossValue'] = $targetNetToGrossValue;

        return $this;
    }

    /**
     * Gets leaveId
     *
     * @return string|null
     */
    public function getLeaveId(): ?string
    {
        return $this->container['leaveId'];
    }

    /**
     * Sets leaveId
     *
     * @param string|null $leaveId leaveId
     *
     * @return $this
     */
    public function setLeaveId(?string $leaveId): static
    {
        if (is_null($leaveId)) {
            array_push($this->openAPINullablesSetToNull, 'leaveId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('leaveId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['leaveId'] = $leaveId;

        return $this;
    }

    /**
     * Gets roleId
     *
     * @return string|null
     */
    public function getRoleId(): ?string
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId
     *
     * @param string|null $roleId The employee role which is associated with this payslip line.  If set to null, the payslip line is not related with a role.
     *
     * @return $this
     */
    public function setRoleId(?string $roleId): static
    {
        if (is_null($roleId)) {
            array_push($this->openAPINullablesSetToNull, 'roleId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets isAutoCalculatedBackPayLine
     *
     * @return bool|null
     */
    public function getIsAutoCalculatedBackPayLine(): ?bool
    {
        return $this->container['isAutoCalculatedBackPayLine'];
    }

    /**
     * Sets isAutoCalculatedBackPayLine
     *
     * @param bool|null $isAutoCalculatedBackPayLine isAutoCalculatedBackPayLine
     *
     * @return $this
     */
    public function setIsAutoCalculatedBackPayLine(?bool $isAutoCalculatedBackPayLine): static
    {
        if (is_null($isAutoCalculatedBackPayLine)) {
            throw new InvalidArgumentException('non-nullable isAutoCalculatedBackPayLine cannot be null');
        }
        $this->container['isAutoCalculatedBackPayLine'] = $isAutoCalculatedBackPayLine;

        return $this;
    }

    /**
     * Gets isAutomaticBackPay
     *
     * @return bool|null
     */
    public function getIsAutomaticBackPay(): ?bool
    {
        return $this->container['isAutomaticBackPay'];
    }

    /**
     * Sets isAutomaticBackPay
     *
     * @param bool|null $isAutomaticBackPay isAutomaticBackPay
     *
     * @return $this
     */
    public function setIsAutomaticBackPay(?bool $isAutomaticBackPay): static
    {
        if (is_null($isAutomaticBackPay)) {
            throw new InvalidArgumentException('non-nullable isAutomaticBackPay cannot be null');
        }
        $this->container['isAutomaticBackPay'] = $isAutomaticBackPay;

        return $this;
    }

    /**
     * Gets hasSecondaryDescription
     *
     * @return bool|null
     */
    public function getHasSecondaryDescription(): ?bool
    {
        return $this->container['hasSecondaryDescription'];
    }

    /**
     * Sets hasSecondaryDescription
     *
     * @param bool|null $hasSecondaryDescription hasSecondaryDescription
     *
     * @return $this
     */
    public function setHasSecondaryDescription(?bool $hasSecondaryDescription): static
    {
        if (is_null($hasSecondaryDescription)) {
            throw new InvalidArgumentException('non-nullable hasSecondaryDescription cannot be null');
        }
        $this->container['hasSecondaryDescription'] = $hasSecondaryDescription;

        return $this;
    }

    /**
     * Gets contributesToBasicPay
     *
     * @return bool|null
     */
    public function getContributesToBasicPay(): ?bool
    {
        return $this->container['contributesToBasicPay'];
    }

    /**
     * Sets contributesToBasicPay
     *
     * @param bool|null $contributesToBasicPay contributesToBasicPay
     *
     * @return $this
     */
    public function setContributesToBasicPay(?bool $contributesToBasicPay): static
    {
        if (is_null($contributesToBasicPay)) {
            throw new InvalidArgumentException('non-nullable contributesToBasicPay cannot be null');
        }
        $this->container['contributesToBasicPay'] = $contributesToBasicPay;

        return $this;
    }

    /**
     * Gets isNotional
     *
     * @return bool|null
     */
    public function getIsNotional(): ?bool
    {
        return $this->container['isNotional'];
    }

    /**
     * Sets isNotional
     *
     * @param bool|null $isNotional Determines whether the transaction involves non-monetary benefits for payroll processing, potentially subject to tax and National Insurance
     *
     * @return $this
     */
    public function setIsNotional(?bool $isNotional): static
    {
        if (is_null($isNotional)) {
            throw new InvalidArgumentException('non-nullable isNotional cannot be null');
        }
        $this->container['isNotional'] = $isNotional;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


