<?php
/**
 * ContractUmbrellaSettingsRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractUmbrellaSettingsRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractUmbrellaSettingsRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.UmbrellaSettingsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'enabled' => 'bool',
        'chargePerTimesheet' => 'float',
        'apprenticeshipLevyDednRate' => 'float',
        'holidayRate' => 'float',
        'dpsbCode' => 'string',
        'expensesCode' => 'string',
        'grossDeductionCode' => 'string',
        'holidayCode' => 'string',
        'cisFeeCode' => 'string',
        'detailFeeInComment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'enabled' => null,
        'chargePerTimesheet' => 'double',
        'apprenticeshipLevyDednRate' => 'double',
        'holidayRate' => 'double',
        'dpsbCode' => null,
        'expensesCode' => null,
        'grossDeductionCode' => null,
        'holidayCode' => null,
        'cisFeeCode' => null,
        'detailFeeInComment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'chargePerTimesheet' => false,
        'apprenticeshipLevyDednRate' => false,
        'holidayRate' => false,
        'dpsbCode' => true,
        'expensesCode' => true,
        'grossDeductionCode' => true,
        'holidayCode' => true,
        'cisFeeCode' => true,
        'detailFeeInComment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'enabled' => 'enabled',
        'chargePerTimesheet' => 'chargePerTimesheet',
        'apprenticeshipLevyDednRate' => 'apprenticeshipLevyDednRate',
        'holidayRate' => 'holidayRate',
        'dpsbCode' => 'dpsbCode',
        'expensesCode' => 'expensesCode',
        'grossDeductionCode' => 'grossDeductionCode',
        'holidayCode' => 'holidayCode',
        'cisFeeCode' => 'cisFeeCode',
        'detailFeeInComment' => 'detailFeeInComment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'enabled' => 'setEnabled',
        'chargePerTimesheet' => 'setChargePerTimesheet',
        'apprenticeshipLevyDednRate' => 'setApprenticeshipLevyDednRate',
        'holidayRate' => 'setHolidayRate',
        'dpsbCode' => 'setDpsbCode',
        'expensesCode' => 'setExpensesCode',
        'grossDeductionCode' => 'setGrossDeductionCode',
        'holidayCode' => 'setHolidayCode',
        'cisFeeCode' => 'setCisFeeCode',
        'detailFeeInComment' => 'setDetailFeeInComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'enabled' => 'getEnabled',
        'chargePerTimesheet' => 'getChargePerTimesheet',
        'apprenticeshipLevyDednRate' => 'getApprenticeshipLevyDednRate',
        'holidayRate' => 'getHolidayRate',
        'dpsbCode' => 'getDpsbCode',
        'expensesCode' => 'getExpensesCode',
        'grossDeductionCode' => 'getGrossDeductionCode',
        'holidayCode' => 'getHolidayCode',
        'cisFeeCode' => 'getCisFeeCode',
        'detailFeeInComment' => 'getDetailFeeInComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('chargePerTimesheet', $data ?? [], null);
        $this->setIfExists('apprenticeshipLevyDednRate', $data ?? [], null);
        $this->setIfExists('holidayRate', $data ?? [], null);
        $this->setIfExists('dpsbCode', $data ?? [], null);
        $this->setIfExists('expensesCode', $data ?? [], null);
        $this->setIfExists('grossDeductionCode', $data ?? [], null);
        $this->setIfExists('holidayCode', $data ?? [], null);
        $this->setIfExists('cisFeeCode', $data ?? [], null);
        $this->setIfExists('detailFeeInComment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled(): ?bool
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled(?bool $enabled): static
    {
        if (is_null($enabled)) {
            throw new InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets chargePerTimesheet
     *
     * @return float|null
     */
    public function getChargePerTimesheet(): ?float
    {
        return $this->container['chargePerTimesheet'];
    }

    /**
     * Sets chargePerTimesheet
     *
     * @param float|null $chargePerTimesheet chargePerTimesheet
     *
     * @return $this
     */
    public function setChargePerTimesheet(?float $chargePerTimesheet): static
    {
        if (is_null($chargePerTimesheet)) {
            throw new InvalidArgumentException('non-nullable chargePerTimesheet cannot be null');
        }
        $this->container['chargePerTimesheet'] = $chargePerTimesheet;

        return $this;
    }

    /**
     * Gets apprenticeshipLevyDednRate
     *
     * @return float|null
     */
    public function getApprenticeshipLevyDednRate(): ?float
    {
        return $this->container['apprenticeshipLevyDednRate'];
    }

    /**
     * Sets apprenticeshipLevyDednRate
     *
     * @param float|null $apprenticeshipLevyDednRate apprenticeshipLevyDednRate
     *
     * @return $this
     */
    public function setApprenticeshipLevyDednRate(?float $apprenticeshipLevyDednRate): static
    {
        if (is_null($apprenticeshipLevyDednRate)) {
            throw new InvalidArgumentException('non-nullable apprenticeshipLevyDednRate cannot be null');
        }
        $this->container['apprenticeshipLevyDednRate'] = $apprenticeshipLevyDednRate;

        return $this;
    }

    /**
     * Gets holidayRate
     *
     * @return float|null
     */
    public function getHolidayRate(): ?float
    {
        return $this->container['holidayRate'];
    }

    /**
     * Sets holidayRate
     *
     * @param float|null $holidayRate holidayRate
     *
     * @return $this
     */
    public function setHolidayRate(?float $holidayRate): static
    {
        if (is_null($holidayRate)) {
            throw new InvalidArgumentException('non-nullable holidayRate cannot be null');
        }
        $this->container['holidayRate'] = $holidayRate;

        return $this;
    }

    /**
     * Gets dpsbCode
     *
     * @return string|null
     */
    public function getDpsbCode(): ?string
    {
        return $this->container['dpsbCode'];
    }

    /**
     * Sets dpsbCode
     *
     * @param string|null $dpsbCode dpsbCode
     *
     * @return $this
     */
    public function setDpsbCode(?string $dpsbCode): static
    {
        if (is_null($dpsbCode)) {
            array_push($this->openAPINullablesSetToNull, 'dpsbCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dpsbCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dpsbCode'] = $dpsbCode;

        return $this;
    }

    /**
     * Gets expensesCode
     *
     * @return string|null
     */
    public function getExpensesCode(): ?string
    {
        return $this->container['expensesCode'];
    }

    /**
     * Sets expensesCode
     *
     * @param string|null $expensesCode expensesCode
     *
     * @return $this
     */
    public function setExpensesCode(?string $expensesCode): static
    {
        if (is_null($expensesCode)) {
            array_push($this->openAPINullablesSetToNull, 'expensesCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expensesCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expensesCode'] = $expensesCode;

        return $this;
    }

    /**
     * Gets grossDeductionCode
     *
     * @return string|null
     */
    public function getGrossDeductionCode(): ?string
    {
        return $this->container['grossDeductionCode'];
    }

    /**
     * Sets grossDeductionCode
     *
     * @param string|null $grossDeductionCode grossDeductionCode
     *
     * @return $this
     */
    public function setGrossDeductionCode(?string $grossDeductionCode): static
    {
        if (is_null($grossDeductionCode)) {
            array_push($this->openAPINullablesSetToNull, 'grossDeductionCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grossDeductionCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grossDeductionCode'] = $grossDeductionCode;

        return $this;
    }

    /**
     * Gets holidayCode
     *
     * @return string|null
     */
    public function getHolidayCode(): ?string
    {
        return $this->container['holidayCode'];
    }

    /**
     * Sets holidayCode
     *
     * @param string|null $holidayCode holidayCode
     *
     * @return $this
     */
    public function setHolidayCode(?string $holidayCode): static
    {
        if (is_null($holidayCode)) {
            array_push($this->openAPINullablesSetToNull, 'holidayCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holidayCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holidayCode'] = $holidayCode;

        return $this;
    }

    /**
     * Gets cisFeeCode
     *
     * @return string|null
     */
    public function getCisFeeCode(): ?string
    {
        return $this->container['cisFeeCode'];
    }

    /**
     * Sets cisFeeCode
     *
     * @param string|null $cisFeeCode cisFeeCode
     *
     * @return $this
     */
    public function setCisFeeCode(?string $cisFeeCode): static
    {
        if (is_null($cisFeeCode)) {
            array_push($this->openAPINullablesSetToNull, 'cisFeeCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cisFeeCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cisFeeCode'] = $cisFeeCode;

        return $this;
    }

    /**
     * Gets detailFeeInComment
     *
     * @return bool|null
     */
    public function getDetailFeeInComment(): ?bool
    {
        return $this->container['detailFeeInComment'];
    }

    /**
     * Sets detailFeeInComment
     *
     * @param bool|null $detailFeeInComment detailFeeInComment
     *
     * @return $this
     */
    public function setDetailFeeInComment(?bool $detailFeeInComment): static
    {
        if (is_null($detailFeeInComment)) {
            throw new InvalidArgumentException('non-nullable detailFeeInComment cannot be null');
        }
        $this->container['detailFeeInComment'] = $detailFeeInComment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


