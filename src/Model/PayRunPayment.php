<?php
/**
 * PayRunPayment
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayRunPayment Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayRunPayment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayRunPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => '\SynergiTech\Staffology\Model\PayeeType',
        'payee' => '\SynergiTech\Staffology\Model\Item',
        'date' => '\DateTime',
        'method' => '\SynergiTech\Staffology\Model\PayMethod',
        'amount' => 'float',
        'reference' => 'string',
        'employerPaymentReference' => 'string',
        'bankDetails' => '\SynergiTech\Staffology\Model\BankDetails',
        'bacsHash' => 'string',
        'bacsSubReference' => 'string',
        'isBankDetailValid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'payee' => null,
        'date' => 'date',
        'method' => null,
        'amount' => 'double',
        'reference' => null,
        'employerPaymentReference' => null,
        'bankDetails' => null,
        'bacsHash' => null,
        'bacsSubReference' => null,
        'isBankDetailValid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => false,
        'payee' => false,
        'date' => false,
        'method' => false,
        'amount' => false,
        'reference' => true,
        'employerPaymentReference' => true,
        'bankDetails' => false,
        'bacsHash' => true,
        'bacsSubReference' => true,
        'isBankDetailValid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'payee' => 'payee',
        'date' => 'date',
        'method' => 'method',
        'amount' => 'amount',
        'reference' => 'reference',
        'employerPaymentReference' => 'employerPaymentReference',
        'bankDetails' => 'bankDetails',
        'bacsHash' => 'bacsHash',
        'bacsSubReference' => 'bacsSubReference',
        'isBankDetailValid' => 'isBankDetailValid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'payee' => 'setPayee',
        'date' => 'setDate',
        'method' => 'setMethod',
        'amount' => 'setAmount',
        'reference' => 'setReference',
        'employerPaymentReference' => 'setEmployerPaymentReference',
        'bankDetails' => 'setBankDetails',
        'bacsHash' => 'setBacsHash',
        'bacsSubReference' => 'setBacsSubReference',
        'isBankDetailValid' => 'setIsBankDetailValid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'payee' => 'getPayee',
        'date' => 'getDate',
        'method' => 'getMethod',
        'amount' => 'getAmount',
        'reference' => 'getReference',
        'employerPaymentReference' => 'getEmployerPaymentReference',
        'bankDetails' => 'getBankDetails',
        'bacsHash' => 'getBacsHash',
        'bacsSubReference' => 'getBacsSubReference',
        'isBankDetailValid' => 'getIsBankDetailValid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('payee', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('employerPaymentReference', $data ?? [], null);
        $this->setIfExists('bankDetails', $data ?? [], null);
        $this->setIfExists('bacsHash', $data ?? [], null);
        $this->setIfExists('bacsSubReference', $data ?? [], null);
        $this->setIfExists('isBankDetailValid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\PayeeType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\PayeeType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\PayeeType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\PayeeType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getPayee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $payee payee
     *
     * @return $this
     */
    public function setPayee(?\SynergiTech\Staffology\Model\Item $payee): static
    {
        if (is_null($payee)) {
            throw new InvalidArgumentException('non-nullable payee cannot be null');
        }
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date [readonly] The date the payment is to be made
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \SynergiTech\Staffology\Model\PayMethod|null
     */
    public function getMethod(): ?\SynergiTech\Staffology\Model\PayMethod
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \SynergiTech\Staffology\Model\PayMethod|null $method method
     *
     * @return $this
     */
    public function setMethod(?\SynergiTech\Staffology\Model\PayMethod $method): static
    {
        if (is_null($method)) {
            throw new InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount(): ?float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount [readonly] The amount to pay
     *
     * @return $this
     */
    public function setAmount(?float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference [readonly] The period the payment is for
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets employerPaymentReference
     *
     * @return string|null
     */
    public function getEmployerPaymentReference(): ?string
    {
        return $this->container['employerPaymentReference'];
    }

    /**
     * Sets employerPaymentReference
     *
     * @param string|null $employerPaymentReference The employer's payment reference, formatted as per the employer settings
     *
     * @return $this
     */
    public function setEmployerPaymentReference(?string $employerPaymentReference): static
    {
        if (is_null($employerPaymentReference)) {
            array_push($this->openAPINullablesSetToNull, 'employerPaymentReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employerPaymentReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employerPaymentReference'] = $employerPaymentReference;

        return $this;
    }

    /**
     * Gets bankDetails
     *
     * @return \SynergiTech\Staffology\Model\BankDetails|null
     */
    public function getBankDetails(): ?\SynergiTech\Staffology\Model\BankDetails
    {
        return $this->container['bankDetails'];
    }

    /**
     * Sets bankDetails
     *
     * @param \SynergiTech\Staffology\Model\BankDetails|null $bankDetails bankDetails
     *
     * @return $this
     */
    public function setBankDetails(?\SynergiTech\Staffology\Model\BankDetails $bankDetails): static
    {
        if (is_null($bankDetails)) {
            throw new InvalidArgumentException('non-nullable bankDetails cannot be null');
        }
        $this->container['bankDetails'] = $bankDetails;

        return $this;
    }

    /**
     * Gets bacsHash
     *
     * @return string|null
     */
    public function getBacsHash(): ?string
    {
        return $this->container['bacsHash'];
    }

    /**
     * Sets bacsHash
     *
     * @param string|null $bacsHash [readonly] if paying by Credit and you've enabled BacsHash then this will contain the BacsHash included on the FPS
     *
     * @return $this
     */
    public function setBacsHash(?string $bacsHash): static
    {
        if (is_null($bacsHash)) {
            array_push($this->openAPINullablesSetToNull, 'bacsHash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsHash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsHash'] = $bacsHash;

        return $this;
    }

    /**
     * Gets bacsSubReference
     *
     * @return string|null
     */
    public function getBacsSubReference(): ?string
    {
        return $this->container['bacsSubReference'];
    }

    /**
     * Sets bacsSubReference
     *
     * @param string|null $bacsSubReference [readonly] if paying by Credit and you've enabled BacsHash then this will contain the BacsSubReference included on the FPS
     *
     * @return $this
     */
    public function setBacsSubReference(?string $bacsSubReference): static
    {
        if (is_null($bacsSubReference)) {
            array_push($this->openAPINullablesSetToNull, 'bacsSubReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsSubReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsSubReference'] = $bacsSubReference;

        return $this;
    }

    /**
     * Gets isBankDetailValid
     *
     * @return bool|null
     */
    public function getIsBankDetailValid(): ?bool
    {
        return $this->container['isBankDetailValid'];
    }

    /**
     * Sets isBankDetailValid
     *
     * @param bool|null $isBankDetailValid [readonly] for checking if bank details are valid
     *
     * @return $this
     */
    public function setIsBankDetailValid(?bool $isBankDetailValid): static
    {
        if (is_null($isBankDetailValid)) {
            throw new InvalidArgumentException('non-nullable isBankDetailValid cannot be null');
        }
        $this->container['isBankDetailValid'] = $isBankDetailValid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


