<?php
/**
 * PensionProvider
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PensionProvider Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PensionProvider implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PensionProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'accountNo' => 'string',
        'portal' => 'string',
        'website' => 'string',
        'address' => '\SynergiTech\Staffology\Model\Address',
        'telephone' => 'string',
        'papdisVersion' => '\SynergiTech\Staffology\Model\PapdisVersion',
        'papdisProviderId' => 'string',
        'papdisEmployerId' => 'string',
        'csvFormat' => '\SynergiTech\Staffology\Model\PensionCsvFormat',
        'excludeNilPaidFromContributions' => 'bool',
        'payPeriodDateAdjustment' => 'int',
        'miscBoolean1' => 'bool',
        'miscBoolean2' => 'bool',
        'miscString1' => 'string',
        'miscString2' => 'string',
        'optOutWindow' => 'int',
        'optOutWindowIsMonths' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'accountNo' => null,
        'portal' => 'uri',
        'website' => 'uri',
        'address' => null,
        'telephone' => null,
        'papdisVersion' => null,
        'papdisProviderId' => null,
        'papdisEmployerId' => null,
        'csvFormat' => null,
        'excludeNilPaidFromContributions' => null,
        'payPeriodDateAdjustment' => 'int32',
        'miscBoolean1' => null,
        'miscBoolean2' => null,
        'miscString1' => null,
        'miscString2' => null,
        'optOutWindow' => 'int32',
        'optOutWindowIsMonths' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'accountNo' => true,
        'portal' => true,
        'website' => true,
        'address' => false,
        'telephone' => true,
        'papdisVersion' => false,
        'papdisProviderId' => true,
        'papdisEmployerId' => true,
        'csvFormat' => false,
        'excludeNilPaidFromContributions' => false,
        'payPeriodDateAdjustment' => false,
        'miscBoolean1' => false,
        'miscBoolean2' => false,
        'miscString1' => true,
        'miscString2' => true,
        'optOutWindow' => false,
        'optOutWindowIsMonths' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'accountNo' => 'accountNo',
        'portal' => 'portal',
        'website' => 'website',
        'address' => 'address',
        'telephone' => 'telephone',
        'papdisVersion' => 'papdisVersion',
        'papdisProviderId' => 'papdisProviderId',
        'papdisEmployerId' => 'papdisEmployerId',
        'csvFormat' => 'csvFormat',
        'excludeNilPaidFromContributions' => 'excludeNilPaidFromContributions',
        'payPeriodDateAdjustment' => 'payPeriodDateAdjustment',
        'miscBoolean1' => 'miscBoolean1',
        'miscBoolean2' => 'miscBoolean2',
        'miscString1' => 'miscString1',
        'miscString2' => 'miscString2',
        'optOutWindow' => 'optOutWindow',
        'optOutWindowIsMonths' => 'optOutWindowIsMonths',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'accountNo' => 'setAccountNo',
        'portal' => 'setPortal',
        'website' => 'setWebsite',
        'address' => 'setAddress',
        'telephone' => 'setTelephone',
        'papdisVersion' => 'setPapdisVersion',
        'papdisProviderId' => 'setPapdisProviderId',
        'papdisEmployerId' => 'setPapdisEmployerId',
        'csvFormat' => 'setCsvFormat',
        'excludeNilPaidFromContributions' => 'setExcludeNilPaidFromContributions',
        'payPeriodDateAdjustment' => 'setPayPeriodDateAdjustment',
        'miscBoolean1' => 'setMiscBoolean1',
        'miscBoolean2' => 'setMiscBoolean2',
        'miscString1' => 'setMiscString1',
        'miscString2' => 'setMiscString2',
        'optOutWindow' => 'setOptOutWindow',
        'optOutWindowIsMonths' => 'setOptOutWindowIsMonths',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'accountNo' => 'getAccountNo',
        'portal' => 'getPortal',
        'website' => 'getWebsite',
        'address' => 'getAddress',
        'telephone' => 'getTelephone',
        'papdisVersion' => 'getPapdisVersion',
        'papdisProviderId' => 'getPapdisProviderId',
        'papdisEmployerId' => 'getPapdisEmployerId',
        'csvFormat' => 'getCsvFormat',
        'excludeNilPaidFromContributions' => 'getExcludeNilPaidFromContributions',
        'payPeriodDateAdjustment' => 'getPayPeriodDateAdjustment',
        'miscBoolean1' => 'getMiscBoolean1',
        'miscBoolean2' => 'getMiscBoolean2',
        'miscString1' => 'getMiscString1',
        'miscString2' => 'getMiscString2',
        'optOutWindow' => 'getOptOutWindow',
        'optOutWindowIsMonths' => 'getOptOutWindowIsMonths',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('accountNo', $data ?? [], null);
        $this->setIfExists('portal', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('telephone', $data ?? [], null);
        $this->setIfExists('papdisVersion', $data ?? [], null);
        $this->setIfExists('papdisProviderId', $data ?? [], null);
        $this->setIfExists('papdisEmployerId', $data ?? [], null);
        $this->setIfExists('csvFormat', $data ?? [], null);
        $this->setIfExists('excludeNilPaidFromContributions', $data ?? [], null);
        $this->setIfExists('payPeriodDateAdjustment', $data ?? [], null);
        $this->setIfExists('miscBoolean1', $data ?? [], null);
        $this->setIfExists('miscBoolean2', $data ?? [], null);
        $this->setIfExists('miscString1', $data ?? [], null);
        $this->setIfExists('miscString2', $data ?? [], null);
        $this->setIfExists('optOutWindow', $data ?? [], null);
        $this->setIfExists('optOutWindowIsMonths', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['accountNo']) && (mb_strlen($this->container['accountNo']) > 100)) {
            $invalidProperties[] = "invalid value for 'accountNo', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['portal']) && (mb_strlen($this->container['portal']) > 100)) {
            $invalidProperties[] = "invalid value for 'portal', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 100)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 100)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['papdisProviderId']) && (mb_strlen($this->container['papdisProviderId']) > 35)) {
            $invalidProperties[] = "invalid value for 'papdisProviderId', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['papdisEmployerId']) && (mb_strlen($this->container['papdisEmployerId']) > 40)) {
            $invalidProperties[] = "invalid value for 'papdisEmployerId', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['miscString1']) && (mb_strlen($this->container['miscString1']) > 50)) {
            $invalidProperties[] = "invalid value for 'miscString1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['miscString2']) && (mb_strlen($this->container['miscString2']) > 50)) {
            $invalidProperties[] = "invalid value for 'miscString2', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling PensionProvider., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new InvalidArgumentException('invalid length for $name when calling PensionProvider., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets accountNo
     *
     * @return string|null
     */
    public function getAccountNo(): ?string
    {
        return $this->container['accountNo'];
    }

    /**
     * Sets accountNo
     *
     * @param string|null $accountNo accountNo
     *
     * @return $this
     */
    public function setAccountNo(?string $accountNo): static
    {
        if (is_null($accountNo)) {
            array_push($this->openAPINullablesSetToNull, 'accountNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accountNo) && (mb_strlen($accountNo) > 100)) {
            throw new InvalidArgumentException('invalid length for $accountNo when calling PensionProvider., must be smaller than or equal to 100.');
        }

        $this->container['accountNo'] = $accountNo;

        return $this;
    }

    /**
     * Gets portal
     *
     * @return string|null
     */
    public function getPortal(): ?string
    {
        return $this->container['portal'];
    }

    /**
     * Sets portal
     *
     * @param string|null $portal portal
     *
     * @return $this
     */
    public function setPortal(?string $portal): static
    {
        if (is_null($portal)) {
            array_push($this->openAPINullablesSetToNull, 'portal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('portal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($portal) && (mb_strlen($portal) > 100)) {
            throw new InvalidArgumentException('invalid length for $portal when calling PensionProvider., must be smaller than or equal to 100.');
        }

        $this->container['portal'] = $portal;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite(): ?string
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return $this
     */
    public function setWebsite(?string $website): static
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($website) && (mb_strlen($website) > 100)) {
            throw new InvalidArgumentException('invalid length for $website when calling PensionProvider., must be smaller than or equal to 100.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \SynergiTech\Staffology\Model\Address|null
     */
    public function getAddress(): ?\SynergiTech\Staffology\Model\Address
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Staffology\Model\Address|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Staffology\Model\Address $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone(): ?string
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return $this
     */
    public function setTelephone(?string $telephone): static
    {
        if (is_null($telephone)) {
            array_push($this->openAPINullablesSetToNull, 'telephone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telephone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($telephone) && (mb_strlen($telephone) > 100)) {
            throw new InvalidArgumentException('invalid length for $telephone when calling PensionProvider., must be smaller than or equal to 100.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets papdisVersion
     *
     * @return \SynergiTech\Staffology\Model\PapdisVersion|null
     */
    public function getPapdisVersion(): ?\SynergiTech\Staffology\Model\PapdisVersion
    {
        return $this->container['papdisVersion'];
    }

    /**
     * Sets papdisVersion
     *
     * @param \SynergiTech\Staffology\Model\PapdisVersion|null $papdisVersion papdisVersion
     *
     * @return $this
     */
    public function setPapdisVersion(?\SynergiTech\Staffology\Model\PapdisVersion $papdisVersion): static
    {
        if (is_null($papdisVersion)) {
            throw new InvalidArgumentException('non-nullable papdisVersion cannot be null');
        }
        $this->container['papdisVersion'] = $papdisVersion;

        return $this;
    }

    /**
     * Gets papdisProviderId
     *
     * @return string|null
     */
    public function getPapdisProviderId(): ?string
    {
        return $this->container['papdisProviderId'];
    }

    /**
     * Sets papdisProviderId
     *
     * @param string|null $papdisProviderId papdisProviderId
     *
     * @return $this
     */
    public function setPapdisProviderId(?string $papdisProviderId): static
    {
        if (is_null($papdisProviderId)) {
            array_push($this->openAPINullablesSetToNull, 'papdisProviderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('papdisProviderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($papdisProviderId) && (mb_strlen($papdisProviderId) > 35)) {
            throw new InvalidArgumentException('invalid length for $papdisProviderId when calling PensionProvider., must be smaller than or equal to 35.');
        }

        $this->container['papdisProviderId'] = $papdisProviderId;

        return $this;
    }

    /**
     * Gets papdisEmployerId
     *
     * @return string|null
     */
    public function getPapdisEmployerId(): ?string
    {
        return $this->container['papdisEmployerId'];
    }

    /**
     * Sets papdisEmployerId
     *
     * @param string|null $papdisEmployerId papdisEmployerId
     *
     * @return $this
     */
    public function setPapdisEmployerId(?string $papdisEmployerId): static
    {
        if (is_null($papdisEmployerId)) {
            array_push($this->openAPINullablesSetToNull, 'papdisEmployerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('papdisEmployerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($papdisEmployerId) && (mb_strlen($papdisEmployerId) > 40)) {
            throw new InvalidArgumentException('invalid length for $papdisEmployerId when calling PensionProvider., must be smaller than or equal to 40.');
        }

        $this->container['papdisEmployerId'] = $papdisEmployerId;

        return $this;
    }

    /**
     * Gets csvFormat
     *
     * @return \SynergiTech\Staffology\Model\PensionCsvFormat|null
     */
    public function getCsvFormat(): ?\SynergiTech\Staffology\Model\PensionCsvFormat
    {
        return $this->container['csvFormat'];
    }

    /**
     * Sets csvFormat
     *
     * @param \SynergiTech\Staffology\Model\PensionCsvFormat|null $csvFormat csvFormat
     *
     * @return $this
     */
    public function setCsvFormat(?\SynergiTech\Staffology\Model\PensionCsvFormat $csvFormat): static
    {
        if (is_null($csvFormat)) {
            throw new InvalidArgumentException('non-nullable csvFormat cannot be null');
        }
        $this->container['csvFormat'] = $csvFormat;

        return $this;
    }

    /**
     * Gets excludeNilPaidFromContributions
     *
     * @return bool|null
     */
    public function getExcludeNilPaidFromContributions(): ?bool
    {
        return $this->container['excludeNilPaidFromContributions'];
    }

    /**
     * Sets excludeNilPaidFromContributions
     *
     * @param bool|null $excludeNilPaidFromContributions If we're sending contributions to an external provider then we'll include all employees that were on the payrun.  If you want to exclude employees that don't have any contributions to report then set this to true.
     *
     * @return $this
     */
    public function setExcludeNilPaidFromContributions(?bool $excludeNilPaidFromContributions): static
    {
        if (is_null($excludeNilPaidFromContributions)) {
            throw new InvalidArgumentException('non-nullable excludeNilPaidFromContributions cannot be null');
        }
        $this->container['excludeNilPaidFromContributions'] = $excludeNilPaidFromContributions;

        return $this;
    }

    /**
     * Gets payPeriodDateAdjustment
     *
     * @return int|null
     */
    public function getPayPeriodDateAdjustment(): ?int
    {
        return $this->container['payPeriodDateAdjustment'];
    }

    /**
     * Sets payPeriodDateAdjustment
     *
     * @param int|null $payPeriodDateAdjustment If you need to adjust the reported dates of the contributions then you can do so by setting a non-zero value here.  A negative value of will move the date back in time.
     *
     * @return $this
     */
    public function setPayPeriodDateAdjustment(?int $payPeriodDateAdjustment): static
    {
        if (is_null($payPeriodDateAdjustment)) {
            throw new InvalidArgumentException('non-nullable payPeriodDateAdjustment cannot be null');
        }
        $this->container['payPeriodDateAdjustment'] = $payPeriodDateAdjustment;

        return $this;
    }

    /**
     * Gets miscBoolean1
     *
     * @return bool|null
     */
    public function getMiscBoolean1(): ?bool
    {
        return $this->container['miscBoolean1'];
    }

    /**
     * Sets miscBoolean1
     *
     * @param bool|null $miscBoolean1 This field has different uses dependent on the ExternalDataProvider, if any.  For Nest, it indicates whether or not contributions are reported as \"Tax Weekly/Monthly\" rather than just \"Weekly/Monthly\"
     *
     * @return $this
     */
    public function setMiscBoolean1(?bool $miscBoolean1): static
    {
        if (is_null($miscBoolean1)) {
            throw new InvalidArgumentException('non-nullable miscBoolean1 cannot be null');
        }
        $this->container['miscBoolean1'] = $miscBoolean1;

        return $this;
    }

    /**
     * Gets miscBoolean2
     *
     * @return bool|null
     */
    public function getMiscBoolean2(): ?bool
    {
        return $this->container['miscBoolean2'];
    }

    /**
     * Sets miscBoolean2
     *
     * @param bool|null $miscBoolean2 This field has different uses dependent on the ExternalDataProvider, if any.  For Nest, it indicates whether or not to approve payments after submitting contributions
     *
     * @return $this
     */
    public function setMiscBoolean2(?bool $miscBoolean2): static
    {
        if (is_null($miscBoolean2)) {
            throw new InvalidArgumentException('non-nullable miscBoolean2 cannot be null');
        }
        $this->container['miscBoolean2'] = $miscBoolean2;

        return $this;
    }

    /**
     * Gets miscString1
     *
     * @return string|null
     */
    public function getMiscString1(): ?string
    {
        return $this->container['miscString1'];
    }

    /**
     * Sets miscString1
     *
     * @param string|null $miscString1 This field has different uses dependent on the ExternalDataProvider, if any.  For Nest, it dictates the PaymentSource.
     *
     * @return $this
     */
    public function setMiscString1(?string $miscString1): static
    {
        if (is_null($miscString1)) {
            array_push($this->openAPINullablesSetToNull, 'miscString1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('miscString1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($miscString1) && (mb_strlen($miscString1) > 50)) {
            throw new InvalidArgumentException('invalid length for $miscString1 when calling PensionProvider., must be smaller than or equal to 50.');
        }

        $this->container['miscString1'] = $miscString1;

        return $this;
    }

    /**
     * Gets miscString2
     *
     * @return string|null
     */
    public function getMiscString2(): ?string
    {
        return $this->container['miscString2'];
    }

    /**
     * Sets miscString2
     *
     * @param string|null $miscString2 This field has different uses dependent on the ExternalDataProvider, if any.
     *
     * @return $this
     */
    public function setMiscString2(?string $miscString2): static
    {
        if (is_null($miscString2)) {
            array_push($this->openAPINullablesSetToNull, 'miscString2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('miscString2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($miscString2) && (mb_strlen($miscString2) > 50)) {
            throw new InvalidArgumentException('invalid length for $miscString2 when calling PensionProvider., must be smaller than or equal to 50.');
        }

        $this->container['miscString2'] = $miscString2;

        return $this;
    }

    /**
     * Gets optOutWindow
     *
     * @return int|null
     */
    public function getOptOutWindow(): ?int
    {
        return $this->container['optOutWindow'];
    }

    /**
     * Sets optOutWindow
     *
     * @param int|null $optOutWindow The number of days or months that an employee has to Opt out after being enrolled
     *
     * @return $this
     */
    public function setOptOutWindow(?int $optOutWindow): static
    {
        if (is_null($optOutWindow)) {
            throw new InvalidArgumentException('non-nullable optOutWindow cannot be null');
        }
        $this->container['optOutWindow'] = $optOutWindow;

        return $this;
    }

    /**
     * Gets optOutWindowIsMonths
     *
     * @return bool|null
     */
    public function getOptOutWindowIsMonths(): ?bool
    {
        return $this->container['optOutWindowIsMonths'];
    }

    /**
     * Sets optOutWindowIsMonths
     *
     * @param bool|null $optOutWindowIsMonths Determines whether the value given for OptOutWindow is in Months (true) or days (false)
     *
     * @return $this
     */
    public function setOptOutWindowIsMonths(?bool $optOutWindowIsMonths): static
    {
        if (is_null($optOutWindowIsMonths)) {
            throw new InvalidArgumentException('non-nullable optOutWindowIsMonths cannot be null');
        }
        $this->container['optOutWindowIsMonths'] = $optOutWindowIsMonths;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


