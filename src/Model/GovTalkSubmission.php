<?php
/**
 * GovTalkSubmission
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * GovTalkSubmission Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GovTalkSubmission implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GovTalkSubmission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'rawResponse' => 'string',
        'messageClass' => 'string',
        'pollInterval' => 'int',
        'lastPoll' => '\DateTime',
        'correlationId' => 'string',
        'url' => 'string',
        'status' => '\SynergiTech\Staffology\Model\SubmissionStatus',
        'message' => 'string',
        'iRmark' => 'string',
        'errorsJson' => 'string',
        'errors' => '\SynergiTech\Staffology\Model\GovTalkError[]',
        'submittedAt' => '\DateTime',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'rawResponse' => null,
        'messageClass' => null,
        'pollInterval' => 'int32',
        'lastPoll' => 'date-time',
        'correlationId' => null,
        'url' => null,
        'status' => null,
        'message' => null,
        'iRmark' => null,
        'errorsJson' => null,
        'errors' => null,
        'submittedAt' => 'date-time',
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'rawResponse' => true,
        'messageClass' => true,
        'pollInterval' => false,
        'lastPoll' => true,
        'correlationId' => true,
        'url' => true,
        'status' => false,
        'message' => true,
        'iRmark' => true,
        'errorsJson' => true,
        'errors' => true,
        'submittedAt' => true,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'rawResponse' => 'rawResponse',
        'messageClass' => 'messageClass',
        'pollInterval' => 'pollInterval',
        'lastPoll' => 'lastPoll',
        'correlationId' => 'correlationId',
        'url' => 'url',
        'status' => 'status',
        'message' => 'message',
        'iRmark' => 'iRmark',
        'errorsJson' => 'errorsJson',
        'errors' => 'errors',
        'submittedAt' => 'submittedAt',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'rawResponse' => 'setRawResponse',
        'messageClass' => 'setMessageClass',
        'pollInterval' => 'setPollInterval',
        'lastPoll' => 'setLastPoll',
        'correlationId' => 'setCorrelationId',
        'url' => 'setUrl',
        'status' => 'setStatus',
        'message' => 'setMessage',
        'iRmark' => 'setIRmark',
        'errorsJson' => 'setErrorsJson',
        'errors' => 'setErrors',
        'submittedAt' => 'setSubmittedAt',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'rawResponse' => 'getRawResponse',
        'messageClass' => 'getMessageClass',
        'pollInterval' => 'getPollInterval',
        'lastPoll' => 'getLastPoll',
        'correlationId' => 'getCorrelationId',
        'url' => 'getUrl',
        'status' => 'getStatus',
        'message' => 'getMessage',
        'iRmark' => 'getIRmark',
        'errorsJson' => 'getErrorsJson',
        'errors' => 'getErrors',
        'submittedAt' => 'getSubmittedAt',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('rawResponse', $data ?? [], null);
        $this->setIfExists('messageClass', $data ?? [], null);
        $this->setIfExists('pollInterval', $data ?? [], null);
        $this->setIfExists('lastPoll', $data ?? [], null);
        $this->setIfExists('correlationId', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('iRmark', $data ?? [], null);
        $this->setIfExists('errorsJson', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('submittedAt', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['correlationId']) && (mb_strlen($this->container['correlationId']) > 100)) {
            $invalidProperties[] = "invalid value for 'correlationId', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 100)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rawResponse
     *
     * @return string|null
     */
    public function getRawResponse(): ?string
    {
        return $this->container['rawResponse'];
    }

    /**
     * Sets rawResponse
     *
     * @param string|null $rawResponse rawResponse
     *
     * @return $this
     */
    public function setRawResponse(?string $rawResponse): static
    {
        if (is_null($rawResponse)) {
            array_push($this->openAPINullablesSetToNull, 'rawResponse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rawResponse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rawResponse'] = $rawResponse;

        return $this;
    }

    /**
     * Gets messageClass
     *
     * @return string|null
     */
    public function getMessageClass(): ?string
    {
        return $this->container['messageClass'];
    }

    /**
     * Sets messageClass
     *
     * @param string|null $messageClass messageClass
     *
     * @return $this
     */
    public function setMessageClass(?string $messageClass): static
    {
        if (is_null($messageClass)) {
            array_push($this->openAPINullablesSetToNull, 'messageClass');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messageClass', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messageClass'] = $messageClass;

        return $this;
    }

    /**
     * Gets pollInterval
     *
     * @return int|null
     */
    public function getPollInterval(): ?int
    {
        return $this->container['pollInterval'];
    }

    /**
     * Sets pollInterval
     *
     * @param int|null $pollInterval pollInterval
     *
     * @return $this
     */
    public function setPollInterval(?int $pollInterval): static
    {
        if (is_null($pollInterval)) {
            throw new InvalidArgumentException('non-nullable pollInterval cannot be null');
        }
        $this->container['pollInterval'] = $pollInterval;

        return $this;
    }

    /**
     * Gets lastPoll
     *
     * @return \DateTime|null
     */
    public function getLastPoll(): ?\DateTime
    {
        return $this->container['lastPoll'];
    }

    /**
     * Sets lastPoll
     *
     * @param \DateTime|null $lastPoll lastPoll
     *
     * @return $this
     */
    public function setLastPoll(?\DateTime $lastPoll): static
    {
        if (is_null($lastPoll)) {
            array_push($this->openAPINullablesSetToNull, 'lastPoll');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastPoll', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastPoll'] = $lastPoll;

        return $this;
    }

    /**
     * Gets correlationId
     *
     * @return string|null
     */
    public function getCorrelationId(): ?string
    {
        return $this->container['correlationId'];
    }

    /**
     * Sets correlationId
     *
     * @param string|null $correlationId correlationId
     *
     * @return $this
     */
    public function setCorrelationId(?string $correlationId): static
    {
        if (is_null($correlationId)) {
            array_push($this->openAPINullablesSetToNull, 'correlationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correlationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($correlationId) && (mb_strlen($correlationId) > 100)) {
            throw new InvalidArgumentException('invalid length for $correlationId when calling GovTalkSubmission., must be smaller than or equal to 100.');
        }

        $this->container['correlationId'] = $correlationId;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($url) && (mb_strlen($url) > 100)) {
            throw new InvalidArgumentException('invalid length for $url when calling GovTalkSubmission., must be smaller than or equal to 100.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SynergiTech\Staffology\Model\SubmissionStatus|null
     */
    public function getStatus(): ?\SynergiTech\Staffology\Model\SubmissionStatus
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SynergiTech\Staffology\Model\SubmissionStatus|null $status status
     *
     * @return $this
     */
    public function setStatus(?\SynergiTech\Staffology\Model\SubmissionStatus $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return $this
     */
    public function setMessage(?string $message): static
    {
        if (is_null($message)) {
            array_push($this->openAPINullablesSetToNull, 'message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets iRmark
     *
     * @return string|null
     */
    public function getIRmark(): ?string
    {
        return $this->container['iRmark'];
    }

    /**
     * Sets iRmark
     *
     * @param string|null $iRmark iRmark
     *
     * @return $this
     */
    public function setIRmark(?string $iRmark): static
    {
        if (is_null($iRmark)) {
            array_push($this->openAPINullablesSetToNull, 'iRmark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iRmark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iRmark'] = $iRmark;

        return $this;
    }

    /**
     * Gets errorsJson
     *
     * @return string|null
     */
    public function getErrorsJson(): ?string
    {
        return $this->container['errorsJson'];
    }

    /**
     * Sets errorsJson
     *
     * @param string|null $errorsJson errorsJson
     *
     * @return $this
     */
    public function setErrorsJson(?string $errorsJson): static
    {
        if (is_null($errorsJson)) {
            array_push($this->openAPINullablesSetToNull, 'errorsJson');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorsJson', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['errorsJson'] = $errorsJson;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \SynergiTech\Staffology\Model\GovTalkError[]|null
     */
    public function getErrors(): ?array
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \SynergiTech\Staffology\Model\GovTalkError[]|null $errors errors
     *
     * @return $this
     */
    public function setErrors(?array $errors): static
    {
        if (is_null($errors)) {
            array_push($this->openAPINullablesSetToNull, 'errors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets submittedAt
     *
     * @return \DateTime|null
     */
    public function getSubmittedAt(): ?\DateTime
    {
        return $this->container['submittedAt'];
    }

    /**
     * Sets submittedAt
     *
     * @param \DateTime|null $submittedAt submittedAt
     *
     * @return $this
     */
    public function setSubmittedAt(?\DateTime $submittedAt): static
    {
        if (is_null($submittedAt)) {
            array_push($this->openAPINullablesSetToNull, 'submittedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submittedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submittedAt'] = $submittedAt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


