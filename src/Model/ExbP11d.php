<?php
/**
 * ExbP11d
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ExbP11d Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ExbP11d implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ExbP11d';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employee' => '\SynergiTech\Staffology\Model\ExbP11dEmployee',
        'transferred' => '\SynergiTech\Staffology\Model\P11DAssetTransferredCollection',
        'payments' => '\SynergiTech\Staffology\Model\P11DPaymentCollection',
        'vouchersOrCCs' => '\SynergiTech\Staffology\Model\P11DSingleItem',
        'livingAccom' => '\SynergiTech\Staffology\Model\P11DSingleItem',
        'mileageAllow' => '\SynergiTech\Staffology\Model\P11DSingleItem',
        'cars' => '\SynergiTech\Staffology\Model\P11DCarCollection',
        'vans' => '\SynergiTech\Staffology\Model\P11dVans',
        'loans' => '\SynergiTech\Staffology\Model\P11DLoanCollection',
        'medical' => '\SynergiTech\Staffology\Model\P11DSingleItem',
        'relocation' => '\SynergiTech\Staffology\Model\P11DSingleItem',
        'services' => '\SynergiTech\Staffology\Model\P11DSingleItem',
        'assetsAvail' => '\SynergiTech\Staffology\Model\P11DAssetAvailableCollection',
        'other' => '\SynergiTech\Staffology\Model\P11DOther',
        'expPaid' => '\SynergiTech\Staffology\Model\P11dExpenses'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employee' => null,
        'transferred' => null,
        'payments' => null,
        'vouchersOrCCs' => null,
        'livingAccom' => null,
        'mileageAllow' => null,
        'cars' => null,
        'vans' => null,
        'loans' => null,
        'medical' => null,
        'relocation' => null,
        'services' => null,
        'assetsAvail' => null,
        'other' => null,
        'expPaid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employee' => false,
        'transferred' => false,
        'payments' => false,
        'vouchersOrCCs' => false,
        'livingAccom' => false,
        'mileageAllow' => false,
        'cars' => false,
        'vans' => false,
        'loans' => false,
        'medical' => false,
        'relocation' => false,
        'services' => false,
        'assetsAvail' => false,
        'other' => false,
        'expPaid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employee' => 'employee',
        'transferred' => 'transferred',
        'payments' => 'payments',
        'vouchersOrCCs' => 'vouchersOrCCs',
        'livingAccom' => 'livingAccom',
        'mileageAllow' => 'mileageAllow',
        'cars' => 'cars',
        'vans' => 'vans',
        'loans' => 'loans',
        'medical' => 'medical',
        'relocation' => 'relocation',
        'services' => 'services',
        'assetsAvail' => 'assetsAvail',
        'other' => 'other',
        'expPaid' => 'expPaid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employee' => 'setEmployee',
        'transferred' => 'setTransferred',
        'payments' => 'setPayments',
        'vouchersOrCCs' => 'setVouchersOrCCs',
        'livingAccom' => 'setLivingAccom',
        'mileageAllow' => 'setMileageAllow',
        'cars' => 'setCars',
        'vans' => 'setVans',
        'loans' => 'setLoans',
        'medical' => 'setMedical',
        'relocation' => 'setRelocation',
        'services' => 'setServices',
        'assetsAvail' => 'setAssetsAvail',
        'other' => 'setOther',
        'expPaid' => 'setExpPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employee' => 'getEmployee',
        'transferred' => 'getTransferred',
        'payments' => 'getPayments',
        'vouchersOrCCs' => 'getVouchersOrCCs',
        'livingAccom' => 'getLivingAccom',
        'mileageAllow' => 'getMileageAllow',
        'cars' => 'getCars',
        'vans' => 'getVans',
        'loans' => 'getLoans',
        'medical' => 'getMedical',
        'relocation' => 'getRelocation',
        'services' => 'getServices',
        'assetsAvail' => 'getAssetsAvail',
        'other' => 'getOther',
        'expPaid' => 'getExpPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('transferred', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('vouchersOrCCs', $data ?? [], null);
        $this->setIfExists('livingAccom', $data ?? [], null);
        $this->setIfExists('mileageAllow', $data ?? [], null);
        $this->setIfExists('cars', $data ?? [], null);
        $this->setIfExists('vans', $data ?? [], null);
        $this->setIfExists('loans', $data ?? [], null);
        $this->setIfExists('medical', $data ?? [], null);
        $this->setIfExists('relocation', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('assetsAvail', $data ?? [], null);
        $this->setIfExists('other', $data ?? [], null);
        $this->setIfExists('expPaid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\ExbP11dEmployee|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\ExbP11dEmployee
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\ExbP11dEmployee|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\ExbP11dEmployee $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets transferred
     *
     * @return \SynergiTech\Staffology\Model\P11DAssetTransferredCollection|null
     */
    public function getTransferred(): ?\SynergiTech\Staffology\Model\P11DAssetTransferredCollection
    {
        return $this->container['transferred'];
    }

    /**
     * Sets transferred
     *
     * @param \SynergiTech\Staffology\Model\P11DAssetTransferredCollection|null $transferred transferred
     *
     * @return $this
     */
    public function setTransferred(?\SynergiTech\Staffology\Model\P11DAssetTransferredCollection $transferred): static
    {
        if (is_null($transferred)) {
            throw new InvalidArgumentException('non-nullable transferred cannot be null');
        }
        $this->container['transferred'] = $transferred;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \SynergiTech\Staffology\Model\P11DPaymentCollection|null
     */
    public function getPayments(): ?\SynergiTech\Staffology\Model\P11DPaymentCollection
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \SynergiTech\Staffology\Model\P11DPaymentCollection|null $payments payments
     *
     * @return $this
     */
    public function setPayments(?\SynergiTech\Staffology\Model\P11DPaymentCollection $payments): static
    {
        if (is_null($payments)) {
            throw new InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets vouchersOrCCs
     *
     * @return \SynergiTech\Staffology\Model\P11DSingleItem|null
     */
    public function getVouchersOrCCs(): ?\SynergiTech\Staffology\Model\P11DSingleItem
    {
        return $this->container['vouchersOrCCs'];
    }

    /**
     * Sets vouchersOrCCs
     *
     * @param \SynergiTech\Staffology\Model\P11DSingleItem|null $vouchersOrCCs vouchersOrCCs
     *
     * @return $this
     */
    public function setVouchersOrCCs(?\SynergiTech\Staffology\Model\P11DSingleItem $vouchersOrCCs): static
    {
        if (is_null($vouchersOrCCs)) {
            throw new InvalidArgumentException('non-nullable vouchersOrCCs cannot be null');
        }
        $this->container['vouchersOrCCs'] = $vouchersOrCCs;

        return $this;
    }

    /**
     * Gets livingAccom
     *
     * @return \SynergiTech\Staffology\Model\P11DSingleItem|null
     */
    public function getLivingAccom(): ?\SynergiTech\Staffology\Model\P11DSingleItem
    {
        return $this->container['livingAccom'];
    }

    /**
     * Sets livingAccom
     *
     * @param \SynergiTech\Staffology\Model\P11DSingleItem|null $livingAccom livingAccom
     *
     * @return $this
     */
    public function setLivingAccom(?\SynergiTech\Staffology\Model\P11DSingleItem $livingAccom): static
    {
        if (is_null($livingAccom)) {
            throw new InvalidArgumentException('non-nullable livingAccom cannot be null');
        }
        $this->container['livingAccom'] = $livingAccom;

        return $this;
    }

    /**
     * Gets mileageAllow
     *
     * @return \SynergiTech\Staffology\Model\P11DSingleItem|null
     */
    public function getMileageAllow(): ?\SynergiTech\Staffology\Model\P11DSingleItem
    {
        return $this->container['mileageAllow'];
    }

    /**
     * Sets mileageAllow
     *
     * @param \SynergiTech\Staffology\Model\P11DSingleItem|null $mileageAllow mileageAllow
     *
     * @return $this
     */
    public function setMileageAllow(?\SynergiTech\Staffology\Model\P11DSingleItem $mileageAllow): static
    {
        if (is_null($mileageAllow)) {
            throw new InvalidArgumentException('non-nullable mileageAllow cannot be null');
        }
        $this->container['mileageAllow'] = $mileageAllow;

        return $this;
    }

    /**
     * Gets cars
     *
     * @return \SynergiTech\Staffology\Model\P11DCarCollection|null
     */
    public function getCars(): ?\SynergiTech\Staffology\Model\P11DCarCollection
    {
        return $this->container['cars'];
    }

    /**
     * Sets cars
     *
     * @param \SynergiTech\Staffology\Model\P11DCarCollection|null $cars cars
     *
     * @return $this
     */
    public function setCars(?\SynergiTech\Staffology\Model\P11DCarCollection $cars): static
    {
        if (is_null($cars)) {
            throw new InvalidArgumentException('non-nullable cars cannot be null');
        }
        $this->container['cars'] = $cars;

        return $this;
    }

    /**
     * Gets vans
     *
     * @return \SynergiTech\Staffology\Model\P11dVans|null
     */
    public function getVans(): ?\SynergiTech\Staffology\Model\P11dVans
    {
        return $this->container['vans'];
    }

    /**
     * Sets vans
     *
     * @param \SynergiTech\Staffology\Model\P11dVans|null $vans vans
     *
     * @return $this
     */
    public function setVans(?\SynergiTech\Staffology\Model\P11dVans $vans): static
    {
        if (is_null($vans)) {
            throw new InvalidArgumentException('non-nullable vans cannot be null');
        }
        $this->container['vans'] = $vans;

        return $this;
    }

    /**
     * Gets loans
     *
     * @return \SynergiTech\Staffology\Model\P11DLoanCollection|null
     */
    public function getLoans(): ?\SynergiTech\Staffology\Model\P11DLoanCollection
    {
        return $this->container['loans'];
    }

    /**
     * Sets loans
     *
     * @param \SynergiTech\Staffology\Model\P11DLoanCollection|null $loans loans
     *
     * @return $this
     */
    public function setLoans(?\SynergiTech\Staffology\Model\P11DLoanCollection $loans): static
    {
        if (is_null($loans)) {
            throw new InvalidArgumentException('non-nullable loans cannot be null');
        }
        $this->container['loans'] = $loans;

        return $this;
    }

    /**
     * Gets medical
     *
     * @return \SynergiTech\Staffology\Model\P11DSingleItem|null
     */
    public function getMedical(): ?\SynergiTech\Staffology\Model\P11DSingleItem
    {
        return $this->container['medical'];
    }

    /**
     * Sets medical
     *
     * @param \SynergiTech\Staffology\Model\P11DSingleItem|null $medical medical
     *
     * @return $this
     */
    public function setMedical(?\SynergiTech\Staffology\Model\P11DSingleItem $medical): static
    {
        if (is_null($medical)) {
            throw new InvalidArgumentException('non-nullable medical cannot be null');
        }
        $this->container['medical'] = $medical;

        return $this;
    }

    /**
     * Gets relocation
     *
     * @return \SynergiTech\Staffology\Model\P11DSingleItem|null
     */
    public function getRelocation(): ?\SynergiTech\Staffology\Model\P11DSingleItem
    {
        return $this->container['relocation'];
    }

    /**
     * Sets relocation
     *
     * @param \SynergiTech\Staffology\Model\P11DSingleItem|null $relocation relocation
     *
     * @return $this
     */
    public function setRelocation(?\SynergiTech\Staffology\Model\P11DSingleItem $relocation): static
    {
        if (is_null($relocation)) {
            throw new InvalidArgumentException('non-nullable relocation cannot be null');
        }
        $this->container['relocation'] = $relocation;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \SynergiTech\Staffology\Model\P11DSingleItem|null
     */
    public function getServices(): ?\SynergiTech\Staffology\Model\P11DSingleItem
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \SynergiTech\Staffology\Model\P11DSingleItem|null $services services
     *
     * @return $this
     */
    public function setServices(?\SynergiTech\Staffology\Model\P11DSingleItem $services): static
    {
        if (is_null($services)) {
            throw new InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets assetsAvail
     *
     * @return \SynergiTech\Staffology\Model\P11DAssetAvailableCollection|null
     */
    public function getAssetsAvail(): ?\SynergiTech\Staffology\Model\P11DAssetAvailableCollection
    {
        return $this->container['assetsAvail'];
    }

    /**
     * Sets assetsAvail
     *
     * @param \SynergiTech\Staffology\Model\P11DAssetAvailableCollection|null $assetsAvail assetsAvail
     *
     * @return $this
     */
    public function setAssetsAvail(?\SynergiTech\Staffology\Model\P11DAssetAvailableCollection $assetsAvail): static
    {
        if (is_null($assetsAvail)) {
            throw new InvalidArgumentException('non-nullable assetsAvail cannot be null');
        }
        $this->container['assetsAvail'] = $assetsAvail;

        return $this;
    }

    /**
     * Gets other
     *
     * @return \SynergiTech\Staffology\Model\P11DOther|null
     */
    public function getOther(): ?\SynergiTech\Staffology\Model\P11DOther
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param \SynergiTech\Staffology\Model\P11DOther|null $other other
     *
     * @return $this
     */
    public function setOther(?\SynergiTech\Staffology\Model\P11DOther $other): static
    {
        if (is_null($other)) {
            throw new InvalidArgumentException('non-nullable other cannot be null');
        }
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets expPaid
     *
     * @return \SynergiTech\Staffology\Model\P11dExpenses|null
     */
    public function getExpPaid(): ?\SynergiTech\Staffology\Model\P11dExpenses
    {
        return $this->container['expPaid'];
    }

    /**
     * Sets expPaid
     *
     * @param \SynergiTech\Staffology\Model\P11dExpenses|null $expPaid expPaid
     *
     * @return $this
     */
    public function setExpPaid(?\SynergiTech\Staffology\Model\P11dExpenses $expPaid): static
    {
        if (is_null($expPaid)) {
            throw new InvalidArgumentException('non-nullable expPaid cannot be null');
        }
        $this->container['expPaid'] = $expPaid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


