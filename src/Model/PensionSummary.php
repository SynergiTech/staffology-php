<?php
/**
 * PensionSummary
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PensionSummary Class Doc Comment
 *
 * @description If a PayRunEntry contains pension contributions then it&#39;ll also include a PensionSummary model  giving further information about the Pension Scheme and the contributions made
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PensionSummary implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PensionSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'pensionId' => 'string',
        'name' => 'string',
        'pensionSchemeId' => 'string',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'workerGroupId' => 'string',
        'pensionRule' => '\SynergiTech\Staffology\Model\PensionRule',
        'subtractedBasicRateTax' => 'bool',
        'papdisPensionProviderId' => 'string',
        'papdisEmployerId' => 'string',
        'employeePensionContributionMultiplier' => 'float',
        'additionalVoluntaryContribution' => 'float',
        'avcIsPercentage' => 'bool',
        'autoEnrolled' => 'bool',
        'workerGroup' => '\SynergiTech\Staffology\Model\WorkerGroup',
        'forcedTier' => 'string',
        'tiers' => '\SynergiTech\Staffology\Model\TieredPensionRate[]',
        'assumedPensionablePay' => 'float',
        'pensionablePayCodes' => 'string[]',
        'tierablePayPayCodes' => 'string[]',
        'isHalfContributionMember' => 'bool',
        'pensionableEarnings' => 'float',
        'pensionablePay' => 'float',
        'nonTierablePay' => 'float',
        'employeePensionContribution' => 'float',
        'employeePensionContributionAvc' => 'float',
        'employerPensionContribution' => 'float',
        'isForEndedPension' => 'bool',
        'associatedEmployeeRoles' => '\SynergiTech\Staffology\Model\Item[]',
        'notionalPay' => 'float',
        'pensionableEarningsBfd' => 'float',
        'pensionablePayBfd' => 'float',
        'employeePensionContributionBfd' => 'float',
        'assumedPensionablePayBfd' => 'float',
        'employerPensionContributionBfd' => 'float',
        'employeePensionContributionAvcBfd' => 'float',
        'whenEarnedPensionSummaries' => '\SynergiTech\Staffology\Model\PensionSummary[]',
        'periodFrom' => '\DateTime',
        'periodTo' => '\DateTime',
        'whenEarnedPensionableEarningsCorrection' => 'float',
        'whenEarnedPensionablePayCorrection' => 'float',
        'whenEarnedEmployeePensionContributionCorrection' => 'float',
        'whenEarnedEmployerPensionContributionCorrection' => 'float',
        'whenEarnedEmployeePensionContributionAvcCorrection' => 'float',
        'whenEarnedPensionableEarningsCorrectionBfd' => 'float',
        'whenEarnedPensionablePayCorrectionBfd' => 'float',
        'whenEarnedEmployeePensionContributionCorrectionBfd' => 'float',
        'whenEarnedEmployerPensionContributionCorrectionBfd' => 'float',
        'whenEarnedEmployeePensionContributionAvcCorrectionBfd' => 'float',
        'nominalCodeMappings' => '\SynergiTech\Staffology\Model\PensionSchemeNominalCodeMapping[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'pensionId' => 'uuid',
        'name' => null,
        'pensionSchemeId' => 'uuid',
        'startDate' => 'date',
        'endDate' => 'date',
        'workerGroupId' => 'uuid',
        'pensionRule' => null,
        'subtractedBasicRateTax' => null,
        'papdisPensionProviderId' => null,
        'papdisEmployerId' => null,
        'employeePensionContributionMultiplier' => 'double',
        'additionalVoluntaryContribution' => 'double',
        'avcIsPercentage' => null,
        'autoEnrolled' => null,
        'workerGroup' => null,
        'forcedTier' => null,
        'tiers' => null,
        'assumedPensionablePay' => 'double',
        'pensionablePayCodes' => null,
        'tierablePayPayCodes' => null,
        'isHalfContributionMember' => null,
        'pensionableEarnings' => 'double',
        'pensionablePay' => 'double',
        'nonTierablePay' => 'double',
        'employeePensionContribution' => 'double',
        'employeePensionContributionAvc' => 'double',
        'employerPensionContribution' => 'double',
        'isForEndedPension' => null,
        'associatedEmployeeRoles' => null,
        'notionalPay' => 'double',
        'pensionableEarningsBfd' => 'double',
        'pensionablePayBfd' => 'double',
        'employeePensionContributionBfd' => 'double',
        'assumedPensionablePayBfd' => 'double',
        'employerPensionContributionBfd' => 'double',
        'employeePensionContributionAvcBfd' => 'double',
        'whenEarnedPensionSummaries' => null,
        'periodFrom' => 'date',
        'periodTo' => 'date',
        'whenEarnedPensionableEarningsCorrection' => 'double',
        'whenEarnedPensionablePayCorrection' => 'double',
        'whenEarnedEmployeePensionContributionCorrection' => 'double',
        'whenEarnedEmployerPensionContributionCorrection' => 'double',
        'whenEarnedEmployeePensionContributionAvcCorrection' => 'double',
        'whenEarnedPensionableEarningsCorrectionBfd' => 'double',
        'whenEarnedPensionablePayCorrectionBfd' => 'double',
        'whenEarnedEmployeePensionContributionCorrectionBfd' => 'double',
        'whenEarnedEmployerPensionContributionCorrectionBfd' => 'double',
        'whenEarnedEmployeePensionContributionAvcCorrectionBfd' => 'double',
        'nominalCodeMappings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'pensionId' => false,
        'name' => true,
        'pensionSchemeId' => false,
        'startDate' => false,
        'endDate' => true,
        'workerGroupId' => false,
        'pensionRule' => false,
        'subtractedBasicRateTax' => false,
        'papdisPensionProviderId' => true,
        'papdisEmployerId' => true,
        'employeePensionContributionMultiplier' => false,
        'additionalVoluntaryContribution' => false,
        'avcIsPercentage' => false,
        'autoEnrolled' => false,
        'workerGroup' => false,
        'forcedTier' => true,
        'tiers' => true,
        'assumedPensionablePay' => true,
        'pensionablePayCodes' => true,
        'tierablePayPayCodes' => true,
        'isHalfContributionMember' => false,
        'pensionableEarnings' => false,
        'pensionablePay' => false,
        'nonTierablePay' => false,
        'employeePensionContribution' => false,
        'employeePensionContributionAvc' => false,
        'employerPensionContribution' => false,
        'isForEndedPension' => false,
        'associatedEmployeeRoles' => true,
        'notionalPay' => false,
        'pensionableEarningsBfd' => false,
        'pensionablePayBfd' => false,
        'employeePensionContributionBfd' => false,
        'assumedPensionablePayBfd' => true,
        'employerPensionContributionBfd' => false,
        'employeePensionContributionAvcBfd' => false,
        'whenEarnedPensionSummaries' => true,
        'periodFrom' => true,
        'periodTo' => true,
        'whenEarnedPensionableEarningsCorrection' => false,
        'whenEarnedPensionablePayCorrection' => false,
        'whenEarnedEmployeePensionContributionCorrection' => false,
        'whenEarnedEmployerPensionContributionCorrection' => false,
        'whenEarnedEmployeePensionContributionAvcCorrection' => false,
        'whenEarnedPensionableEarningsCorrectionBfd' => false,
        'whenEarnedPensionablePayCorrectionBfd' => false,
        'whenEarnedEmployeePensionContributionCorrectionBfd' => false,
        'whenEarnedEmployerPensionContributionCorrectionBfd' => false,
        'whenEarnedEmployeePensionContributionAvcCorrectionBfd' => false,
        'nominalCodeMappings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'pensionId' => 'pensionId',
        'name' => 'name',
        'pensionSchemeId' => 'pensionSchemeId',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'workerGroupId' => 'workerGroupId',
        'pensionRule' => 'pensionRule',
        'subtractedBasicRateTax' => 'subtractedBasicRateTax',
        'papdisPensionProviderId' => 'papdisPensionProviderId',
        'papdisEmployerId' => 'papdisEmployerId',
        'employeePensionContributionMultiplier' => 'employeePensionContributionMultiplier',
        'additionalVoluntaryContribution' => 'additionalVoluntaryContribution',
        'avcIsPercentage' => 'avcIsPercentage',
        'autoEnrolled' => 'autoEnrolled',
        'workerGroup' => 'workerGroup',
        'forcedTier' => 'forcedTier',
        'tiers' => 'tiers',
        'assumedPensionablePay' => 'assumedPensionablePay',
        'pensionablePayCodes' => 'pensionablePayCodes',
        'tierablePayPayCodes' => 'tierablePayPayCodes',
        'isHalfContributionMember' => 'isHalfContributionMember',
        'pensionableEarnings' => 'pensionableEarnings',
        'pensionablePay' => 'pensionablePay',
        'nonTierablePay' => 'nonTierablePay',
        'employeePensionContribution' => 'employeePensionContribution',
        'employeePensionContributionAvc' => 'employeePensionContributionAvc',
        'employerPensionContribution' => 'employerPensionContribution',
        'isForEndedPension' => 'isForEndedPension',
        'associatedEmployeeRoles' => 'associatedEmployeeRoles',
        'notionalPay' => 'notionalPay',
        'pensionableEarningsBfd' => 'pensionableEarningsBfd',
        'pensionablePayBfd' => 'pensionablePayBfd',
        'employeePensionContributionBfd' => 'employeePensionContributionBfd',
        'assumedPensionablePayBfd' => 'assumedPensionablePayBfd',
        'employerPensionContributionBfd' => 'employerPensionContributionBfd',
        'employeePensionContributionAvcBfd' => 'employeePensionContributionAvcBfd',
        'whenEarnedPensionSummaries' => 'whenEarnedPensionSummaries',
        'periodFrom' => 'periodFrom',
        'periodTo' => 'periodTo',
        'whenEarnedPensionableEarningsCorrection' => 'whenEarnedPensionableEarningsCorrection',
        'whenEarnedPensionablePayCorrection' => 'whenEarnedPensionablePayCorrection',
        'whenEarnedEmployeePensionContributionCorrection' => 'whenEarnedEmployeePensionContributionCorrection',
        'whenEarnedEmployerPensionContributionCorrection' => 'whenEarnedEmployerPensionContributionCorrection',
        'whenEarnedEmployeePensionContributionAvcCorrection' => 'whenEarnedEmployeePensionContributionAvcCorrection',
        'whenEarnedPensionableEarningsCorrectionBfd' => 'whenEarnedPensionableEarningsCorrectionBfd',
        'whenEarnedPensionablePayCorrectionBfd' => 'whenEarnedPensionablePayCorrectionBfd',
        'whenEarnedEmployeePensionContributionCorrectionBfd' => 'whenEarnedEmployeePensionContributionCorrectionBfd',
        'whenEarnedEmployerPensionContributionCorrectionBfd' => 'whenEarnedEmployerPensionContributionCorrectionBfd',
        'whenEarnedEmployeePensionContributionAvcCorrectionBfd' => 'whenEarnedEmployeePensionContributionAvcCorrectionBfd',
        'nominalCodeMappings' => 'nominalCodeMappings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'pensionId' => 'setPensionId',
        'name' => 'setName',
        'pensionSchemeId' => 'setPensionSchemeId',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'workerGroupId' => 'setWorkerGroupId',
        'pensionRule' => 'setPensionRule',
        'subtractedBasicRateTax' => 'setSubtractedBasicRateTax',
        'papdisPensionProviderId' => 'setPapdisPensionProviderId',
        'papdisEmployerId' => 'setPapdisEmployerId',
        'employeePensionContributionMultiplier' => 'setEmployeePensionContributionMultiplier',
        'additionalVoluntaryContribution' => 'setAdditionalVoluntaryContribution',
        'avcIsPercentage' => 'setAvcIsPercentage',
        'autoEnrolled' => 'setAutoEnrolled',
        'workerGroup' => 'setWorkerGroup',
        'forcedTier' => 'setForcedTier',
        'tiers' => 'setTiers',
        'assumedPensionablePay' => 'setAssumedPensionablePay',
        'pensionablePayCodes' => 'setPensionablePayCodes',
        'tierablePayPayCodes' => 'setTierablePayPayCodes',
        'isHalfContributionMember' => 'setIsHalfContributionMember',
        'pensionableEarnings' => 'setPensionableEarnings',
        'pensionablePay' => 'setPensionablePay',
        'nonTierablePay' => 'setNonTierablePay',
        'employeePensionContribution' => 'setEmployeePensionContribution',
        'employeePensionContributionAvc' => 'setEmployeePensionContributionAvc',
        'employerPensionContribution' => 'setEmployerPensionContribution',
        'isForEndedPension' => 'setIsForEndedPension',
        'associatedEmployeeRoles' => 'setAssociatedEmployeeRoles',
        'notionalPay' => 'setNotionalPay',
        'pensionableEarningsBfd' => 'setPensionableEarningsBfd',
        'pensionablePayBfd' => 'setPensionablePayBfd',
        'employeePensionContributionBfd' => 'setEmployeePensionContributionBfd',
        'assumedPensionablePayBfd' => 'setAssumedPensionablePayBfd',
        'employerPensionContributionBfd' => 'setEmployerPensionContributionBfd',
        'employeePensionContributionAvcBfd' => 'setEmployeePensionContributionAvcBfd',
        'whenEarnedPensionSummaries' => 'setWhenEarnedPensionSummaries',
        'periodFrom' => 'setPeriodFrom',
        'periodTo' => 'setPeriodTo',
        'whenEarnedPensionableEarningsCorrection' => 'setWhenEarnedPensionableEarningsCorrection',
        'whenEarnedPensionablePayCorrection' => 'setWhenEarnedPensionablePayCorrection',
        'whenEarnedEmployeePensionContributionCorrection' => 'setWhenEarnedEmployeePensionContributionCorrection',
        'whenEarnedEmployerPensionContributionCorrection' => 'setWhenEarnedEmployerPensionContributionCorrection',
        'whenEarnedEmployeePensionContributionAvcCorrection' => 'setWhenEarnedEmployeePensionContributionAvcCorrection',
        'whenEarnedPensionableEarningsCorrectionBfd' => 'setWhenEarnedPensionableEarningsCorrectionBfd',
        'whenEarnedPensionablePayCorrectionBfd' => 'setWhenEarnedPensionablePayCorrectionBfd',
        'whenEarnedEmployeePensionContributionCorrectionBfd' => 'setWhenEarnedEmployeePensionContributionCorrectionBfd',
        'whenEarnedEmployerPensionContributionCorrectionBfd' => 'setWhenEarnedEmployerPensionContributionCorrectionBfd',
        'whenEarnedEmployeePensionContributionAvcCorrectionBfd' => 'setWhenEarnedEmployeePensionContributionAvcCorrectionBfd',
        'nominalCodeMappings' => 'setNominalCodeMappings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'pensionId' => 'getPensionId',
        'name' => 'getName',
        'pensionSchemeId' => 'getPensionSchemeId',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'workerGroupId' => 'getWorkerGroupId',
        'pensionRule' => 'getPensionRule',
        'subtractedBasicRateTax' => 'getSubtractedBasicRateTax',
        'papdisPensionProviderId' => 'getPapdisPensionProviderId',
        'papdisEmployerId' => 'getPapdisEmployerId',
        'employeePensionContributionMultiplier' => 'getEmployeePensionContributionMultiplier',
        'additionalVoluntaryContribution' => 'getAdditionalVoluntaryContribution',
        'avcIsPercentage' => 'getAvcIsPercentage',
        'autoEnrolled' => 'getAutoEnrolled',
        'workerGroup' => 'getWorkerGroup',
        'forcedTier' => 'getForcedTier',
        'tiers' => 'getTiers',
        'assumedPensionablePay' => 'getAssumedPensionablePay',
        'pensionablePayCodes' => 'getPensionablePayCodes',
        'tierablePayPayCodes' => 'getTierablePayPayCodes',
        'isHalfContributionMember' => 'getIsHalfContributionMember',
        'pensionableEarnings' => 'getPensionableEarnings',
        'pensionablePay' => 'getPensionablePay',
        'nonTierablePay' => 'getNonTierablePay',
        'employeePensionContribution' => 'getEmployeePensionContribution',
        'employeePensionContributionAvc' => 'getEmployeePensionContributionAvc',
        'employerPensionContribution' => 'getEmployerPensionContribution',
        'isForEndedPension' => 'getIsForEndedPension',
        'associatedEmployeeRoles' => 'getAssociatedEmployeeRoles',
        'notionalPay' => 'getNotionalPay',
        'pensionableEarningsBfd' => 'getPensionableEarningsBfd',
        'pensionablePayBfd' => 'getPensionablePayBfd',
        'employeePensionContributionBfd' => 'getEmployeePensionContributionBfd',
        'assumedPensionablePayBfd' => 'getAssumedPensionablePayBfd',
        'employerPensionContributionBfd' => 'getEmployerPensionContributionBfd',
        'employeePensionContributionAvcBfd' => 'getEmployeePensionContributionAvcBfd',
        'whenEarnedPensionSummaries' => 'getWhenEarnedPensionSummaries',
        'periodFrom' => 'getPeriodFrom',
        'periodTo' => 'getPeriodTo',
        'whenEarnedPensionableEarningsCorrection' => 'getWhenEarnedPensionableEarningsCorrection',
        'whenEarnedPensionablePayCorrection' => 'getWhenEarnedPensionablePayCorrection',
        'whenEarnedEmployeePensionContributionCorrection' => 'getWhenEarnedEmployeePensionContributionCorrection',
        'whenEarnedEmployerPensionContributionCorrection' => 'getWhenEarnedEmployerPensionContributionCorrection',
        'whenEarnedEmployeePensionContributionAvcCorrection' => 'getWhenEarnedEmployeePensionContributionAvcCorrection',
        'whenEarnedPensionableEarningsCorrectionBfd' => 'getWhenEarnedPensionableEarningsCorrectionBfd',
        'whenEarnedPensionablePayCorrectionBfd' => 'getWhenEarnedPensionablePayCorrectionBfd',
        'whenEarnedEmployeePensionContributionCorrectionBfd' => 'getWhenEarnedEmployeePensionContributionCorrectionBfd',
        'whenEarnedEmployerPensionContributionCorrectionBfd' => 'getWhenEarnedEmployerPensionContributionCorrectionBfd',
        'whenEarnedEmployeePensionContributionAvcCorrectionBfd' => 'getWhenEarnedEmployeePensionContributionAvcCorrectionBfd',
        'nominalCodeMappings' => 'getNominalCodeMappings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pensionId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pensionSchemeId', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('workerGroupId', $data ?? [], null);
        $this->setIfExists('pensionRule', $data ?? [], null);
        $this->setIfExists('subtractedBasicRateTax', $data ?? [], null);
        $this->setIfExists('papdisPensionProviderId', $data ?? [], null);
        $this->setIfExists('papdisEmployerId', $data ?? [], null);
        $this->setIfExists('employeePensionContributionMultiplier', $data ?? [], null);
        $this->setIfExists('additionalVoluntaryContribution', $data ?? [], null);
        $this->setIfExists('avcIsPercentage', $data ?? [], null);
        $this->setIfExists('autoEnrolled', $data ?? [], null);
        $this->setIfExists('workerGroup', $data ?? [], null);
        $this->setIfExists('forcedTier', $data ?? [], null);
        $this->setIfExists('tiers', $data ?? [], null);
        $this->setIfExists('assumedPensionablePay', $data ?? [], null);
        $this->setIfExists('pensionablePayCodes', $data ?? [], null);
        $this->setIfExists('tierablePayPayCodes', $data ?? [], null);
        $this->setIfExists('isHalfContributionMember', $data ?? [], null);
        $this->setIfExists('pensionableEarnings', $data ?? [], null);
        $this->setIfExists('pensionablePay', $data ?? [], null);
        $this->setIfExists('nonTierablePay', $data ?? [], null);
        $this->setIfExists('employeePensionContribution', $data ?? [], null);
        $this->setIfExists('employeePensionContributionAvc', $data ?? [], null);
        $this->setIfExists('employerPensionContribution', $data ?? [], null);
        $this->setIfExists('isForEndedPension', $data ?? [], null);
        $this->setIfExists('associatedEmployeeRoles', $data ?? [], null);
        $this->setIfExists('notionalPay', $data ?? [], null);
        $this->setIfExists('pensionableEarningsBfd', $data ?? [], null);
        $this->setIfExists('pensionablePayBfd', $data ?? [], null);
        $this->setIfExists('employeePensionContributionBfd', $data ?? [], null);
        $this->setIfExists('assumedPensionablePayBfd', $data ?? [], null);
        $this->setIfExists('employerPensionContributionBfd', $data ?? [], null);
        $this->setIfExists('employeePensionContributionAvcBfd', $data ?? [], null);
        $this->setIfExists('whenEarnedPensionSummaries', $data ?? [], null);
        $this->setIfExists('periodFrom', $data ?? [], null);
        $this->setIfExists('periodTo', $data ?? [], null);
        $this->setIfExists('whenEarnedPensionableEarningsCorrection', $data ?? [], null);
        $this->setIfExists('whenEarnedPensionablePayCorrection', $data ?? [], null);
        $this->setIfExists('whenEarnedEmployeePensionContributionCorrection', $data ?? [], null);
        $this->setIfExists('whenEarnedEmployerPensionContributionCorrection', $data ?? [], null);
        $this->setIfExists('whenEarnedEmployeePensionContributionAvcCorrection', $data ?? [], null);
        $this->setIfExists('whenEarnedPensionableEarningsCorrectionBfd', $data ?? [], null);
        $this->setIfExists('whenEarnedPensionablePayCorrectionBfd', $data ?? [], null);
        $this->setIfExists('whenEarnedEmployeePensionContributionCorrectionBfd', $data ?? [], null);
        $this->setIfExists('whenEarnedEmployerPensionContributionCorrectionBfd', $data ?? [], null);
        $this->setIfExists('whenEarnedEmployeePensionContributionAvcCorrectionBfd', $data ?? [], null);
        $this->setIfExists('nominalCodeMappings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pensionId
     *
     * @return string|null
     */
    public function getPensionId(): ?string
    {
        return $this->container['pensionId'];
    }

    /**
     * Sets pensionId
     *
     * @param string|null $pensionId [readonly] The Id of the Pension.
     *
     * @return $this
     */
    public function setPensionId(?string $pensionId): static
    {
        if (is_null($pensionId)) {
            throw new InvalidArgumentException('non-nullable pensionId cannot be null');
        }
        $this->container['pensionId'] = $pensionId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name [readonly] The name of the PensionScheme to which contributions have been made.
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pensionSchemeId
     *
     * @return string|null
     */
    public function getPensionSchemeId(): ?string
    {
        return $this->container['pensionSchemeId'];
    }

    /**
     * Sets pensionSchemeId
     *
     * @param string|null $pensionSchemeId [readonly] The Id of the PensionScheme.
     *
     * @return $this
     */
    public function setPensionSchemeId(?string $pensionSchemeId): static
    {
        if (is_null($pensionSchemeId)) {
            throw new InvalidArgumentException('non-nullable pensionSchemeId cannot be null');
        }
        $this->container['pensionSchemeId'] = $pensionSchemeId;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate [readonly] Pension Start Date
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $startDate): static
    {
        if (is_null($startDate)) {
            throw new InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate Pension End Date
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $endDate): static
    {
        if (is_null($endDate)) {
            array_push($this->openAPINullablesSetToNull, 'endDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets workerGroupId
     *
     * @return string|null
     */
    public function getWorkerGroupId(): ?string
    {
        return $this->container['workerGroupId'];
    }

    /**
     * Sets workerGroupId
     *
     * @param string|null $workerGroupId [readonly] The Id of the WorkerGroup.
     *
     * @return $this
     */
    public function setWorkerGroupId(?string $workerGroupId): static
    {
        if (is_null($workerGroupId)) {
            throw new InvalidArgumentException('non-nullable workerGroupId cannot be null');
        }
        $this->container['workerGroupId'] = $workerGroupId;

        return $this;
    }

    /**
     * Gets pensionRule
     *
     * @return \SynergiTech\Staffology\Model\PensionRule|null
     */
    public function getPensionRule(): ?\SynergiTech\Staffology\Model\PensionRule
    {
        return $this->container['pensionRule'];
    }

    /**
     * Sets pensionRule
     *
     * @param \SynergiTech\Staffology\Model\PensionRule|null $pensionRule pensionRule
     *
     * @return $this
     */
    public function setPensionRule(?\SynergiTech\Staffology\Model\PensionRule $pensionRule): static
    {
        if (is_null($pensionRule)) {
            throw new InvalidArgumentException('non-nullable pensionRule cannot be null');
        }
        $this->container['pensionRule'] = $pensionRule;

        return $this;
    }

    /**
     * Gets subtractedBasicRateTax
     *
     * @return bool|null
     */
    public function getSubtractedBasicRateTax(): ?bool
    {
        return $this->container['subtractedBasicRateTax'];
    }

    /**
     * Sets subtractedBasicRateTax
     *
     * @param bool|null $subtractedBasicRateTax [readonly] The SubtractedBasicRateTax applied from the PensionScheme SubtractBasicRateTax.
     *
     * @return $this
     */
    public function setSubtractedBasicRateTax(?bool $subtractedBasicRateTax): static
    {
        if (is_null($subtractedBasicRateTax)) {
            throw new InvalidArgumentException('non-nullable subtractedBasicRateTax cannot be null');
        }
        $this->container['subtractedBasicRateTax'] = $subtractedBasicRateTax;

        return $this;
    }

    /**
     * Gets papdisPensionProviderId
     *
     * @return string|null
     */
    public function getPapdisPensionProviderId(): ?string
    {
        return $this->container['papdisPensionProviderId'];
    }

    /**
     * Sets papdisPensionProviderId
     *
     * @param string|null $papdisPensionProviderId [readonly] Papdis information from the PensionScheme
     *
     * @return $this
     */
    public function setPapdisPensionProviderId(?string $papdisPensionProviderId): static
    {
        if (is_null($papdisPensionProviderId)) {
            array_push($this->openAPINullablesSetToNull, 'papdisPensionProviderId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('papdisPensionProviderId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['papdisPensionProviderId'] = $papdisPensionProviderId;

        return $this;
    }

    /**
     * Gets papdisEmployerId
     *
     * @return string|null
     */
    public function getPapdisEmployerId(): ?string
    {
        return $this->container['papdisEmployerId'];
    }

    /**
     * Sets papdisEmployerId
     *
     * @param string|null $papdisEmployerId [readonly] Papdis information from the PensionScheme
     *
     * @return $this
     */
    public function setPapdisEmployerId(?string $papdisEmployerId): static
    {
        if (is_null($papdisEmployerId)) {
            array_push($this->openAPINullablesSetToNull, 'papdisEmployerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('papdisEmployerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['papdisEmployerId'] = $papdisEmployerId;

        return $this;
    }

    /**
     * Gets employeePensionContributionMultiplier
     *
     * @return float|null
     */
    public function getEmployeePensionContributionMultiplier(): ?float
    {
        return $this->container['employeePensionContributionMultiplier'];
    }

    /**
     * Sets employeePensionContributionMultiplier
     *
     * @param float|null $employeePensionContributionMultiplier [readonly] If the PensionScheme is set to SubtractBasicRateTax then this value  is used to reduce the contribution amount.  Otherwise it is set as 1.
     *
     * @return $this
     */
    public function setEmployeePensionContributionMultiplier(?float $employeePensionContributionMultiplier): static
    {
        if (is_null($employeePensionContributionMultiplier)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionMultiplier cannot be null');
        }
        $this->container['employeePensionContributionMultiplier'] = $employeePensionContributionMultiplier;

        return $this;
    }

    /**
     * Gets additionalVoluntaryContribution
     *
     * @return float|null
     */
    public function getAdditionalVoluntaryContribution(): ?float
    {
        return $this->container['additionalVoluntaryContribution'];
    }

    /**
     * Sets additionalVoluntaryContribution
     *
     * @param float|null $additionalVoluntaryContribution [readonly] Any Additional Voluntary Contribution the Employee has chosen to make  Otherwise it is set as 1.
     *
     * @return $this
     */
    public function setAdditionalVoluntaryContribution(?float $additionalVoluntaryContribution): static
    {
        if (is_null($additionalVoluntaryContribution)) {
            throw new InvalidArgumentException('non-nullable additionalVoluntaryContribution cannot be null');
        }
        $this->container['additionalVoluntaryContribution'] = $additionalVoluntaryContribution;

        return $this;
    }

    /**
     * Gets avcIsPercentage
     *
     * @return bool|null
     */
    public function getAvcIsPercentage(): ?bool
    {
        return $this->container['avcIsPercentage'];
    }

    /**
     * Sets avcIsPercentage
     *
     * @param bool|null $avcIsPercentage [readonly] Determines whether the Value of the Additional Voluntary Contribution is a fixed amount or a percentage,
     *
     * @return $this
     */
    public function setAvcIsPercentage(?bool $avcIsPercentage): static
    {
        if (is_null($avcIsPercentage)) {
            throw new InvalidArgumentException('non-nullable avcIsPercentage cannot be null');
        }
        $this->container['avcIsPercentage'] = $avcIsPercentage;

        return $this;
    }

    /**
     * Gets autoEnrolled
     *
     * @return bool|null
     */
    public function getAutoEnrolled(): ?bool
    {
        return $this->container['autoEnrolled'];
    }

    /**
     * Sets autoEnrolled
     *
     * @param bool|null $autoEnrolled [readonly] Any Additional Voluntary Contribution the Employee has chosen to make  Otherwise it is set as 1.
     *
     * @return $this
     */
    public function setAutoEnrolled(?bool $autoEnrolled): static
    {
        if (is_null($autoEnrolled)) {
            throw new InvalidArgumentException('non-nullable autoEnrolled cannot be null');
        }
        $this->container['autoEnrolled'] = $autoEnrolled;

        return $this;
    }

    /**
     * Gets workerGroup
     *
     * @return \SynergiTech\Staffology\Model\WorkerGroup|null
     */
    public function getWorkerGroup(): ?\SynergiTech\Staffology\Model\WorkerGroup
    {
        return $this->container['workerGroup'];
    }

    /**
     * Sets workerGroup
     *
     * @param \SynergiTech\Staffology\Model\WorkerGroup|null $workerGroup workerGroup
     *
     * @return $this
     */
    public function setWorkerGroup(?\SynergiTech\Staffology\Model\WorkerGroup $workerGroup): static
    {
        if (is_null($workerGroup)) {
            throw new InvalidArgumentException('non-nullable workerGroup cannot be null');
        }
        $this->container['workerGroup'] = $workerGroup;

        return $this;
    }

    /**
     * Gets forcedTier
     *
     * @return string|null
     */
    public function getForcedTier(): ?string
    {
        return $this->container['forcedTier'];
    }

    /**
     * Sets forcedTier
     *
     * @param string|null $forcedTier [readonly] If the WorkerGroup ContributionLevelType is a Tiered Scheme then the name of the tier to force the employee on to may be specified.  If none is specified then the Tier is determined by the earnings in the period
     *
     * @return $this
     */
    public function setForcedTier(?string $forcedTier): static
    {
        if (is_null($forcedTier)) {
            array_push($this->openAPINullablesSetToNull, 'forcedTier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forcedTier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forcedTier'] = $forcedTier;

        return $this;
    }

    /**
     * Gets tiers
     *
     * @return \SynergiTech\Staffology\Model\TieredPensionRate[]|null
     */
    public function getTiers(): ?array
    {
        return $this->container['tiers'];
    }

    /**
     * Sets tiers
     *
     * @param \SynergiTech\Staffology\Model\TieredPensionRate[]|null $tiers tiers
     *
     * @return $this
     */
    public function setTiers(?array $tiers): static
    {
        if (is_null($tiers)) {
            array_push($this->openAPINullablesSetToNull, 'tiers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tiers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tiers'] = $tiers;

        return $this;
    }

    /**
     * Gets assumedPensionablePay
     *
     * @return float|null
     */
    public function getAssumedPensionablePay(): ?float
    {
        return $this->container['assumedPensionablePay'];
    }

    /**
     * Sets assumedPensionablePay
     *
     * @param float|null $assumedPensionablePay [readonly] Assumed Pensionable Pay. If the employee is receiving any Statutory Leave that has an AssumedPensionablePay value set  then it'll be shown here.
     *
     * @return $this
     */
    public function setAssumedPensionablePay(?float $assumedPensionablePay): static
    {
        if (is_null($assumedPensionablePay)) {
            array_push($this->openAPINullablesSetToNull, 'assumedPensionablePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assumedPensionablePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assumedPensionablePay'] = $assumedPensionablePay;

        return $this;
    }

    /**
     * Gets pensionablePayCodes
     *
     * @return string[]|null
     */
    public function getPensionablePayCodes(): ?array
    {
        return $this->container['pensionablePayCodes'];
    }

    /**
     * Sets pensionablePayCodes
     *
     * @param string[]|null $pensionablePayCodes [readonly] If the pension scheme is set to override the Pensionale PayCodes, then this is what they've been set to.
     *
     * @return $this
     */
    public function setPensionablePayCodes(?array $pensionablePayCodes): static
    {
        if (is_null($pensionablePayCodes)) {
            array_push($this->openAPINullablesSetToNull, 'pensionablePayCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionablePayCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionablePayCodes'] = $pensionablePayCodes;

        return $this;
    }

    /**
     * Gets tierablePayPayCodes
     *
     * @return string[]|null
     */
    public function getTierablePayPayCodes(): ?array
    {
        return $this->container['tierablePayPayCodes'];
    }

    /**
     * Sets tierablePayPayCodes
     *
     * @param string[]|null $tierablePayPayCodes [readonly] If the pension scheme is set to override the TierablePay PayCodes, then this is what they've been set to.
     *
     * @return $this
     */
    public function setTierablePayPayCodes(?array $tierablePayPayCodes): static
    {
        if (is_null($tierablePayPayCodes)) {
            array_push($this->openAPINullablesSetToNull, 'tierablePayPayCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierablePayPayCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tierablePayPayCodes'] = $tierablePayPayCodes;

        return $this;
    }

    /**
     * Gets isHalfContributionMember
     *
     * @return bool|null
     */
    public function getIsHalfContributionMember(): ?bool
    {
        return $this->container['isHalfContributionMember'];
    }

    /**
     * Sets isHalfContributionMember
     *
     * @param bool|null $isHalfContributionMember if an employee as a member of the 50/50 LGPS scheme, they can enable contribution to 50% of the normal contributions.
     *
     * @return $this
     */
    public function setIsHalfContributionMember(?bool $isHalfContributionMember): static
    {
        if (is_null($isHalfContributionMember)) {
            throw new InvalidArgumentException('non-nullable isHalfContributionMember cannot be null');
        }
        $this->container['isHalfContributionMember'] = $isHalfContributionMember;

        return $this;
    }

    /**
     * Gets pensionableEarnings
     *
     * @return float|null
     */
    public function getPensionableEarnings(): ?float
    {
        return $this->container['pensionableEarnings'];
    }

    /**
     * Sets pensionableEarnings
     *
     * @param float|null $pensionableEarnings [readonly] The amount of the Gross that is subject to Pension Deductions.  If the Pension Scheme uses Qualifying Earnings (upper and lower limits) then this value is before those are applied  Applied only if an employee has more than one pension assigned to them
     *
     * @return $this
     */
    public function setPensionableEarnings(?float $pensionableEarnings): static
    {
        if (is_null($pensionableEarnings)) {
            throw new InvalidArgumentException('non-nullable pensionableEarnings cannot be null');
        }
        $this->container['pensionableEarnings'] = $pensionableEarnings;

        return $this;
    }

    /**
     * Gets pensionablePay
     *
     * @return float|null
     */
    public function getPensionablePay(): ?float
    {
        return $this->container['pensionablePay'];
    }

    /**
     * Sets pensionablePay
     *
     * @param float|null $pensionablePay [readonly] The amount of the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.  Applied only if an employee has more than one pension assigned to them
     *
     * @return $this
     */
    public function setPensionablePay(?float $pensionablePay): static
    {
        if (is_null($pensionablePay)) {
            throw new InvalidArgumentException('non-nullable pensionablePay cannot be null');
        }
        $this->container['pensionablePay'] = $pensionablePay;

        return $this;
    }

    /**
     * Gets nonTierablePay
     *
     * @return float|null
     */
    public function getNonTierablePay(): ?float
    {
        return $this->container['nonTierablePay'];
    }

    /**
     * Sets nonTierablePay
     *
     * @param float|null $nonTierablePay [readonly] The value of any pay that shouldn't count towards determining a pension tier.
     *
     * @return $this
     */
    public function setNonTierablePay(?float $nonTierablePay): static
    {
        if (is_null($nonTierablePay)) {
            throw new InvalidArgumentException('non-nullable nonTierablePay cannot be null');
        }
        $this->container['nonTierablePay'] = $nonTierablePay;

        return $this;
    }

    /**
     * Gets employeePensionContribution
     *
     * @return float|null
     */
    public function getEmployeePensionContribution(): ?float
    {
        return $this->container['employeePensionContribution'];
    }

    /**
     * Sets employeePensionContribution
     *
     * @param float|null $employeePensionContribution [readonly] The value of the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions
     *
     * @return $this
     */
    public function setEmployeePensionContribution(?float $employeePensionContribution): static
    {
        if (is_null($employeePensionContribution)) {
            throw new InvalidArgumentException('non-nullable employeePensionContribution cannot be null');
        }
        $this->container['employeePensionContribution'] = $employeePensionContribution;

        return $this;
    }

    /**
     * Gets employeePensionContributionAvc
     *
     * @return float|null
     */
    public function getEmployeePensionContributionAvc(): ?float
    {
        return $this->container['employeePensionContributionAvc'];
    }

    /**
     * Sets employeePensionContributionAvc
     *
     * @param float|null $employeePensionContributionAvc [readonly] The value of the Pension Contribution being made by this Employee as an Additional Voluntary Contribution
     *
     * @return $this
     */
    public function setEmployeePensionContributionAvc(?float $employeePensionContributionAvc): static
    {
        if (is_null($employeePensionContributionAvc)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionAvc cannot be null');
        }
        $this->container['employeePensionContributionAvc'] = $employeePensionContributionAvc;

        return $this;
    }

    /**
     * Gets employerPensionContribution
     *
     * @return float|null
     */
    public function getEmployerPensionContribution(): ?float
    {
        return $this->container['employerPensionContribution'];
    }

    /**
     * Sets employerPensionContribution
     *
     * @param float|null $employerPensionContribution [readonly] The value of the Pension Contribution being made by the Employer for this Employee
     *
     * @return $this
     */
    public function setEmployerPensionContribution(?float $employerPensionContribution): static
    {
        if (is_null($employerPensionContribution)) {
            throw new InvalidArgumentException('non-nullable employerPensionContribution cannot be null');
        }
        $this->container['employerPensionContribution'] = $employerPensionContribution;

        return $this;
    }

    /**
     * Gets isForEndedPension
     *
     * @return bool|null
     */
    public function getIsForEndedPension(): ?bool
    {
        return $this->container['isForEndedPension'];
    }

    /**
     * Sets isForEndedPension
     *
     * @param bool|null $isForEndedPension [readonly] Determines whether the pension summary is related to a pension that has ended or not
     *
     * @return $this
     */
    public function setIsForEndedPension(?bool $isForEndedPension): static
    {
        if (is_null($isForEndedPension)) {
            throw new InvalidArgumentException('non-nullable isForEndedPension cannot be null');
        }
        $this->container['isForEndedPension'] = $isForEndedPension;

        return $this;
    }

    /**
     * Gets associatedEmployeeRoles
     *
     * @return \SynergiTech\Staffology\Model\Item[]|null
     */
    public function getAssociatedEmployeeRoles(): ?array
    {
        return $this->container['associatedEmployeeRoles'];
    }

    /**
     * Sets associatedEmployeeRoles
     *
     * @param \SynergiTech\Staffology\Model\Item[]|null $associatedEmployeeRoles associatedEmployeeRoles
     *
     * @return $this
     */
    public function setAssociatedEmployeeRoles(?array $associatedEmployeeRoles): static
    {
        if (is_null($associatedEmployeeRoles)) {
            array_push($this->openAPINullablesSetToNull, 'associatedEmployeeRoles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('associatedEmployeeRoles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['associatedEmployeeRoles'] = $associatedEmployeeRoles;

        return $this;
    }

    /**
     * Gets notionalPay
     *
     * @return float|null
     */
    public function getNotionalPay(): ?float
    {
        return $this->container['notionalPay'];
    }

    /**
     * Sets notionalPay
     *
     * @param float|null $notionalPay Pay value based on regular pay lines and the pension's associated roles  Set before any adjustments for things like stat payments
     *
     * @return $this
     */
    public function setNotionalPay(?float $notionalPay): static
    {
        if (is_null($notionalPay)) {
            throw new InvalidArgumentException('non-nullable notionalPay cannot be null');
        }
        $this->container['notionalPay'] = $notionalPay;

        return $this;
    }

    /**
     * Gets pensionableEarningsBfd
     *
     * @return float|null
     */
    public function getPensionableEarningsBfd(): ?float
    {
        return $this->container['pensionableEarningsBfd'];
    }

    /**
     * Sets pensionableEarningsBfd
     *
     * @param float|null $pensionableEarningsBfd [readonly] The brought forward Year to Date amount of the Gross that is subject to Pension Deductions.  Applied only if an employee has more than one pension assigned to them
     *
     * @return $this
     */
    public function setPensionableEarningsBfd(?float $pensionableEarningsBfd): static
    {
        if (is_null($pensionableEarningsBfd)) {
            throw new InvalidArgumentException('non-nullable pensionableEarningsBfd cannot be null');
        }
        $this->container['pensionableEarningsBfd'] = $pensionableEarningsBfd;

        return $this;
    }

    /**
     * Gets pensionablePayBfd
     *
     * @return float|null
     */
    public function getPensionablePayBfd(): ?float
    {
        return $this->container['pensionablePayBfd'];
    }

    /**
     * Sets pensionablePayBfd
     *
     * @param float|null $pensionablePayBfd [readonly] The brought forward Year to Date amount of the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.  Applied only if an employee has more than one pension assigned to them
     *
     * @return $this
     */
    public function setPensionablePayBfd(?float $pensionablePayBfd): static
    {
        if (is_null($pensionablePayBfd)) {
            throw new InvalidArgumentException('non-nullable pensionablePayBfd cannot be null');
        }
        $this->container['pensionablePayBfd'] = $pensionablePayBfd;

        return $this;
    }

    /**
     * Gets employeePensionContributionBfd
     *
     * @return float|null
     */
    public function getEmployeePensionContributionBfd(): ?float
    {
        return $this->container['employeePensionContributionBfd'];
    }

    /**
     * Sets employeePensionContributionBfd
     *
     * @param float|null $employeePensionContributionBfd [readonly] The brought forward Year to Date value of the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions
     *
     * @return $this
     */
    public function setEmployeePensionContributionBfd(?float $employeePensionContributionBfd): static
    {
        if (is_null($employeePensionContributionBfd)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionBfd cannot be null');
        }
        $this->container['employeePensionContributionBfd'] = $employeePensionContributionBfd;

        return $this;
    }

    /**
     * Gets assumedPensionablePayBfd
     *
     * @return float|null
     */
    public function getAssumedPensionablePayBfd(): ?float
    {
        return $this->container['assumedPensionablePayBfd'];
    }

    /**
     * Sets assumedPensionablePayBfd
     *
     * @param float|null $assumedPensionablePayBfd [readonly] The brought forward Year to Date value of Assumed Pensionable Pay. If the employee is receiving any Statutory Leave that has an AssumedPensionablePay value set  then it'll be shown here.
     *
     * @return $this
     */
    public function setAssumedPensionablePayBfd(?float $assumedPensionablePayBfd): static
    {
        if (is_null($assumedPensionablePayBfd)) {
            array_push($this->openAPINullablesSetToNull, 'assumedPensionablePayBfd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assumedPensionablePayBfd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assumedPensionablePayBfd'] = $assumedPensionablePayBfd;

        return $this;
    }

    /**
     * Gets employerPensionContributionBfd
     *
     * @return float|null
     */
    public function getEmployerPensionContributionBfd(): ?float
    {
        return $this->container['employerPensionContributionBfd'];
    }

    /**
     * Sets employerPensionContributionBfd
     *
     * @param float|null $employerPensionContributionBfd [readonly] The brought forward Year to Date value of the Pension Contribution being made by the Employer for this Employee
     *
     * @return $this
     */
    public function setEmployerPensionContributionBfd(?float $employerPensionContributionBfd): static
    {
        if (is_null($employerPensionContributionBfd)) {
            throw new InvalidArgumentException('non-nullable employerPensionContributionBfd cannot be null');
        }
        $this->container['employerPensionContributionBfd'] = $employerPensionContributionBfd;

        return $this;
    }

    /**
     * Gets employeePensionContributionAvcBfd
     *
     * @return float|null
     */
    public function getEmployeePensionContributionAvcBfd(): ?float
    {
        return $this->container['employeePensionContributionAvcBfd'];
    }

    /**
     * Sets employeePensionContributionAvcBfd
     *
     * @param float|null $employeePensionContributionAvcBfd [readonly] The brought forward Year to Date value of the Pension Contribution being made by this Employee as an Additional Voluntary Contribution
     *
     * @return $this
     */
    public function setEmployeePensionContributionAvcBfd(?float $employeePensionContributionAvcBfd): static
    {
        if (is_null($employeePensionContributionAvcBfd)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionAvcBfd cannot be null');
        }
        $this->container['employeePensionContributionAvcBfd'] = $employeePensionContributionAvcBfd;

        return $this;
    }

    /**
     * Gets whenEarnedPensionSummaries
     *
     * @return \SynergiTech\Staffology\Model\PensionSummary[]|null
     */
    public function getWhenEarnedPensionSummaries(): ?array
    {
        return $this->container['whenEarnedPensionSummaries'];
    }

    /**
     * Sets whenEarnedPensionSummaries
     *
     * @param \SynergiTech\Staffology\Model\PensionSummary[]|null $whenEarnedPensionSummaries The list of pension summaries created on the base of when earned additions' and deductions' pension calculations for back paid periods
     *
     * @return $this
     */
    public function setWhenEarnedPensionSummaries(?array $whenEarnedPensionSummaries): static
    {
        if (is_null($whenEarnedPensionSummaries)) {
            array_push($this->openAPINullablesSetToNull, 'whenEarnedPensionSummaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('whenEarnedPensionSummaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['whenEarnedPensionSummaries'] = $whenEarnedPensionSummaries;

        return $this;
    }

    /**
     * Gets periodFrom
     *
     * @return \DateTime|null
     */
    public function getPeriodFrom(): ?\DateTime
    {
        return $this->container['periodFrom'];
    }

    /**
     * Sets periodFrom
     *
     * @param \DateTime|null $periodFrom Nullable DateTime property \"PeriodFrom\" to store the start date of the PayPeriod the current PensionSummary is attributable to.  Applicable only for when the pension summary is created on the base of when earned additions' and deductions' pension calculations for back paid periods
     *
     * @return $this
     */
    public function setPeriodFrom(?\DateTime $periodFrom): static
    {
        if (is_null($periodFrom)) {
            array_push($this->openAPINullablesSetToNull, 'periodFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periodFrom'] = $periodFrom;

        return $this;
    }

    /**
     * Gets periodTo
     *
     * @return \DateTime|null
     */
    public function getPeriodTo(): ?\DateTime
    {
        return $this->container['periodTo'];
    }

    /**
     * Sets periodTo
     *
     * @param \DateTime|null $periodTo Nullable DateTime property \"PeriodTo\" to store the start date of the PayPeriod the current PensionSummary is attributable to.  Applicable only for when the pension summary is created on the base of when earned additions' and deductions' pension calculations for back paid periods
     *
     * @return $this
     */
    public function setPeriodTo(?\DateTime $periodTo): static
    {
        if (is_null($periodTo)) {
            array_push($this->openAPINullablesSetToNull, 'periodTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periodTo'] = $periodTo;

        return $this;
    }

    /**
     * Gets whenEarnedPensionableEarningsCorrection
     *
     * @return float|null
     */
    public function getWhenEarnedPensionableEarningsCorrection(): ?float
    {
        return $this->container['whenEarnedPensionableEarningsCorrection'];
    }

    /**
     * Sets whenEarnedPensionableEarningsCorrection
     *
     * @param float|null $whenEarnedPensionableEarningsCorrection [readonly] The when earned amount correction to the Gross that is subject to Pension Deductions.
     *
     * @return $this
     */
    public function setWhenEarnedPensionableEarningsCorrection(?float $whenEarnedPensionableEarningsCorrection): static
    {
        if (is_null($whenEarnedPensionableEarningsCorrection)) {
            throw new InvalidArgumentException('non-nullable whenEarnedPensionableEarningsCorrection cannot be null');
        }
        $this->container['whenEarnedPensionableEarningsCorrection'] = $whenEarnedPensionableEarningsCorrection;

        return $this;
    }

    /**
     * Gets whenEarnedPensionablePayCorrection
     *
     * @return float|null
     */
    public function getWhenEarnedPensionablePayCorrection(): ?float
    {
        return $this->container['whenEarnedPensionablePayCorrection'];
    }

    /**
     * Sets whenEarnedPensionablePayCorrection
     *
     * @param float|null $whenEarnedPensionablePayCorrection [readonly] The when earned amount correction to the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.
     *
     * @return $this
     */
    public function setWhenEarnedPensionablePayCorrection(?float $whenEarnedPensionablePayCorrection): static
    {
        if (is_null($whenEarnedPensionablePayCorrection)) {
            throw new InvalidArgumentException('non-nullable whenEarnedPensionablePayCorrection cannot be null');
        }
        $this->container['whenEarnedPensionablePayCorrection'] = $whenEarnedPensionablePayCorrection;

        return $this;
    }

    /**
     * Gets whenEarnedEmployeePensionContributionCorrection
     *
     * @return float|null
     */
    public function getWhenEarnedEmployeePensionContributionCorrection(): ?float
    {
        return $this->container['whenEarnedEmployeePensionContributionCorrection'];
    }

    /**
     * Sets whenEarnedEmployeePensionContributionCorrection
     *
     * @param float|null $whenEarnedEmployeePensionContributionCorrection [readonly] The when earned amount correction to the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions
     *
     * @return $this
     */
    public function setWhenEarnedEmployeePensionContributionCorrection(?float $whenEarnedEmployeePensionContributionCorrection): static
    {
        if (is_null($whenEarnedEmployeePensionContributionCorrection)) {
            throw new InvalidArgumentException('non-nullable whenEarnedEmployeePensionContributionCorrection cannot be null');
        }
        $this->container['whenEarnedEmployeePensionContributionCorrection'] = $whenEarnedEmployeePensionContributionCorrection;

        return $this;
    }

    /**
     * Gets whenEarnedEmployerPensionContributionCorrection
     *
     * @return float|null
     */
    public function getWhenEarnedEmployerPensionContributionCorrection(): ?float
    {
        return $this->container['whenEarnedEmployerPensionContributionCorrection'];
    }

    /**
     * Sets whenEarnedEmployerPensionContributionCorrection
     *
     * @param float|null $whenEarnedEmployerPensionContributionCorrection [readonly] The when earned amount correction to the Pension Contribution being made by the Employer for this Employee
     *
     * @return $this
     */
    public function setWhenEarnedEmployerPensionContributionCorrection(?float $whenEarnedEmployerPensionContributionCorrection): static
    {
        if (is_null($whenEarnedEmployerPensionContributionCorrection)) {
            throw new InvalidArgumentException('non-nullable whenEarnedEmployerPensionContributionCorrection cannot be null');
        }
        $this->container['whenEarnedEmployerPensionContributionCorrection'] = $whenEarnedEmployerPensionContributionCorrection;

        return $this;
    }

    /**
     * Gets whenEarnedEmployeePensionContributionAvcCorrection
     *
     * @return float|null
     */
    public function getWhenEarnedEmployeePensionContributionAvcCorrection(): ?float
    {
        return $this->container['whenEarnedEmployeePensionContributionAvcCorrection'];
    }

    /**
     * Sets whenEarnedEmployeePensionContributionAvcCorrection
     *
     * @param float|null $whenEarnedEmployeePensionContributionAvcCorrection [readonly] The when earned amount correction to Pension Contribution being made by this Employee as an Additional Voluntary Contribution
     *
     * @return $this
     */
    public function setWhenEarnedEmployeePensionContributionAvcCorrection(?float $whenEarnedEmployeePensionContributionAvcCorrection): static
    {
        if (is_null($whenEarnedEmployeePensionContributionAvcCorrection)) {
            throw new InvalidArgumentException('non-nullable whenEarnedEmployeePensionContributionAvcCorrection cannot be null');
        }
        $this->container['whenEarnedEmployeePensionContributionAvcCorrection'] = $whenEarnedEmployeePensionContributionAvcCorrection;

        return $this;
    }

    /**
     * Gets whenEarnedPensionableEarningsCorrectionBfd
     *
     * @return float|null
     */
    public function getWhenEarnedPensionableEarningsCorrectionBfd(): ?float
    {
        return $this->container['whenEarnedPensionableEarningsCorrectionBfd'];
    }

    /**
     * Sets whenEarnedPensionableEarningsCorrectionBfd
     *
     * @param float|null $whenEarnedPensionableEarningsCorrectionBfd [readonly] The brought forward Year to Date when earned amount correction to the Gross that is subject to Pension Deductions.
     *
     * @return $this
     */
    public function setWhenEarnedPensionableEarningsCorrectionBfd(?float $whenEarnedPensionableEarningsCorrectionBfd): static
    {
        if (is_null($whenEarnedPensionableEarningsCorrectionBfd)) {
            throw new InvalidArgumentException('non-nullable whenEarnedPensionableEarningsCorrectionBfd cannot be null');
        }
        $this->container['whenEarnedPensionableEarningsCorrectionBfd'] = $whenEarnedPensionableEarningsCorrectionBfd;

        return $this;
    }

    /**
     * Gets whenEarnedPensionablePayCorrectionBfd
     *
     * @return float|null
     */
    public function getWhenEarnedPensionablePayCorrectionBfd(): ?float
    {
        return $this->container['whenEarnedPensionablePayCorrectionBfd'];
    }

    /**
     * Sets whenEarnedPensionablePayCorrectionBfd
     *
     * @param float|null $whenEarnedPensionablePayCorrectionBfd [readonly] The brought forward Year to Date when earned amount correction to the Gross that pension calculations are based on after taking into account Upper and Lower Limits for the WorkerGroup.
     *
     * @return $this
     */
    public function setWhenEarnedPensionablePayCorrectionBfd(?float $whenEarnedPensionablePayCorrectionBfd): static
    {
        if (is_null($whenEarnedPensionablePayCorrectionBfd)) {
            throw new InvalidArgumentException('non-nullable whenEarnedPensionablePayCorrectionBfd cannot be null');
        }
        $this->container['whenEarnedPensionablePayCorrectionBfd'] = $whenEarnedPensionablePayCorrectionBfd;

        return $this;
    }

    /**
     * Gets whenEarnedEmployeePensionContributionCorrectionBfd
     *
     * @return float|null
     */
    public function getWhenEarnedEmployeePensionContributionCorrectionBfd(): ?float
    {
        return $this->container['whenEarnedEmployeePensionContributionCorrectionBfd'];
    }

    /**
     * Sets whenEarnedEmployeePensionContributionCorrectionBfd
     *
     * @param float|null $whenEarnedEmployeePensionContributionCorrectionBfd [readonly] The brought forward Year to Date when earned amount correction to the Pension Contribution being made by this Employee, excluding any Additional Voluntary Contributions
     *
     * @return $this
     */
    public function setWhenEarnedEmployeePensionContributionCorrectionBfd(?float $whenEarnedEmployeePensionContributionCorrectionBfd): static
    {
        if (is_null($whenEarnedEmployeePensionContributionCorrectionBfd)) {
            throw new InvalidArgumentException('non-nullable whenEarnedEmployeePensionContributionCorrectionBfd cannot be null');
        }
        $this->container['whenEarnedEmployeePensionContributionCorrectionBfd'] = $whenEarnedEmployeePensionContributionCorrectionBfd;

        return $this;
    }

    /**
     * Gets whenEarnedEmployerPensionContributionCorrectionBfd
     *
     * @return float|null
     */
    public function getWhenEarnedEmployerPensionContributionCorrectionBfd(): ?float
    {
        return $this->container['whenEarnedEmployerPensionContributionCorrectionBfd'];
    }

    /**
     * Sets whenEarnedEmployerPensionContributionCorrectionBfd
     *
     * @param float|null $whenEarnedEmployerPensionContributionCorrectionBfd [readonly] The brought forward Year to Date when earned amount correction to the Pension Contribution being made by the Employer for this Employee
     *
     * @return $this
     */
    public function setWhenEarnedEmployerPensionContributionCorrectionBfd(?float $whenEarnedEmployerPensionContributionCorrectionBfd): static
    {
        if (is_null($whenEarnedEmployerPensionContributionCorrectionBfd)) {
            throw new InvalidArgumentException('non-nullable whenEarnedEmployerPensionContributionCorrectionBfd cannot be null');
        }
        $this->container['whenEarnedEmployerPensionContributionCorrectionBfd'] = $whenEarnedEmployerPensionContributionCorrectionBfd;

        return $this;
    }

    /**
     * Gets whenEarnedEmployeePensionContributionAvcCorrectionBfd
     *
     * @return float|null
     */
    public function getWhenEarnedEmployeePensionContributionAvcCorrectionBfd(): ?float
    {
        return $this->container['whenEarnedEmployeePensionContributionAvcCorrectionBfd'];
    }

    /**
     * Sets whenEarnedEmployeePensionContributionAvcCorrectionBfd
     *
     * @param float|null $whenEarnedEmployeePensionContributionAvcCorrectionBfd [readonly] The brought forward Year to Date when earned amount correction to Pension Contribution being made by this Employee as an Additional Voluntary Contribution
     *
     * @return $this
     */
    public function setWhenEarnedEmployeePensionContributionAvcCorrectionBfd(?float $whenEarnedEmployeePensionContributionAvcCorrectionBfd): static
    {
        if (is_null($whenEarnedEmployeePensionContributionAvcCorrectionBfd)) {
            throw new InvalidArgumentException('non-nullable whenEarnedEmployeePensionContributionAvcCorrectionBfd cannot be null');
        }
        $this->container['whenEarnedEmployeePensionContributionAvcCorrectionBfd'] = $whenEarnedEmployeePensionContributionAvcCorrectionBfd;

        return $this;
    }

    /**
     * Gets nominalCodeMappings
     *
     * @return \SynergiTech\Staffology\Model\PensionSchemeNominalCodeMapping[]|null
     */
    public function getNominalCodeMappings(): ?array
    {
        return $this->container['nominalCodeMappings'];
    }

    /**
     * Sets nominalCodeMappings
     *
     * @param \SynergiTech\Staffology\Model\PensionSchemeNominalCodeMapping[]|null $nominalCodeMappings List of Nominal Code Mappings of the Pension
     *
     * @return $this
     */
    public function setNominalCodeMappings(?array $nominalCodeMappings): static
    {
        if (is_null($nominalCodeMappings)) {
            array_push($this->openAPINullablesSetToNull, 'nominalCodeMappings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nominalCodeMappings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nominalCodeMappings'] = $nominalCodeMappings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


