<?php
/**
 * PersonalDetails
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PersonalDetails Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PersonalDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PersonalDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'address' => '\SynergiTech\Staffology\Model\Address',
        'maritalStatus' => '\SynergiTech\Staffology\Model\MaritalStatus',
        'title' => 'string',
        'firstName' => 'string',
        'middleName' => 'string',
        'lastName' => 'string',
        'alternativeEmail' => 'string',
        'previousSurName' => 'string',
        'email' => 'string',
        'emailPayslip' => 'bool',
        'pdfPassword' => 'string',
        'pdfPasswordType' => '\SynergiTech\Staffology\Model\PdfPasswordType',
        'emailStatement' => 'bool',
        'photoUrl' => 'string',
        'photoSasUrl' => 'string',
        'telephone' => 'string',
        'mobile' => 'string',
        'dateOfBirth' => '\DateTime',
        'statePensionAge' => 'int',
        'gender' => '\SynergiTech\Staffology\Model\Gender',
        'niNumber' => 'string',
        'passportNumber' => 'string',
        'partnerDetails' => '\SynergiTech\Staffology\Model\PartnerDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'address' => null,
        'maritalStatus' => null,
        'title' => null,
        'firstName' => null,
        'middleName' => null,
        'lastName' => null,
        'alternativeEmail' => 'email',
        'previousSurName' => null,
        'email' => 'email',
        'emailPayslip' => null,
        'pdfPassword' => null,
        'pdfPasswordType' => null,
        'emailStatement' => null,
        'photoUrl' => null,
        'photoSasUrl' => null,
        'telephone' => null,
        'mobile' => null,
        'dateOfBirth' => 'date',
        'statePensionAge' => 'int32',
        'gender' => null,
        'niNumber' => null,
        'passportNumber' => null,
        'partnerDetails' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'address' => false,
        'maritalStatus' => false,
        'title' => true,
        'firstName' => true,
        'middleName' => true,
        'lastName' => true,
        'alternativeEmail' => true,
        'previousSurName' => true,
        'email' => true,
        'emailPayslip' => false,
        'pdfPassword' => true,
        'pdfPasswordType' => false,
        'emailStatement' => false,
        'photoUrl' => true,
        'photoSasUrl' => true,
        'telephone' => true,
        'mobile' => true,
        'dateOfBirth' => false,
        'statePensionAge' => false,
        'gender' => false,
        'niNumber' => true,
        'passportNumber' => true,
        'partnerDetails' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'address' => 'address',
        'maritalStatus' => 'maritalStatus',
        'title' => 'title',
        'firstName' => 'firstName',
        'middleName' => 'middleName',
        'lastName' => 'lastName',
        'alternativeEmail' => 'alternativeEmail',
        'previousSurName' => 'previousSurName',
        'email' => 'email',
        'emailPayslip' => 'emailPayslip',
        'pdfPassword' => 'pdfPassword',
        'pdfPasswordType' => 'pdfPasswordType',
        'emailStatement' => 'emailStatement',
        'photoUrl' => 'photoUrl',
        'photoSasUrl' => 'photoSasUrl',
        'telephone' => 'telephone',
        'mobile' => 'mobile',
        'dateOfBirth' => 'dateOfBirth',
        'statePensionAge' => 'statePensionAge',
        'gender' => 'gender',
        'niNumber' => 'niNumber',
        'passportNumber' => 'passportNumber',
        'partnerDetails' => 'partnerDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'address' => 'setAddress',
        'maritalStatus' => 'setMaritalStatus',
        'title' => 'setTitle',
        'firstName' => 'setFirstName',
        'middleName' => 'setMiddleName',
        'lastName' => 'setLastName',
        'alternativeEmail' => 'setAlternativeEmail',
        'previousSurName' => 'setPreviousSurName',
        'email' => 'setEmail',
        'emailPayslip' => 'setEmailPayslip',
        'pdfPassword' => 'setPdfPassword',
        'pdfPasswordType' => 'setPdfPasswordType',
        'emailStatement' => 'setEmailStatement',
        'photoUrl' => 'setPhotoUrl',
        'photoSasUrl' => 'setPhotoSasUrl',
        'telephone' => 'setTelephone',
        'mobile' => 'setMobile',
        'dateOfBirth' => 'setDateOfBirth',
        'statePensionAge' => 'setStatePensionAge',
        'gender' => 'setGender',
        'niNumber' => 'setNiNumber',
        'passportNumber' => 'setPassportNumber',
        'partnerDetails' => 'setPartnerDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'address' => 'getAddress',
        'maritalStatus' => 'getMaritalStatus',
        'title' => 'getTitle',
        'firstName' => 'getFirstName',
        'middleName' => 'getMiddleName',
        'lastName' => 'getLastName',
        'alternativeEmail' => 'getAlternativeEmail',
        'previousSurName' => 'getPreviousSurName',
        'email' => 'getEmail',
        'emailPayslip' => 'getEmailPayslip',
        'pdfPassword' => 'getPdfPassword',
        'pdfPasswordType' => 'getPdfPasswordType',
        'emailStatement' => 'getEmailStatement',
        'photoUrl' => 'getPhotoUrl',
        'photoSasUrl' => 'getPhotoSasUrl',
        'telephone' => 'getTelephone',
        'mobile' => 'getMobile',
        'dateOfBirth' => 'getDateOfBirth',
        'statePensionAge' => 'getStatePensionAge',
        'gender' => 'getGender',
        'niNumber' => 'getNiNumber',
        'passportNumber' => 'getPassportNumber',
        'partnerDetails' => 'getPartnerDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('maritalStatus', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('alternativeEmail', $data ?? [], null);
        $this->setIfExists('previousSurName', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailPayslip', $data ?? [], null);
        $this->setIfExists('pdfPassword', $data ?? [], null);
        $this->setIfExists('pdfPasswordType', $data ?? [], null);
        $this->setIfExists('emailStatement', $data ?? [], null);
        $this->setIfExists('photoUrl', $data ?? [], null);
        $this->setIfExists('photoSasUrl', $data ?? [], null);
        $this->setIfExists('telephone', $data ?? [], null);
        $this->setIfExists('mobile', $data ?? [], null);
        $this->setIfExists('dateOfBirth', $data ?? [], null);
        $this->setIfExists('statePensionAge', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('niNumber', $data ?? [], null);
        $this->setIfExists('passportNumber', $data ?? [], null);
        $this->setIfExists('partnerDetails', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['maritalStatus'] === null) {
            $invalidProperties[] = "'maritalStatus' can't be null";
        }
        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 30)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['firstName']) && (mb_strlen($this->container['firstName']) > 35)) {
            $invalidProperties[] = "invalid value for 'firstName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['middleName']) && (mb_strlen($this->container['middleName']) > 35)) {
            $invalidProperties[] = "invalid value for 'middleName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['lastName']) && (mb_strlen($this->container['lastName']) > 35)) {
            $invalidProperties[] = "invalid value for 'lastName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['alternativeEmail']) && (mb_strlen($this->container['alternativeEmail']) > 100)) {
            $invalidProperties[] = "invalid value for 'alternativeEmail', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['previousSurName']) && (mb_strlen($this->container['previousSurName']) > 35)) {
            $invalidProperties[] = "invalid value for 'previousSurName', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['photoUrl']) && (mb_strlen($this->container['photoUrl']) > 250)) {
            $invalidProperties[] = "invalid value for 'photoUrl', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 30)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) > 30)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['dateOfBirth'] === null) {
            $invalidProperties[] = "'dateOfBirth' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if (!is_null($this->container['niNumber']) && (mb_strlen($this->container['niNumber']) > 15)) {
            $invalidProperties[] = "invalid value for 'niNumber', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['passportNumber']) && (mb_strlen($this->container['passportNumber']) > 25)) {
            $invalidProperties[] = "invalid value for 'passportNumber', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \SynergiTech\Staffology\Model\Address|null
     */
    public function getAddress(): ?\SynergiTech\Staffology\Model\Address
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Staffology\Model\Address|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Staffology\Model\Address $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets maritalStatus
     *
     * @return \SynergiTech\Staffology\Model\MaritalStatus
     */
    public function getMaritalStatus(): \SynergiTech\Staffology\Model\MaritalStatus
    {
        return $this->container['maritalStatus'];
    }

    /**
     * Sets maritalStatus
     *
     * @param \SynergiTech\Staffology\Model\MaritalStatus $maritalStatus maritalStatus
     *
     * @return $this
     */
    public function setMaritalStatus(\SynergiTech\Staffology\Model\MaritalStatus $maritalStatus): static
    {
        if (is_null($maritalStatus)) {
            throw new InvalidArgumentException('non-nullable maritalStatus cannot be null');
        }
        $this->container['maritalStatus'] = $maritalStatus;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title) && (mb_strlen($title) > 30)) {
            throw new InvalidArgumentException('invalid length for $title when calling PersonalDetails., must be smaller than or equal to 30.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return $this
     */
    public function setFirstName(?string $firstName): static
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($firstName) && (mb_strlen($firstName) > 35)) {
            throw new InvalidArgumentException('invalid length for $firstName when calling PersonalDetails., must be smaller than or equal to 35.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName(): ?string
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName middleName
     *
     * @return $this
     */
    public function setMiddleName(?string $middleName): static
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($middleName) && (mb_strlen($middleName) > 35)) {
            throw new InvalidArgumentException('invalid length for $middleName when calling PersonalDetails., must be smaller than or equal to 35.');
        }

        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return $this
     */
    public function setLastName(?string $lastName): static
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($lastName) && (mb_strlen($lastName) > 35)) {
            throw new InvalidArgumentException('invalid length for $lastName when calling PersonalDetails., must be smaller than or equal to 35.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets alternativeEmail
     *
     * @return string|null
     */
    public function getAlternativeEmail(): ?string
    {
        return $this->container['alternativeEmail'];
    }

    /**
     * Sets alternativeEmail
     *
     * @param string|null $alternativeEmail alternativeEmail
     *
     * @return $this
     */
    public function setAlternativeEmail(?string $alternativeEmail): static
    {
        if (is_null($alternativeEmail)) {
            array_push($this->openAPINullablesSetToNull, 'alternativeEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternativeEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($alternativeEmail) && (mb_strlen($alternativeEmail) > 100)) {
            throw new InvalidArgumentException('invalid length for $alternativeEmail when calling PersonalDetails., must be smaller than or equal to 100.');
        }

        $this->container['alternativeEmail'] = $alternativeEmail;

        return $this;
    }

    /**
     * Gets previousSurName
     *
     * @return string|null
     */
    public function getPreviousSurName(): ?string
    {
        return $this->container['previousSurName'];
    }

    /**
     * Sets previousSurName
     *
     * @param string|null $previousSurName previousSurName
     *
     * @return $this
     */
    public function setPreviousSurName(?string $previousSurName): static
    {
        if (is_null($previousSurName)) {
            array_push($this->openAPINullablesSetToNull, 'previousSurName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previousSurName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($previousSurName) && (mb_strlen($previousSurName) > 35)) {
            throw new InvalidArgumentException('invalid length for $previousSurName when calling PersonalDetails., must be smaller than or equal to 35.');
        }

        $this->container['previousSurName'] = $previousSurName;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email) && (mb_strlen($email) > 100)) {
            throw new InvalidArgumentException('invalid length for $email when calling PersonalDetails., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailPayslip
     *
     * @return bool|null
     */
    public function getEmailPayslip(): ?bool
    {
        return $this->container['emailPayslip'];
    }

    /**
     * Sets emailPayslip
     *
     * @param bool|null $emailPayslip If set to true then the employees Payslip will be sent by email when a PayRun is finalised.
     *
     * @return $this
     */
    public function setEmailPayslip(?bool $emailPayslip): static
    {
        if (is_null($emailPayslip)) {
            throw new InvalidArgumentException('non-nullable emailPayslip cannot be null');
        }
        $this->container['emailPayslip'] = $emailPayslip;

        return $this;
    }

    /**
     * Gets pdfPassword
     *
     * @return string|null
     */
    public function getPdfPassword(): ?string
    {
        return $this->container['pdfPassword'];
    }

    /**
     * Sets pdfPassword
     *
     * @param string|null $pdfPassword Set the password to be used on PDFs. If blank then we'll create a password based on the PdfPasswordType property.
     *
     * @return $this
     */
    public function setPdfPassword(?string $pdfPassword): static
    {
        if (is_null($pdfPassword)) {
            array_push($this->openAPINullablesSetToNull, 'pdfPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pdfPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pdfPassword'] = $pdfPassword;

        return $this;
    }

    /**
     * Gets pdfPasswordType
     *
     * @return \SynergiTech\Staffology\Model\PdfPasswordType|null
     */
    public function getPdfPasswordType(): ?\SynergiTech\Staffology\Model\PdfPasswordType
    {
        return $this->container['pdfPasswordType'];
    }

    /**
     * Sets pdfPasswordType
     *
     * @param \SynergiTech\Staffology\Model\PdfPasswordType|null $pdfPasswordType pdfPasswordType
     *
     * @return $this
     */
    public function setPdfPasswordType(?\SynergiTech\Staffology\Model\PdfPasswordType $pdfPasswordType): static
    {
        if (is_null($pdfPasswordType)) {
            throw new InvalidArgumentException('non-nullable pdfPasswordType cannot be null');
        }
        $this->container['pdfPasswordType'] = $pdfPasswordType;

        return $this;
    }

    /**
     * Gets emailStatement
     *
     * @return bool|null
     */
    public function getEmailStatement(): ?bool
    {
        return $this->container['emailStatement'];
    }

    /**
     * Sets emailStatement
     *
     * @param bool|null $emailStatement Only applicable to CIS Subcontractors. If set to true then we will automatically email a CIS Statement when a CIS300 is accepted.
     *
     * @return $this
     */
    public function setEmailStatement(?bool $emailStatement): static
    {
        if (is_null($emailStatement)) {
            throw new InvalidArgumentException('non-nullable emailStatement cannot be null');
        }
        $this->container['emailStatement'] = $emailStatement;

        return $this;
    }

    /**
     * Gets photoUrl
     *
     * @return string|null
     */
    public function getPhotoUrl(): ?string
    {
        return $this->container['photoUrl'];
    }

    /**
     * Sets photoUrl
     *
     * @param string|null $photoUrl photoUrl
     *
     * @return $this
     */
    public function setPhotoUrl(?string $photoUrl): static
    {
        if (is_null($photoUrl)) {
            array_push($this->openAPINullablesSetToNull, 'photoUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photoUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($photoUrl) && (mb_strlen($photoUrl) > 250)) {
            throw new InvalidArgumentException('invalid length for $photoUrl when calling PersonalDetails., must be smaller than or equal to 250.');
        }

        $this->container['photoUrl'] = $photoUrl;

        return $this;
    }

    /**
     * Gets photoSasUrl
     *
     * @return string|null
     */
    public function getPhotoSasUrl(): ?string
    {
        return $this->container['photoSasUrl'];
    }

    /**
     * Sets photoSasUrl
     *
     * @param string|null $photoSasUrl photoSasUrl
     *
     * @return $this
     */
    public function setPhotoSasUrl(?string $photoSasUrl): static
    {
        if (is_null($photoSasUrl)) {
            array_push($this->openAPINullablesSetToNull, 'photoSasUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photoSasUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photoSasUrl'] = $photoSasUrl;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone(): ?string
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return $this
     */
    public function setTelephone(?string $telephone): static
    {
        if (is_null($telephone)) {
            array_push($this->openAPINullablesSetToNull, 'telephone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telephone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($telephone) && (mb_strlen($telephone) > 30)) {
            throw new InvalidArgumentException('invalid length for $telephone when calling PersonalDetails., must be smaller than or equal to 30.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile(): ?string
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile mobile
     *
     * @return $this
     */
    public function setMobile(?string $mobile): static
    {
        if (is_null($mobile)) {
            array_push($this->openAPINullablesSetToNull, 'mobile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mobile) && (mb_strlen($mobile) > 30)) {
            throw new InvalidArgumentException('invalid length for $mobile when calling PersonalDetails., must be smaller than or equal to 30.');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime
     */
    public function getDateOfBirth(): \DateTime
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime $dateOfBirth dateOfBirth
     *
     * @return $this
     */
    public function setDateOfBirth(\DateTime $dateOfBirth): static
    {
        if (is_null($dateOfBirth)) {
            throw new InvalidArgumentException('non-nullable dateOfBirth cannot be null');
        }
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets statePensionAge
     *
     * @return int|null
     */
    public function getStatePensionAge(): ?int
    {
        return $this->container['statePensionAge'];
    }

    /**
     * Sets statePensionAge
     *
     * @param int|null $statePensionAge [readonly] Automatically calculated.
     *
     * @return $this
     */
    public function setStatePensionAge(?int $statePensionAge): static
    {
        if (is_null($statePensionAge)) {
            throw new InvalidArgumentException('non-nullable statePensionAge cannot be null');
        }
        $this->container['statePensionAge'] = $statePensionAge;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \SynergiTech\Staffology\Model\Gender
     */
    public function getGender(): \SynergiTech\Staffology\Model\Gender
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \SynergiTech\Staffology\Model\Gender $gender gender
     *
     * @return $this
     */
    public function setGender(\SynergiTech\Staffology\Model\Gender $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets niNumber
     *
     * @return string|null
     */
    public function getNiNumber(): ?string
    {
        return $this->container['niNumber'];
    }

    /**
     * Sets niNumber
     *
     * @param string|null $niNumber niNumber
     *
     * @return $this
     */
    public function setNiNumber(?string $niNumber): static
    {
        if (is_null($niNumber)) {
            array_push($this->openAPINullablesSetToNull, 'niNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('niNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($niNumber) && (mb_strlen($niNumber) > 15)) {
            throw new InvalidArgumentException('invalid length for $niNumber when calling PersonalDetails., must be smaller than or equal to 15.');
        }

        $this->container['niNumber'] = $niNumber;

        return $this;
    }

    /**
     * Gets passportNumber
     *
     * @return string|null
     */
    public function getPassportNumber(): ?string
    {
        return $this->container['passportNumber'];
    }

    /**
     * Sets passportNumber
     *
     * @param string|null $passportNumber passportNumber
     *
     * @return $this
     */
    public function setPassportNumber(?string $passportNumber): static
    {
        if (is_null($passportNumber)) {
            array_push($this->openAPINullablesSetToNull, 'passportNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('passportNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($passportNumber) && (mb_strlen($passportNumber) > 25)) {
            throw new InvalidArgumentException('invalid length for $passportNumber when calling PersonalDetails., must be smaller than or equal to 25.');
        }

        $this->container['passportNumber'] = $passportNumber;

        return $this;
    }

    /**
     * Gets partnerDetails
     *
     * @return \SynergiTech\Staffology\Model\PartnerDetails|null
     */
    public function getPartnerDetails(): ?\SynergiTech\Staffology\Model\PartnerDetails
    {
        return $this->container['partnerDetails'];
    }

    /**
     * Sets partnerDetails
     *
     * @param \SynergiTech\Staffology\Model\PartnerDetails|null $partnerDetails partnerDetails
     *
     * @return $this
     */
    public function setPartnerDetails(?\SynergiTech\Staffology\Model\PartnerDetails $partnerDetails): static
    {
        if (is_null($partnerDetails)) {
            throw new InvalidArgumentException('non-nullable partnerDetails cannot be null');
        }
        $this->container['partnerDetails'] = $partnerDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


