<?php
/**
 * FpsCar
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * FpsCar Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FpsCar implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FpsCar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'make' => 'string',
        'firstRegd' => 'string',
        'cO2' => 'string',
        'zeroEmissionsMileage' => 'string',
        'fuel' => 'string',
        'id' => 'string',
        'amendment' => 'string',
        'price' => 'string',
        'availFrom' => 'string',
        'cashEquiv' => 'string',
        'availTo' => 'string',
        'freeFuel' => '\SynergiTech\Staffology\Model\FpsCarFuel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'make' => null,
        'firstRegd' => null,
        'cO2' => null,
        'zeroEmissionsMileage' => null,
        'fuel' => null,
        'id' => null,
        'amendment' => null,
        'price' => null,
        'availFrom' => null,
        'cashEquiv' => null,
        'availTo' => null,
        'freeFuel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'make' => true,
        'firstRegd' => true,
        'cO2' => true,
        'zeroEmissionsMileage' => true,
        'fuel' => true,
        'id' => true,
        'amendment' => true,
        'price' => true,
        'availFrom' => true,
        'cashEquiv' => true,
        'availTo' => true,
        'freeFuel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'make' => 'make',
        'firstRegd' => 'firstRegd',
        'cO2' => 'cO2',
        'zeroEmissionsMileage' => 'zeroEmissionsMileage',
        'fuel' => 'fuel',
        'id' => 'id',
        'amendment' => 'amendment',
        'price' => 'price',
        'availFrom' => 'availFrom',
        'cashEquiv' => 'cashEquiv',
        'availTo' => 'availTo',
        'freeFuel' => 'freeFuel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'make' => 'setMake',
        'firstRegd' => 'setFirstRegd',
        'cO2' => 'setCO2',
        'zeroEmissionsMileage' => 'setZeroEmissionsMileage',
        'fuel' => 'setFuel',
        'id' => 'setId',
        'amendment' => 'setAmendment',
        'price' => 'setPrice',
        'availFrom' => 'setAvailFrom',
        'cashEquiv' => 'setCashEquiv',
        'availTo' => 'setAvailTo',
        'freeFuel' => 'setFreeFuel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'make' => 'getMake',
        'firstRegd' => 'getFirstRegd',
        'cO2' => 'getCO2',
        'zeroEmissionsMileage' => 'getZeroEmissionsMileage',
        'fuel' => 'getFuel',
        'id' => 'getId',
        'amendment' => 'getAmendment',
        'price' => 'getPrice',
        'availFrom' => 'getAvailFrom',
        'cashEquiv' => 'getCashEquiv',
        'availTo' => 'getAvailTo',
        'freeFuel' => 'getFreeFuel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('make', $data ?? [], null);
        $this->setIfExists('firstRegd', $data ?? [], null);
        $this->setIfExists('cO2', $data ?? [], null);
        $this->setIfExists('zeroEmissionsMileage', $data ?? [], null);
        $this->setIfExists('fuel', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('amendment', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('availFrom', $data ?? [], null);
        $this->setIfExists('cashEquiv', $data ?? [], null);
        $this->setIfExists('availTo', $data ?? [], null);
        $this->setIfExists('freeFuel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets make
     *
     * @return string|null
     */
    public function getMake(): ?string
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string|null $make make
     *
     * @return $this
     */
    public function setMake(?string $make): static
    {
        if (is_null($make)) {
            array_push($this->openAPINullablesSetToNull, 'make');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('make', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets firstRegd
     *
     * @return string|null
     */
    public function getFirstRegd(): ?string
    {
        return $this->container['firstRegd'];
    }

    /**
     * Sets firstRegd
     *
     * @param string|null $firstRegd firstRegd
     *
     * @return $this
     */
    public function setFirstRegd(?string $firstRegd): static
    {
        if (is_null($firstRegd)) {
            array_push($this->openAPINullablesSetToNull, 'firstRegd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstRegd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstRegd'] = $firstRegd;

        return $this;
    }

    /**
     * Gets cO2
     *
     * @return string|null
     */
    public function getCO2(): ?string
    {
        return $this->container['cO2'];
    }

    /**
     * Sets cO2
     *
     * @param string|null $cO2 cO2
     *
     * @return $this
     */
    public function setCO2(?string $cO2): static
    {
        if (is_null($cO2)) {
            array_push($this->openAPINullablesSetToNull, 'cO2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cO2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cO2'] = $cO2;

        return $this;
    }

    /**
     * Gets zeroEmissionsMileage
     *
     * @return string|null
     */
    public function getZeroEmissionsMileage(): ?string
    {
        return $this->container['zeroEmissionsMileage'];
    }

    /**
     * Sets zeroEmissionsMileage
     *
     * @param string|null $zeroEmissionsMileage zeroEmissionsMileage
     *
     * @return $this
     */
    public function setZeroEmissionsMileage(?string $zeroEmissionsMileage): static
    {
        if (is_null($zeroEmissionsMileage)) {
            array_push($this->openAPINullablesSetToNull, 'zeroEmissionsMileage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zeroEmissionsMileage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zeroEmissionsMileage'] = $zeroEmissionsMileage;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return string|null
     */
    public function getFuel(): ?string
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param string|null $fuel fuel
     *
     * @return $this
     */
    public function setFuel(?string $fuel): static
    {
        if (is_null($fuel)) {
            array_push($this->openAPINullablesSetToNull, 'fuel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fuel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amendment
     *
     * @return string|null
     */
    public function getAmendment(): ?string
    {
        return $this->container['amendment'];
    }

    /**
     * Sets amendment
     *
     * @param string|null $amendment amendment
     *
     * @return $this
     */
    public function setAmendment(?string $amendment): static
    {
        if (is_null($amendment)) {
            array_push($this->openAPINullablesSetToNull, 'amendment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amendment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amendment'] = $amendment;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice(): ?string
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price price
     *
     * @return $this
     */
    public function setPrice(?string $price): static
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets availFrom
     *
     * @return string|null
     */
    public function getAvailFrom(): ?string
    {
        return $this->container['availFrom'];
    }

    /**
     * Sets availFrom
     *
     * @param string|null $availFrom availFrom
     *
     * @return $this
     */
    public function setAvailFrom(?string $availFrom): static
    {
        if (is_null($availFrom)) {
            array_push($this->openAPINullablesSetToNull, 'availFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availFrom'] = $availFrom;

        return $this;
    }

    /**
     * Gets cashEquiv
     *
     * @return string|null
     */
    public function getCashEquiv(): ?string
    {
        return $this->container['cashEquiv'];
    }

    /**
     * Sets cashEquiv
     *
     * @param string|null $cashEquiv cashEquiv
     *
     * @return $this
     */
    public function setCashEquiv(?string $cashEquiv): static
    {
        if (is_null($cashEquiv)) {
            array_push($this->openAPINullablesSetToNull, 'cashEquiv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cashEquiv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cashEquiv'] = $cashEquiv;

        return $this;
    }

    /**
     * Gets availTo
     *
     * @return string|null
     */
    public function getAvailTo(): ?string
    {
        return $this->container['availTo'];
    }

    /**
     * Sets availTo
     *
     * @param string|null $availTo availTo
     *
     * @return $this
     */
    public function setAvailTo(?string $availTo): static
    {
        if (is_null($availTo)) {
            array_push($this->openAPINullablesSetToNull, 'availTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availTo'] = $availTo;

        return $this;
    }

    /**
     * Gets freeFuel
     *
     * @return \SynergiTech\Staffology\Model\FpsCarFuel|null
     */
    public function getFreeFuel(): ?\SynergiTech\Staffology\Model\FpsCarFuel
    {
        return $this->container['freeFuel'];
    }

    /**
     * Sets freeFuel
     *
     * @param \SynergiTech\Staffology\Model\FpsCarFuel|null $freeFuel freeFuel
     *
     * @return $this
     */
    public function setFreeFuel(?\SynergiTech\Staffology\Model\FpsCarFuel $freeFuel): static
    {
        if (is_null($freeFuel)) {
            throw new InvalidArgumentException('non-nullable freeFuel cannot be null');
        }
        $this->container['freeFuel'] = $freeFuel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


