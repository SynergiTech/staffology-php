<?php
/**
 * ContractAeAssessmentAction
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractAeAssessmentAction Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractAeAssessmentAction implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.AeAssessmentAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'action' => '\SynergiTech\Staffology\Model\AeAction',
        'employeeState' => '\SynergiTech\Staffology\Model\AeEmployeeState',
        'actionCompleted' => 'bool',
        'actionCompletedMessage' => 'string',
        'requiredLetter' => '\SynergiTech\Staffology\Model\AeStatutoryLetter',
        'pensionSchemeId' => 'string',
        'workerGroupId' => 'string',
        'letterNotYetSent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'action' => null,
        'employeeState' => null,
        'actionCompleted' => null,
        'actionCompletedMessage' => null,
        'requiredLetter' => null,
        'pensionSchemeId' => 'uuid',
        'workerGroupId' => 'uuid',
        'letterNotYetSent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'action' => false,
        'employeeState' => false,
        'actionCompleted' => false,
        'actionCompletedMessage' => true,
        'requiredLetter' => false,
        'pensionSchemeId' => false,
        'workerGroupId' => false,
        'letterNotYetSent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'action' => 'action',
        'employeeState' => 'employeeState',
        'actionCompleted' => 'actionCompleted',
        'actionCompletedMessage' => 'actionCompletedMessage',
        'requiredLetter' => 'requiredLetter',
        'pensionSchemeId' => 'pensionSchemeId',
        'workerGroupId' => 'workerGroupId',
        'letterNotYetSent' => 'letterNotYetSent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'action' => 'setAction',
        'employeeState' => 'setEmployeeState',
        'actionCompleted' => 'setActionCompleted',
        'actionCompletedMessage' => 'setActionCompletedMessage',
        'requiredLetter' => 'setRequiredLetter',
        'pensionSchemeId' => 'setPensionSchemeId',
        'workerGroupId' => 'setWorkerGroupId',
        'letterNotYetSent' => 'setLetterNotYetSent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'action' => 'getAction',
        'employeeState' => 'getEmployeeState',
        'actionCompleted' => 'getActionCompleted',
        'actionCompletedMessage' => 'getActionCompletedMessage',
        'requiredLetter' => 'getRequiredLetter',
        'pensionSchemeId' => 'getPensionSchemeId',
        'workerGroupId' => 'getWorkerGroupId',
        'letterNotYetSent' => 'getLetterNotYetSent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('employeeState', $data ?? [], null);
        $this->setIfExists('actionCompleted', $data ?? [], null);
        $this->setIfExists('actionCompletedMessage', $data ?? [], null);
        $this->setIfExists('requiredLetter', $data ?? [], null);
        $this->setIfExists('pensionSchemeId', $data ?? [], null);
        $this->setIfExists('workerGroupId', $data ?? [], null);
        $this->setIfExists('letterNotYetSent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return \SynergiTech\Staffology\Model\AeAction|null
     */
    public function getAction(): ?\SynergiTech\Staffology\Model\AeAction
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \SynergiTech\Staffology\Model\AeAction|null $action action
     *
     * @return $this
     */
    public function setAction(?\SynergiTech\Staffology\Model\AeAction $action): static
    {
        if (is_null($action)) {
            throw new InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets employeeState
     *
     * @return \SynergiTech\Staffology\Model\AeEmployeeState|null
     */
    public function getEmployeeState(): ?\SynergiTech\Staffology\Model\AeEmployeeState
    {
        return $this->container['employeeState'];
    }

    /**
     * Sets employeeState
     *
     * @param \SynergiTech\Staffology\Model\AeEmployeeState|null $employeeState employeeState
     *
     * @return $this
     */
    public function setEmployeeState(?\SynergiTech\Staffology\Model\AeEmployeeState $employeeState): static
    {
        if (is_null($employeeState)) {
            throw new InvalidArgumentException('non-nullable employeeState cannot be null');
        }
        $this->container['employeeState'] = $employeeState;

        return $this;
    }

    /**
     * Gets actionCompleted
     *
     * @return bool|null
     */
    public function getActionCompleted(): ?bool
    {
        return $this->container['actionCompleted'];
    }

    /**
     * Sets actionCompleted
     *
     * @param bool|null $actionCompleted Indicates whether or not the required action was successfully completed
     *
     * @return $this
     */
    public function setActionCompleted(?bool $actionCompleted): static
    {
        if (is_null($actionCompleted)) {
            throw new InvalidArgumentException('non-nullable actionCompleted cannot be null');
        }
        $this->container['actionCompleted'] = $actionCompleted;

        return $this;
    }

    /**
     * Gets actionCompletedMessage
     *
     * @return string|null
     */
    public function getActionCompletedMessage(): ?string
    {
        return $this->container['actionCompletedMessage'];
    }

    /**
     * Sets actionCompletedMessage
     *
     * @param string|null $actionCompletedMessage Gives further information about the action taken or the reason if wasn't successfully completed
     *
     * @return $this
     */
    public function setActionCompletedMessage(?string $actionCompletedMessage): static
    {
        if (is_null($actionCompletedMessage)) {
            array_push($this->openAPINullablesSetToNull, 'actionCompletedMessage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actionCompletedMessage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actionCompletedMessage'] = $actionCompletedMessage;

        return $this;
    }

    /**
     * Gets requiredLetter
     *
     * @return \SynergiTech\Staffology\Model\AeStatutoryLetter|null
     */
    public function getRequiredLetter(): ?\SynergiTech\Staffology\Model\AeStatutoryLetter
    {
        return $this->container['requiredLetter'];
    }

    /**
     * Sets requiredLetter
     *
     * @param \SynergiTech\Staffology\Model\AeStatutoryLetter|null $requiredLetter requiredLetter
     *
     * @return $this
     */
    public function setRequiredLetter(?\SynergiTech\Staffology\Model\AeStatutoryLetter $requiredLetter): static
    {
        if (is_null($requiredLetter)) {
            throw new InvalidArgumentException('non-nullable requiredLetter cannot be null');
        }
        $this->container['requiredLetter'] = $requiredLetter;

        return $this;
    }

    /**
     * Gets pensionSchemeId
     *
     * @return string|null
     */
    public function getPensionSchemeId(): ?string
    {
        return $this->container['pensionSchemeId'];
    }

    /**
     * Sets pensionSchemeId
     *
     * @param string|null $pensionSchemeId The PensionSchemeId that a completed action relates to
     *
     * @return $this
     */
    public function setPensionSchemeId(?string $pensionSchemeId): static
    {
        if (is_null($pensionSchemeId)) {
            throw new InvalidArgumentException('non-nullable pensionSchemeId cannot be null');
        }
        $this->container['pensionSchemeId'] = $pensionSchemeId;

        return $this;
    }

    /**
     * Gets workerGroupId
     *
     * @return string|null
     */
    public function getWorkerGroupId(): ?string
    {
        return $this->container['workerGroupId'];
    }

    /**
     * Sets workerGroupId
     *
     * @param string|null $workerGroupId The WorkerGroupId that a completed action relates to
     *
     * @return $this
     */
    public function setWorkerGroupId(?string $workerGroupId): static
    {
        if (is_null($workerGroupId)) {
            throw new InvalidArgumentException('non-nullable workerGroupId cannot be null');
        }
        $this->container['workerGroupId'] = $workerGroupId;

        return $this;
    }

    /**
     * Gets letterNotYetSent
     *
     * @return bool|null
     */
    public function getLetterNotYetSent(): ?bool
    {
        return $this->container['letterNotYetSent'];
    }

    /**
     * Sets letterNotYetSent
     *
     * @param bool|null $letterNotYetSent Indicates whether or not any required letter has been sent
     *
     * @return $this
     */
    public function setLetterNotYetSent(?bool $letterNotYetSent): static
    {
        if (is_null($letterNotYetSent)) {
            throw new InvalidArgumentException('non-nullable letterNotYetSent cannot be null');
        }
        $this->container['letterNotYetSent'] = $letterNotYetSent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


