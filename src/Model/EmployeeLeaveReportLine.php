<?php
/**
 * EmployeeLeaveReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EmployeeLeaveReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class EmployeeLeaveReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'EmployeeLeaveReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'firstName' => 'string',
        'lastName' => 'string',
        'type' => '\SynergiTech\Staffology\Model\LeaveType',
        'payment' => '\SynergiTech\Staffology\Model\LeavePayType',
        'payrollCode' => 'string',
        'openEndedAbsence' => 'bool',
        'percentOfPay' => 'float',
        'paySSPInAddition' => 'bool',
        'payFrequency' => '\SynergiTech\Staffology\Model\StatPayFrequency',
        'occupationalPolicy' => 'string',
        'from' => '\DateTime',
        'to' => '\DateTime',
        'useOpeningPay' => 'bool',
        'openingPay' => 'float',
        'openingOmpPay' => 'float',
        'babyDueDate' => '\DateTime',
        'babyBirthDate' => '\DateTime',
        'matchingDate' => '\DateTime',
        'expectedPlacementDate' => '\DateTime',
        'placementDate' => '\DateTime',
        'deathDate' => '\DateTime',
        'averageWeeklyEarnings' => 'float',
        'automaticAWECalculation' => 'bool',
        'calculationType' => '\SynergiTech\Staffology\Model\LeaveCalculationType',
        'strikeHoursToDeduct' => 'float',
        'historicLeaveRequiresProcessing' => 'bool',
        'offsetPay' => 'bool',
        'useAssumedPensionablePay' => 'bool',
        'automaticAPPCalculation' => 'bool',
        'assumedPensionablePay' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'firstName' => null,
        'lastName' => null,
        'type' => null,
        'payment' => null,
        'payrollCode' => null,
        'openEndedAbsence' => null,
        'percentOfPay' => 'double',
        'paySSPInAddition' => null,
        'payFrequency' => null,
        'occupationalPolicy' => null,
        'from' => 'date',
        'to' => 'date',
        'useOpeningPay' => null,
        'openingPay' => 'double',
        'openingOmpPay' => 'double',
        'babyDueDate' => 'date',
        'babyBirthDate' => 'date',
        'matchingDate' => 'date',
        'expectedPlacementDate' => 'date',
        'placementDate' => 'date',
        'deathDate' => 'date',
        'averageWeeklyEarnings' => 'double',
        'automaticAWECalculation' => null,
        'calculationType' => null,
        'strikeHoursToDeduct' => 'double',
        'historicLeaveRequiresProcessing' => null,
        'offsetPay' => null,
        'useAssumedPensionablePay' => null,
        'automaticAPPCalculation' => null,
        'assumedPensionablePay' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'firstName' => true,
        'lastName' => true,
        'type' => false,
        'payment' => false,
        'payrollCode' => true,
        'openEndedAbsence' => false,
        'percentOfPay' => false,
        'paySSPInAddition' => false,
        'payFrequency' => false,
        'occupationalPolicy' => true,
        'from' => false,
        'to' => false,
        'useOpeningPay' => false,
        'openingPay' => true,
        'openingOmpPay' => true,
        'babyDueDate' => true,
        'babyBirthDate' => true,
        'matchingDate' => true,
        'expectedPlacementDate' => true,
        'placementDate' => true,
        'deathDate' => true,
        'averageWeeklyEarnings' => false,
        'automaticAWECalculation' => false,
        'calculationType' => false,
        'strikeHoursToDeduct' => true,
        'historicLeaveRequiresProcessing' => false,
        'offsetPay' => false,
        'useAssumedPensionablePay' => false,
        'automaticAPPCalculation' => false,
        'assumedPensionablePay' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'type' => 'type',
        'payment' => 'payment',
        'payrollCode' => 'payrollCode',
        'openEndedAbsence' => 'openEndedAbsence',
        'percentOfPay' => 'percentOfPay',
        'paySSPInAddition' => 'paySSPInAddition',
        'payFrequency' => 'payFrequency',
        'occupationalPolicy' => 'occupationalPolicy',
        'from' => 'from',
        'to' => 'to',
        'useOpeningPay' => 'useOpeningPay',
        'openingPay' => 'openingPay',
        'openingOmpPay' => 'openingOmpPay',
        'babyDueDate' => 'babyDueDate',
        'babyBirthDate' => 'babyBirthDate',
        'matchingDate' => 'matchingDate',
        'expectedPlacementDate' => 'expectedPlacementDate',
        'placementDate' => 'placementDate',
        'deathDate' => 'deathDate',
        'averageWeeklyEarnings' => 'averageWeeklyEarnings',
        'automaticAWECalculation' => 'automaticAWECalculation',
        'calculationType' => 'calculationType',
        'strikeHoursToDeduct' => 'strikeHoursToDeduct',
        'historicLeaveRequiresProcessing' => 'historicLeaveRequiresProcessing',
        'offsetPay' => 'offsetPay',
        'useAssumedPensionablePay' => 'useAssumedPensionablePay',
        'automaticAPPCalculation' => 'automaticAPPCalculation',
        'assumedPensionablePay' => 'assumedPensionablePay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'type' => 'setType',
        'payment' => 'setPayment',
        'payrollCode' => 'setPayrollCode',
        'openEndedAbsence' => 'setOpenEndedAbsence',
        'percentOfPay' => 'setPercentOfPay',
        'paySSPInAddition' => 'setPaySSPInAddition',
        'payFrequency' => 'setPayFrequency',
        'occupationalPolicy' => 'setOccupationalPolicy',
        'from' => 'setFrom',
        'to' => 'setTo',
        'useOpeningPay' => 'setUseOpeningPay',
        'openingPay' => 'setOpeningPay',
        'openingOmpPay' => 'setOpeningOmpPay',
        'babyDueDate' => 'setBabyDueDate',
        'babyBirthDate' => 'setBabyBirthDate',
        'matchingDate' => 'setMatchingDate',
        'expectedPlacementDate' => 'setExpectedPlacementDate',
        'placementDate' => 'setPlacementDate',
        'deathDate' => 'setDeathDate',
        'averageWeeklyEarnings' => 'setAverageWeeklyEarnings',
        'automaticAWECalculation' => 'setAutomaticAWECalculation',
        'calculationType' => 'setCalculationType',
        'strikeHoursToDeduct' => 'setStrikeHoursToDeduct',
        'historicLeaveRequiresProcessing' => 'setHistoricLeaveRequiresProcessing',
        'offsetPay' => 'setOffsetPay',
        'useAssumedPensionablePay' => 'setUseAssumedPensionablePay',
        'automaticAPPCalculation' => 'setAutomaticAPPCalculation',
        'assumedPensionablePay' => 'setAssumedPensionablePay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'type' => 'getType',
        'payment' => 'getPayment',
        'payrollCode' => 'getPayrollCode',
        'openEndedAbsence' => 'getOpenEndedAbsence',
        'percentOfPay' => 'getPercentOfPay',
        'paySSPInAddition' => 'getPaySSPInAddition',
        'payFrequency' => 'getPayFrequency',
        'occupationalPolicy' => 'getOccupationalPolicy',
        'from' => 'getFrom',
        'to' => 'getTo',
        'useOpeningPay' => 'getUseOpeningPay',
        'openingPay' => 'getOpeningPay',
        'openingOmpPay' => 'getOpeningOmpPay',
        'babyDueDate' => 'getBabyDueDate',
        'babyBirthDate' => 'getBabyBirthDate',
        'matchingDate' => 'getMatchingDate',
        'expectedPlacementDate' => 'getExpectedPlacementDate',
        'placementDate' => 'getPlacementDate',
        'deathDate' => 'getDeathDate',
        'averageWeeklyEarnings' => 'getAverageWeeklyEarnings',
        'automaticAWECalculation' => 'getAutomaticAWECalculation',
        'calculationType' => 'getCalculationType',
        'strikeHoursToDeduct' => 'getStrikeHoursToDeduct',
        'historicLeaveRequiresProcessing' => 'getHistoricLeaveRequiresProcessing',
        'offsetPay' => 'getOffsetPay',
        'useAssumedPensionablePay' => 'getUseAssumedPensionablePay',
        'automaticAPPCalculation' => 'getAutomaticAPPCalculation',
        'assumedPensionablePay' => 'getAssumedPensionablePay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('openEndedAbsence', $data ?? [], null);
        $this->setIfExists('percentOfPay', $data ?? [], null);
        $this->setIfExists('paySSPInAddition', $data ?? [], null);
        $this->setIfExists('payFrequency', $data ?? [], null);
        $this->setIfExists('occupationalPolicy', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('useOpeningPay', $data ?? [], null);
        $this->setIfExists('openingPay', $data ?? [], null);
        $this->setIfExists('openingOmpPay', $data ?? [], null);
        $this->setIfExists('babyDueDate', $data ?? [], null);
        $this->setIfExists('babyBirthDate', $data ?? [], null);
        $this->setIfExists('matchingDate', $data ?? [], null);
        $this->setIfExists('expectedPlacementDate', $data ?? [], null);
        $this->setIfExists('placementDate', $data ?? [], null);
        $this->setIfExists('deathDate', $data ?? [], null);
        $this->setIfExists('averageWeeklyEarnings', $data ?? [], null);
        $this->setIfExists('automaticAWECalculation', $data ?? [], null);
        $this->setIfExists('calculationType', $data ?? [], null);
        $this->setIfExists('strikeHoursToDeduct', $data ?? [], null);
        $this->setIfExists('historicLeaveRequiresProcessing', $data ?? [], null);
        $this->setIfExists('offsetPay', $data ?? [], null);
        $this->setIfExists('useAssumedPensionablePay', $data ?? [], null);
        $this->setIfExists('automaticAPPCalculation', $data ?? [], null);
        $this->setIfExists('assumedPensionablePay', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return $this
     */
    public function setFirstName(?string $firstName): static
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return $this
     */
    public function setLastName(?string $lastName): static
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\LeaveType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\LeaveType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\LeaveType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\LeaveType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \SynergiTech\Staffology\Model\LeavePayType|null
     */
    public function getPayment(): ?\SynergiTech\Staffology\Model\LeavePayType
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \SynergiTech\Staffology\Model\LeavePayType|null $payment payment
     *
     * @return $this
     */
    public function setPayment(?\SynergiTech\Staffology\Model\LeavePayType $payment): static
    {
        if (is_null($payment)) {
            throw new InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode payrollCode
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets openEndedAbsence
     *
     * @return bool|null
     */
    public function getOpenEndedAbsence(): ?bool
    {
        return $this->container['openEndedAbsence'];
    }

    /**
     * Sets openEndedAbsence
     *
     * @param bool|null $openEndedAbsence openEndedAbsence
     *
     * @return $this
     */
    public function setOpenEndedAbsence(?bool $openEndedAbsence): static
    {
        if (is_null($openEndedAbsence)) {
            throw new InvalidArgumentException('non-nullable openEndedAbsence cannot be null');
        }
        $this->container['openEndedAbsence'] = $openEndedAbsence;

        return $this;
    }

    /**
     * Gets percentOfPay
     *
     * @return float|null
     */
    public function getPercentOfPay(): ?float
    {
        return $this->container['percentOfPay'];
    }

    /**
     * Sets percentOfPay
     *
     * @param float|null $percentOfPay percentOfPay
     *
     * @return $this
     */
    public function setPercentOfPay(?float $percentOfPay): static
    {
        if (is_null($percentOfPay)) {
            throw new InvalidArgumentException('non-nullable percentOfPay cannot be null');
        }
        $this->container['percentOfPay'] = $percentOfPay;

        return $this;
    }

    /**
     * Gets paySSPInAddition
     *
     * @return bool|null
     */
    public function getPaySSPInAddition(): ?bool
    {
        return $this->container['paySSPInAddition'];
    }

    /**
     * Sets paySSPInAddition
     *
     * @param bool|null $paySSPInAddition paySSPInAddition
     *
     * @return $this
     */
    public function setPaySSPInAddition(?bool $paySSPInAddition): static
    {
        if (is_null($paySSPInAddition)) {
            throw new InvalidArgumentException('non-nullable paySSPInAddition cannot be null');
        }
        $this->container['paySSPInAddition'] = $paySSPInAddition;

        return $this;
    }

    /**
     * Gets payFrequency
     *
     * @return \SynergiTech\Staffology\Model\StatPayFrequency|null
     */
    public function getPayFrequency(): ?\SynergiTech\Staffology\Model\StatPayFrequency
    {
        return $this->container['payFrequency'];
    }

    /**
     * Sets payFrequency
     *
     * @param \SynergiTech\Staffology\Model\StatPayFrequency|null $payFrequency payFrequency
     *
     * @return $this
     */
    public function setPayFrequency(?\SynergiTech\Staffology\Model\StatPayFrequency $payFrequency): static
    {
        if (is_null($payFrequency)) {
            throw new InvalidArgumentException('non-nullable payFrequency cannot be null');
        }
        $this->container['payFrequency'] = $payFrequency;

        return $this;
    }

    /**
     * Gets occupationalPolicy
     *
     * @return string|null
     */
    public function getOccupationalPolicy(): ?string
    {
        return $this->container['occupationalPolicy'];
    }

    /**
     * Sets occupationalPolicy
     *
     * @param string|null $occupationalPolicy occupationalPolicy
     *
     * @return $this
     */
    public function setOccupationalPolicy(?string $occupationalPolicy): static
    {
        if (is_null($occupationalPolicy)) {
            array_push($this->openAPINullablesSetToNull, 'occupationalPolicy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('occupationalPolicy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['occupationalPolicy'] = $occupationalPolicy;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime|null
     */
    public function getFrom(): ?\DateTime
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime|null $from from
     *
     * @return $this
     */
    public function setFrom(?\DateTime $from): static
    {
        if (is_null($from)) {
            throw new InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \DateTime|null
     */
    public function getTo(): ?\DateTime
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \DateTime|null $to to
     *
     * @return $this
     */
    public function setTo(?\DateTime $to): static
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets useOpeningPay
     *
     * @return bool|null
     */
    public function getUseOpeningPay(): ?bool
    {
        return $this->container['useOpeningPay'];
    }

    /**
     * Sets useOpeningPay
     *
     * @param bool|null $useOpeningPay useOpeningPay
     *
     * @return $this
     */
    public function setUseOpeningPay(?bool $useOpeningPay): static
    {
        if (is_null($useOpeningPay)) {
            throw new InvalidArgumentException('non-nullable useOpeningPay cannot be null');
        }
        $this->container['useOpeningPay'] = $useOpeningPay;

        return $this;
    }

    /**
     * Gets openingPay
     *
     * @return float|null
     */
    public function getOpeningPay(): ?float
    {
        return $this->container['openingPay'];
    }

    /**
     * Sets openingPay
     *
     * @param float|null $openingPay openingPay
     *
     * @return $this
     */
    public function setOpeningPay(?float $openingPay): static
    {
        if (is_null($openingPay)) {
            array_push($this->openAPINullablesSetToNull, 'openingPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('openingPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['openingPay'] = $openingPay;

        return $this;
    }

    /**
     * Gets openingOmpPay
     *
     * @return float|null
     */
    public function getOpeningOmpPay(): ?float
    {
        return $this->container['openingOmpPay'];
    }

    /**
     * Sets openingOmpPay
     *
     * @param float|null $openingOmpPay openingOmpPay
     *
     * @return $this
     */
    public function setOpeningOmpPay(?float $openingOmpPay): static
    {
        if (is_null($openingOmpPay)) {
            array_push($this->openAPINullablesSetToNull, 'openingOmpPay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('openingOmpPay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['openingOmpPay'] = $openingOmpPay;

        return $this;
    }

    /**
     * Gets babyDueDate
     *
     * @return \DateTime|null
     */
    public function getBabyDueDate(): ?\DateTime
    {
        return $this->container['babyDueDate'];
    }

    /**
     * Sets babyDueDate
     *
     * @param \DateTime|null $babyDueDate babyDueDate
     *
     * @return $this
     */
    public function setBabyDueDate(?\DateTime $babyDueDate): static
    {
        if (is_null($babyDueDate)) {
            array_push($this->openAPINullablesSetToNull, 'babyDueDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('babyDueDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['babyDueDate'] = $babyDueDate;

        return $this;
    }

    /**
     * Gets babyBirthDate
     *
     * @return \DateTime|null
     */
    public function getBabyBirthDate(): ?\DateTime
    {
        return $this->container['babyBirthDate'];
    }

    /**
     * Sets babyBirthDate
     *
     * @param \DateTime|null $babyBirthDate babyBirthDate
     *
     * @return $this
     */
    public function setBabyBirthDate(?\DateTime $babyBirthDate): static
    {
        if (is_null($babyBirthDate)) {
            array_push($this->openAPINullablesSetToNull, 'babyBirthDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('babyBirthDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['babyBirthDate'] = $babyBirthDate;

        return $this;
    }

    /**
     * Gets matchingDate
     *
     * @return \DateTime|null
     */
    public function getMatchingDate(): ?\DateTime
    {
        return $this->container['matchingDate'];
    }

    /**
     * Sets matchingDate
     *
     * @param \DateTime|null $matchingDate matchingDate
     *
     * @return $this
     */
    public function setMatchingDate(?\DateTime $matchingDate): static
    {
        if (is_null($matchingDate)) {
            array_push($this->openAPINullablesSetToNull, 'matchingDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matchingDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matchingDate'] = $matchingDate;

        return $this;
    }

    /**
     * Gets expectedPlacementDate
     *
     * @return \DateTime|null
     */
    public function getExpectedPlacementDate(): ?\DateTime
    {
        return $this->container['expectedPlacementDate'];
    }

    /**
     * Sets expectedPlacementDate
     *
     * @param \DateTime|null $expectedPlacementDate expectedPlacementDate
     *
     * @return $this
     */
    public function setExpectedPlacementDate(?\DateTime $expectedPlacementDate): static
    {
        if (is_null($expectedPlacementDate)) {
            array_push($this->openAPINullablesSetToNull, 'expectedPlacementDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expectedPlacementDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expectedPlacementDate'] = $expectedPlacementDate;

        return $this;
    }

    /**
     * Gets placementDate
     *
     * @return \DateTime|null
     */
    public function getPlacementDate(): ?\DateTime
    {
        return $this->container['placementDate'];
    }

    /**
     * Sets placementDate
     *
     * @param \DateTime|null $placementDate placementDate
     *
     * @return $this
     */
    public function setPlacementDate(?\DateTime $placementDate): static
    {
        if (is_null($placementDate)) {
            array_push($this->openAPINullablesSetToNull, 'placementDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('placementDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['placementDate'] = $placementDate;

        return $this;
    }

    /**
     * Gets deathDate
     *
     * @return \DateTime|null
     */
    public function getDeathDate(): ?\DateTime
    {
        return $this->container['deathDate'];
    }

    /**
     * Sets deathDate
     *
     * @param \DateTime|null $deathDate deathDate
     *
     * @return $this
     */
    public function setDeathDate(?\DateTime $deathDate): static
    {
        if (is_null($deathDate)) {
            array_push($this->openAPINullablesSetToNull, 'deathDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deathDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deathDate'] = $deathDate;

        return $this;
    }

    /**
     * Gets averageWeeklyEarnings
     *
     * @return float|null
     */
    public function getAverageWeeklyEarnings(): ?float
    {
        return $this->container['averageWeeklyEarnings'];
    }

    /**
     * Sets averageWeeklyEarnings
     *
     * @param float|null $averageWeeklyEarnings averageWeeklyEarnings
     *
     * @return $this
     */
    public function setAverageWeeklyEarnings(?float $averageWeeklyEarnings): static
    {
        if (is_null($averageWeeklyEarnings)) {
            throw new InvalidArgumentException('non-nullable averageWeeklyEarnings cannot be null');
        }
        $this->container['averageWeeklyEarnings'] = $averageWeeklyEarnings;

        return $this;
    }

    /**
     * Gets automaticAWECalculation
     *
     * @return bool|null
     */
    public function getAutomaticAWECalculation(): ?bool
    {
        return $this->container['automaticAWECalculation'];
    }

    /**
     * Sets automaticAWECalculation
     *
     * @param bool|null $automaticAWECalculation automaticAWECalculation
     *
     * @return $this
     */
    public function setAutomaticAWECalculation(?bool $automaticAWECalculation): static
    {
        if (is_null($automaticAWECalculation)) {
            throw new InvalidArgumentException('non-nullable automaticAWECalculation cannot be null');
        }
        $this->container['automaticAWECalculation'] = $automaticAWECalculation;

        return $this;
    }

    /**
     * Gets calculationType
     *
     * @return \SynergiTech\Staffology\Model\LeaveCalculationType|null
     */
    public function getCalculationType(): ?\SynergiTech\Staffology\Model\LeaveCalculationType
    {
        return $this->container['calculationType'];
    }

    /**
     * Sets calculationType
     *
     * @param \SynergiTech\Staffology\Model\LeaveCalculationType|null $calculationType calculationType
     *
     * @return $this
     */
    public function setCalculationType(?\SynergiTech\Staffology\Model\LeaveCalculationType $calculationType): static
    {
        if (is_null($calculationType)) {
            throw new InvalidArgumentException('non-nullable calculationType cannot be null');
        }
        $this->container['calculationType'] = $calculationType;

        return $this;
    }

    /**
     * Gets strikeHoursToDeduct
     *
     * @return float|null
     */
    public function getStrikeHoursToDeduct(): ?float
    {
        return $this->container['strikeHoursToDeduct'];
    }

    /**
     * Sets strikeHoursToDeduct
     *
     * @param float|null $strikeHoursToDeduct strikeHoursToDeduct
     *
     * @return $this
     */
    public function setStrikeHoursToDeduct(?float $strikeHoursToDeduct): static
    {
        if (is_null($strikeHoursToDeduct)) {
            array_push($this->openAPINullablesSetToNull, 'strikeHoursToDeduct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('strikeHoursToDeduct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['strikeHoursToDeduct'] = $strikeHoursToDeduct;

        return $this;
    }

    /**
     * Gets historicLeaveRequiresProcessing
     *
     * @return bool|null
     */
    public function getHistoricLeaveRequiresProcessing(): ?bool
    {
        return $this->container['historicLeaveRequiresProcessing'];
    }

    /**
     * Sets historicLeaveRequiresProcessing
     *
     * @param bool|null $historicLeaveRequiresProcessing historicLeaveRequiresProcessing
     *
     * @return $this
     */
    public function setHistoricLeaveRequiresProcessing(?bool $historicLeaveRequiresProcessing): static
    {
        if (is_null($historicLeaveRequiresProcessing)) {
            throw new InvalidArgumentException('non-nullable historicLeaveRequiresProcessing cannot be null');
        }
        $this->container['historicLeaveRequiresProcessing'] = $historicLeaveRequiresProcessing;

        return $this;
    }

    /**
     * Gets offsetPay
     *
     * @return bool|null
     */
    public function getOffsetPay(): ?bool
    {
        return $this->container['offsetPay'];
    }

    /**
     * Sets offsetPay
     *
     * @param bool|null $offsetPay offsetPay
     *
     * @return $this
     */
    public function setOffsetPay(?bool $offsetPay): static
    {
        if (is_null($offsetPay)) {
            throw new InvalidArgumentException('non-nullable offsetPay cannot be null');
        }
        $this->container['offsetPay'] = $offsetPay;

        return $this;
    }

    /**
     * Gets useAssumedPensionablePay
     *
     * @return bool|null
     */
    public function getUseAssumedPensionablePay(): ?bool
    {
        return $this->container['useAssumedPensionablePay'];
    }

    /**
     * Sets useAssumedPensionablePay
     *
     * @param bool|null $useAssumedPensionablePay useAssumedPensionablePay
     *
     * @return $this
     */
    public function setUseAssumedPensionablePay(?bool $useAssumedPensionablePay): static
    {
        if (is_null($useAssumedPensionablePay)) {
            throw new InvalidArgumentException('non-nullable useAssumedPensionablePay cannot be null');
        }
        $this->container['useAssumedPensionablePay'] = $useAssumedPensionablePay;

        return $this;
    }

    /**
     * Gets automaticAPPCalculation
     *
     * @return bool|null
     */
    public function getAutomaticAPPCalculation(): ?bool
    {
        return $this->container['automaticAPPCalculation'];
    }

    /**
     * Sets automaticAPPCalculation
     *
     * @param bool|null $automaticAPPCalculation automaticAPPCalculation
     *
     * @return $this
     */
    public function setAutomaticAPPCalculation(?bool $automaticAPPCalculation): static
    {
        if (is_null($automaticAPPCalculation)) {
            throw new InvalidArgumentException('non-nullable automaticAPPCalculation cannot be null');
        }
        $this->container['automaticAPPCalculation'] = $automaticAPPCalculation;

        return $this;
    }

    /**
     * Gets assumedPensionablePay
     *
     * @return float|null
     */
    public function getAssumedPensionablePay(): ?float
    {
        return $this->container['assumedPensionablePay'];
    }

    /**
     * Sets assumedPensionablePay
     *
     * @param float|null $assumedPensionablePay assumedPensionablePay
     *
     * @return $this
     */
    public function setAssumedPensionablePay(?float $assumedPensionablePay): static
    {
        if (is_null($assumedPensionablePay)) {
            array_push($this->openAPINullablesSetToNull, 'assumedPensionablePay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assumedPensionablePay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assumedPensionablePay'] = $assumedPensionablePay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


