<?php
/**
 * P11DCar
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * P11DCar Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class P11DCar implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'P11DCar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'make' => 'string',
        'registered' => 'string',
        'availFrom' => 'string',
        'availTo' => 'string',
        'cc' => 'string',
        'fuel' => 'string',
        'cO2' => 'string',
        'zeroEmissionMileage' => 'string',
        'noAppCO2Fig' => 'string',
        'list' => 'string',
        'accs' => 'string',
        'capCont' => 'string',
        'privUsePmt' => 'string',
        'fuelWithdrawn' => '\SynergiTech\Staffology\Model\P11dCarFreeFuelWithdrawn',
        'cashEquivOrRelevantAmt' => 'string',
        'fuelCashEquivOrRelevantAmt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'make' => null,
        'registered' => null,
        'availFrom' => null,
        'availTo' => null,
        'cc' => null,
        'fuel' => null,
        'cO2' => null,
        'zeroEmissionMileage' => null,
        'noAppCO2Fig' => null,
        'list' => null,
        'accs' => null,
        'capCont' => null,
        'privUsePmt' => null,
        'fuelWithdrawn' => null,
        'cashEquivOrRelevantAmt' => null,
        'fuelCashEquivOrRelevantAmt' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'make' => true,
        'registered' => true,
        'availFrom' => true,
        'availTo' => true,
        'cc' => true,
        'fuel' => true,
        'cO2' => true,
        'zeroEmissionMileage' => true,
        'noAppCO2Fig' => true,
        'list' => true,
        'accs' => true,
        'capCont' => true,
        'privUsePmt' => true,
        'fuelWithdrawn' => false,
        'cashEquivOrRelevantAmt' => true,
        'fuelCashEquivOrRelevantAmt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'make' => 'make',
        'registered' => 'registered',
        'availFrom' => 'availFrom',
        'availTo' => 'availTo',
        'cc' => 'cc',
        'fuel' => 'fuel',
        'cO2' => 'cO2',
        'zeroEmissionMileage' => 'zeroEmissionMileage',
        'noAppCO2Fig' => 'noAppCO2Fig',
        'list' => 'list',
        'accs' => 'accs',
        'capCont' => 'capCont',
        'privUsePmt' => 'privUsePmt',
        'fuelWithdrawn' => 'fuelWithdrawn',
        'cashEquivOrRelevantAmt' => 'cashEquivOrRelevantAmt',
        'fuelCashEquivOrRelevantAmt' => 'fuelCashEquivOrRelevantAmt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'make' => 'setMake',
        'registered' => 'setRegistered',
        'availFrom' => 'setAvailFrom',
        'availTo' => 'setAvailTo',
        'cc' => 'setCc',
        'fuel' => 'setFuel',
        'cO2' => 'setCO2',
        'zeroEmissionMileage' => 'setZeroEmissionMileage',
        'noAppCO2Fig' => 'setNoAppCO2Fig',
        'list' => 'setList',
        'accs' => 'setAccs',
        'capCont' => 'setCapCont',
        'privUsePmt' => 'setPrivUsePmt',
        'fuelWithdrawn' => 'setFuelWithdrawn',
        'cashEquivOrRelevantAmt' => 'setCashEquivOrRelevantAmt',
        'fuelCashEquivOrRelevantAmt' => 'setFuelCashEquivOrRelevantAmt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'make' => 'getMake',
        'registered' => 'getRegistered',
        'availFrom' => 'getAvailFrom',
        'availTo' => 'getAvailTo',
        'cc' => 'getCc',
        'fuel' => 'getFuel',
        'cO2' => 'getCO2',
        'zeroEmissionMileage' => 'getZeroEmissionMileage',
        'noAppCO2Fig' => 'getNoAppCO2Fig',
        'list' => 'getList',
        'accs' => 'getAccs',
        'capCont' => 'getCapCont',
        'privUsePmt' => 'getPrivUsePmt',
        'fuelWithdrawn' => 'getFuelWithdrawn',
        'cashEquivOrRelevantAmt' => 'getCashEquivOrRelevantAmt',
        'fuelCashEquivOrRelevantAmt' => 'getFuelCashEquivOrRelevantAmt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('make', $data ?? [], null);
        $this->setIfExists('registered', $data ?? [], null);
        $this->setIfExists('availFrom', $data ?? [], null);
        $this->setIfExists('availTo', $data ?? [], null);
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('fuel', $data ?? [], null);
        $this->setIfExists('cO2', $data ?? [], null);
        $this->setIfExists('zeroEmissionMileage', $data ?? [], null);
        $this->setIfExists('noAppCO2Fig', $data ?? [], null);
        $this->setIfExists('list', $data ?? [], null);
        $this->setIfExists('accs', $data ?? [], null);
        $this->setIfExists('capCont', $data ?? [], null);
        $this->setIfExists('privUsePmt', $data ?? [], null);
        $this->setIfExists('fuelWithdrawn', $data ?? [], null);
        $this->setIfExists('cashEquivOrRelevantAmt', $data ?? [], null);
        $this->setIfExists('fuelCashEquivOrRelevantAmt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets make
     *
     * @return string|null
     */
    public function getMake(): ?string
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string|null $make make
     *
     * @return $this
     */
    public function setMake(?string $make): static
    {
        if (is_null($make)) {
            array_push($this->openAPINullablesSetToNull, 'make');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('make', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets registered
     *
     * @return string|null
     */
    public function getRegistered(): ?string
    {
        return $this->container['registered'];
    }

    /**
     * Sets registered
     *
     * @param string|null $registered registered
     *
     * @return $this
     */
    public function setRegistered(?string $registered): static
    {
        if (is_null($registered)) {
            array_push($this->openAPINullablesSetToNull, 'registered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registered'] = $registered;

        return $this;
    }

    /**
     * Gets availFrom
     *
     * @return string|null
     */
    public function getAvailFrom(): ?string
    {
        return $this->container['availFrom'];
    }

    /**
     * Sets availFrom
     *
     * @param string|null $availFrom availFrom
     *
     * @return $this
     */
    public function setAvailFrom(?string $availFrom): static
    {
        if (is_null($availFrom)) {
            array_push($this->openAPINullablesSetToNull, 'availFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availFrom'] = $availFrom;

        return $this;
    }

    /**
     * Gets availTo
     *
     * @return string|null
     */
    public function getAvailTo(): ?string
    {
        return $this->container['availTo'];
    }

    /**
     * Sets availTo
     *
     * @param string|null $availTo availTo
     *
     * @return $this
     */
    public function setAvailTo(?string $availTo): static
    {
        if (is_null($availTo)) {
            array_push($this->openAPINullablesSetToNull, 'availTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availTo'] = $availTo;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string|null
     */
    public function getCc(): ?string
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string|null $cc cc
     *
     * @return $this
     */
    public function setCc(?string $cc): static
    {
        if (is_null($cc)) {
            array_push($this->openAPINullablesSetToNull, 'cc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return string|null
     */
    public function getFuel(): ?string
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param string|null $fuel fuel
     *
     * @return $this
     */
    public function setFuel(?string $fuel): static
    {
        if (is_null($fuel)) {
            array_push($this->openAPINullablesSetToNull, 'fuel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fuel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets cO2
     *
     * @return string|null
     */
    public function getCO2(): ?string
    {
        return $this->container['cO2'];
    }

    /**
     * Sets cO2
     *
     * @param string|null $cO2 cO2
     *
     * @return $this
     */
    public function setCO2(?string $cO2): static
    {
        if (is_null($cO2)) {
            array_push($this->openAPINullablesSetToNull, 'cO2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cO2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cO2'] = $cO2;

        return $this;
    }

    /**
     * Gets zeroEmissionMileage
     *
     * @return string|null
     */
    public function getZeroEmissionMileage(): ?string
    {
        return $this->container['zeroEmissionMileage'];
    }

    /**
     * Sets zeroEmissionMileage
     *
     * @param string|null $zeroEmissionMileage zeroEmissionMileage
     *
     * @return $this
     */
    public function setZeroEmissionMileage(?string $zeroEmissionMileage): static
    {
        if (is_null($zeroEmissionMileage)) {
            array_push($this->openAPINullablesSetToNull, 'zeroEmissionMileage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zeroEmissionMileage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zeroEmissionMileage'] = $zeroEmissionMileage;

        return $this;
    }

    /**
     * Gets noAppCO2Fig
     *
     * @return string|null
     */
    public function getNoAppCO2Fig(): ?string
    {
        return $this->container['noAppCO2Fig'];
    }

    /**
     * Sets noAppCO2Fig
     *
     * @param string|null $noAppCO2Fig noAppCO2Fig
     *
     * @return $this
     */
    public function setNoAppCO2Fig(?string $noAppCO2Fig): static
    {
        if (is_null($noAppCO2Fig)) {
            array_push($this->openAPINullablesSetToNull, 'noAppCO2Fig');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('noAppCO2Fig', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['noAppCO2Fig'] = $noAppCO2Fig;

        return $this;
    }

    /**
     * Gets list
     *
     * @return string|null
     */
    public function getList(): ?string
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param string|null $list list
     *
     * @return $this
     */
    public function setList(?string $list): static
    {
        if (is_null($list)) {
            array_push($this->openAPINullablesSetToNull, 'list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['list'] = $list;

        return $this;
    }

    /**
     * Gets accs
     *
     * @return string|null
     */
    public function getAccs(): ?string
    {
        return $this->container['accs'];
    }

    /**
     * Sets accs
     *
     * @param string|null $accs accs
     *
     * @return $this
     */
    public function setAccs(?string $accs): static
    {
        if (is_null($accs)) {
            array_push($this->openAPINullablesSetToNull, 'accs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accs'] = $accs;

        return $this;
    }

    /**
     * Gets capCont
     *
     * @return string|null
     */
    public function getCapCont(): ?string
    {
        return $this->container['capCont'];
    }

    /**
     * Sets capCont
     *
     * @param string|null $capCont capCont
     *
     * @return $this
     */
    public function setCapCont(?string $capCont): static
    {
        if (is_null($capCont)) {
            array_push($this->openAPINullablesSetToNull, 'capCont');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capCont', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capCont'] = $capCont;

        return $this;
    }

    /**
     * Gets privUsePmt
     *
     * @return string|null
     */
    public function getPrivUsePmt(): ?string
    {
        return $this->container['privUsePmt'];
    }

    /**
     * Sets privUsePmt
     *
     * @param string|null $privUsePmt privUsePmt
     *
     * @return $this
     */
    public function setPrivUsePmt(?string $privUsePmt): static
    {
        if (is_null($privUsePmt)) {
            array_push($this->openAPINullablesSetToNull, 'privUsePmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('privUsePmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['privUsePmt'] = $privUsePmt;

        return $this;
    }

    /**
     * Gets fuelWithdrawn
     *
     * @return \SynergiTech\Staffology\Model\P11dCarFreeFuelWithdrawn|null
     */
    public function getFuelWithdrawn(): ?\SynergiTech\Staffology\Model\P11dCarFreeFuelWithdrawn
    {
        return $this->container['fuelWithdrawn'];
    }

    /**
     * Sets fuelWithdrawn
     *
     * @param \SynergiTech\Staffology\Model\P11dCarFreeFuelWithdrawn|null $fuelWithdrawn fuelWithdrawn
     *
     * @return $this
     */
    public function setFuelWithdrawn(?\SynergiTech\Staffology\Model\P11dCarFreeFuelWithdrawn $fuelWithdrawn): static
    {
        if (is_null($fuelWithdrawn)) {
            throw new InvalidArgumentException('non-nullable fuelWithdrawn cannot be null');
        }
        $this->container['fuelWithdrawn'] = $fuelWithdrawn;

        return $this;
    }

    /**
     * Gets cashEquivOrRelevantAmt
     *
     * @return string|null
     */
    public function getCashEquivOrRelevantAmt(): ?string
    {
        return $this->container['cashEquivOrRelevantAmt'];
    }

    /**
     * Sets cashEquivOrRelevantAmt
     *
     * @param string|null $cashEquivOrRelevantAmt cashEquivOrRelevantAmt
     *
     * @return $this
     */
    public function setCashEquivOrRelevantAmt(?string $cashEquivOrRelevantAmt): static
    {
        if (is_null($cashEquivOrRelevantAmt)) {
            array_push($this->openAPINullablesSetToNull, 'cashEquivOrRelevantAmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cashEquivOrRelevantAmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cashEquivOrRelevantAmt'] = $cashEquivOrRelevantAmt;

        return $this;
    }

    /**
     * Gets fuelCashEquivOrRelevantAmt
     *
     * @return string|null
     */
    public function getFuelCashEquivOrRelevantAmt(): ?string
    {
        return $this->container['fuelCashEquivOrRelevantAmt'];
    }

    /**
     * Sets fuelCashEquivOrRelevantAmt
     *
     * @param string|null $fuelCashEquivOrRelevantAmt fuelCashEquivOrRelevantAmt
     *
     * @return $this
     */
    public function setFuelCashEquivOrRelevantAmt(?string $fuelCashEquivOrRelevantAmt): static
    {
        if (is_null($fuelCashEquivOrRelevantAmt)) {
            array_push($this->openAPINullablesSetToNull, 'fuelCashEquivOrRelevantAmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fuelCashEquivOrRelevantAmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fuelCashEquivOrRelevantAmt'] = $fuelCashEquivOrRelevantAmt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


