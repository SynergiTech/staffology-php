<?php
/**
 * CisSubContractor
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * CisSubContractor Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CisSubContractor implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CisSubContractor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employeeUniqueId' => 'string',
        'emailStatementTo' => 'string',
        'numberOfPayments' => 'int',
        'item' => '\SynergiTech\Staffology\Model\Item',
        'displayName' => 'string',
        'action' => 'string',
        'type' => 'string',
        'name' => '\SynergiTech\Staffology\Model\RtiEmployeeName',
        'tradingName' => 'string',
        'worksRef' => 'string',
        'unmatchedRate' => 'string',
        'utr' => 'string',
        'crn' => 'string',
        'nino' => 'string',
        'partnership' => '\SynergiTech\Staffology\Model\CisPartnership',
        'address' => '\SynergiTech\Staffology\Model\RtiEmployeeAddress',
        'telephone' => 'string',
        'totalPaymentsUnrounded' => 'string',
        'costOfMaterialsUnrounded' => 'string',
        'umbrellaFee' => 'string',
        'validationMsg' => 'string',
        'verificationNumber' => 'string',
        'totalPayments' => 'string',
        'costOfMaterials' => 'string',
        'totalDeducted' => 'string',
        'matched' => 'string',
        'taxTreatment' => 'string',
        'netPayment' => 'string',
        'vatAmount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employeeUniqueId' => 'uuid',
        'emailStatementTo' => null,
        'numberOfPayments' => 'int32',
        'item' => null,
        'displayName' => null,
        'action' => null,
        'type' => null,
        'name' => null,
        'tradingName' => null,
        'worksRef' => null,
        'unmatchedRate' => null,
        'utr' => null,
        'crn' => null,
        'nino' => null,
        'partnership' => null,
        'address' => null,
        'telephone' => null,
        'totalPaymentsUnrounded' => null,
        'costOfMaterialsUnrounded' => null,
        'umbrellaFee' => null,
        'validationMsg' => null,
        'verificationNumber' => null,
        'totalPayments' => null,
        'costOfMaterials' => null,
        'totalDeducted' => null,
        'matched' => null,
        'taxTreatment' => null,
        'netPayment' => null,
        'vatAmount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employeeUniqueId' => false,
        'emailStatementTo' => true,
        'numberOfPayments' => false,
        'item' => false,
        'displayName' => true,
        'action' => true,
        'type' => true,
        'name' => false,
        'tradingName' => true,
        'worksRef' => true,
        'unmatchedRate' => true,
        'utr' => true,
        'crn' => true,
        'nino' => true,
        'partnership' => false,
        'address' => false,
        'telephone' => true,
        'totalPaymentsUnrounded' => true,
        'costOfMaterialsUnrounded' => true,
        'umbrellaFee' => true,
        'validationMsg' => true,
        'verificationNumber' => true,
        'totalPayments' => true,
        'costOfMaterials' => true,
        'totalDeducted' => true,
        'matched' => true,
        'taxTreatment' => true,
        'netPayment' => true,
        'vatAmount' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employeeUniqueId' => 'employeeUniqueId',
        'emailStatementTo' => 'emailStatementTo',
        'numberOfPayments' => 'numberOfPayments',
        'item' => 'item',
        'displayName' => 'displayName',
        'action' => 'action',
        'type' => 'type',
        'name' => 'name',
        'tradingName' => 'tradingName',
        'worksRef' => 'worksRef',
        'unmatchedRate' => 'unmatchedRate',
        'utr' => 'utr',
        'crn' => 'crn',
        'nino' => 'nino',
        'partnership' => 'partnership',
        'address' => 'address',
        'telephone' => 'telephone',
        'totalPaymentsUnrounded' => 'totalPaymentsUnrounded',
        'costOfMaterialsUnrounded' => 'costOfMaterialsUnrounded',
        'umbrellaFee' => 'umbrellaFee',
        'validationMsg' => 'validationMsg',
        'verificationNumber' => 'verificationNumber',
        'totalPayments' => 'totalPayments',
        'costOfMaterials' => 'costOfMaterials',
        'totalDeducted' => 'totalDeducted',
        'matched' => 'matched',
        'taxTreatment' => 'taxTreatment',
        'netPayment' => 'netPayment',
        'vatAmount' => 'vatAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employeeUniqueId' => 'setEmployeeUniqueId',
        'emailStatementTo' => 'setEmailStatementTo',
        'numberOfPayments' => 'setNumberOfPayments',
        'item' => 'setItem',
        'displayName' => 'setDisplayName',
        'action' => 'setAction',
        'type' => 'setType',
        'name' => 'setName',
        'tradingName' => 'setTradingName',
        'worksRef' => 'setWorksRef',
        'unmatchedRate' => 'setUnmatchedRate',
        'utr' => 'setUtr',
        'crn' => 'setCrn',
        'nino' => 'setNino',
        'partnership' => 'setPartnership',
        'address' => 'setAddress',
        'telephone' => 'setTelephone',
        'totalPaymentsUnrounded' => 'setTotalPaymentsUnrounded',
        'costOfMaterialsUnrounded' => 'setCostOfMaterialsUnrounded',
        'umbrellaFee' => 'setUmbrellaFee',
        'validationMsg' => 'setValidationMsg',
        'verificationNumber' => 'setVerificationNumber',
        'totalPayments' => 'setTotalPayments',
        'costOfMaterials' => 'setCostOfMaterials',
        'totalDeducted' => 'setTotalDeducted',
        'matched' => 'setMatched',
        'taxTreatment' => 'setTaxTreatment',
        'netPayment' => 'setNetPayment',
        'vatAmount' => 'setVatAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employeeUniqueId' => 'getEmployeeUniqueId',
        'emailStatementTo' => 'getEmailStatementTo',
        'numberOfPayments' => 'getNumberOfPayments',
        'item' => 'getItem',
        'displayName' => 'getDisplayName',
        'action' => 'getAction',
        'type' => 'getType',
        'name' => 'getName',
        'tradingName' => 'getTradingName',
        'worksRef' => 'getWorksRef',
        'unmatchedRate' => 'getUnmatchedRate',
        'utr' => 'getUtr',
        'crn' => 'getCrn',
        'nino' => 'getNino',
        'partnership' => 'getPartnership',
        'address' => 'getAddress',
        'telephone' => 'getTelephone',
        'totalPaymentsUnrounded' => 'getTotalPaymentsUnrounded',
        'costOfMaterialsUnrounded' => 'getCostOfMaterialsUnrounded',
        'umbrellaFee' => 'getUmbrellaFee',
        'validationMsg' => 'getValidationMsg',
        'verificationNumber' => 'getVerificationNumber',
        'totalPayments' => 'getTotalPayments',
        'costOfMaterials' => 'getCostOfMaterials',
        'totalDeducted' => 'getTotalDeducted',
        'matched' => 'getMatched',
        'taxTreatment' => 'getTaxTreatment',
        'netPayment' => 'getNetPayment',
        'vatAmount' => 'getVatAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employeeUniqueId', $data ?? [], null);
        $this->setIfExists('emailStatementTo', $data ?? [], null);
        $this->setIfExists('numberOfPayments', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tradingName', $data ?? [], null);
        $this->setIfExists('worksRef', $data ?? [], null);
        $this->setIfExists('unmatchedRate', $data ?? [], null);
        $this->setIfExists('utr', $data ?? [], null);
        $this->setIfExists('crn', $data ?? [], null);
        $this->setIfExists('nino', $data ?? [], null);
        $this->setIfExists('partnership', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('telephone', $data ?? [], null);
        $this->setIfExists('totalPaymentsUnrounded', $data ?? [], null);
        $this->setIfExists('costOfMaterialsUnrounded', $data ?? [], null);
        $this->setIfExists('umbrellaFee', $data ?? [], null);
        $this->setIfExists('validationMsg', $data ?? [], null);
        $this->setIfExists('verificationNumber', $data ?? [], null);
        $this->setIfExists('totalPayments', $data ?? [], null);
        $this->setIfExists('costOfMaterials', $data ?? [], null);
        $this->setIfExists('totalDeducted', $data ?? [], null);
        $this->setIfExists('matched', $data ?? [], null);
        $this->setIfExists('taxTreatment', $data ?? [], null);
        $this->setIfExists('netPayment', $data ?? [], null);
        $this->setIfExists('vatAmount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeeUniqueId
     *
     * @return string|null
     */
    public function getEmployeeUniqueId(): ?string
    {
        return $this->container['employeeUniqueId'];
    }

    /**
     * Sets employeeUniqueId
     *
     * @param string|null $employeeUniqueId employeeUniqueId
     *
     * @return $this
     */
    public function setEmployeeUniqueId(?string $employeeUniqueId): static
    {
        if (is_null($employeeUniqueId)) {
            throw new InvalidArgumentException('non-nullable employeeUniqueId cannot be null');
        }
        $this->container['employeeUniqueId'] = $employeeUniqueId;

        return $this;
    }

    /**
     * Gets emailStatementTo
     *
     * @return string|null
     */
    public function getEmailStatementTo(): ?string
    {
        return $this->container['emailStatementTo'];
    }

    /**
     * Sets emailStatementTo
     *
     * @param string|null $emailStatementTo emailStatementTo
     *
     * @return $this
     */
    public function setEmailStatementTo(?string $emailStatementTo): static
    {
        if (is_null($emailStatementTo)) {
            array_push($this->openAPINullablesSetToNull, 'emailStatementTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailStatementTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailStatementTo'] = $emailStatementTo;

        return $this;
    }

    /**
     * Gets numberOfPayments
     *
     * @return int|null
     */
    public function getNumberOfPayments(): ?int
    {
        return $this->container['numberOfPayments'];
    }

    /**
     * Sets numberOfPayments
     *
     * @param int|null $numberOfPayments numberOfPayments
     *
     * @return $this
     */
    public function setNumberOfPayments(?int $numberOfPayments): static
    {
        if (is_null($numberOfPayments)) {
            throw new InvalidArgumentException('non-nullable numberOfPayments cannot be null');
        }
        $this->container['numberOfPayments'] = $numberOfPayments;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getItem(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \SynergiTech\Staffology\Model\Item|null $item item
     *
     * @return $this
     */
    public function setItem(?\SynergiTech\Staffology\Model\Item $item): static
    {
        if (is_null($item)) {
            throw new InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName(?string $displayName): static
    {
        if (is_null($displayName)) {
            array_push($this->openAPINullablesSetToNull, 'displayName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction(): ?string
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return $this
     */
    public function setAction(?string $action): static
    {
        if (is_null($action)) {
            array_push($this->openAPINullablesSetToNull, 'action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \SynergiTech\Staffology\Model\RtiEmployeeName|null
     */
    public function getName(): ?\SynergiTech\Staffology\Model\RtiEmployeeName
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \SynergiTech\Staffology\Model\RtiEmployeeName|null $name name
     *
     * @return $this
     */
    public function setName(?\SynergiTech\Staffology\Model\RtiEmployeeName $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tradingName
     *
     * @return string|null
     */
    public function getTradingName(): ?string
    {
        return $this->container['tradingName'];
    }

    /**
     * Sets tradingName
     *
     * @param string|null $tradingName tradingName
     *
     * @return $this
     */
    public function setTradingName(?string $tradingName): static
    {
        if (is_null($tradingName)) {
            array_push($this->openAPINullablesSetToNull, 'tradingName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tradingName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tradingName'] = $tradingName;

        return $this;
    }

    /**
     * Gets worksRef
     *
     * @return string|null
     */
    public function getWorksRef(): ?string
    {
        return $this->container['worksRef'];
    }

    /**
     * Sets worksRef
     *
     * @param string|null $worksRef worksRef
     *
     * @return $this
     */
    public function setWorksRef(?string $worksRef): static
    {
        if (is_null($worksRef)) {
            array_push($this->openAPINullablesSetToNull, 'worksRef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('worksRef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['worksRef'] = $worksRef;

        return $this;
    }

    /**
     * Gets unmatchedRate
     *
     * @return string|null
     */
    public function getUnmatchedRate(): ?string
    {
        return $this->container['unmatchedRate'];
    }

    /**
     * Sets unmatchedRate
     *
     * @param string|null $unmatchedRate unmatchedRate
     *
     * @return $this
     */
    public function setUnmatchedRate(?string $unmatchedRate): static
    {
        if (is_null($unmatchedRate)) {
            array_push($this->openAPINullablesSetToNull, 'unmatchedRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unmatchedRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unmatchedRate'] = $unmatchedRate;

        return $this;
    }

    /**
     * Gets utr
     *
     * @return string|null
     */
    public function getUtr(): ?string
    {
        return $this->container['utr'];
    }

    /**
     * Sets utr
     *
     * @param string|null $utr utr
     *
     * @return $this
     */
    public function setUtr(?string $utr): static
    {
        if (is_null($utr)) {
            array_push($this->openAPINullablesSetToNull, 'utr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['utr'] = $utr;

        return $this;
    }

    /**
     * Gets crn
     *
     * @return string|null
     */
    public function getCrn(): ?string
    {
        return $this->container['crn'];
    }

    /**
     * Sets crn
     *
     * @param string|null $crn crn
     *
     * @return $this
     */
    public function setCrn(?string $crn): static
    {
        if (is_null($crn)) {
            array_push($this->openAPINullablesSetToNull, 'crn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crn'] = $crn;

        return $this;
    }

    /**
     * Gets nino
     *
     * @return string|null
     */
    public function getNino(): ?string
    {
        return $this->container['nino'];
    }

    /**
     * Sets nino
     *
     * @param string|null $nino nino
     *
     * @return $this
     */
    public function setNino(?string $nino): static
    {
        if (is_null($nino)) {
            array_push($this->openAPINullablesSetToNull, 'nino');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nino', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nino'] = $nino;

        return $this;
    }

    /**
     * Gets partnership
     *
     * @return \SynergiTech\Staffology\Model\CisPartnership|null
     */
    public function getPartnership(): ?\SynergiTech\Staffology\Model\CisPartnership
    {
        return $this->container['partnership'];
    }

    /**
     * Sets partnership
     *
     * @param \SynergiTech\Staffology\Model\CisPartnership|null $partnership partnership
     *
     * @return $this
     */
    public function setPartnership(?\SynergiTech\Staffology\Model\CisPartnership $partnership): static
    {
        if (is_null($partnership)) {
            throw new InvalidArgumentException('non-nullable partnership cannot be null');
        }
        $this->container['partnership'] = $partnership;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \SynergiTech\Staffology\Model\RtiEmployeeAddress|null
     */
    public function getAddress(): ?\SynergiTech\Staffology\Model\RtiEmployeeAddress
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \SynergiTech\Staffology\Model\RtiEmployeeAddress|null $address address
     *
     * @return $this
     */
    public function setAddress(?\SynergiTech\Staffology\Model\RtiEmployeeAddress $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone(): ?string
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return $this
     */
    public function setTelephone(?string $telephone): static
    {
        if (is_null($telephone)) {
            array_push($this->openAPINullablesSetToNull, 'telephone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telephone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets totalPaymentsUnrounded
     *
     * @return string|null
     */
    public function getTotalPaymentsUnrounded(): ?string
    {
        return $this->container['totalPaymentsUnrounded'];
    }

    /**
     * Sets totalPaymentsUnrounded
     *
     * @param string|null $totalPaymentsUnrounded totalPaymentsUnrounded
     *
     * @return $this
     */
    public function setTotalPaymentsUnrounded(?string $totalPaymentsUnrounded): static
    {
        if (is_null($totalPaymentsUnrounded)) {
            array_push($this->openAPINullablesSetToNull, 'totalPaymentsUnrounded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalPaymentsUnrounded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalPaymentsUnrounded'] = $totalPaymentsUnrounded;

        return $this;
    }

    /**
     * Gets costOfMaterialsUnrounded
     *
     * @return string|null
     */
    public function getCostOfMaterialsUnrounded(): ?string
    {
        return $this->container['costOfMaterialsUnrounded'];
    }

    /**
     * Sets costOfMaterialsUnrounded
     *
     * @param string|null $costOfMaterialsUnrounded costOfMaterialsUnrounded
     *
     * @return $this
     */
    public function setCostOfMaterialsUnrounded(?string $costOfMaterialsUnrounded): static
    {
        if (is_null($costOfMaterialsUnrounded)) {
            array_push($this->openAPINullablesSetToNull, 'costOfMaterialsUnrounded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costOfMaterialsUnrounded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costOfMaterialsUnrounded'] = $costOfMaterialsUnrounded;

        return $this;
    }

    /**
     * Gets umbrellaFee
     *
     * @return string|null
     */
    public function getUmbrellaFee(): ?string
    {
        return $this->container['umbrellaFee'];
    }

    /**
     * Sets umbrellaFee
     *
     * @param string|null $umbrellaFee umbrellaFee
     *
     * @return $this
     */
    public function setUmbrellaFee(?string $umbrellaFee): static
    {
        if (is_null($umbrellaFee)) {
            array_push($this->openAPINullablesSetToNull, 'umbrellaFee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('umbrellaFee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['umbrellaFee'] = $umbrellaFee;

        return $this;
    }

    /**
     * Gets validationMsg
     *
     * @return string|null
     */
    public function getValidationMsg(): ?string
    {
        return $this->container['validationMsg'];
    }

    /**
     * Sets validationMsg
     *
     * @param string|null $validationMsg validationMsg
     *
     * @return $this
     */
    public function setValidationMsg(?string $validationMsg): static
    {
        if (is_null($validationMsg)) {
            array_push($this->openAPINullablesSetToNull, 'validationMsg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validationMsg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validationMsg'] = $validationMsg;

        return $this;
    }

    /**
     * Gets verificationNumber
     *
     * @return string|null
     */
    public function getVerificationNumber(): ?string
    {
        return $this->container['verificationNumber'];
    }

    /**
     * Sets verificationNumber
     *
     * @param string|null $verificationNumber verificationNumber
     *
     * @return $this
     */
    public function setVerificationNumber(?string $verificationNumber): static
    {
        if (is_null($verificationNumber)) {
            array_push($this->openAPINullablesSetToNull, 'verificationNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verificationNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verificationNumber'] = $verificationNumber;

        return $this;
    }

    /**
     * Gets totalPayments
     *
     * @return string|null
     */
    public function getTotalPayments(): ?string
    {
        return $this->container['totalPayments'];
    }

    /**
     * Sets totalPayments
     *
     * @param string|null $totalPayments totalPayments
     *
     * @return $this
     */
    public function setTotalPayments(?string $totalPayments): static
    {
        if (is_null($totalPayments)) {
            array_push($this->openAPINullablesSetToNull, 'totalPayments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalPayments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalPayments'] = $totalPayments;

        return $this;
    }

    /**
     * Gets costOfMaterials
     *
     * @return string|null
     */
    public function getCostOfMaterials(): ?string
    {
        return $this->container['costOfMaterials'];
    }

    /**
     * Sets costOfMaterials
     *
     * @param string|null $costOfMaterials costOfMaterials
     *
     * @return $this
     */
    public function setCostOfMaterials(?string $costOfMaterials): static
    {
        if (is_null($costOfMaterials)) {
            array_push($this->openAPINullablesSetToNull, 'costOfMaterials');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costOfMaterials', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costOfMaterials'] = $costOfMaterials;

        return $this;
    }

    /**
     * Gets totalDeducted
     *
     * @return string|null
     */
    public function getTotalDeducted(): ?string
    {
        return $this->container['totalDeducted'];
    }

    /**
     * Sets totalDeducted
     *
     * @param string|null $totalDeducted totalDeducted
     *
     * @return $this
     */
    public function setTotalDeducted(?string $totalDeducted): static
    {
        if (is_null($totalDeducted)) {
            array_push($this->openAPINullablesSetToNull, 'totalDeducted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalDeducted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalDeducted'] = $totalDeducted;

        return $this;
    }

    /**
     * Gets matched
     *
     * @return string|null
     */
    public function getMatched(): ?string
    {
        return $this->container['matched'];
    }

    /**
     * Sets matched
     *
     * @param string|null $matched matched
     *
     * @return $this
     */
    public function setMatched(?string $matched): static
    {
        if (is_null($matched)) {
            array_push($this->openAPINullablesSetToNull, 'matched');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matched', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matched'] = $matched;

        return $this;
    }

    /**
     * Gets taxTreatment
     *
     * @return string|null
     */
    public function getTaxTreatment(): ?string
    {
        return $this->container['taxTreatment'];
    }

    /**
     * Sets taxTreatment
     *
     * @param string|null $taxTreatment taxTreatment
     *
     * @return $this
     */
    public function setTaxTreatment(?string $taxTreatment): static
    {
        if (is_null($taxTreatment)) {
            array_push($this->openAPINullablesSetToNull, 'taxTreatment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxTreatment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxTreatment'] = $taxTreatment;

        return $this;
    }

    /**
     * Gets netPayment
     *
     * @return string|null
     */
    public function getNetPayment(): ?string
    {
        return $this->container['netPayment'];
    }

    /**
     * Sets netPayment
     *
     * @param string|null $netPayment netPayment
     *
     * @return $this
     */
    public function setNetPayment(?string $netPayment): static
    {
        if (is_null($netPayment)) {
            array_push($this->openAPINullablesSetToNull, 'netPayment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netPayment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netPayment'] = $netPayment;

        return $this;
    }

    /**
     * Gets vatAmount
     *
     * @return string|null
     */
    public function getVatAmount(): ?string
    {
        return $this->container['vatAmount'];
    }

    /**
     * Sets vatAmount
     *
     * @param string|null $vatAmount vatAmount
     *
     * @return $this
     */
    public function setVatAmount(?string $vatAmount): static
    {
        if (is_null($vatAmount)) {
            array_push($this->openAPINullablesSetToNull, 'vatAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vatAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vatAmount'] = $vatAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


