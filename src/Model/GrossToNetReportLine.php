<?php
/**
 * GrossToNetReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * GrossToNetReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GrossToNetReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GrossToNetReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'niNumber' => 'string',
        'totalGross' => 'float',
        'taxableGross' => 'float',
        'netPay' => 'float',
        'tax' => 'float',
        'employeeNi' => 'float',
        'employerNi' => 'float',
        'employeePension' => 'float',
        'employerPension' => 'float',
        'studentOrPgLoan' => 'float',
        'statutoryPayments' => 'float',
        'attachments' => 'float',
        'otherDeductions' => 'float',
        'lastName' => 'string',
        'isNewStarter' => 'bool',
        'isLeaver' => 'bool',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'payrollCode' => 'string',
        'department' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'niNumber' => null,
        'totalGross' => 'double',
        'taxableGross' => 'double',
        'netPay' => 'double',
        'tax' => 'double',
        'employeeNi' => 'double',
        'employerNi' => 'double',
        'employeePension' => 'double',
        'employerPension' => 'double',
        'studentOrPgLoan' => 'double',
        'statutoryPayments' => 'double',
        'attachments' => 'double',
        'otherDeductions' => 'double',
        'lastName' => null,
        'isNewStarter' => null,
        'isLeaver' => null,
        'employee' => null,
        'payrollCode' => null,
        'department' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'niNumber' => true,
        'totalGross' => false,
        'taxableGross' => false,
        'netPay' => false,
        'tax' => false,
        'employeeNi' => false,
        'employerNi' => false,
        'employeePension' => false,
        'employerPension' => false,
        'studentOrPgLoan' => false,
        'statutoryPayments' => false,
        'attachments' => false,
        'otherDeductions' => false,
        'lastName' => true,
        'isNewStarter' => false,
        'isLeaver' => false,
        'employee' => false,
        'payrollCode' => true,
        'department' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'niNumber' => 'niNumber',
        'totalGross' => 'totalGross',
        'taxableGross' => 'taxableGross',
        'netPay' => 'netPay',
        'tax' => 'tax',
        'employeeNi' => 'employeeNi',
        'employerNi' => 'employerNi',
        'employeePension' => 'employeePension',
        'employerPension' => 'employerPension',
        'studentOrPgLoan' => 'studentOrPgLoan',
        'statutoryPayments' => 'statutoryPayments',
        'attachments' => 'attachments',
        'otherDeductions' => 'otherDeductions',
        'lastName' => 'lastName',
        'isNewStarter' => 'isNewStarter',
        'isLeaver' => 'isLeaver',
        'employee' => 'employee',
        'payrollCode' => 'payrollCode',
        'department' => 'department'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'niNumber' => 'setNiNumber',
        'totalGross' => 'setTotalGross',
        'taxableGross' => 'setTaxableGross',
        'netPay' => 'setNetPay',
        'tax' => 'setTax',
        'employeeNi' => 'setEmployeeNi',
        'employerNi' => 'setEmployerNi',
        'employeePension' => 'setEmployeePension',
        'employerPension' => 'setEmployerPension',
        'studentOrPgLoan' => 'setStudentOrPgLoan',
        'statutoryPayments' => 'setStatutoryPayments',
        'attachments' => 'setAttachments',
        'otherDeductions' => 'setOtherDeductions',
        'lastName' => 'setLastName',
        'isNewStarter' => 'setIsNewStarter',
        'isLeaver' => 'setIsLeaver',
        'employee' => 'setEmployee',
        'payrollCode' => 'setPayrollCode',
        'department' => 'setDepartment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'niNumber' => 'getNiNumber',
        'totalGross' => 'getTotalGross',
        'taxableGross' => 'getTaxableGross',
        'netPay' => 'getNetPay',
        'tax' => 'getTax',
        'employeeNi' => 'getEmployeeNi',
        'employerNi' => 'getEmployerNi',
        'employeePension' => 'getEmployeePension',
        'employerPension' => 'getEmployerPension',
        'studentOrPgLoan' => 'getStudentOrPgLoan',
        'statutoryPayments' => 'getStatutoryPayments',
        'attachments' => 'getAttachments',
        'otherDeductions' => 'getOtherDeductions',
        'lastName' => 'getLastName',
        'isNewStarter' => 'getIsNewStarter',
        'isLeaver' => 'getIsLeaver',
        'employee' => 'getEmployee',
        'payrollCode' => 'getPayrollCode',
        'department' => 'getDepartment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('niNumber', $data ?? [], null);
        $this->setIfExists('totalGross', $data ?? [], null);
        $this->setIfExists('taxableGross', $data ?? [], null);
        $this->setIfExists('netPay', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('employeeNi', $data ?? [], null);
        $this->setIfExists('employerNi', $data ?? [], null);
        $this->setIfExists('employeePension', $data ?? [], null);
        $this->setIfExists('employerPension', $data ?? [], null);
        $this->setIfExists('studentOrPgLoan', $data ?? [], null);
        $this->setIfExists('statutoryPayments', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('otherDeductions', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('isNewStarter', $data ?? [], null);
        $this->setIfExists('isLeaver', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets niNumber
     *
     * @return string|null
     */
    public function getNiNumber(): ?string
    {
        return $this->container['niNumber'];
    }

    /**
     * Sets niNumber
     *
     * @param string|null $niNumber niNumber
     *
     * @return $this
     */
    public function setNiNumber(?string $niNumber): static
    {
        if (is_null($niNumber)) {
            array_push($this->openAPINullablesSetToNull, 'niNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('niNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['niNumber'] = $niNumber;

        return $this;
    }

    /**
     * Gets totalGross
     *
     * @return float|null
     */
    public function getTotalGross(): ?float
    {
        return $this->container['totalGross'];
    }

    /**
     * Sets totalGross
     *
     * @param float|null $totalGross totalGross
     *
     * @return $this
     */
    public function setTotalGross(?float $totalGross): static
    {
        if (is_null($totalGross)) {
            throw new InvalidArgumentException('non-nullable totalGross cannot be null');
        }
        $this->container['totalGross'] = $totalGross;

        return $this;
    }

    /**
     * Gets taxableGross
     *
     * @return float|null
     */
    public function getTaxableGross(): ?float
    {
        return $this->container['taxableGross'];
    }

    /**
     * Sets taxableGross
     *
     * @param float|null $taxableGross taxableGross
     *
     * @return $this
     */
    public function setTaxableGross(?float $taxableGross): static
    {
        if (is_null($taxableGross)) {
            throw new InvalidArgumentException('non-nullable taxableGross cannot be null');
        }
        $this->container['taxableGross'] = $taxableGross;

        return $this;
    }

    /**
     * Gets netPay
     *
     * @return float|null
     */
    public function getNetPay(): ?float
    {
        return $this->container['netPay'];
    }

    /**
     * Sets netPay
     *
     * @param float|null $netPay netPay
     *
     * @return $this
     */
    public function setNetPay(?float $netPay): static
    {
        if (is_null($netPay)) {
            throw new InvalidArgumentException('non-nullable netPay cannot be null');
        }
        $this->container['netPay'] = $netPay;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax(): ?float
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax tax
     *
     * @return $this
     */
    public function setTax(?float $tax): static
    {
        if (is_null($tax)) {
            throw new InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets employeeNi
     *
     * @return float|null
     */
    public function getEmployeeNi(): ?float
    {
        return $this->container['employeeNi'];
    }

    /**
     * Sets employeeNi
     *
     * @param float|null $employeeNi employeeNi
     *
     * @return $this
     */
    public function setEmployeeNi(?float $employeeNi): static
    {
        if (is_null($employeeNi)) {
            throw new InvalidArgumentException('non-nullable employeeNi cannot be null');
        }
        $this->container['employeeNi'] = $employeeNi;

        return $this;
    }

    /**
     * Gets employerNi
     *
     * @return float|null
     */
    public function getEmployerNi(): ?float
    {
        return $this->container['employerNi'];
    }

    /**
     * Sets employerNi
     *
     * @param float|null $employerNi employerNi
     *
     * @return $this
     */
    public function setEmployerNi(?float $employerNi): static
    {
        if (is_null($employerNi)) {
            throw new InvalidArgumentException('non-nullable employerNi cannot be null');
        }
        $this->container['employerNi'] = $employerNi;

        return $this;
    }

    /**
     * Gets employeePension
     *
     * @return float|null
     */
    public function getEmployeePension(): ?float
    {
        return $this->container['employeePension'];
    }

    /**
     * Sets employeePension
     *
     * @param float|null $employeePension employeePension
     *
     * @return $this
     */
    public function setEmployeePension(?float $employeePension): static
    {
        if (is_null($employeePension)) {
            throw new InvalidArgumentException('non-nullable employeePension cannot be null');
        }
        $this->container['employeePension'] = $employeePension;

        return $this;
    }

    /**
     * Gets employerPension
     *
     * @return float|null
     */
    public function getEmployerPension(): ?float
    {
        return $this->container['employerPension'];
    }

    /**
     * Sets employerPension
     *
     * @param float|null $employerPension employerPension
     *
     * @return $this
     */
    public function setEmployerPension(?float $employerPension): static
    {
        if (is_null($employerPension)) {
            throw new InvalidArgumentException('non-nullable employerPension cannot be null');
        }
        $this->container['employerPension'] = $employerPension;

        return $this;
    }

    /**
     * Gets studentOrPgLoan
     *
     * @return float|null
     */
    public function getStudentOrPgLoan(): ?float
    {
        return $this->container['studentOrPgLoan'];
    }

    /**
     * Sets studentOrPgLoan
     *
     * @param float|null $studentOrPgLoan studentOrPgLoan
     *
     * @return $this
     */
    public function setStudentOrPgLoan(?float $studentOrPgLoan): static
    {
        if (is_null($studentOrPgLoan)) {
            throw new InvalidArgumentException('non-nullable studentOrPgLoan cannot be null');
        }
        $this->container['studentOrPgLoan'] = $studentOrPgLoan;

        return $this;
    }

    /**
     * Gets statutoryPayments
     *
     * @return float|null
     */
    public function getStatutoryPayments(): ?float
    {
        return $this->container['statutoryPayments'];
    }

    /**
     * Sets statutoryPayments
     *
     * @param float|null $statutoryPayments statutoryPayments
     *
     * @return $this
     */
    public function setStatutoryPayments(?float $statutoryPayments): static
    {
        if (is_null($statutoryPayments)) {
            throw new InvalidArgumentException('non-nullable statutoryPayments cannot be null');
        }
        $this->container['statutoryPayments'] = $statutoryPayments;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return float|null
     */
    public function getAttachments(): ?float
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param float|null $attachments attachments
     *
     * @return $this
     */
    public function setAttachments(?float $attachments): static
    {
        if (is_null($attachments)) {
            throw new InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets otherDeductions
     *
     * @return float|null
     */
    public function getOtherDeductions(): ?float
    {
        return $this->container['otherDeductions'];
    }

    /**
     * Sets otherDeductions
     *
     * @param float|null $otherDeductions otherDeductions
     *
     * @return $this
     */
    public function setOtherDeductions(?float $otherDeductions): static
    {
        if (is_null($otherDeductions)) {
            throw new InvalidArgumentException('non-nullable otherDeductions cannot be null');
        }
        $this->container['otherDeductions'] = $otherDeductions;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return $this
     */
    public function setLastName(?string $lastName): static
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets isNewStarter
     *
     * @return bool|null
     */
    public function getIsNewStarter(): ?bool
    {
        return $this->container['isNewStarter'];
    }

    /**
     * Sets isNewStarter
     *
     * @param bool|null $isNewStarter isNewStarter
     *
     * @return $this
     */
    public function setIsNewStarter(?bool $isNewStarter): static
    {
        if (is_null($isNewStarter)) {
            throw new InvalidArgumentException('non-nullable isNewStarter cannot be null');
        }
        $this->container['isNewStarter'] = $isNewStarter;

        return $this;
    }

    /**
     * Gets isLeaver
     *
     * @return bool|null
     */
    public function getIsLeaver(): ?bool
    {
        return $this->container['isLeaver'];
    }

    /**
     * Sets isLeaver
     *
     * @param bool|null $isLeaver isLeaver
     *
     * @return $this
     */
    public function setIsLeaver(?bool $isLeaver): static
    {
        if (is_null($isLeaver)) {
            throw new InvalidArgumentException('non-nullable isLeaver cannot be null');
        }
        $this->container['isLeaver'] = $isLeaver;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode payrollCode
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment(): ?string
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return $this
     */
    public function setDepartment(?string $department): static
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


