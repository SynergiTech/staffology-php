<?php
/**
 * ContractHolidaySchemeRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractHolidaySchemeRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractHolidaySchemeRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.HolidaySchemeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'averageCalculationWeeks' => 'int',
        'useOnlyPaidWeeks' => 'bool',
        'ignoreSxp' => 'bool',
        'calculationDurationUnit' => '\SynergiTech\Staffology\Model\HolidaySchemeDurationType',
        'useNiPay' => 'bool',
        'useWorkingPattern' => 'bool',
        'payCodeSetForPayId' => 'string',
        'payCodeSetForHoursId' => 'string',
        'useFallbackRate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'averageCalculationWeeks' => 'int32',
        'useOnlyPaidWeeks' => null,
        'ignoreSxp' => null,
        'calculationDurationUnit' => null,
        'useNiPay' => null,
        'useWorkingPattern' => null,
        'payCodeSetForPayId' => 'uuid',
        'payCodeSetForHoursId' => 'uuid',
        'useFallbackRate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'averageCalculationWeeks' => false,
        'useOnlyPaidWeeks' => false,
        'ignoreSxp' => false,
        'calculationDurationUnit' => false,
        'useNiPay' => false,
        'useWorkingPattern' => false,
        'payCodeSetForPayId' => true,
        'payCodeSetForHoursId' => true,
        'useFallbackRate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'averageCalculationWeeks' => 'averageCalculationWeeks',
        'useOnlyPaidWeeks' => 'useOnlyPaidWeeks',
        'ignoreSxp' => 'ignoreSxp',
        'calculationDurationUnit' => 'calculationDurationUnit',
        'useNiPay' => 'useNiPay',
        'useWorkingPattern' => 'useWorkingPattern',
        'payCodeSetForPayId' => 'payCodeSetForPayId',
        'payCodeSetForHoursId' => 'payCodeSetForHoursId',
        'useFallbackRate' => 'useFallbackRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'averageCalculationWeeks' => 'setAverageCalculationWeeks',
        'useOnlyPaidWeeks' => 'setUseOnlyPaidWeeks',
        'ignoreSxp' => 'setIgnoreSxp',
        'calculationDurationUnit' => 'setCalculationDurationUnit',
        'useNiPay' => 'setUseNiPay',
        'useWorkingPattern' => 'setUseWorkingPattern',
        'payCodeSetForPayId' => 'setPayCodeSetForPayId',
        'payCodeSetForHoursId' => 'setPayCodeSetForHoursId',
        'useFallbackRate' => 'setUseFallbackRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'averageCalculationWeeks' => 'getAverageCalculationWeeks',
        'useOnlyPaidWeeks' => 'getUseOnlyPaidWeeks',
        'ignoreSxp' => 'getIgnoreSxp',
        'calculationDurationUnit' => 'getCalculationDurationUnit',
        'useNiPay' => 'getUseNiPay',
        'useWorkingPattern' => 'getUseWorkingPattern',
        'payCodeSetForPayId' => 'getPayCodeSetForPayId',
        'payCodeSetForHoursId' => 'getPayCodeSetForHoursId',
        'useFallbackRate' => 'getUseFallbackRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('averageCalculationWeeks', $data ?? [], null);
        $this->setIfExists('useOnlyPaidWeeks', $data ?? [], null);
        $this->setIfExists('ignoreSxp', $data ?? [], null);
        $this->setIfExists('calculationDurationUnit', $data ?? [], null);
        $this->setIfExists('useNiPay', $data ?? [], null);
        $this->setIfExists('useWorkingPattern', $data ?? [], null);
        $this->setIfExists('payCodeSetForPayId', $data ?? [], null);
        $this->setIfExists('payCodeSetForHoursId', $data ?? [], null);
        $this->setIfExists('useFallbackRate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Holiday scheme name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new InvalidArgumentException('invalid length for $name when calling ContractHolidaySchemeRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets averageCalculationWeeks
     *
     * @return int|null
     */
    public function getAverageCalculationWeeks(): ?int
    {
        return $this->container['averageCalculationWeeks'];
    }

    /**
     * Sets averageCalculationWeeks
     *
     * @param int|null $averageCalculationWeeks The number of weeks that the average holiday pay calculation is to be calculated over (Default 52)
     *
     * @return $this
     */
    public function setAverageCalculationWeeks(?int $averageCalculationWeeks): static
    {
        if (is_null($averageCalculationWeeks)) {
            throw new InvalidArgumentException('non-nullable averageCalculationWeeks cannot be null');
        }
        $this->container['averageCalculationWeeks'] = $averageCalculationWeeks;

        return $this;
    }

    /**
     * Gets useOnlyPaidWeeks
     *
     * @return bool|null
     */
    public function getUseOnlyPaidWeeks(): ?bool
    {
        return $this->container['useOnlyPaidWeeks'];
    }

    /**
     * Sets useOnlyPaidWeeks
     *
     * @param bool|null $useOnlyPaidWeeks If to go back further than the stated no of weeks for calculation if there are weeks where the employee has not been paid. (Default- True)
     *
     * @return $this
     */
    public function setUseOnlyPaidWeeks(?bool $useOnlyPaidWeeks): static
    {
        if (is_null($useOnlyPaidWeeks)) {
            throw new InvalidArgumentException('non-nullable useOnlyPaidWeeks cannot be null');
        }
        $this->container['useOnlyPaidWeeks'] = $useOnlyPaidWeeks;

        return $this;
    }

    /**
     * Gets ignoreSxp
     *
     * @return bool|null
     */
    public function getIgnoreSxp(): ?bool
    {
        return $this->container['ignoreSxp'];
    }

    /**
     * Sets ignoreSxp
     *
     * @param bool|null $ignoreSxp Option to ignore weeks where SXP payments have been paid. The calculation will then go back like above until the stated number of weeks are included in the calculation. (Default -True).
     *
     * @return $this
     */
    public function setIgnoreSxp(?bool $ignoreSxp): static
    {
        if (is_null($ignoreSxp)) {
            throw new InvalidArgumentException('non-nullable ignoreSxp cannot be null');
        }
        $this->container['ignoreSxp'] = $ignoreSxp;

        return $this;
    }

    /**
     * Gets calculationDurationUnit
     *
     * @return \SynergiTech\Staffology\Model\HolidaySchemeDurationType|null
     */
    public function getCalculationDurationUnit(): ?\SynergiTech\Staffology\Model\HolidaySchemeDurationType
    {
        return $this->container['calculationDurationUnit'];
    }

    /**
     * Sets calculationDurationUnit
     *
     * @param \SynergiTech\Staffology\Model\HolidaySchemeDurationType|null $calculationDurationUnit calculationDurationUnit
     *
     * @return $this
     */
    public function setCalculationDurationUnit(?\SynergiTech\Staffology\Model\HolidaySchemeDurationType $calculationDurationUnit): static
    {
        if (is_null($calculationDurationUnit)) {
            throw new InvalidArgumentException('non-nullable calculationDurationUnit cannot be null');
        }
        $this->container['calculationDurationUnit'] = $calculationDurationUnit;

        return $this;
    }

    /**
     * Gets useNiPay
     *
     * @return bool|null
     */
    public function getUseNiPay(): ?bool
    {
        return $this->container['useNiPay'];
    }

    /**
     * Sets useNiPay
     *
     * @param bool|null $useNiPay If use National insurance gross taxable pay. (Default - True).
     *
     * @return $this
     */
    public function setUseNiPay(?bool $useNiPay): static
    {
        if (is_null($useNiPay)) {
            throw new InvalidArgumentException('non-nullable useNiPay cannot be null');
        }
        $this->container['useNiPay'] = $useNiPay;

        return $this;
    }

    /**
     * Gets useWorkingPattern
     *
     * @return bool|null
     */
    public function getUseWorkingPattern(): ?bool
    {
        return $this->container['useWorkingPattern'];
    }

    /**
     * Sets useWorkingPattern
     *
     * @param bool|null $useWorkingPattern If use the weekly hours or days as per their working pattern as the divisor for the average holiday rate.
     *
     * @return $this
     */
    public function setUseWorkingPattern(?bool $useWorkingPattern): static
    {
        if (is_null($useWorkingPattern)) {
            throw new InvalidArgumentException('non-nullable useWorkingPattern cannot be null');
        }
        $this->container['useWorkingPattern'] = $useWorkingPattern;

        return $this;
    }

    /**
     * Gets payCodeSetForPayId
     *
     * @return string|null
     */
    public function getPayCodeSetForPayId(): ?string
    {
        return $this->container['payCodeSetForPayId'];
    }

    /**
     * Sets payCodeSetForPayId
     *
     * @param string|null $payCodeSetForPayId the Paycode set that they want to use for the Values to enable the calculation.
     *
     * @return $this
     */
    public function setPayCodeSetForPayId(?string $payCodeSetForPayId): static
    {
        if (is_null($payCodeSetForPayId)) {
            array_push($this->openAPINullablesSetToNull, 'payCodeSetForPayId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodeSetForPayId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodeSetForPayId'] = $payCodeSetForPayId;

        return $this;
    }

    /**
     * Gets payCodeSetForHoursId
     *
     * @return string|null
     */
    public function getPayCodeSetForHoursId(): ?string
    {
        return $this->container['payCodeSetForHoursId'];
    }

    /**
     * Sets payCodeSetForHoursId
     *
     * @param string|null $payCodeSetForHoursId the Paycode set that they want to use for the Hours to enable the calculation.
     *
     * @return $this
     */
    public function setPayCodeSetForHoursId(?string $payCodeSetForHoursId): static
    {
        if (is_null($payCodeSetForHoursId)) {
            array_push($this->openAPINullablesSetToNull, 'payCodeSetForHoursId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodeSetForHoursId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodeSetForHoursId'] = $payCodeSetForHoursId;

        return $this;
    }

    /**
     * Gets useFallbackRate
     *
     * @return bool|null
     */
    public function getUseFallbackRate(): ?bool
    {
        return $this->container['useFallbackRate'];
    }

    /**
     * Sets useFallbackRate
     *
     * @param bool|null $useFallbackRate Indicates to use employee base hourly rate where the calculated average hourly rate is less
     *
     * @return $this
     */
    public function setUseFallbackRate(?bool $useFallbackRate): static
    {
        if (is_null($useFallbackRate)) {
            throw new InvalidArgumentException('non-nullable useFallbackRate cannot be null');
        }
        $this->container['useFallbackRate'] = $useFallbackRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


