<?php
/**
 * OpeningBalancesTotals
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * OpeningBalancesTotals Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OpeningBalancesTotals implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OpeningBalancesTotals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employeesWithOpeningBalancesCount' => 'int',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'previousEmployerGross' => 'float',
        'previousEmployerTax' => 'float',
        'currentEmployerGross' => 'float',
        'currentEmployerTax' => 'float',
        'currentEmployerNet' => 'float',
        'studentLoanDeductions' => 'float',
        'postgradLoanDeductions' => 'float',
        'empeePenContribnsPaid' => 'float',
        'empeePenContribnsNotPaid' => 'float',
        'smp' => 'float',
        'spp' => 'float',
        'sap' => 'float',
        'shpp' => 'float',
        'spbp' => 'float',
        'realTimeClass1ANi' => 'float',
        'terminationPayments' => 'float',
        'mapsMiles' => 'int',
        'benefitsTaxedViaPayroll' => 'float',
        'nicSummaries' => '\SynergiTech\Staffology\Model\NicSummary[]',
        'foreignTaxCredit' => 'float',
        'foreignTaxCreditReclaimed' => 'float',
        'employee' => '\SynergiTech\Staffology\Model\Item'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employeesWithOpeningBalancesCount' => 'int32',
        'taxYear' => null,
        'previousEmployerGross' => 'double',
        'previousEmployerTax' => 'double',
        'currentEmployerGross' => 'double',
        'currentEmployerTax' => 'double',
        'currentEmployerNet' => 'double',
        'studentLoanDeductions' => 'double',
        'postgradLoanDeductions' => 'double',
        'empeePenContribnsPaid' => 'double',
        'empeePenContribnsNotPaid' => 'double',
        'smp' => 'double',
        'spp' => 'double',
        'sap' => 'double',
        'shpp' => 'double',
        'spbp' => 'double',
        'realTimeClass1ANi' => 'double',
        'terminationPayments' => 'double',
        'mapsMiles' => 'int32',
        'benefitsTaxedViaPayroll' => 'double',
        'nicSummaries' => null,
        'foreignTaxCredit' => 'double',
        'foreignTaxCreditReclaimed' => 'double',
        'employee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employeesWithOpeningBalancesCount' => false,
        'taxYear' => false,
        'previousEmployerGross' => false,
        'previousEmployerTax' => false,
        'currentEmployerGross' => false,
        'currentEmployerTax' => false,
        'currentEmployerNet' => false,
        'studentLoanDeductions' => false,
        'postgradLoanDeductions' => false,
        'empeePenContribnsPaid' => false,
        'empeePenContribnsNotPaid' => false,
        'smp' => false,
        'spp' => false,
        'sap' => false,
        'shpp' => false,
        'spbp' => false,
        'realTimeClass1ANi' => false,
        'terminationPayments' => false,
        'mapsMiles' => false,
        'benefitsTaxedViaPayroll' => false,
        'nicSummaries' => true,
        'foreignTaxCredit' => false,
        'foreignTaxCreditReclaimed' => false,
        'employee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employeesWithOpeningBalancesCount' => 'employeesWithOpeningBalancesCount',
        'taxYear' => 'taxYear',
        'previousEmployerGross' => 'previousEmployerGross',
        'previousEmployerTax' => 'previousEmployerTax',
        'currentEmployerGross' => 'currentEmployerGross',
        'currentEmployerTax' => 'currentEmployerTax',
        'currentEmployerNet' => 'currentEmployerNet',
        'studentLoanDeductions' => 'studentLoanDeductions',
        'postgradLoanDeductions' => 'postgradLoanDeductions',
        'empeePenContribnsPaid' => 'empeePenContribnsPaid',
        'empeePenContribnsNotPaid' => 'empeePenContribnsNotPaid',
        'smp' => 'smp',
        'spp' => 'spp',
        'sap' => 'sap',
        'shpp' => 'shpp',
        'spbp' => 'spbp',
        'realTimeClass1ANi' => 'realTimeClass1ANi',
        'terminationPayments' => 'terminationPayments',
        'mapsMiles' => 'mapsMiles',
        'benefitsTaxedViaPayroll' => 'benefitsTaxedViaPayroll',
        'nicSummaries' => 'nicSummaries',
        'foreignTaxCredit' => 'foreignTaxCredit',
        'foreignTaxCreditReclaimed' => 'foreignTaxCreditReclaimed',
        'employee' => 'employee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employeesWithOpeningBalancesCount' => 'setEmployeesWithOpeningBalancesCount',
        'taxYear' => 'setTaxYear',
        'previousEmployerGross' => 'setPreviousEmployerGross',
        'previousEmployerTax' => 'setPreviousEmployerTax',
        'currentEmployerGross' => 'setCurrentEmployerGross',
        'currentEmployerTax' => 'setCurrentEmployerTax',
        'currentEmployerNet' => 'setCurrentEmployerNet',
        'studentLoanDeductions' => 'setStudentLoanDeductions',
        'postgradLoanDeductions' => 'setPostgradLoanDeductions',
        'empeePenContribnsPaid' => 'setEmpeePenContribnsPaid',
        'empeePenContribnsNotPaid' => 'setEmpeePenContribnsNotPaid',
        'smp' => 'setSmp',
        'spp' => 'setSpp',
        'sap' => 'setSap',
        'shpp' => 'setShpp',
        'spbp' => 'setSpbp',
        'realTimeClass1ANi' => 'setRealTimeClass1ANi',
        'terminationPayments' => 'setTerminationPayments',
        'mapsMiles' => 'setMapsMiles',
        'benefitsTaxedViaPayroll' => 'setBenefitsTaxedViaPayroll',
        'nicSummaries' => 'setNicSummaries',
        'foreignTaxCredit' => 'setForeignTaxCredit',
        'foreignTaxCreditReclaimed' => 'setForeignTaxCreditReclaimed',
        'employee' => 'setEmployee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employeesWithOpeningBalancesCount' => 'getEmployeesWithOpeningBalancesCount',
        'taxYear' => 'getTaxYear',
        'previousEmployerGross' => 'getPreviousEmployerGross',
        'previousEmployerTax' => 'getPreviousEmployerTax',
        'currentEmployerGross' => 'getCurrentEmployerGross',
        'currentEmployerTax' => 'getCurrentEmployerTax',
        'currentEmployerNet' => 'getCurrentEmployerNet',
        'studentLoanDeductions' => 'getStudentLoanDeductions',
        'postgradLoanDeductions' => 'getPostgradLoanDeductions',
        'empeePenContribnsPaid' => 'getEmpeePenContribnsPaid',
        'empeePenContribnsNotPaid' => 'getEmpeePenContribnsNotPaid',
        'smp' => 'getSmp',
        'spp' => 'getSpp',
        'sap' => 'getSap',
        'shpp' => 'getShpp',
        'spbp' => 'getSpbp',
        'realTimeClass1ANi' => 'getRealTimeClass1ANi',
        'terminationPayments' => 'getTerminationPayments',
        'mapsMiles' => 'getMapsMiles',
        'benefitsTaxedViaPayroll' => 'getBenefitsTaxedViaPayroll',
        'nicSummaries' => 'getNicSummaries',
        'foreignTaxCredit' => 'getForeignTaxCredit',
        'foreignTaxCreditReclaimed' => 'getForeignTaxCreditReclaimed',
        'employee' => 'getEmployee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employeesWithOpeningBalancesCount', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('previousEmployerGross', $data ?? [], null);
        $this->setIfExists('previousEmployerTax', $data ?? [], null);
        $this->setIfExists('currentEmployerGross', $data ?? [], null);
        $this->setIfExists('currentEmployerTax', $data ?? [], null);
        $this->setIfExists('currentEmployerNet', $data ?? [], null);
        $this->setIfExists('studentLoanDeductions', $data ?? [], null);
        $this->setIfExists('postgradLoanDeductions', $data ?? [], null);
        $this->setIfExists('empeePenContribnsPaid', $data ?? [], null);
        $this->setIfExists('empeePenContribnsNotPaid', $data ?? [], null);
        $this->setIfExists('smp', $data ?? [], null);
        $this->setIfExists('spp', $data ?? [], null);
        $this->setIfExists('sap', $data ?? [], null);
        $this->setIfExists('shpp', $data ?? [], null);
        $this->setIfExists('spbp', $data ?? [], null);
        $this->setIfExists('realTimeClass1ANi', $data ?? [], null);
        $this->setIfExists('terminationPayments', $data ?? [], null);
        $this->setIfExists('mapsMiles', $data ?? [], null);
        $this->setIfExists('benefitsTaxedViaPayroll', $data ?? [], null);
        $this->setIfExists('nicSummaries', $data ?? [], null);
        $this->setIfExists('foreignTaxCredit', $data ?? [], null);
        $this->setIfExists('foreignTaxCreditReclaimed', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeesWithOpeningBalancesCount
     *
     * @return int|null
     */
    public function getEmployeesWithOpeningBalancesCount(): ?int
    {
        return $this->container['employeesWithOpeningBalancesCount'];
    }

    /**
     * Sets employeesWithOpeningBalancesCount
     *
     * @param int|null $employeesWithOpeningBalancesCount employeesWithOpeningBalancesCount
     *
     * @return $this
     */
    public function setEmployeesWithOpeningBalancesCount(?int $employeesWithOpeningBalancesCount): static
    {
        if (is_null($employeesWithOpeningBalancesCount)) {
            throw new InvalidArgumentException('non-nullable employeesWithOpeningBalancesCount cannot be null');
        }
        $this->container['employeesWithOpeningBalancesCount'] = $employeesWithOpeningBalancesCount;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets previousEmployerGross
     *
     * @return float|null
     */
    public function getPreviousEmployerGross(): ?float
    {
        return $this->container['previousEmployerGross'];
    }

    /**
     * Sets previousEmployerGross
     *
     * @param float|null $previousEmployerGross previousEmployerGross
     *
     * @return $this
     */
    public function setPreviousEmployerGross(?float $previousEmployerGross): static
    {
        if (is_null($previousEmployerGross)) {
            throw new InvalidArgumentException('non-nullable previousEmployerGross cannot be null');
        }
        $this->container['previousEmployerGross'] = $previousEmployerGross;

        return $this;
    }

    /**
     * Gets previousEmployerTax
     *
     * @return float|null
     */
    public function getPreviousEmployerTax(): ?float
    {
        return $this->container['previousEmployerTax'];
    }

    /**
     * Sets previousEmployerTax
     *
     * @param float|null $previousEmployerTax previousEmployerTax
     *
     * @return $this
     */
    public function setPreviousEmployerTax(?float $previousEmployerTax): static
    {
        if (is_null($previousEmployerTax)) {
            throw new InvalidArgumentException('non-nullable previousEmployerTax cannot be null');
        }
        $this->container['previousEmployerTax'] = $previousEmployerTax;

        return $this;
    }

    /**
     * Gets currentEmployerGross
     *
     * @return float|null
     */
    public function getCurrentEmployerGross(): ?float
    {
        return $this->container['currentEmployerGross'];
    }

    /**
     * Sets currentEmployerGross
     *
     * @param float|null $currentEmployerGross currentEmployerGross
     *
     * @return $this
     */
    public function setCurrentEmployerGross(?float $currentEmployerGross): static
    {
        if (is_null($currentEmployerGross)) {
            throw new InvalidArgumentException('non-nullable currentEmployerGross cannot be null');
        }
        $this->container['currentEmployerGross'] = $currentEmployerGross;

        return $this;
    }

    /**
     * Gets currentEmployerTax
     *
     * @return float|null
     */
    public function getCurrentEmployerTax(): ?float
    {
        return $this->container['currentEmployerTax'];
    }

    /**
     * Sets currentEmployerTax
     *
     * @param float|null $currentEmployerTax currentEmployerTax
     *
     * @return $this
     */
    public function setCurrentEmployerTax(?float $currentEmployerTax): static
    {
        if (is_null($currentEmployerTax)) {
            throw new InvalidArgumentException('non-nullable currentEmployerTax cannot be null');
        }
        $this->container['currentEmployerTax'] = $currentEmployerTax;

        return $this;
    }

    /**
     * Gets currentEmployerNet
     *
     * @return float|null
     */
    public function getCurrentEmployerNet(): ?float
    {
        return $this->container['currentEmployerNet'];
    }

    /**
     * Sets currentEmployerNet
     *
     * @param float|null $currentEmployerNet currentEmployerNet
     *
     * @return $this
     */
    public function setCurrentEmployerNet(?float $currentEmployerNet): static
    {
        if (is_null($currentEmployerNet)) {
            throw new InvalidArgumentException('non-nullable currentEmployerNet cannot be null');
        }
        $this->container['currentEmployerNet'] = $currentEmployerNet;

        return $this;
    }

    /**
     * Gets studentLoanDeductions
     *
     * @return float|null
     */
    public function getStudentLoanDeductions(): ?float
    {
        return $this->container['studentLoanDeductions'];
    }

    /**
     * Sets studentLoanDeductions
     *
     * @param float|null $studentLoanDeductions studentLoanDeductions
     *
     * @return $this
     */
    public function setStudentLoanDeductions(?float $studentLoanDeductions): static
    {
        if (is_null($studentLoanDeductions)) {
            throw new InvalidArgumentException('non-nullable studentLoanDeductions cannot be null');
        }
        $this->container['studentLoanDeductions'] = $studentLoanDeductions;

        return $this;
    }

    /**
     * Gets postgradLoanDeductions
     *
     * @return float|null
     */
    public function getPostgradLoanDeductions(): ?float
    {
        return $this->container['postgradLoanDeductions'];
    }

    /**
     * Sets postgradLoanDeductions
     *
     * @param float|null $postgradLoanDeductions postgradLoanDeductions
     *
     * @return $this
     */
    public function setPostgradLoanDeductions(?float $postgradLoanDeductions): static
    {
        if (is_null($postgradLoanDeductions)) {
            throw new InvalidArgumentException('non-nullable postgradLoanDeductions cannot be null');
        }
        $this->container['postgradLoanDeductions'] = $postgradLoanDeductions;

        return $this;
    }

    /**
     * Gets empeePenContribnsPaid
     *
     * @return float|null
     */
    public function getEmpeePenContribnsPaid(): ?float
    {
        return $this->container['empeePenContribnsPaid'];
    }

    /**
     * Sets empeePenContribnsPaid
     *
     * @param float|null $empeePenContribnsPaid empeePenContribnsPaid
     *
     * @return $this
     */
    public function setEmpeePenContribnsPaid(?float $empeePenContribnsPaid): static
    {
        if (is_null($empeePenContribnsPaid)) {
            throw new InvalidArgumentException('non-nullable empeePenContribnsPaid cannot be null');
        }
        $this->container['empeePenContribnsPaid'] = $empeePenContribnsPaid;

        return $this;
    }

    /**
     * Gets empeePenContribnsNotPaid
     *
     * @return float|null
     */
    public function getEmpeePenContribnsNotPaid(): ?float
    {
        return $this->container['empeePenContribnsNotPaid'];
    }

    /**
     * Sets empeePenContribnsNotPaid
     *
     * @param float|null $empeePenContribnsNotPaid empeePenContribnsNotPaid
     *
     * @return $this
     */
    public function setEmpeePenContribnsNotPaid(?float $empeePenContribnsNotPaid): static
    {
        if (is_null($empeePenContribnsNotPaid)) {
            throw new InvalidArgumentException('non-nullable empeePenContribnsNotPaid cannot be null');
        }
        $this->container['empeePenContribnsNotPaid'] = $empeePenContribnsNotPaid;

        return $this;
    }

    /**
     * Gets smp
     *
     * @return float|null
     */
    public function getSmp(): ?float
    {
        return $this->container['smp'];
    }

    /**
     * Sets smp
     *
     * @param float|null $smp smp
     *
     * @return $this
     */
    public function setSmp(?float $smp): static
    {
        if (is_null($smp)) {
            throw new InvalidArgumentException('non-nullable smp cannot be null');
        }
        $this->container['smp'] = $smp;

        return $this;
    }

    /**
     * Gets spp
     *
     * @return float|null
     */
    public function getSpp(): ?float
    {
        return $this->container['spp'];
    }

    /**
     * Sets spp
     *
     * @param float|null $spp spp
     *
     * @return $this
     */
    public function setSpp(?float $spp): static
    {
        if (is_null($spp)) {
            throw new InvalidArgumentException('non-nullable spp cannot be null');
        }
        $this->container['spp'] = $spp;

        return $this;
    }

    /**
     * Gets sap
     *
     * @return float|null
     */
    public function getSap(): ?float
    {
        return $this->container['sap'];
    }

    /**
     * Sets sap
     *
     * @param float|null $sap sap
     *
     * @return $this
     */
    public function setSap(?float $sap): static
    {
        if (is_null($sap)) {
            throw new InvalidArgumentException('non-nullable sap cannot be null');
        }
        $this->container['sap'] = $sap;

        return $this;
    }

    /**
     * Gets shpp
     *
     * @return float|null
     */
    public function getShpp(): ?float
    {
        return $this->container['shpp'];
    }

    /**
     * Sets shpp
     *
     * @param float|null $shpp shpp
     *
     * @return $this
     */
    public function setShpp(?float $shpp): static
    {
        if (is_null($shpp)) {
            throw new InvalidArgumentException('non-nullable shpp cannot be null');
        }
        $this->container['shpp'] = $shpp;

        return $this;
    }

    /**
     * Gets spbp
     *
     * @return float|null
     */
    public function getSpbp(): ?float
    {
        return $this->container['spbp'];
    }

    /**
     * Sets spbp
     *
     * @param float|null $spbp spbp
     *
     * @return $this
     */
    public function setSpbp(?float $spbp): static
    {
        if (is_null($spbp)) {
            throw new InvalidArgumentException('non-nullable spbp cannot be null');
        }
        $this->container['spbp'] = $spbp;

        return $this;
    }

    /**
     * Gets realTimeClass1ANi
     *
     * @return float|null
     */
    public function getRealTimeClass1ANi(): ?float
    {
        return $this->container['realTimeClass1ANi'];
    }

    /**
     * Sets realTimeClass1ANi
     *
     * @param float|null $realTimeClass1ANi realTimeClass1ANi
     *
     * @return $this
     */
    public function setRealTimeClass1ANi(?float $realTimeClass1ANi): static
    {
        if (is_null($realTimeClass1ANi)) {
            throw new InvalidArgumentException('non-nullable realTimeClass1ANi cannot be null');
        }
        $this->container['realTimeClass1ANi'] = $realTimeClass1ANi;

        return $this;
    }

    /**
     * Gets terminationPayments
     *
     * @return float|null
     */
    public function getTerminationPayments(): ?float
    {
        return $this->container['terminationPayments'];
    }

    /**
     * Sets terminationPayments
     *
     * @param float|null $terminationPayments terminationPayments
     *
     * @return $this
     */
    public function setTerminationPayments(?float $terminationPayments): static
    {
        if (is_null($terminationPayments)) {
            throw new InvalidArgumentException('non-nullable terminationPayments cannot be null');
        }
        $this->container['terminationPayments'] = $terminationPayments;

        return $this;
    }

    /**
     * Gets mapsMiles
     *
     * @return int|null
     */
    public function getMapsMiles(): ?int
    {
        return $this->container['mapsMiles'];
    }

    /**
     * Sets mapsMiles
     *
     * @param int|null $mapsMiles mapsMiles
     *
     * @return $this
     */
    public function setMapsMiles(?int $mapsMiles): static
    {
        if (is_null($mapsMiles)) {
            throw new InvalidArgumentException('non-nullable mapsMiles cannot be null');
        }
        $this->container['mapsMiles'] = $mapsMiles;

        return $this;
    }

    /**
     * Gets benefitsTaxedViaPayroll
     *
     * @return float|null
     */
    public function getBenefitsTaxedViaPayroll(): ?float
    {
        return $this->container['benefitsTaxedViaPayroll'];
    }

    /**
     * Sets benefitsTaxedViaPayroll
     *
     * @param float|null $benefitsTaxedViaPayroll benefitsTaxedViaPayroll
     *
     * @return $this
     */
    public function setBenefitsTaxedViaPayroll(?float $benefitsTaxedViaPayroll): static
    {
        if (is_null($benefitsTaxedViaPayroll)) {
            throw new InvalidArgumentException('non-nullable benefitsTaxedViaPayroll cannot be null');
        }
        $this->container['benefitsTaxedViaPayroll'] = $benefitsTaxedViaPayroll;

        return $this;
    }

    /**
     * Gets nicSummaries
     *
     * @return \SynergiTech\Staffology\Model\NicSummary[]|null
     */
    public function getNicSummaries(): ?array
    {
        return $this->container['nicSummaries'];
    }

    /**
     * Sets nicSummaries
     *
     * @param \SynergiTech\Staffology\Model\NicSummary[]|null $nicSummaries nicSummaries
     *
     * @return $this
     */
    public function setNicSummaries(?array $nicSummaries): static
    {
        if (is_null($nicSummaries)) {
            array_push($this->openAPINullablesSetToNull, 'nicSummaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nicSummaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nicSummaries'] = $nicSummaries;

        return $this;
    }

    /**
     * Gets foreignTaxCredit
     *
     * @return float|null
     */
    public function getForeignTaxCredit(): ?float
    {
        return $this->container['foreignTaxCredit'];
    }

    /**
     * Sets foreignTaxCredit
     *
     * @param float|null $foreignTaxCredit foreignTaxCredit
     *
     * @return $this
     */
    public function setForeignTaxCredit(?float $foreignTaxCredit): static
    {
        if (is_null($foreignTaxCredit)) {
            throw new InvalidArgumentException('non-nullable foreignTaxCredit cannot be null');
        }
        $this->container['foreignTaxCredit'] = $foreignTaxCredit;

        return $this;
    }

    /**
     * Gets foreignTaxCreditReclaimed
     *
     * @return float|null
     */
    public function getForeignTaxCreditReclaimed(): ?float
    {
        return $this->container['foreignTaxCreditReclaimed'];
    }

    /**
     * Sets foreignTaxCreditReclaimed
     *
     * @param float|null $foreignTaxCreditReclaimed foreignTaxCreditReclaimed
     *
     * @return $this
     */
    public function setForeignTaxCreditReclaimed(?float $foreignTaxCreditReclaimed): static
    {
        if (is_null($foreignTaxCreditReclaimed)) {
            throw new InvalidArgumentException('non-nullable foreignTaxCreditReclaimed cannot be null');
        }
        $this->container['foreignTaxCreditReclaimed'] = $foreignTaxCreditReclaimed;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


