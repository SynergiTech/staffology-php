<?php
/**
 * AnalysisReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * AnalysisReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AnalysisReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AnalysisReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'taxYear' => 'string',
        'payPeriod' => 'int',
        'gross' => 'float',
        'niableGross' => 'float',
        'pensionableGross' => 'float',
        'net' => 'float',
        'takeHome' => 'float',
        'employerNic' => 'float',
        'employerPension' => 'float',
        'showQtyColumn' => 'bool',
        'niSaving' => 'float',
        'lines' => '\SynergiTech\Staffology\Model\AnalysisReportLineValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employee' => null,
        'taxYear' => null,
        'payPeriod' => 'int32',
        'gross' => 'double',
        'niableGross' => 'double',
        'pensionableGross' => 'double',
        'net' => 'double',
        'takeHome' => 'double',
        'employerNic' => 'double',
        'employerPension' => 'double',
        'showQtyColumn' => null,
        'niSaving' => 'double',
        'lines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employee' => false,
        'taxYear' => true,
        'payPeriod' => false,
        'gross' => false,
        'niableGross' => false,
        'pensionableGross' => false,
        'net' => false,
        'takeHome' => false,
        'employerNic' => false,
        'employerPension' => false,
        'showQtyColumn' => false,
        'niSaving' => false,
        'lines' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employee' => 'employee',
        'taxYear' => 'taxYear',
        'payPeriod' => 'payPeriod',
        'gross' => 'gross',
        'niableGross' => 'niableGross',
        'pensionableGross' => 'pensionableGross',
        'net' => 'net',
        'takeHome' => 'takeHome',
        'employerNic' => 'employerNic',
        'employerPension' => 'employerPension',
        'showQtyColumn' => 'showQtyColumn',
        'niSaving' => 'niSaving',
        'lines' => 'lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employee' => 'setEmployee',
        'taxYear' => 'setTaxYear',
        'payPeriod' => 'setPayPeriod',
        'gross' => 'setGross',
        'niableGross' => 'setNiableGross',
        'pensionableGross' => 'setPensionableGross',
        'net' => 'setNet',
        'takeHome' => 'setTakeHome',
        'employerNic' => 'setEmployerNic',
        'employerPension' => 'setEmployerPension',
        'showQtyColumn' => 'setShowQtyColumn',
        'niSaving' => 'setNiSaving',
        'lines' => 'setLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employee' => 'getEmployee',
        'taxYear' => 'getTaxYear',
        'payPeriod' => 'getPayPeriod',
        'gross' => 'getGross',
        'niableGross' => 'getNiableGross',
        'pensionableGross' => 'getPensionableGross',
        'net' => 'getNet',
        'takeHome' => 'getTakeHome',
        'employerNic' => 'getEmployerNic',
        'employerPension' => 'getEmployerPension',
        'showQtyColumn' => 'getShowQtyColumn',
        'niSaving' => 'getNiSaving',
        'lines' => 'getLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('payPeriod', $data ?? [], null);
        $this->setIfExists('gross', $data ?? [], null);
        $this->setIfExists('niableGross', $data ?? [], null);
        $this->setIfExists('pensionableGross', $data ?? [], null);
        $this->setIfExists('net', $data ?? [], null);
        $this->setIfExists('takeHome', $data ?? [], null);
        $this->setIfExists('employerNic', $data ?? [], null);
        $this->setIfExists('employerPension', $data ?? [], null);
        $this->setIfExists('showQtyColumn', $data ?? [], null);
        $this->setIfExists('niSaving', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return string|null
     */
    public function getTaxYear(): ?string
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param string|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?string $taxYear): static
    {
        if (is_null($taxYear)) {
            array_push($this->openAPINullablesSetToNull, 'taxYear');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxYear', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets payPeriod
     *
     * @return int|null
     */
    public function getPayPeriod(): ?int
    {
        return $this->container['payPeriod'];
    }

    /**
     * Sets payPeriod
     *
     * @param int|null $payPeriod payPeriod
     *
     * @return $this
     */
    public function setPayPeriod(?int $payPeriod): static
    {
        if (is_null($payPeriod)) {
            throw new InvalidArgumentException('non-nullable payPeriod cannot be null');
        }
        $this->container['payPeriod'] = $payPeriod;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return float|null
     */
    public function getGross(): ?float
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param float|null $gross gross
     *
     * @return $this
     */
    public function setGross(?float $gross): static
    {
        if (is_null($gross)) {
            throw new InvalidArgumentException('non-nullable gross cannot be null');
        }
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets niableGross
     *
     * @return float|null
     */
    public function getNiableGross(): ?float
    {
        return $this->container['niableGross'];
    }

    /**
     * Sets niableGross
     *
     * @param float|null $niableGross niableGross
     *
     * @return $this
     */
    public function setNiableGross(?float $niableGross): static
    {
        if (is_null($niableGross)) {
            throw new InvalidArgumentException('non-nullable niableGross cannot be null');
        }
        $this->container['niableGross'] = $niableGross;

        return $this;
    }

    /**
     * Gets pensionableGross
     *
     * @return float|null
     */
    public function getPensionableGross(): ?float
    {
        return $this->container['pensionableGross'];
    }

    /**
     * Sets pensionableGross
     *
     * @param float|null $pensionableGross pensionableGross
     *
     * @return $this
     */
    public function setPensionableGross(?float $pensionableGross): static
    {
        if (is_null($pensionableGross)) {
            throw new InvalidArgumentException('non-nullable pensionableGross cannot be null');
        }
        $this->container['pensionableGross'] = $pensionableGross;

        return $this;
    }

    /**
     * Gets net
     *
     * @return float|null
     */
    public function getNet(): ?float
    {
        return $this->container['net'];
    }

    /**
     * Sets net
     *
     * @param float|null $net net
     *
     * @return $this
     */
    public function setNet(?float $net): static
    {
        if (is_null($net)) {
            throw new InvalidArgumentException('non-nullable net cannot be null');
        }
        $this->container['net'] = $net;

        return $this;
    }

    /**
     * Gets takeHome
     *
     * @return float|null
     */
    public function getTakeHome(): ?float
    {
        return $this->container['takeHome'];
    }

    /**
     * Sets takeHome
     *
     * @param float|null $takeHome takeHome
     *
     * @return $this
     */
    public function setTakeHome(?float $takeHome): static
    {
        if (is_null($takeHome)) {
            throw new InvalidArgumentException('non-nullable takeHome cannot be null');
        }
        $this->container['takeHome'] = $takeHome;

        return $this;
    }

    /**
     * Gets employerNic
     *
     * @return float|null
     */
    public function getEmployerNic(): ?float
    {
        return $this->container['employerNic'];
    }

    /**
     * Sets employerNic
     *
     * @param float|null $employerNic employerNic
     *
     * @return $this
     */
    public function setEmployerNic(?float $employerNic): static
    {
        if (is_null($employerNic)) {
            throw new InvalidArgumentException('non-nullable employerNic cannot be null');
        }
        $this->container['employerNic'] = $employerNic;

        return $this;
    }

    /**
     * Gets employerPension
     *
     * @return float|null
     */
    public function getEmployerPension(): ?float
    {
        return $this->container['employerPension'];
    }

    /**
     * Sets employerPension
     *
     * @param float|null $employerPension employerPension
     *
     * @return $this
     */
    public function setEmployerPension(?float $employerPension): static
    {
        if (is_null($employerPension)) {
            throw new InvalidArgumentException('non-nullable employerPension cannot be null');
        }
        $this->container['employerPension'] = $employerPension;

        return $this;
    }

    /**
     * Gets showQtyColumn
     *
     * @return bool|null
     */
    public function getShowQtyColumn(): ?bool
    {
        return $this->container['showQtyColumn'];
    }

    /**
     * Sets showQtyColumn
     *
     * @param bool|null $showQtyColumn showQtyColumn
     *
     * @return $this
     */
    public function setShowQtyColumn(?bool $showQtyColumn): static
    {
        if (is_null($showQtyColumn)) {
            throw new InvalidArgumentException('non-nullable showQtyColumn cannot be null');
        }
        $this->container['showQtyColumn'] = $showQtyColumn;

        return $this;
    }

    /**
     * Gets niSaving
     *
     * @return float|null
     */
    public function getNiSaving(): ?float
    {
        return $this->container['niSaving'];
    }

    /**
     * Sets niSaving
     *
     * @param float|null $niSaving niSaving
     *
     * @return $this
     */
    public function setNiSaving(?float $niSaving): static
    {
        if (is_null($niSaving)) {
            throw new InvalidArgumentException('non-nullable niSaving cannot be null');
        }
        $this->container['niSaving'] = $niSaving;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \SynergiTech\Staffology\Model\AnalysisReportLineValue[]|null
     */
    public function getLines(): ?array
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \SynergiTech\Staffology\Model\AnalysisReportLineValue[]|null $lines lines
     *
     * @return $this
     */
    public function setLines(?array $lines): static
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


