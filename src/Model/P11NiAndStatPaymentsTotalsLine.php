<?php
/**
 * P11NiAndStatPaymentsTotalsLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * P11NiAndStatPaymentsTotalsLine Class Doc Comment
 *
 * @description Summary line for the NI Contributions and Statutory Payments table in the P11 Detailed report
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class P11NiAndStatPaymentsTotalsLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'P11NiAndStatPaymentsTotalsLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'toLel' => 'float',
        'lelToPt' => 'float',
        'ptToUel' => 'float',
        'eesAndErs' => 'float',
        'ees' => 'float',
        'class1A' => 'float',
        'ssp' => 'float',
        'smp' => 'float',
        'spp' => 'float',
        'shpp' => 'float',
        'sap' => 'float',
        'spbp' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'toLel' => 'double',
        'lelToPt' => 'double',
        'ptToUel' => 'double',
        'eesAndErs' => 'double',
        'ees' => 'double',
        'class1A' => 'double',
        'ssp' => 'double',
        'smp' => 'double',
        'spp' => 'double',
        'shpp' => 'double',
        'sap' => 'double',
        'spbp' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'toLel' => false,
        'lelToPt' => false,
        'ptToUel' => false,
        'eesAndErs' => false,
        'ees' => false,
        'class1A' => false,
        'ssp' => false,
        'smp' => false,
        'spp' => false,
        'shpp' => false,
        'sap' => false,
        'spbp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'toLel' => 'toLel',
        'lelToPt' => 'lelToPt',
        'ptToUel' => 'ptToUel',
        'eesAndErs' => 'eesAndErs',
        'ees' => 'ees',
        'class1A' => 'class1A',
        'ssp' => 'ssp',
        'smp' => 'smp',
        'spp' => 'spp',
        'shpp' => 'shpp',
        'sap' => 'sap',
        'spbp' => 'spbp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'toLel' => 'setToLel',
        'lelToPt' => 'setLelToPt',
        'ptToUel' => 'setPtToUel',
        'eesAndErs' => 'setEesAndErs',
        'ees' => 'setEes',
        'class1A' => 'setClass1A',
        'ssp' => 'setSsp',
        'smp' => 'setSmp',
        'spp' => 'setSpp',
        'shpp' => 'setShpp',
        'sap' => 'setSap',
        'spbp' => 'setSpbp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'toLel' => 'getToLel',
        'lelToPt' => 'getLelToPt',
        'ptToUel' => 'getPtToUel',
        'eesAndErs' => 'getEesAndErs',
        'ees' => 'getEes',
        'class1A' => 'getClass1A',
        'ssp' => 'getSsp',
        'smp' => 'getSmp',
        'spp' => 'getSpp',
        'shpp' => 'getShpp',
        'sap' => 'getSap',
        'spbp' => 'getSpbp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('toLel', $data ?? [], null);
        $this->setIfExists('lelToPt', $data ?? [], null);
        $this->setIfExists('ptToUel', $data ?? [], null);
        $this->setIfExists('eesAndErs', $data ?? [], null);
        $this->setIfExists('ees', $data ?? [], null);
        $this->setIfExists('class1A', $data ?? [], null);
        $this->setIfExists('ssp', $data ?? [], null);
        $this->setIfExists('smp', $data ?? [], null);
        $this->setIfExists('spp', $data ?? [], null);
        $this->setIfExists('shpp', $data ?? [], null);
        $this->setIfExists('sap', $data ?? [], null);
        $this->setIfExists('spbp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets toLel
     *
     * @return float|null
     */
    public function getToLel(): ?float
    {
        return $this->container['toLel'];
    }

    /**
     * Sets toLel
     *
     * @param float|null $toLel [readonly]
     *
     * @return $this
     */
    public function setToLel(?float $toLel): static
    {
        if (is_null($toLel)) {
            throw new InvalidArgumentException('non-nullable toLel cannot be null');
        }
        $this->container['toLel'] = $toLel;

        return $this;
    }

    /**
     * Gets lelToPt
     *
     * @return float|null
     */
    public function getLelToPt(): ?float
    {
        return $this->container['lelToPt'];
    }

    /**
     * Sets lelToPt
     *
     * @param float|null $lelToPt [readonly]
     *
     * @return $this
     */
    public function setLelToPt(?float $lelToPt): static
    {
        if (is_null($lelToPt)) {
            throw new InvalidArgumentException('non-nullable lelToPt cannot be null');
        }
        $this->container['lelToPt'] = $lelToPt;

        return $this;
    }

    /**
     * Gets ptToUel
     *
     * @return float|null
     */
    public function getPtToUel(): ?float
    {
        return $this->container['ptToUel'];
    }

    /**
     * Sets ptToUel
     *
     * @param float|null $ptToUel [readonly]
     *
     * @return $this
     */
    public function setPtToUel(?float $ptToUel): static
    {
        if (is_null($ptToUel)) {
            throw new InvalidArgumentException('non-nullable ptToUel cannot be null');
        }
        $this->container['ptToUel'] = $ptToUel;

        return $this;
    }

    /**
     * Gets eesAndErs
     *
     * @return float|null
     */
    public function getEesAndErs(): ?float
    {
        return $this->container['eesAndErs'];
    }

    /**
     * Sets eesAndErs
     *
     * @param float|null $eesAndErs [readonly]
     *
     * @return $this
     */
    public function setEesAndErs(?float $eesAndErs): static
    {
        if (is_null($eesAndErs)) {
            throw new InvalidArgumentException('non-nullable eesAndErs cannot be null');
        }
        $this->container['eesAndErs'] = $eesAndErs;

        return $this;
    }

    /**
     * Gets ees
     *
     * @return float|null
     */
    public function getEes(): ?float
    {
        return $this->container['ees'];
    }

    /**
     * Sets ees
     *
     * @param float|null $ees [readonly]
     *
     * @return $this
     */
    public function setEes(?float $ees): static
    {
        if (is_null($ees)) {
            throw new InvalidArgumentException('non-nullable ees cannot be null');
        }
        $this->container['ees'] = $ees;

        return $this;
    }

    /**
     * Gets class1A
     *
     * @return float|null
     */
    public function getClass1A(): ?float
    {
        return $this->container['class1A'];
    }

    /**
     * Sets class1A
     *
     * @param float|null $class1A [readonly]
     *
     * @return $this
     */
    public function setClass1A(?float $class1A): static
    {
        if (is_null($class1A)) {
            throw new InvalidArgumentException('non-nullable class1A cannot be null');
        }
        $this->container['class1A'] = $class1A;

        return $this;
    }

    /**
     * Gets ssp
     *
     * @return float|null
     */
    public function getSsp(): ?float
    {
        return $this->container['ssp'];
    }

    /**
     * Sets ssp
     *
     * @param float|null $ssp [readonly]
     *
     * @return $this
     */
    public function setSsp(?float $ssp): static
    {
        if (is_null($ssp)) {
            throw new InvalidArgumentException('non-nullable ssp cannot be null');
        }
        $this->container['ssp'] = $ssp;

        return $this;
    }

    /**
     * Gets smp
     *
     * @return float|null
     */
    public function getSmp(): ?float
    {
        return $this->container['smp'];
    }

    /**
     * Sets smp
     *
     * @param float|null $smp [readonly]
     *
     * @return $this
     */
    public function setSmp(?float $smp): static
    {
        if (is_null($smp)) {
            throw new InvalidArgumentException('non-nullable smp cannot be null');
        }
        $this->container['smp'] = $smp;

        return $this;
    }

    /**
     * Gets spp
     *
     * @return float|null
     */
    public function getSpp(): ?float
    {
        return $this->container['spp'];
    }

    /**
     * Sets spp
     *
     * @param float|null $spp [readonly]
     *
     * @return $this
     */
    public function setSpp(?float $spp): static
    {
        if (is_null($spp)) {
            throw new InvalidArgumentException('non-nullable spp cannot be null');
        }
        $this->container['spp'] = $spp;

        return $this;
    }

    /**
     * Gets shpp
     *
     * @return float|null
     */
    public function getShpp(): ?float
    {
        return $this->container['shpp'];
    }

    /**
     * Sets shpp
     *
     * @param float|null $shpp [readonly]
     *
     * @return $this
     */
    public function setShpp(?float $shpp): static
    {
        if (is_null($shpp)) {
            throw new InvalidArgumentException('non-nullable shpp cannot be null');
        }
        $this->container['shpp'] = $shpp;

        return $this;
    }

    /**
     * Gets sap
     *
     * @return float|null
     */
    public function getSap(): ?float
    {
        return $this->container['sap'];
    }

    /**
     * Sets sap
     *
     * @param float|null $sap [readonly]
     *
     * @return $this
     */
    public function setSap(?float $sap): static
    {
        if (is_null($sap)) {
            throw new InvalidArgumentException('non-nullable sap cannot be null');
        }
        $this->container['sap'] = $sap;

        return $this;
    }

    /**
     * Gets spbp
     *
     * @return float|null
     */
    public function getSpbp(): ?float
    {
        return $this->container['spbp'];
    }

    /**
     * Sets spbp
     *
     * @param float|null $spbp [readonly]
     *
     * @return $this
     */
    public function setSpbp(?float $spbp): static
    {
        if (is_null($spbp)) {
            throw new InvalidArgumentException('non-nullable spbp cannot be null');
        }
        $this->container['spbp'] = $spbp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


