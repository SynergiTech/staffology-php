<?php
/**
 * TaxYearConfig
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * TaxYearConfig Class Doc Comment
 *
 * @description The configuation that our engine uses to perform calculations for the related TaxYear.  It is used internally when our engine performs any calculations or the Year End routine.  You do not need to do anything with this model, it&#39;s provided purely for informational purposes.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class TaxYearConfig implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TaxYearConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxYear' => 'int',
        'isPreview' => 'bool',
        'defaultTaxCode' => 'string',
        'class1ANicsRate' => '\SynergiTech\Staffology\Model\DecimalTaxYearConfigPrimitiveValue',
        'lowerEarningsLimit' => '\SynergiTech\Staffology\Model\PeriodValue',
        'upperEarningsLimit' => '\SynergiTech\Staffology\Model\PeriodValue',
        'primaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'secondaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'upperAccrualPoint' => '\SynergiTech\Staffology\Model\PeriodValue',
        'upperSecondaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'apprenticeUpperSecondaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'freeportsUpperSecondaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'veteransUpperSecondaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'directorsProratePrimaryThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'plan1StudentLoanThreshold' => 'float',
        'plan1StudentLoanRate' => 'float',
        'plan2StudentLoanThreshold' => 'float',
        'plan2StudentLoanRate' => 'float',
        'plan4StudentLoanThreshold' => 'float',
        'plan4StudentLoanRate' => 'float',
        'postGradLoanThreshold' => 'float',
        'postGradLoanRate' => 'float',
        'deaProtectedEarnings' => 'float',
        'pensionLowerThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'pensionAutomaticEnrolment' => '\SynergiTech\Staffology\Model\PeriodValue',
        'pensionUpperThreshold' => '\SynergiTech\Staffology\Model\PeriodValue',
        'pensionAeEmployerContribution' => 'float',
        'pensionAeEmployeeContribution' => 'float',
        'employmentAllowancePreviousYear' => 'float',
        'employmentAllowance' => 'float',
        'fixedCodes' => '\SynergiTech\Staffology\Model\FixedCode[]',
        'scottishFixedCodes' => '\SynergiTech\Staffology\Model\FixedCode[]',
        'welshFixedCodes' => '\SynergiTech\Staffology\Model\FixedCode[]',
        'niRates' => '\SynergiTech\Staffology\Model\NationalInsuranceCode[]',
        'directorsNiRates' => '\SynergiTech\Staffology\Model\NationalInsuranceCode[]',
        'brackets' => '\SynergiTech\Staffology\Model\TaxBracket[]',
        'scottishBrackets' => '\SynergiTech\Staffology\Model\TaxBracket[]',
        'welshBrackets' => '\SynergiTech\Staffology\Model\TaxBracket[]',
        'taxCodeChanges' => '\SynergiTech\Staffology\Model\TaxCodeChange[]',
        'minimumWage' => '\SynergiTech\Staffology\Model\NationalMinimumWage[]',
        'statutoryPay' => '\SynergiTech\Staffology\Model\StatutoryPay',
        'loanCharge' => '\SynergiTech\Staffology\Model\LoanCharge',
        'carCharge' => '\SynergiTech\Staffology\Model\CarCharge',
        'govTalk' => '\SynergiTech\Staffology\Model\GovTalk',
        'mileageAllowancePaymentsRates' => '\SynergiTech\Staffology\Model\MileageAllowancePaymentsRate[]',
        'tieredPensions' => '\SynergiTech\Staffology\Model\TieredPension[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxYear' => 'int32',
        'isPreview' => null,
        'defaultTaxCode' => null,
        'class1ANicsRate' => null,
        'lowerEarningsLimit' => null,
        'upperEarningsLimit' => null,
        'primaryThreshold' => null,
        'secondaryThreshold' => null,
        'upperAccrualPoint' => null,
        'upperSecondaryThreshold' => null,
        'apprenticeUpperSecondaryThreshold' => null,
        'freeportsUpperSecondaryThreshold' => null,
        'veteransUpperSecondaryThreshold' => null,
        'directorsProratePrimaryThreshold' => null,
        'plan1StudentLoanThreshold' => 'double',
        'plan1StudentLoanRate' => 'double',
        'plan2StudentLoanThreshold' => 'double',
        'plan2StudentLoanRate' => 'double',
        'plan4StudentLoanThreshold' => 'double',
        'plan4StudentLoanRate' => 'double',
        'postGradLoanThreshold' => 'double',
        'postGradLoanRate' => 'double',
        'deaProtectedEarnings' => 'double',
        'pensionLowerThreshold' => null,
        'pensionAutomaticEnrolment' => null,
        'pensionUpperThreshold' => null,
        'pensionAeEmployerContribution' => 'double',
        'pensionAeEmployeeContribution' => 'double',
        'employmentAllowancePreviousYear' => 'double',
        'employmentAllowance' => 'double',
        'fixedCodes' => null,
        'scottishFixedCodes' => null,
        'welshFixedCodes' => null,
        'niRates' => null,
        'directorsNiRates' => null,
        'brackets' => null,
        'scottishBrackets' => null,
        'welshBrackets' => null,
        'taxCodeChanges' => null,
        'minimumWage' => null,
        'statutoryPay' => null,
        'loanCharge' => null,
        'carCharge' => null,
        'govTalk' => null,
        'mileageAllowancePaymentsRates' => null,
        'tieredPensions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxYear' => false,
        'isPreview' => false,
        'defaultTaxCode' => true,
        'class1ANicsRate' => false,
        'lowerEarningsLimit' => false,
        'upperEarningsLimit' => false,
        'primaryThreshold' => false,
        'secondaryThreshold' => false,
        'upperAccrualPoint' => false,
        'upperSecondaryThreshold' => false,
        'apprenticeUpperSecondaryThreshold' => false,
        'freeportsUpperSecondaryThreshold' => false,
        'veteransUpperSecondaryThreshold' => false,
        'directorsProratePrimaryThreshold' => false,
        'plan1StudentLoanThreshold' => false,
        'plan1StudentLoanRate' => false,
        'plan2StudentLoanThreshold' => false,
        'plan2StudentLoanRate' => false,
        'plan4StudentLoanThreshold' => false,
        'plan4StudentLoanRate' => false,
        'postGradLoanThreshold' => false,
        'postGradLoanRate' => false,
        'deaProtectedEarnings' => false,
        'pensionLowerThreshold' => false,
        'pensionAutomaticEnrolment' => false,
        'pensionUpperThreshold' => false,
        'pensionAeEmployerContribution' => false,
        'pensionAeEmployeeContribution' => false,
        'employmentAllowancePreviousYear' => false,
        'employmentAllowance' => false,
        'fixedCodes' => true,
        'scottishFixedCodes' => true,
        'welshFixedCodes' => true,
        'niRates' => true,
        'directorsNiRates' => true,
        'brackets' => true,
        'scottishBrackets' => true,
        'welshBrackets' => true,
        'taxCodeChanges' => true,
        'minimumWage' => true,
        'statutoryPay' => false,
        'loanCharge' => false,
        'carCharge' => false,
        'govTalk' => false,
        'mileageAllowancePaymentsRates' => true,
        'tieredPensions' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxYear' => 'taxYear',
        'isPreview' => 'isPreview',
        'defaultTaxCode' => 'defaultTaxCode',
        'class1ANicsRate' => 'class1ANicsRate',
        'lowerEarningsLimit' => 'lowerEarningsLimit',
        'upperEarningsLimit' => 'upperEarningsLimit',
        'primaryThreshold' => 'primaryThreshold',
        'secondaryThreshold' => 'secondaryThreshold',
        'upperAccrualPoint' => 'upperAccrualPoint',
        'upperSecondaryThreshold' => 'upperSecondaryThreshold',
        'apprenticeUpperSecondaryThreshold' => 'apprenticeUpperSecondaryThreshold',
        'freeportsUpperSecondaryThreshold' => 'freeportsUpperSecondaryThreshold',
        'veteransUpperSecondaryThreshold' => 'veteransUpperSecondaryThreshold',
        'directorsProratePrimaryThreshold' => 'directorsProratePrimaryThreshold',
        'plan1StudentLoanThreshold' => 'plan1StudentLoanThreshold',
        'plan1StudentLoanRate' => 'plan1StudentLoanRate',
        'plan2StudentLoanThreshold' => 'plan2StudentLoanThreshold',
        'plan2StudentLoanRate' => 'plan2StudentLoanRate',
        'plan4StudentLoanThreshold' => 'plan4StudentLoanThreshold',
        'plan4StudentLoanRate' => 'plan4StudentLoanRate',
        'postGradLoanThreshold' => 'postGradLoanThreshold',
        'postGradLoanRate' => 'postGradLoanRate',
        'deaProtectedEarnings' => 'deaProtectedEarnings',
        'pensionLowerThreshold' => 'pensionLowerThreshold',
        'pensionAutomaticEnrolment' => 'pensionAutomaticEnrolment',
        'pensionUpperThreshold' => 'pensionUpperThreshold',
        'pensionAeEmployerContribution' => 'pensionAeEmployerContribution',
        'pensionAeEmployeeContribution' => 'pensionAeEmployeeContribution',
        'employmentAllowancePreviousYear' => 'employmentAllowancePreviousYear',
        'employmentAllowance' => 'employmentAllowance',
        'fixedCodes' => 'fixedCodes',
        'scottishFixedCodes' => 'scottishFixedCodes',
        'welshFixedCodes' => 'welshFixedCodes',
        'niRates' => 'niRates',
        'directorsNiRates' => 'directorsNiRates',
        'brackets' => 'brackets',
        'scottishBrackets' => 'scottishBrackets',
        'welshBrackets' => 'welshBrackets',
        'taxCodeChanges' => 'taxCodeChanges',
        'minimumWage' => 'minimumWage',
        'statutoryPay' => 'statutoryPay',
        'loanCharge' => 'loanCharge',
        'carCharge' => 'carCharge',
        'govTalk' => 'govTalk',
        'mileageAllowancePaymentsRates' => 'mileageAllowancePaymentsRates',
        'tieredPensions' => 'tieredPensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxYear' => 'setTaxYear',
        'isPreview' => 'setIsPreview',
        'defaultTaxCode' => 'setDefaultTaxCode',
        'class1ANicsRate' => 'setClass1ANicsRate',
        'lowerEarningsLimit' => 'setLowerEarningsLimit',
        'upperEarningsLimit' => 'setUpperEarningsLimit',
        'primaryThreshold' => 'setPrimaryThreshold',
        'secondaryThreshold' => 'setSecondaryThreshold',
        'upperAccrualPoint' => 'setUpperAccrualPoint',
        'upperSecondaryThreshold' => 'setUpperSecondaryThreshold',
        'apprenticeUpperSecondaryThreshold' => 'setApprenticeUpperSecondaryThreshold',
        'freeportsUpperSecondaryThreshold' => 'setFreeportsUpperSecondaryThreshold',
        'veteransUpperSecondaryThreshold' => 'setVeteransUpperSecondaryThreshold',
        'directorsProratePrimaryThreshold' => 'setDirectorsProratePrimaryThreshold',
        'plan1StudentLoanThreshold' => 'setPlan1StudentLoanThreshold',
        'plan1StudentLoanRate' => 'setPlan1StudentLoanRate',
        'plan2StudentLoanThreshold' => 'setPlan2StudentLoanThreshold',
        'plan2StudentLoanRate' => 'setPlan2StudentLoanRate',
        'plan4StudentLoanThreshold' => 'setPlan4StudentLoanThreshold',
        'plan4StudentLoanRate' => 'setPlan4StudentLoanRate',
        'postGradLoanThreshold' => 'setPostGradLoanThreshold',
        'postGradLoanRate' => 'setPostGradLoanRate',
        'deaProtectedEarnings' => 'setDeaProtectedEarnings',
        'pensionLowerThreshold' => 'setPensionLowerThreshold',
        'pensionAutomaticEnrolment' => 'setPensionAutomaticEnrolment',
        'pensionUpperThreshold' => 'setPensionUpperThreshold',
        'pensionAeEmployerContribution' => 'setPensionAeEmployerContribution',
        'pensionAeEmployeeContribution' => 'setPensionAeEmployeeContribution',
        'employmentAllowancePreviousYear' => 'setEmploymentAllowancePreviousYear',
        'employmentAllowance' => 'setEmploymentAllowance',
        'fixedCodes' => 'setFixedCodes',
        'scottishFixedCodes' => 'setScottishFixedCodes',
        'welshFixedCodes' => 'setWelshFixedCodes',
        'niRates' => 'setNiRates',
        'directorsNiRates' => 'setDirectorsNiRates',
        'brackets' => 'setBrackets',
        'scottishBrackets' => 'setScottishBrackets',
        'welshBrackets' => 'setWelshBrackets',
        'taxCodeChanges' => 'setTaxCodeChanges',
        'minimumWage' => 'setMinimumWage',
        'statutoryPay' => 'setStatutoryPay',
        'loanCharge' => 'setLoanCharge',
        'carCharge' => 'setCarCharge',
        'govTalk' => 'setGovTalk',
        'mileageAllowancePaymentsRates' => 'setMileageAllowancePaymentsRates',
        'tieredPensions' => 'setTieredPensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxYear' => 'getTaxYear',
        'isPreview' => 'getIsPreview',
        'defaultTaxCode' => 'getDefaultTaxCode',
        'class1ANicsRate' => 'getClass1ANicsRate',
        'lowerEarningsLimit' => 'getLowerEarningsLimit',
        'upperEarningsLimit' => 'getUpperEarningsLimit',
        'primaryThreshold' => 'getPrimaryThreshold',
        'secondaryThreshold' => 'getSecondaryThreshold',
        'upperAccrualPoint' => 'getUpperAccrualPoint',
        'upperSecondaryThreshold' => 'getUpperSecondaryThreshold',
        'apprenticeUpperSecondaryThreshold' => 'getApprenticeUpperSecondaryThreshold',
        'freeportsUpperSecondaryThreshold' => 'getFreeportsUpperSecondaryThreshold',
        'veteransUpperSecondaryThreshold' => 'getVeteransUpperSecondaryThreshold',
        'directorsProratePrimaryThreshold' => 'getDirectorsProratePrimaryThreshold',
        'plan1StudentLoanThreshold' => 'getPlan1StudentLoanThreshold',
        'plan1StudentLoanRate' => 'getPlan1StudentLoanRate',
        'plan2StudentLoanThreshold' => 'getPlan2StudentLoanThreshold',
        'plan2StudentLoanRate' => 'getPlan2StudentLoanRate',
        'plan4StudentLoanThreshold' => 'getPlan4StudentLoanThreshold',
        'plan4StudentLoanRate' => 'getPlan4StudentLoanRate',
        'postGradLoanThreshold' => 'getPostGradLoanThreshold',
        'postGradLoanRate' => 'getPostGradLoanRate',
        'deaProtectedEarnings' => 'getDeaProtectedEarnings',
        'pensionLowerThreshold' => 'getPensionLowerThreshold',
        'pensionAutomaticEnrolment' => 'getPensionAutomaticEnrolment',
        'pensionUpperThreshold' => 'getPensionUpperThreshold',
        'pensionAeEmployerContribution' => 'getPensionAeEmployerContribution',
        'pensionAeEmployeeContribution' => 'getPensionAeEmployeeContribution',
        'employmentAllowancePreviousYear' => 'getEmploymentAllowancePreviousYear',
        'employmentAllowance' => 'getEmploymentAllowance',
        'fixedCodes' => 'getFixedCodes',
        'scottishFixedCodes' => 'getScottishFixedCodes',
        'welshFixedCodes' => 'getWelshFixedCodes',
        'niRates' => 'getNiRates',
        'directorsNiRates' => 'getDirectorsNiRates',
        'brackets' => 'getBrackets',
        'scottishBrackets' => 'getScottishBrackets',
        'welshBrackets' => 'getWelshBrackets',
        'taxCodeChanges' => 'getTaxCodeChanges',
        'minimumWage' => 'getMinimumWage',
        'statutoryPay' => 'getStatutoryPay',
        'loanCharge' => 'getLoanCharge',
        'carCharge' => 'getCarCharge',
        'govTalk' => 'getGovTalk',
        'mileageAllowancePaymentsRates' => 'getMileageAllowancePaymentsRates',
        'tieredPensions' => 'getTieredPensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('isPreview', $data ?? [], null);
        $this->setIfExists('defaultTaxCode', $data ?? [], null);
        $this->setIfExists('class1ANicsRate', $data ?? [], null);
        $this->setIfExists('lowerEarningsLimit', $data ?? [], null);
        $this->setIfExists('upperEarningsLimit', $data ?? [], null);
        $this->setIfExists('primaryThreshold', $data ?? [], null);
        $this->setIfExists('secondaryThreshold', $data ?? [], null);
        $this->setIfExists('upperAccrualPoint', $data ?? [], null);
        $this->setIfExists('upperSecondaryThreshold', $data ?? [], null);
        $this->setIfExists('apprenticeUpperSecondaryThreshold', $data ?? [], null);
        $this->setIfExists('freeportsUpperSecondaryThreshold', $data ?? [], null);
        $this->setIfExists('veteransUpperSecondaryThreshold', $data ?? [], null);
        $this->setIfExists('directorsProratePrimaryThreshold', $data ?? [], null);
        $this->setIfExists('plan1StudentLoanThreshold', $data ?? [], null);
        $this->setIfExists('plan1StudentLoanRate', $data ?? [], null);
        $this->setIfExists('plan2StudentLoanThreshold', $data ?? [], null);
        $this->setIfExists('plan2StudentLoanRate', $data ?? [], null);
        $this->setIfExists('plan4StudentLoanThreshold', $data ?? [], null);
        $this->setIfExists('plan4StudentLoanRate', $data ?? [], null);
        $this->setIfExists('postGradLoanThreshold', $data ?? [], null);
        $this->setIfExists('postGradLoanRate', $data ?? [], null);
        $this->setIfExists('deaProtectedEarnings', $data ?? [], null);
        $this->setIfExists('pensionLowerThreshold', $data ?? [], null);
        $this->setIfExists('pensionAutomaticEnrolment', $data ?? [], null);
        $this->setIfExists('pensionUpperThreshold', $data ?? [], null);
        $this->setIfExists('pensionAeEmployerContribution', $data ?? [], null);
        $this->setIfExists('pensionAeEmployeeContribution', $data ?? [], null);
        $this->setIfExists('employmentAllowancePreviousYear', $data ?? [], null);
        $this->setIfExists('employmentAllowance', $data ?? [], null);
        $this->setIfExists('fixedCodes', $data ?? [], null);
        $this->setIfExists('scottishFixedCodes', $data ?? [], null);
        $this->setIfExists('welshFixedCodes', $data ?? [], null);
        $this->setIfExists('niRates', $data ?? [], null);
        $this->setIfExists('directorsNiRates', $data ?? [], null);
        $this->setIfExists('brackets', $data ?? [], null);
        $this->setIfExists('scottishBrackets', $data ?? [], null);
        $this->setIfExists('welshBrackets', $data ?? [], null);
        $this->setIfExists('taxCodeChanges', $data ?? [], null);
        $this->setIfExists('minimumWage', $data ?? [], null);
        $this->setIfExists('statutoryPay', $data ?? [], null);
        $this->setIfExists('loanCharge', $data ?? [], null);
        $this->setIfExists('carCharge', $data ?? [], null);
        $this->setIfExists('govTalk', $data ?? [], null);
        $this->setIfExists('mileageAllowancePaymentsRates', $data ?? [], null);
        $this->setIfExists('tieredPensions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxYear
     *
     * @return int|null
     */
    public function getTaxYear(): ?int
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param int|null $taxYear [readonly] The TaxYear for which this configuration applies
     *
     * @return $this
     */
    public function setTaxYear(?int $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets isPreview
     *
     * @return bool|null
     */
    public function getIsPreview(): ?bool
    {
        return $this->container['isPreview'];
    }

    /**
     * Sets isPreview
     *
     * @param bool|null $isPreview [readonly] Indicates that this is a preview of the given years configuration and it shouldn't yet be used for live processing of payroll data.
     *
     * @return $this
     */
    public function setIsPreview(?bool $isPreview): static
    {
        if (is_null($isPreview)) {
            throw new InvalidArgumentException('non-nullable isPreview cannot be null');
        }
        $this->container['isPreview'] = $isPreview;

        return $this;
    }

    /**
     * Gets defaultTaxCode
     *
     * @return string|null
     */
    public function getDefaultTaxCode(): ?string
    {
        return $this->container['defaultTaxCode'];
    }

    /**
     * Sets defaultTaxCode
     *
     * @param string|null $defaultTaxCode [readonly]
     *
     * @return $this
     */
    public function setDefaultTaxCode(?string $defaultTaxCode): static
    {
        if (is_null($defaultTaxCode)) {
            array_push($this->openAPINullablesSetToNull, 'defaultTaxCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultTaxCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultTaxCode'] = $defaultTaxCode;

        return $this;
    }

    /**
     * Gets class1ANicsRate
     *
     * @return \SynergiTech\Staffology\Model\DecimalTaxYearConfigPrimitiveValue|null
     */
    public function getClass1ANicsRate(): ?\SynergiTech\Staffology\Model\DecimalTaxYearConfigPrimitiveValue
    {
        return $this->container['class1ANicsRate'];
    }

    /**
     * Sets class1ANicsRate
     *
     * @param \SynergiTech\Staffology\Model\DecimalTaxYearConfigPrimitiveValue|null $class1ANicsRate class1ANicsRate
     *
     * @return $this
     */
    public function setClass1ANicsRate(?\SynergiTech\Staffology\Model\DecimalTaxYearConfigPrimitiveValue $class1ANicsRate): static
    {
        if (is_null($class1ANicsRate)) {
            throw new InvalidArgumentException('non-nullable class1ANicsRate cannot be null');
        }
        $this->container['class1ANicsRate'] = $class1ANicsRate;

        return $this;
    }

    /**
     * Gets lowerEarningsLimit
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getLowerEarningsLimit(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['lowerEarningsLimit'];
    }

    /**
     * Sets lowerEarningsLimit
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $lowerEarningsLimit lowerEarningsLimit
     *
     * @return $this
     */
    public function setLowerEarningsLimit(?\SynergiTech\Staffology\Model\PeriodValue $lowerEarningsLimit): static
    {
        if (is_null($lowerEarningsLimit)) {
            throw new InvalidArgumentException('non-nullable lowerEarningsLimit cannot be null');
        }
        $this->container['lowerEarningsLimit'] = $lowerEarningsLimit;

        return $this;
    }

    /**
     * Gets upperEarningsLimit
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getUpperEarningsLimit(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['upperEarningsLimit'];
    }

    /**
     * Sets upperEarningsLimit
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $upperEarningsLimit upperEarningsLimit
     *
     * @return $this
     */
    public function setUpperEarningsLimit(?\SynergiTech\Staffology\Model\PeriodValue $upperEarningsLimit): static
    {
        if (is_null($upperEarningsLimit)) {
            throw new InvalidArgumentException('non-nullable upperEarningsLimit cannot be null');
        }
        $this->container['upperEarningsLimit'] = $upperEarningsLimit;

        return $this;
    }

    /**
     * Gets primaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getPrimaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['primaryThreshold'];
    }

    /**
     * Sets primaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $primaryThreshold primaryThreshold
     *
     * @return $this
     */
    public function setPrimaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $primaryThreshold): static
    {
        if (is_null($primaryThreshold)) {
            throw new InvalidArgumentException('non-nullable primaryThreshold cannot be null');
        }
        $this->container['primaryThreshold'] = $primaryThreshold;

        return $this;
    }

    /**
     * Gets secondaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getSecondaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['secondaryThreshold'];
    }

    /**
     * Sets secondaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $secondaryThreshold secondaryThreshold
     *
     * @return $this
     */
    public function setSecondaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $secondaryThreshold): static
    {
        if (is_null($secondaryThreshold)) {
            throw new InvalidArgumentException('non-nullable secondaryThreshold cannot be null');
        }
        $this->container['secondaryThreshold'] = $secondaryThreshold;

        return $this;
    }

    /**
     * Gets upperAccrualPoint
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getUpperAccrualPoint(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['upperAccrualPoint'];
    }

    /**
     * Sets upperAccrualPoint
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $upperAccrualPoint upperAccrualPoint
     *
     * @return $this
     */
    public function setUpperAccrualPoint(?\SynergiTech\Staffology\Model\PeriodValue $upperAccrualPoint): static
    {
        if (is_null($upperAccrualPoint)) {
            throw new InvalidArgumentException('non-nullable upperAccrualPoint cannot be null');
        }
        $this->container['upperAccrualPoint'] = $upperAccrualPoint;

        return $this;
    }

    /**
     * Gets upperSecondaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getUpperSecondaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['upperSecondaryThreshold'];
    }

    /**
     * Sets upperSecondaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $upperSecondaryThreshold upperSecondaryThreshold
     *
     * @return $this
     */
    public function setUpperSecondaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $upperSecondaryThreshold): static
    {
        if (is_null($upperSecondaryThreshold)) {
            throw new InvalidArgumentException('non-nullable upperSecondaryThreshold cannot be null');
        }
        $this->container['upperSecondaryThreshold'] = $upperSecondaryThreshold;

        return $this;
    }

    /**
     * Gets apprenticeUpperSecondaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getApprenticeUpperSecondaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['apprenticeUpperSecondaryThreshold'];
    }

    /**
     * Sets apprenticeUpperSecondaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $apprenticeUpperSecondaryThreshold apprenticeUpperSecondaryThreshold
     *
     * @return $this
     */
    public function setApprenticeUpperSecondaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $apprenticeUpperSecondaryThreshold): static
    {
        if (is_null($apprenticeUpperSecondaryThreshold)) {
            throw new InvalidArgumentException('non-nullable apprenticeUpperSecondaryThreshold cannot be null');
        }
        $this->container['apprenticeUpperSecondaryThreshold'] = $apprenticeUpperSecondaryThreshold;

        return $this;
    }

    /**
     * Gets freeportsUpperSecondaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getFreeportsUpperSecondaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['freeportsUpperSecondaryThreshold'];
    }

    /**
     * Sets freeportsUpperSecondaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $freeportsUpperSecondaryThreshold freeportsUpperSecondaryThreshold
     *
     * @return $this
     */
    public function setFreeportsUpperSecondaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $freeportsUpperSecondaryThreshold): static
    {
        if (is_null($freeportsUpperSecondaryThreshold)) {
            throw new InvalidArgumentException('non-nullable freeportsUpperSecondaryThreshold cannot be null');
        }
        $this->container['freeportsUpperSecondaryThreshold'] = $freeportsUpperSecondaryThreshold;

        return $this;
    }

    /**
     * Gets veteransUpperSecondaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getVeteransUpperSecondaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['veteransUpperSecondaryThreshold'];
    }

    /**
     * Sets veteransUpperSecondaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $veteransUpperSecondaryThreshold veteransUpperSecondaryThreshold
     *
     * @return $this
     */
    public function setVeteransUpperSecondaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $veteransUpperSecondaryThreshold): static
    {
        if (is_null($veteransUpperSecondaryThreshold)) {
            throw new InvalidArgumentException('non-nullable veteransUpperSecondaryThreshold cannot be null');
        }
        $this->container['veteransUpperSecondaryThreshold'] = $veteransUpperSecondaryThreshold;

        return $this;
    }

    /**
     * Gets directorsProratePrimaryThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getDirectorsProratePrimaryThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['directorsProratePrimaryThreshold'];
    }

    /**
     * Sets directorsProratePrimaryThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $directorsProratePrimaryThreshold directorsProratePrimaryThreshold
     *
     * @return $this
     */
    public function setDirectorsProratePrimaryThreshold(?\SynergiTech\Staffology\Model\PeriodValue $directorsProratePrimaryThreshold): static
    {
        if (is_null($directorsProratePrimaryThreshold)) {
            throw new InvalidArgumentException('non-nullable directorsProratePrimaryThreshold cannot be null');
        }
        $this->container['directorsProratePrimaryThreshold'] = $directorsProratePrimaryThreshold;

        return $this;
    }

    /**
     * Gets plan1StudentLoanThreshold
     *
     * @return float|null
     */
    public function getPlan1StudentLoanThreshold(): ?float
    {
        return $this->container['plan1StudentLoanThreshold'];
    }

    /**
     * Sets plan1StudentLoanThreshold
     *
     * @param float|null $plan1StudentLoanThreshold [readonly]
     *
     * @return $this
     */
    public function setPlan1StudentLoanThreshold(?float $plan1StudentLoanThreshold): static
    {
        if (is_null($plan1StudentLoanThreshold)) {
            throw new InvalidArgumentException('non-nullable plan1StudentLoanThreshold cannot be null');
        }
        $this->container['plan1StudentLoanThreshold'] = $plan1StudentLoanThreshold;

        return $this;
    }

    /**
     * Gets plan1StudentLoanRate
     *
     * @return float|null
     */
    public function getPlan1StudentLoanRate(): ?float
    {
        return $this->container['plan1StudentLoanRate'];
    }

    /**
     * Sets plan1StudentLoanRate
     *
     * @param float|null $plan1StudentLoanRate [readonly]
     *
     * @return $this
     */
    public function setPlan1StudentLoanRate(?float $plan1StudentLoanRate): static
    {
        if (is_null($plan1StudentLoanRate)) {
            throw new InvalidArgumentException('non-nullable plan1StudentLoanRate cannot be null');
        }
        $this->container['plan1StudentLoanRate'] = $plan1StudentLoanRate;

        return $this;
    }

    /**
     * Gets plan2StudentLoanThreshold
     *
     * @return float|null
     */
    public function getPlan2StudentLoanThreshold(): ?float
    {
        return $this->container['plan2StudentLoanThreshold'];
    }

    /**
     * Sets plan2StudentLoanThreshold
     *
     * @param float|null $plan2StudentLoanThreshold [readonly]
     *
     * @return $this
     */
    public function setPlan2StudentLoanThreshold(?float $plan2StudentLoanThreshold): static
    {
        if (is_null($plan2StudentLoanThreshold)) {
            throw new InvalidArgumentException('non-nullable plan2StudentLoanThreshold cannot be null');
        }
        $this->container['plan2StudentLoanThreshold'] = $plan2StudentLoanThreshold;

        return $this;
    }

    /**
     * Gets plan2StudentLoanRate
     *
     * @return float|null
     */
    public function getPlan2StudentLoanRate(): ?float
    {
        return $this->container['plan2StudentLoanRate'];
    }

    /**
     * Sets plan2StudentLoanRate
     *
     * @param float|null $plan2StudentLoanRate [readonly]
     *
     * @return $this
     */
    public function setPlan2StudentLoanRate(?float $plan2StudentLoanRate): static
    {
        if (is_null($plan2StudentLoanRate)) {
            throw new InvalidArgumentException('non-nullable plan2StudentLoanRate cannot be null');
        }
        $this->container['plan2StudentLoanRate'] = $plan2StudentLoanRate;

        return $this;
    }

    /**
     * Gets plan4StudentLoanThreshold
     *
     * @return float|null
     */
    public function getPlan4StudentLoanThreshold(): ?float
    {
        return $this->container['plan4StudentLoanThreshold'];
    }

    /**
     * Sets plan4StudentLoanThreshold
     *
     * @param float|null $plan4StudentLoanThreshold [readonly]
     *
     * @return $this
     */
    public function setPlan4StudentLoanThreshold(?float $plan4StudentLoanThreshold): static
    {
        if (is_null($plan4StudentLoanThreshold)) {
            throw new InvalidArgumentException('non-nullable plan4StudentLoanThreshold cannot be null');
        }
        $this->container['plan4StudentLoanThreshold'] = $plan4StudentLoanThreshold;

        return $this;
    }

    /**
     * Gets plan4StudentLoanRate
     *
     * @return float|null
     */
    public function getPlan4StudentLoanRate(): ?float
    {
        return $this->container['plan4StudentLoanRate'];
    }

    /**
     * Sets plan4StudentLoanRate
     *
     * @param float|null $plan4StudentLoanRate [readonly]
     *
     * @return $this
     */
    public function setPlan4StudentLoanRate(?float $plan4StudentLoanRate): static
    {
        if (is_null($plan4StudentLoanRate)) {
            throw new InvalidArgumentException('non-nullable plan4StudentLoanRate cannot be null');
        }
        $this->container['plan4StudentLoanRate'] = $plan4StudentLoanRate;

        return $this;
    }

    /**
     * Gets postGradLoanThreshold
     *
     * @return float|null
     */
    public function getPostGradLoanThreshold(): ?float
    {
        return $this->container['postGradLoanThreshold'];
    }

    /**
     * Sets postGradLoanThreshold
     *
     * @param float|null $postGradLoanThreshold [readonly]
     *
     * @return $this
     */
    public function setPostGradLoanThreshold(?float $postGradLoanThreshold): static
    {
        if (is_null($postGradLoanThreshold)) {
            throw new InvalidArgumentException('non-nullable postGradLoanThreshold cannot be null');
        }
        $this->container['postGradLoanThreshold'] = $postGradLoanThreshold;

        return $this;
    }

    /**
     * Gets postGradLoanRate
     *
     * @return float|null
     */
    public function getPostGradLoanRate(): ?float
    {
        return $this->container['postGradLoanRate'];
    }

    /**
     * Sets postGradLoanRate
     *
     * @param float|null $postGradLoanRate [readonly]
     *
     * @return $this
     */
    public function setPostGradLoanRate(?float $postGradLoanRate): static
    {
        if (is_null($postGradLoanRate)) {
            throw new InvalidArgumentException('non-nullable postGradLoanRate cannot be null');
        }
        $this->container['postGradLoanRate'] = $postGradLoanRate;

        return $this;
    }

    /**
     * Gets deaProtectedEarnings
     *
     * @return float|null
     */
    public function getDeaProtectedEarnings(): ?float
    {
        return $this->container['deaProtectedEarnings'];
    }

    /**
     * Sets deaProtectedEarnings
     *
     * @param float|null $deaProtectedEarnings [readonly]
     *
     * @return $this
     */
    public function setDeaProtectedEarnings(?float $deaProtectedEarnings): static
    {
        if (is_null($deaProtectedEarnings)) {
            throw new InvalidArgumentException('non-nullable deaProtectedEarnings cannot be null');
        }
        $this->container['deaProtectedEarnings'] = $deaProtectedEarnings;

        return $this;
    }

    /**
     * Gets pensionLowerThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getPensionLowerThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['pensionLowerThreshold'];
    }

    /**
     * Sets pensionLowerThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $pensionLowerThreshold pensionLowerThreshold
     *
     * @return $this
     */
    public function setPensionLowerThreshold(?\SynergiTech\Staffology\Model\PeriodValue $pensionLowerThreshold): static
    {
        if (is_null($pensionLowerThreshold)) {
            throw new InvalidArgumentException('non-nullable pensionLowerThreshold cannot be null');
        }
        $this->container['pensionLowerThreshold'] = $pensionLowerThreshold;

        return $this;
    }

    /**
     * Gets pensionAutomaticEnrolment
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getPensionAutomaticEnrolment(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['pensionAutomaticEnrolment'];
    }

    /**
     * Sets pensionAutomaticEnrolment
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $pensionAutomaticEnrolment pensionAutomaticEnrolment
     *
     * @return $this
     */
    public function setPensionAutomaticEnrolment(?\SynergiTech\Staffology\Model\PeriodValue $pensionAutomaticEnrolment): static
    {
        if (is_null($pensionAutomaticEnrolment)) {
            throw new InvalidArgumentException('non-nullable pensionAutomaticEnrolment cannot be null');
        }
        $this->container['pensionAutomaticEnrolment'] = $pensionAutomaticEnrolment;

        return $this;
    }

    /**
     * Gets pensionUpperThreshold
     *
     * @return \SynergiTech\Staffology\Model\PeriodValue|null
     */
    public function getPensionUpperThreshold(): ?\SynergiTech\Staffology\Model\PeriodValue
    {
        return $this->container['pensionUpperThreshold'];
    }

    /**
     * Sets pensionUpperThreshold
     *
     * @param \SynergiTech\Staffology\Model\PeriodValue|null $pensionUpperThreshold pensionUpperThreshold
     *
     * @return $this
     */
    public function setPensionUpperThreshold(?\SynergiTech\Staffology\Model\PeriodValue $pensionUpperThreshold): static
    {
        if (is_null($pensionUpperThreshold)) {
            throw new InvalidArgumentException('non-nullable pensionUpperThreshold cannot be null');
        }
        $this->container['pensionUpperThreshold'] = $pensionUpperThreshold;

        return $this;
    }

    /**
     * Gets pensionAeEmployerContribution
     *
     * @return float|null
     */
    public function getPensionAeEmployerContribution(): ?float
    {
        return $this->container['pensionAeEmployerContribution'];
    }

    /**
     * Sets pensionAeEmployerContribution
     *
     * @param float|null $pensionAeEmployerContribution [readonly]
     *
     * @return $this
     */
    public function setPensionAeEmployerContribution(?float $pensionAeEmployerContribution): static
    {
        if (is_null($pensionAeEmployerContribution)) {
            throw new InvalidArgumentException('non-nullable pensionAeEmployerContribution cannot be null');
        }
        $this->container['pensionAeEmployerContribution'] = $pensionAeEmployerContribution;

        return $this;
    }

    /**
     * Gets pensionAeEmployeeContribution
     *
     * @return float|null
     */
    public function getPensionAeEmployeeContribution(): ?float
    {
        return $this->container['pensionAeEmployeeContribution'];
    }

    /**
     * Sets pensionAeEmployeeContribution
     *
     * @param float|null $pensionAeEmployeeContribution [readonly]
     *
     * @return $this
     */
    public function setPensionAeEmployeeContribution(?float $pensionAeEmployeeContribution): static
    {
        if (is_null($pensionAeEmployeeContribution)) {
            throw new InvalidArgumentException('non-nullable pensionAeEmployeeContribution cannot be null');
        }
        $this->container['pensionAeEmployeeContribution'] = $pensionAeEmployeeContribution;

        return $this;
    }

    /**
     * Gets employmentAllowancePreviousYear
     *
     * @return float|null
     */
    public function getEmploymentAllowancePreviousYear(): ?float
    {
        return $this->container['employmentAllowancePreviousYear'];
    }

    /**
     * Sets employmentAllowancePreviousYear
     *
     * @param float|null $employmentAllowancePreviousYear [readonly]
     *
     * @return $this
     */
    public function setEmploymentAllowancePreviousYear(?float $employmentAllowancePreviousYear): static
    {
        if (is_null($employmentAllowancePreviousYear)) {
            throw new InvalidArgumentException('non-nullable employmentAllowancePreviousYear cannot be null');
        }
        $this->container['employmentAllowancePreviousYear'] = $employmentAllowancePreviousYear;

        return $this;
    }

    /**
     * Gets employmentAllowance
     *
     * @return float|null
     */
    public function getEmploymentAllowance(): ?float
    {
        return $this->container['employmentAllowance'];
    }

    /**
     * Sets employmentAllowance
     *
     * @param float|null $employmentAllowance [readonly]
     *
     * @return $this
     */
    public function setEmploymentAllowance(?float $employmentAllowance): static
    {
        if (is_null($employmentAllowance)) {
            throw new InvalidArgumentException('non-nullable employmentAllowance cannot be null');
        }
        $this->container['employmentAllowance'] = $employmentAllowance;

        return $this;
    }

    /**
     * Gets fixedCodes
     *
     * @return \SynergiTech\Staffology\Model\FixedCode[]|null
     */
    public function getFixedCodes(): ?array
    {
        return $this->container['fixedCodes'];
    }

    /**
     * Sets fixedCodes
     *
     * @param \SynergiTech\Staffology\Model\FixedCode[]|null $fixedCodes [readonly]
     *
     * @return $this
     */
    public function setFixedCodes(?array $fixedCodes): static
    {
        if (is_null($fixedCodes)) {
            array_push($this->openAPINullablesSetToNull, 'fixedCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixedCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixedCodes'] = $fixedCodes;

        return $this;
    }

    /**
     * Gets scottishFixedCodes
     *
     * @return \SynergiTech\Staffology\Model\FixedCode[]|null
     */
    public function getScottishFixedCodes(): ?array
    {
        return $this->container['scottishFixedCodes'];
    }

    /**
     * Sets scottishFixedCodes
     *
     * @param \SynergiTech\Staffology\Model\FixedCode[]|null $scottishFixedCodes [readonly]
     *
     * @return $this
     */
    public function setScottishFixedCodes(?array $scottishFixedCodes): static
    {
        if (is_null($scottishFixedCodes)) {
            array_push($this->openAPINullablesSetToNull, 'scottishFixedCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scottishFixedCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scottishFixedCodes'] = $scottishFixedCodes;

        return $this;
    }

    /**
     * Gets welshFixedCodes
     *
     * @return \SynergiTech\Staffology\Model\FixedCode[]|null
     */
    public function getWelshFixedCodes(): ?array
    {
        return $this->container['welshFixedCodes'];
    }

    /**
     * Sets welshFixedCodes
     *
     * @param \SynergiTech\Staffology\Model\FixedCode[]|null $welshFixedCodes [readonly]
     *
     * @return $this
     */
    public function setWelshFixedCodes(?array $welshFixedCodes): static
    {
        if (is_null($welshFixedCodes)) {
            array_push($this->openAPINullablesSetToNull, 'welshFixedCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('welshFixedCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['welshFixedCodes'] = $welshFixedCodes;

        return $this;
    }

    /**
     * Gets niRates
     *
     * @return \SynergiTech\Staffology\Model\NationalInsuranceCode[]|null
     */
    public function getNiRates(): ?array
    {
        return $this->container['niRates'];
    }

    /**
     * Sets niRates
     *
     * @param \SynergiTech\Staffology\Model\NationalInsuranceCode[]|null $niRates [readonly]
     *
     * @return $this
     */
    public function setNiRates(?array $niRates): static
    {
        if (is_null($niRates)) {
            array_push($this->openAPINullablesSetToNull, 'niRates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('niRates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['niRates'] = $niRates;

        return $this;
    }

    /**
     * Gets directorsNiRates
     *
     * @return \SynergiTech\Staffology\Model\NationalInsuranceCode[]|null
     */
    public function getDirectorsNiRates(): ?array
    {
        return $this->container['directorsNiRates'];
    }

    /**
     * Sets directorsNiRates
     *
     * @param \SynergiTech\Staffology\Model\NationalInsuranceCode[]|null $directorsNiRates [readonly]
     *
     * @return $this
     */
    public function setDirectorsNiRates(?array $directorsNiRates): static
    {
        if (is_null($directorsNiRates)) {
            array_push($this->openAPINullablesSetToNull, 'directorsNiRates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directorsNiRates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directorsNiRates'] = $directorsNiRates;

        return $this;
    }

    /**
     * Gets brackets
     *
     * @return \SynergiTech\Staffology\Model\TaxBracket[]|null
     */
    public function getBrackets(): ?array
    {
        return $this->container['brackets'];
    }

    /**
     * Sets brackets
     *
     * @param \SynergiTech\Staffology\Model\TaxBracket[]|null $brackets [readonly]
     *
     * @return $this
     */
    public function setBrackets(?array $brackets): static
    {
        if (is_null($brackets)) {
            array_push($this->openAPINullablesSetToNull, 'brackets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brackets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brackets'] = $brackets;

        return $this;
    }

    /**
     * Gets scottishBrackets
     *
     * @return \SynergiTech\Staffology\Model\TaxBracket[]|null
     */
    public function getScottishBrackets(): ?array
    {
        return $this->container['scottishBrackets'];
    }

    /**
     * Sets scottishBrackets
     *
     * @param \SynergiTech\Staffology\Model\TaxBracket[]|null $scottishBrackets [readonly]
     *
     * @return $this
     */
    public function setScottishBrackets(?array $scottishBrackets): static
    {
        if (is_null($scottishBrackets)) {
            array_push($this->openAPINullablesSetToNull, 'scottishBrackets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scottishBrackets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scottishBrackets'] = $scottishBrackets;

        return $this;
    }

    /**
     * Gets welshBrackets
     *
     * @return \SynergiTech\Staffology\Model\TaxBracket[]|null
     */
    public function getWelshBrackets(): ?array
    {
        return $this->container['welshBrackets'];
    }

    /**
     * Sets welshBrackets
     *
     * @param \SynergiTech\Staffology\Model\TaxBracket[]|null $welshBrackets [readonly]
     *
     * @return $this
     */
    public function setWelshBrackets(?array $welshBrackets): static
    {
        if (is_null($welshBrackets)) {
            array_push($this->openAPINullablesSetToNull, 'welshBrackets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('welshBrackets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['welshBrackets'] = $welshBrackets;

        return $this;
    }

    /**
     * Gets taxCodeChanges
     *
     * @return \SynergiTech\Staffology\Model\TaxCodeChange[]|null
     */
    public function getTaxCodeChanges(): ?array
    {
        return $this->container['taxCodeChanges'];
    }

    /**
     * Sets taxCodeChanges
     *
     * @param \SynergiTech\Staffology\Model\TaxCodeChange[]|null $taxCodeChanges [readonly]
     *
     * @return $this
     */
    public function setTaxCodeChanges(?array $taxCodeChanges): static
    {
        if (is_null($taxCodeChanges)) {
            array_push($this->openAPINullablesSetToNull, 'taxCodeChanges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxCodeChanges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxCodeChanges'] = $taxCodeChanges;

        return $this;
    }

    /**
     * Gets minimumWage
     *
     * @return \SynergiTech\Staffology\Model\NationalMinimumWage[]|null
     */
    public function getMinimumWage(): ?array
    {
        return $this->container['minimumWage'];
    }

    /**
     * Sets minimumWage
     *
     * @param \SynergiTech\Staffology\Model\NationalMinimumWage[]|null $minimumWage [readonly]
     *
     * @return $this
     */
    public function setMinimumWage(?array $minimumWage): static
    {
        if (is_null($minimumWage)) {
            array_push($this->openAPINullablesSetToNull, 'minimumWage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimumWage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimumWage'] = $minimumWage;

        return $this;
    }

    /**
     * Gets statutoryPay
     *
     * @return \SynergiTech\Staffology\Model\StatutoryPay|null
     */
    public function getStatutoryPay(): ?\SynergiTech\Staffology\Model\StatutoryPay
    {
        return $this->container['statutoryPay'];
    }

    /**
     * Sets statutoryPay
     *
     * @param \SynergiTech\Staffology\Model\StatutoryPay|null $statutoryPay statutoryPay
     *
     * @return $this
     */
    public function setStatutoryPay(?\SynergiTech\Staffology\Model\StatutoryPay $statutoryPay): static
    {
        if (is_null($statutoryPay)) {
            throw new InvalidArgumentException('non-nullable statutoryPay cannot be null');
        }
        $this->container['statutoryPay'] = $statutoryPay;

        return $this;
    }

    /**
     * Gets loanCharge
     *
     * @return \SynergiTech\Staffology\Model\LoanCharge|null
     */
    public function getLoanCharge(): ?\SynergiTech\Staffology\Model\LoanCharge
    {
        return $this->container['loanCharge'];
    }

    /**
     * Sets loanCharge
     *
     * @param \SynergiTech\Staffology\Model\LoanCharge|null $loanCharge loanCharge
     *
     * @return $this
     */
    public function setLoanCharge(?\SynergiTech\Staffology\Model\LoanCharge $loanCharge): static
    {
        if (is_null($loanCharge)) {
            throw new InvalidArgumentException('non-nullable loanCharge cannot be null');
        }
        $this->container['loanCharge'] = $loanCharge;

        return $this;
    }

    /**
     * Gets carCharge
     *
     * @return \SynergiTech\Staffology\Model\CarCharge|null
     */
    public function getCarCharge(): ?\SynergiTech\Staffology\Model\CarCharge
    {
        return $this->container['carCharge'];
    }

    /**
     * Sets carCharge
     *
     * @param \SynergiTech\Staffology\Model\CarCharge|null $carCharge carCharge
     *
     * @return $this
     */
    public function setCarCharge(?\SynergiTech\Staffology\Model\CarCharge $carCharge): static
    {
        if (is_null($carCharge)) {
            throw new InvalidArgumentException('non-nullable carCharge cannot be null');
        }
        $this->container['carCharge'] = $carCharge;

        return $this;
    }

    /**
     * Gets govTalk
     *
     * @return \SynergiTech\Staffology\Model\GovTalk|null
     */
    public function getGovTalk(): ?\SynergiTech\Staffology\Model\GovTalk
    {
        return $this->container['govTalk'];
    }

    /**
     * Sets govTalk
     *
     * @param \SynergiTech\Staffology\Model\GovTalk|null $govTalk govTalk
     *
     * @return $this
     */
    public function setGovTalk(?\SynergiTech\Staffology\Model\GovTalk $govTalk): static
    {
        if (is_null($govTalk)) {
            throw new InvalidArgumentException('non-nullable govTalk cannot be null');
        }
        $this->container['govTalk'] = $govTalk;

        return $this;
    }

    /**
     * Gets mileageAllowancePaymentsRates
     *
     * @return \SynergiTech\Staffology\Model\MileageAllowancePaymentsRate[]|null
     */
    public function getMileageAllowancePaymentsRates(): ?array
    {
        return $this->container['mileageAllowancePaymentsRates'];
    }

    /**
     * Sets mileageAllowancePaymentsRates
     *
     * @param \SynergiTech\Staffology\Model\MileageAllowancePaymentsRate[]|null $mileageAllowancePaymentsRates [readonly]
     *
     * @return $this
     */
    public function setMileageAllowancePaymentsRates(?array $mileageAllowancePaymentsRates): static
    {
        if (is_null($mileageAllowancePaymentsRates)) {
            array_push($this->openAPINullablesSetToNull, 'mileageAllowancePaymentsRates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mileageAllowancePaymentsRates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mileageAllowancePaymentsRates'] = $mileageAllowancePaymentsRates;

        return $this;
    }

    /**
     * Gets tieredPensions
     *
     * @return \SynergiTech\Staffology\Model\TieredPension[]|null
     */
    public function getTieredPensions(): ?array
    {
        return $this->container['tieredPensions'];
    }

    /**
     * Sets tieredPensions
     *
     * @param \SynergiTech\Staffology\Model\TieredPension[]|null $tieredPensions [readonly]
     *
     * @return $this
     */
    public function setTieredPensions(?array $tieredPensions): static
    {
        if (is_null($tieredPensions)) {
            array_push($this->openAPINullablesSetToNull, 'tieredPensions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tieredPensions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tieredPensions'] = $tieredPensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


