<?php
/**
 * ContractAutoEnrolmentResponse
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractAutoEnrolmentResponse Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractAutoEnrolmentResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.AutoEnrolmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'state' => '\SynergiTech\Staffology\Model\AeEmployeeState',
        'stateDate' => '\DateTime',
        'postponementDate' => '\DateTime',
        'lastAssessment' => '\SynergiTech\Staffology\Model\ContractAeAssessmentResponse',
        'ukWorker' => '\SynergiTech\Staffology\Model\AeUKWorker',
        'daysToDeferAssessment' => 'int',
        'deferByMonthsNotDays' => 'bool',
        'exempt' => 'bool',
        'aeExclusionCode' => '\SynergiTech\Staffology\Model\AeExclusionCode',
        'aePostponementLetterSent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'state' => null,
        'stateDate' => 'date',
        'postponementDate' => 'date',
        'lastAssessment' => null,
        'ukWorker' => null,
        'daysToDeferAssessment' => 'int32',
        'deferByMonthsNotDays' => null,
        'exempt' => null,
        'aeExclusionCode' => null,
        'aePostponementLetterSent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'state' => false,
        'stateDate' => true,
        'postponementDate' => true,
        'lastAssessment' => false,
        'ukWorker' => false,
        'daysToDeferAssessment' => false,
        'deferByMonthsNotDays' => false,
        'exempt' => false,
        'aeExclusionCode' => false,
        'aePostponementLetterSent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'state' => 'state',
        'stateDate' => 'stateDate',
        'postponementDate' => 'postponementDate',
        'lastAssessment' => 'lastAssessment',
        'ukWorker' => 'ukWorker',
        'daysToDeferAssessment' => 'daysToDeferAssessment',
        'deferByMonthsNotDays' => 'deferByMonthsNotDays',
        'exempt' => 'exempt',
        'aeExclusionCode' => 'aeExclusionCode',
        'aePostponementLetterSent' => 'aePostponementLetterSent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'state' => 'setState',
        'stateDate' => 'setStateDate',
        'postponementDate' => 'setPostponementDate',
        'lastAssessment' => 'setLastAssessment',
        'ukWorker' => 'setUkWorker',
        'daysToDeferAssessment' => 'setDaysToDeferAssessment',
        'deferByMonthsNotDays' => 'setDeferByMonthsNotDays',
        'exempt' => 'setExempt',
        'aeExclusionCode' => 'setAeExclusionCode',
        'aePostponementLetterSent' => 'setAePostponementLetterSent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'state' => 'getState',
        'stateDate' => 'getStateDate',
        'postponementDate' => 'getPostponementDate',
        'lastAssessment' => 'getLastAssessment',
        'ukWorker' => 'getUkWorker',
        'daysToDeferAssessment' => 'getDaysToDeferAssessment',
        'deferByMonthsNotDays' => 'getDeferByMonthsNotDays',
        'exempt' => 'getExempt',
        'aeExclusionCode' => 'getAeExclusionCode',
        'aePostponementLetterSent' => 'getAePostponementLetterSent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('stateDate', $data ?? [], null);
        $this->setIfExists('postponementDate', $data ?? [], null);
        $this->setIfExists('lastAssessment', $data ?? [], null);
        $this->setIfExists('ukWorker', $data ?? [], null);
        $this->setIfExists('daysToDeferAssessment', $data ?? [], null);
        $this->setIfExists('deferByMonthsNotDays', $data ?? [], null);
        $this->setIfExists('exempt', $data ?? [], null);
        $this->setIfExists('aeExclusionCode', $data ?? [], null);
        $this->setIfExists('aePostponementLetterSent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state
     *
     * @return \SynergiTech\Staffology\Model\AeEmployeeState|null
     */
    public function getState(): ?\SynergiTech\Staffology\Model\AeEmployeeState
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SynergiTech\Staffology\Model\AeEmployeeState|null $state state
     *
     * @return $this
     */
    public function setState(?\SynergiTech\Staffology\Model\AeEmployeeState $state): static
    {
        if (is_null($state)) {
            throw new InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets stateDate
     *
     * @return \DateTime|null
     */
    public function getStateDate(): ?\DateTime
    {
        return $this->container['stateDate'];
    }

    /**
     * Sets stateDate
     *
     * @param \DateTime|null $stateDate stateDate
     *
     * @return $this
     */
    public function setStateDate(?\DateTime $stateDate): static
    {
        if (is_null($stateDate)) {
            array_push($this->openAPINullablesSetToNull, 'stateDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stateDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stateDate'] = $stateDate;

        return $this;
    }

    /**
     * Gets postponementDate
     *
     * @return \DateTime|null
     */
    public function getPostponementDate(): ?\DateTime
    {
        return $this->container['postponementDate'];
    }

    /**
     * Sets postponementDate
     *
     * @param \DateTime|null $postponementDate [readonly] If a value is present, then employee wont be enrolled on an AE Pension until after this date.  This is automatically set to a date if the employee is deemed to be an EligibleJobHolder, but the employer has set a Postponement period and this value is currently null  This is automatically set to null if it already has a value and the employee is deemed NOT to be an EligibleJobHolder - ie, they previously qualified but now do not.
     *
     * @return $this
     */
    public function setPostponementDate(?\DateTime $postponementDate): static
    {
        if (is_null($postponementDate)) {
            array_push($this->openAPINullablesSetToNull, 'postponementDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postponementDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postponementDate'] = $postponementDate;

        return $this;
    }

    /**
     * Gets lastAssessment
     *
     * @return \SynergiTech\Staffology\Model\ContractAeAssessmentResponse|null
     */
    public function getLastAssessment(): ?\SynergiTech\Staffology\Model\ContractAeAssessmentResponse
    {
        return $this->container['lastAssessment'];
    }

    /**
     * Sets lastAssessment
     *
     * @param \SynergiTech\Staffology\Model\ContractAeAssessmentResponse|null $lastAssessment lastAssessment
     *
     * @return $this
     */
    public function setLastAssessment(?\SynergiTech\Staffology\Model\ContractAeAssessmentResponse $lastAssessment): static
    {
        if (is_null($lastAssessment)) {
            throw new InvalidArgumentException('non-nullable lastAssessment cannot be null');
        }
        $this->container['lastAssessment'] = $lastAssessment;

        return $this;
    }

    /**
     * Gets ukWorker
     *
     * @return \SynergiTech\Staffology\Model\AeUKWorker|null
     */
    public function getUkWorker(): ?\SynergiTech\Staffology\Model\AeUKWorker
    {
        return $this->container['ukWorker'];
    }

    /**
     * Sets ukWorker
     *
     * @param \SynergiTech\Staffology\Model\AeUKWorker|null $ukWorker ukWorker
     *
     * @return $this
     */
    public function setUkWorker(?\SynergiTech\Staffology\Model\AeUKWorker $ukWorker): static
    {
        if (is_null($ukWorker)) {
            throw new InvalidArgumentException('non-nullable ukWorker cannot be null');
        }
        $this->container['ukWorker'] = $ukWorker;

        return $this;
    }

    /**
     * Gets daysToDeferAssessment
     *
     * @return int|null
     */
    public function getDaysToDeferAssessment(): ?int
    {
        return $this->container['daysToDeferAssessment'];
    }

    /**
     * Sets daysToDeferAssessment
     *
     * @param int|null $daysToDeferAssessment The number of days, if any, to defer assessment of this employee.  You're allowed to defer assessment of new employees by up to 3 months.
     *
     * @return $this
     */
    public function setDaysToDeferAssessment(?int $daysToDeferAssessment): static
    {
        if (is_null($daysToDeferAssessment)) {
            throw new InvalidArgumentException('non-nullable daysToDeferAssessment cannot be null');
        }
        $this->container['daysToDeferAssessment'] = $daysToDeferAssessment;

        return $this;
    }

    /**
     * Gets deferByMonthsNotDays
     *
     * @return bool|null
     */
    public function getDeferByMonthsNotDays(): ?bool
    {
        return $this->container['deferByMonthsNotDays'];
    }

    /**
     * Sets deferByMonthsNotDays
     *
     * @param bool|null $deferByMonthsNotDays If set to true then the value in DaysToDeferAssessment will be treated as a number of months, not a number of days
     *
     * @return $this
     */
    public function setDeferByMonthsNotDays(?bool $deferByMonthsNotDays): static
    {
        if (is_null($deferByMonthsNotDays)) {
            throw new InvalidArgumentException('non-nullable deferByMonthsNotDays cannot be null');
        }
        $this->container['deferByMonthsNotDays'] = $deferByMonthsNotDays;

        return $this;
    }

    /**
     * Gets exempt
     *
     * @return bool|null
     */
    public function getExempt(): ?bool
    {
        return $this->container['exempt'];
    }

    /**
     * Sets exempt
     *
     * @param bool|null $exempt exempt
     *
     * @return $this
     */
    public function setExempt(?bool $exempt): static
    {
        if (is_null($exempt)) {
            throw new InvalidArgumentException('non-nullable exempt cannot be null');
        }
        $this->container['exempt'] = $exempt;

        return $this;
    }

    /**
     * Gets aeExclusionCode
     *
     * @return \SynergiTech\Staffology\Model\AeExclusionCode|null
     */
    public function getAeExclusionCode(): ?\SynergiTech\Staffology\Model\AeExclusionCode
    {
        return $this->container['aeExclusionCode'];
    }

    /**
     * Sets aeExclusionCode
     *
     * @param \SynergiTech\Staffology\Model\AeExclusionCode|null $aeExclusionCode aeExclusionCode
     *
     * @return $this
     */
    public function setAeExclusionCode(?\SynergiTech\Staffology\Model\AeExclusionCode $aeExclusionCode): static
    {
        if (is_null($aeExclusionCode)) {
            throw new InvalidArgumentException('non-nullable aeExclusionCode cannot be null');
        }
        $this->container['aeExclusionCode'] = $aeExclusionCode;

        return $this;
    }

    /**
     * Gets aePostponementLetterSent
     *
     * @return bool|null
     */
    public function getAePostponementLetterSent(): ?bool
    {
        return $this->container['aePostponementLetterSent'];
    }

    /**
     * Sets aePostponementLetterSent
     *
     * @param bool|null $aePostponementLetterSent aePostponementLetterSent
     *
     * @return $this
     */
    public function setAePostponementLetterSent(?bool $aePostponementLetterSent): static
    {
        if (is_null($aePostponementLetterSent)) {
            throw new InvalidArgumentException('non-nullable aePostponementLetterSent cannot be null');
        }
        $this->container['aePostponementLetterSent'] = $aePostponementLetterSent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


