<?php
/**
 * HmrcLiability
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * HmrcLiability Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HmrcLiability implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HmrcLiability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'periodEnding' => '\DateTime',
        'periodComplete' => 'bool',
        'recoverableAmountsEpsCreated' => 'bool',
        'apprenticeshipLevyEpsCreated' => 'bool',
        'payRuns' => '\SynergiTech\Staffology\Model\PayRun[]',
        'tax' => 'float',
        'cisDeductions' => 'float',
        'postgradLoanDeductions' => 'float',
        'studentLoanDeductions' => 'float',
        'employeeNic' => 'float',
        'employerNic' => 'float',
        'realTimeClass1ANic' => 'float',
        'smp' => 'float',
        'smpNic' => 'float',
        'spp' => 'float',
        'sppNic' => 'float',
        'sap' => 'float',
        'sapNic' => 'float',
        'shpp' => 'float',
        'shppNic' => 'float',
        'spbp' => 'float',
        'spbpNic' => 'float',
        'eligibleForEmploymentAllowance' => 'bool',
        'employmentAllowanceClaim' => 'float',
        'employmentAllowanceClaimAuto' => 'bool',
        'liableForApprenticeshipLevy' => 'bool',
        'apprenticeshipLevy' => 'float',
        'apprenticeshipLevyAuto' => 'bool',
        'liabilityArisingInPeriod' => 'float',
        'dueInPreviousPeriods' => 'float',
        'paidInPreviousPeriods' => 'float',
        'employmentAllowanceClaimInPreviousPeriods' => 'float',
        'receivedFromHMRCToRefundTax' => 'float',
        'receivedFromHMRCToPayStatutoryPay' => 'float',
        'cisDeductionsSuffered' => 'float',
        'adjustment' => 'float',
        'netLiabilityForPeriod' => 'float',
        'totalPaid' => 'float',
        'payments' => '\SynergiTech\Staffology\Model\HmrcPayment[]',
        'fpsList' => '\SynergiTech\Staffology\Model\Item[]',
        'allowLinkedEps' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'taxYear' => null,
        'periodEnding' => 'date',
        'periodComplete' => null,
        'recoverableAmountsEpsCreated' => null,
        'apprenticeshipLevyEpsCreated' => null,
        'payRuns' => null,
        'tax' => 'double',
        'cisDeductions' => 'double',
        'postgradLoanDeductions' => 'double',
        'studentLoanDeductions' => 'double',
        'employeeNic' => 'double',
        'employerNic' => 'double',
        'realTimeClass1ANic' => 'double',
        'smp' => 'double',
        'smpNic' => 'double',
        'spp' => 'double',
        'sppNic' => 'double',
        'sap' => 'double',
        'sapNic' => 'double',
        'shpp' => 'double',
        'shppNic' => 'double',
        'spbp' => 'double',
        'spbpNic' => 'double',
        'eligibleForEmploymentAllowance' => null,
        'employmentAllowanceClaim' => 'double',
        'employmentAllowanceClaimAuto' => null,
        'liableForApprenticeshipLevy' => null,
        'apprenticeshipLevy' => 'double',
        'apprenticeshipLevyAuto' => null,
        'liabilityArisingInPeriod' => 'double',
        'dueInPreviousPeriods' => 'double',
        'paidInPreviousPeriods' => 'double',
        'employmentAllowanceClaimInPreviousPeriods' => 'double',
        'receivedFromHMRCToRefundTax' => 'double',
        'receivedFromHMRCToPayStatutoryPay' => 'double',
        'cisDeductionsSuffered' => 'double',
        'adjustment' => 'double',
        'netLiabilityForPeriod' => 'double',
        'totalPaid' => 'double',
        'payments' => null,
        'fpsList' => null,
        'allowLinkedEps' => null,
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => true,
        'taxYear' => false,
        'periodEnding' => false,
        'periodComplete' => false,
        'recoverableAmountsEpsCreated' => false,
        'apprenticeshipLevyEpsCreated' => false,
        'payRuns' => true,
        'tax' => false,
        'cisDeductions' => false,
        'postgradLoanDeductions' => false,
        'studentLoanDeductions' => false,
        'employeeNic' => false,
        'employerNic' => false,
        'realTimeClass1ANic' => false,
        'smp' => false,
        'smpNic' => false,
        'spp' => false,
        'sppNic' => false,
        'sap' => false,
        'sapNic' => false,
        'shpp' => false,
        'shppNic' => false,
        'spbp' => false,
        'spbpNic' => false,
        'eligibleForEmploymentAllowance' => false,
        'employmentAllowanceClaim' => false,
        'employmentAllowanceClaimAuto' => false,
        'liableForApprenticeshipLevy' => false,
        'apprenticeshipLevy' => false,
        'apprenticeshipLevyAuto' => false,
        'liabilityArisingInPeriod' => false,
        'dueInPreviousPeriods' => false,
        'paidInPreviousPeriods' => false,
        'employmentAllowanceClaimInPreviousPeriods' => false,
        'receivedFromHMRCToRefundTax' => false,
        'receivedFromHMRCToPayStatutoryPay' => false,
        'cisDeductionsSuffered' => false,
        'adjustment' => false,
        'netLiabilityForPeriod' => false,
        'totalPaid' => false,
        'payments' => true,
        'fpsList' => true,
        'allowLinkedEps' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'taxYear' => 'taxYear',
        'periodEnding' => 'periodEnding',
        'periodComplete' => 'periodComplete',
        'recoverableAmountsEpsCreated' => 'recoverableAmountsEpsCreated',
        'apprenticeshipLevyEpsCreated' => 'apprenticeshipLevyEpsCreated',
        'payRuns' => 'payRuns',
        'tax' => 'tax',
        'cisDeductions' => 'cisDeductions',
        'postgradLoanDeductions' => 'postgradLoanDeductions',
        'studentLoanDeductions' => 'studentLoanDeductions',
        'employeeNic' => 'employeeNic',
        'employerNic' => 'employerNic',
        'realTimeClass1ANic' => 'realTimeClass1ANic',
        'smp' => 'smp',
        'smpNic' => 'smpNic',
        'spp' => 'spp',
        'sppNic' => 'sppNic',
        'sap' => 'sap',
        'sapNic' => 'sapNic',
        'shpp' => 'shpp',
        'shppNic' => 'shppNic',
        'spbp' => 'spbp',
        'spbpNic' => 'spbpNic',
        'eligibleForEmploymentAllowance' => 'eligibleForEmploymentAllowance',
        'employmentAllowanceClaim' => 'employmentAllowanceClaim',
        'employmentAllowanceClaimAuto' => 'employmentAllowanceClaimAuto',
        'liableForApprenticeshipLevy' => 'liableForApprenticeshipLevy',
        'apprenticeshipLevy' => 'apprenticeshipLevy',
        'apprenticeshipLevyAuto' => 'apprenticeshipLevyAuto',
        'liabilityArisingInPeriod' => 'liabilityArisingInPeriod',
        'dueInPreviousPeriods' => 'dueInPreviousPeriods',
        'paidInPreviousPeriods' => 'paidInPreviousPeriods',
        'employmentAllowanceClaimInPreviousPeriods' => 'employmentAllowanceClaimInPreviousPeriods',
        'receivedFromHMRCToRefundTax' => 'receivedFromHMRCToRefundTax',
        'receivedFromHMRCToPayStatutoryPay' => 'receivedFromHMRCToPayStatutoryPay',
        'cisDeductionsSuffered' => 'cisDeductionsSuffered',
        'adjustment' => 'adjustment',
        'netLiabilityForPeriod' => 'netLiabilityForPeriod',
        'totalPaid' => 'totalPaid',
        'payments' => 'payments',
        'fpsList' => 'fpsList',
        'allowLinkedEps' => 'allowLinkedEps',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'taxYear' => 'setTaxYear',
        'periodEnding' => 'setPeriodEnding',
        'periodComplete' => 'setPeriodComplete',
        'recoverableAmountsEpsCreated' => 'setRecoverableAmountsEpsCreated',
        'apprenticeshipLevyEpsCreated' => 'setApprenticeshipLevyEpsCreated',
        'payRuns' => 'setPayRuns',
        'tax' => 'setTax',
        'cisDeductions' => 'setCisDeductions',
        'postgradLoanDeductions' => 'setPostgradLoanDeductions',
        'studentLoanDeductions' => 'setStudentLoanDeductions',
        'employeeNic' => 'setEmployeeNic',
        'employerNic' => 'setEmployerNic',
        'realTimeClass1ANic' => 'setRealTimeClass1ANic',
        'smp' => 'setSmp',
        'smpNic' => 'setSmpNic',
        'spp' => 'setSpp',
        'sppNic' => 'setSppNic',
        'sap' => 'setSap',
        'sapNic' => 'setSapNic',
        'shpp' => 'setShpp',
        'shppNic' => 'setShppNic',
        'spbp' => 'setSpbp',
        'spbpNic' => 'setSpbpNic',
        'eligibleForEmploymentAllowance' => 'setEligibleForEmploymentAllowance',
        'employmentAllowanceClaim' => 'setEmploymentAllowanceClaim',
        'employmentAllowanceClaimAuto' => 'setEmploymentAllowanceClaimAuto',
        'liableForApprenticeshipLevy' => 'setLiableForApprenticeshipLevy',
        'apprenticeshipLevy' => 'setApprenticeshipLevy',
        'apprenticeshipLevyAuto' => 'setApprenticeshipLevyAuto',
        'liabilityArisingInPeriod' => 'setLiabilityArisingInPeriod',
        'dueInPreviousPeriods' => 'setDueInPreviousPeriods',
        'paidInPreviousPeriods' => 'setPaidInPreviousPeriods',
        'employmentAllowanceClaimInPreviousPeriods' => 'setEmploymentAllowanceClaimInPreviousPeriods',
        'receivedFromHMRCToRefundTax' => 'setReceivedFromHMRCToRefundTax',
        'receivedFromHMRCToPayStatutoryPay' => 'setReceivedFromHMRCToPayStatutoryPay',
        'cisDeductionsSuffered' => 'setCisDeductionsSuffered',
        'adjustment' => 'setAdjustment',
        'netLiabilityForPeriod' => 'setNetLiabilityForPeriod',
        'totalPaid' => 'setTotalPaid',
        'payments' => 'setPayments',
        'fpsList' => 'setFpsList',
        'allowLinkedEps' => 'setAllowLinkedEps',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'taxYear' => 'getTaxYear',
        'periodEnding' => 'getPeriodEnding',
        'periodComplete' => 'getPeriodComplete',
        'recoverableAmountsEpsCreated' => 'getRecoverableAmountsEpsCreated',
        'apprenticeshipLevyEpsCreated' => 'getApprenticeshipLevyEpsCreated',
        'payRuns' => 'getPayRuns',
        'tax' => 'getTax',
        'cisDeductions' => 'getCisDeductions',
        'postgradLoanDeductions' => 'getPostgradLoanDeductions',
        'studentLoanDeductions' => 'getStudentLoanDeductions',
        'employeeNic' => 'getEmployeeNic',
        'employerNic' => 'getEmployerNic',
        'realTimeClass1ANic' => 'getRealTimeClass1ANic',
        'smp' => 'getSmp',
        'smpNic' => 'getSmpNic',
        'spp' => 'getSpp',
        'sppNic' => 'getSppNic',
        'sap' => 'getSap',
        'sapNic' => 'getSapNic',
        'shpp' => 'getShpp',
        'shppNic' => 'getShppNic',
        'spbp' => 'getSpbp',
        'spbpNic' => 'getSpbpNic',
        'eligibleForEmploymentAllowance' => 'getEligibleForEmploymentAllowance',
        'employmentAllowanceClaim' => 'getEmploymentAllowanceClaim',
        'employmentAllowanceClaimAuto' => 'getEmploymentAllowanceClaimAuto',
        'liableForApprenticeshipLevy' => 'getLiableForApprenticeshipLevy',
        'apprenticeshipLevy' => 'getApprenticeshipLevy',
        'apprenticeshipLevyAuto' => 'getApprenticeshipLevyAuto',
        'liabilityArisingInPeriod' => 'getLiabilityArisingInPeriod',
        'dueInPreviousPeriods' => 'getDueInPreviousPeriods',
        'paidInPreviousPeriods' => 'getPaidInPreviousPeriods',
        'employmentAllowanceClaimInPreviousPeriods' => 'getEmploymentAllowanceClaimInPreviousPeriods',
        'receivedFromHMRCToRefundTax' => 'getReceivedFromHMRCToRefundTax',
        'receivedFromHMRCToPayStatutoryPay' => 'getReceivedFromHMRCToPayStatutoryPay',
        'cisDeductionsSuffered' => 'getCisDeductionsSuffered',
        'adjustment' => 'getAdjustment',
        'netLiabilityForPeriod' => 'getNetLiabilityForPeriod',
        'totalPaid' => 'getTotalPaid',
        'payments' => 'getPayments',
        'fpsList' => 'getFpsList',
        'allowLinkedEps' => 'getAllowLinkedEps',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('periodEnding', $data ?? [], null);
        $this->setIfExists('periodComplete', $data ?? [], null);
        $this->setIfExists('recoverableAmountsEpsCreated', $data ?? [], null);
        $this->setIfExists('apprenticeshipLevyEpsCreated', $data ?? [], null);
        $this->setIfExists('payRuns', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('cisDeductions', $data ?? [], null);
        $this->setIfExists('postgradLoanDeductions', $data ?? [], null);
        $this->setIfExists('studentLoanDeductions', $data ?? [], null);
        $this->setIfExists('employeeNic', $data ?? [], null);
        $this->setIfExists('employerNic', $data ?? [], null);
        $this->setIfExists('realTimeClass1ANic', $data ?? [], null);
        $this->setIfExists('smp', $data ?? [], null);
        $this->setIfExists('smpNic', $data ?? [], null);
        $this->setIfExists('spp', $data ?? [], null);
        $this->setIfExists('sppNic', $data ?? [], null);
        $this->setIfExists('sap', $data ?? [], null);
        $this->setIfExists('sapNic', $data ?? [], null);
        $this->setIfExists('shpp', $data ?? [], null);
        $this->setIfExists('shppNic', $data ?? [], null);
        $this->setIfExists('spbp', $data ?? [], null);
        $this->setIfExists('spbpNic', $data ?? [], null);
        $this->setIfExists('eligibleForEmploymentAllowance', $data ?? [], null);
        $this->setIfExists('employmentAllowanceClaim', $data ?? [], null);
        $this->setIfExists('employmentAllowanceClaimAuto', $data ?? [], null);
        $this->setIfExists('liableForApprenticeshipLevy', $data ?? [], null);
        $this->setIfExists('apprenticeshipLevy', $data ?? [], null);
        $this->setIfExists('apprenticeshipLevyAuto', $data ?? [], null);
        $this->setIfExists('liabilityArisingInPeriod', $data ?? [], null);
        $this->setIfExists('dueInPreviousPeriods', $data ?? [], null);
        $this->setIfExists('paidInPreviousPeriods', $data ?? [], null);
        $this->setIfExists('employmentAllowanceClaimInPreviousPeriods', $data ?? [], null);
        $this->setIfExists('receivedFromHMRCToRefundTax', $data ?? [], null);
        $this->setIfExists('receivedFromHMRCToPayStatutoryPay', $data ?? [], null);
        $this->setIfExists('cisDeductionsSuffered', $data ?? [], null);
        $this->setIfExists('adjustment', $data ?? [], null);
        $this->setIfExists('netLiabilityForPeriod', $data ?? [], null);
        $this->setIfExists('totalPaid', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('fpsList', $data ?? [], null);
        $this->setIfExists('allowLinkedEps', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title [readonly] A descriptive name for the Period
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets periodEnding
     *
     * @return \DateTime|null
     */
    public function getPeriodEnding(): ?\DateTime
    {
        return $this->container['periodEnding'];
    }

    /**
     * Sets periodEnding
     *
     * @param \DateTime|null $periodEnding [readonly]
     *
     * @return $this
     */
    public function setPeriodEnding(?\DateTime $periodEnding): static
    {
        if (is_null($periodEnding)) {
            throw new InvalidArgumentException('non-nullable periodEnding cannot be null');
        }
        $this->container['periodEnding'] = $periodEnding;

        return $this;
    }

    /**
     * Gets periodComplete
     *
     * @return bool|null
     */
    public function getPeriodComplete(): ?bool
    {
        return $this->container['periodComplete'];
    }

    /**
     * Sets periodComplete
     *
     * @param bool|null $periodComplete [readonly] Indicates whether or not all PayRuns for this period have been completed
     *
     * @return $this
     */
    public function setPeriodComplete(?bool $periodComplete): static
    {
        if (is_null($periodComplete)) {
            throw new InvalidArgumentException('non-nullable periodComplete cannot be null');
        }
        $this->container['periodComplete'] = $periodComplete;

        return $this;
    }

    /**
     * Gets recoverableAmountsEpsCreated
     *
     * @return bool|null
     */
    public function getRecoverableAmountsEpsCreated(): ?bool
    {
        return $this->container['recoverableAmountsEpsCreated'];
    }

    /**
     * Sets recoverableAmountsEpsCreated
     *
     * @param bool|null $recoverableAmountsEpsCreated [readonly] If there are recoverable amount present (ie, SMP) and the Period is complete then this field Indicates   whether or not an EPS has been created up to the final tax month of this period to declare  the recoverable amounts
     *
     * @return $this
     */
    public function setRecoverableAmountsEpsCreated(?bool $recoverableAmountsEpsCreated): static
    {
        if (is_null($recoverableAmountsEpsCreated)) {
            throw new InvalidArgumentException('non-nullable recoverableAmountsEpsCreated cannot be null');
        }
        $this->container['recoverableAmountsEpsCreated'] = $recoverableAmountsEpsCreated;

        return $this;
    }

    /**
     * Gets apprenticeshipLevyEpsCreated
     *
     * @return bool|null
     */
    public function getApprenticeshipLevyEpsCreated(): ?bool
    {
        return $this->container['apprenticeshipLevyEpsCreated'];
    }

    /**
     * Sets apprenticeshipLevyEpsCreated
     *
     * @param bool|null $apprenticeshipLevyEpsCreated [readonly] If there is an Apprenticeship LEvy amount present and the Period is complete then this field Indicates   whether or not an EPS has been created up to the final tax month of this period to declare  the amount
     *
     * @return $this
     */
    public function setApprenticeshipLevyEpsCreated(?bool $apprenticeshipLevyEpsCreated): static
    {
        if (is_null($apprenticeshipLevyEpsCreated)) {
            throw new InvalidArgumentException('non-nullable apprenticeshipLevyEpsCreated cannot be null');
        }
        $this->container['apprenticeshipLevyEpsCreated'] = $apprenticeshipLevyEpsCreated;

        return $this;
    }

    /**
     * Gets payRuns
     *
     * @return \SynergiTech\Staffology\Model\PayRun[]|null
     */
    public function getPayRuns(): ?array
    {
        return $this->container['payRuns'];
    }

    /**
     * Sets payRuns
     *
     * @param \SynergiTech\Staffology\Model\PayRun[]|null $payRuns payRuns
     *
     * @return $this
     */
    public function setPayRuns(?array $payRuns): static
    {
        if (is_null($payRuns)) {
            array_push($this->openAPINullablesSetToNull, 'payRuns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payRuns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payRuns'] = $payRuns;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax(): ?float
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax [readonly] Amount due to HMRC for PAYE in period
     *
     * @return $this
     */
    public function setTax(?float $tax): static
    {
        if (is_null($tax)) {
            throw new InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets cisDeductions
     *
     * @return float|null
     */
    public function getCisDeductions(): ?float
    {
        return $this->container['cisDeductions'];
    }

    /**
     * Sets cisDeductions
     *
     * @param float|null $cisDeductions [readonly] Amount due to HMRC for CIS Deductions made in period
     *
     * @return $this
     */
    public function setCisDeductions(?float $cisDeductions): static
    {
        if (is_null($cisDeductions)) {
            throw new InvalidArgumentException('non-nullable cisDeductions cannot be null');
        }
        $this->container['cisDeductions'] = $cisDeductions;

        return $this;
    }

    /**
     * Gets postgradLoanDeductions
     *
     * @return float|null
     */
    public function getPostgradLoanDeductions(): ?float
    {
        return $this->container['postgradLoanDeductions'];
    }

    /**
     * Sets postgradLoanDeductions
     *
     * @param float|null $postgradLoanDeductions [readonly] Amount due to HMRC for Postgrad Loan Deductions made in period
     *
     * @return $this
     */
    public function setPostgradLoanDeductions(?float $postgradLoanDeductions): static
    {
        if (is_null($postgradLoanDeductions)) {
            throw new InvalidArgumentException('non-nullable postgradLoanDeductions cannot be null');
        }
        $this->container['postgradLoanDeductions'] = $postgradLoanDeductions;

        return $this;
    }

    /**
     * Gets studentLoanDeductions
     *
     * @return float|null
     */
    public function getStudentLoanDeductions(): ?float
    {
        return $this->container['studentLoanDeductions'];
    }

    /**
     * Sets studentLoanDeductions
     *
     * @param float|null $studentLoanDeductions [readonly] Amount due to HMRC for Student Loan Deductions made in period
     *
     * @return $this
     */
    public function setStudentLoanDeductions(?float $studentLoanDeductions): static
    {
        if (is_null($studentLoanDeductions)) {
            throw new InvalidArgumentException('non-nullable studentLoanDeductions cannot be null');
        }
        $this->container['studentLoanDeductions'] = $studentLoanDeductions;

        return $this;
    }

    /**
     * Gets employeeNic
     *
     * @return float|null
     */
    public function getEmployeeNic(): ?float
    {
        return $this->container['employeeNic'];
    }

    /**
     * Sets employeeNic
     *
     * @param float|null $employeeNic [readonly] Amount due to HMRC for Employee NIC Contributions withheld in period
     *
     * @return $this
     */
    public function setEmployeeNic(?float $employeeNic): static
    {
        if (is_null($employeeNic)) {
            throw new InvalidArgumentException('non-nullable employeeNic cannot be null');
        }
        $this->container['employeeNic'] = $employeeNic;

        return $this;
    }

    /**
     * Gets employerNic
     *
     * @return float|null
     */
    public function getEmployerNic(): ?float
    {
        return $this->container['employerNic'];
    }

    /**
     * Sets employerNic
     *
     * @param float|null $employerNic [readonly] Amount due to HMRC for Employer NIC Contributions due on payments in period
     *
     * @return $this
     */
    public function setEmployerNic(?float $employerNic): static
    {
        if (is_null($employerNic)) {
            throw new InvalidArgumentException('non-nullable employerNic cannot be null');
        }
        $this->container['employerNic'] = $employerNic;

        return $this;
    }

    /**
     * Gets realTimeClass1ANic
     *
     * @return float|null
     */
    public function getRealTimeClass1ANic(): ?float
    {
        return $this->container['realTimeClass1ANic'];
    }

    /**
     * Sets realTimeClass1ANic
     *
     * @param float|null $realTimeClass1ANic [readonly] Amount due to HMRC for Employer NIC Contributions due on payments in period
     *
     * @return $this
     */
    public function setRealTimeClass1ANic(?float $realTimeClass1ANic): static
    {
        if (is_null($realTimeClass1ANic)) {
            throw new InvalidArgumentException('non-nullable realTimeClass1ANic cannot be null');
        }
        $this->container['realTimeClass1ANic'] = $realTimeClass1ANic;

        return $this;
    }

    /**
     * Gets smp
     *
     * @return float|null
     */
    public function getSmp(): ?float
    {
        return $this->container['smp'];
    }

    /**
     * Sets smp
     *
     * @param float|null $smp [readonly] SMP recovered from payments in period
     *
     * @return $this
     */
    public function setSmp(?float $smp): static
    {
        if (is_null($smp)) {
            throw new InvalidArgumentException('non-nullable smp cannot be null');
        }
        $this->container['smp'] = $smp;

        return $this;
    }

    /**
     * Gets smpNic
     *
     * @return float|null
     */
    public function getSmpNic(): ?float
    {
        return $this->container['smpNic'];
    }

    /**
     * Sets smpNic
     *
     * @param float|null $smpNic [readonly] SMP NIC Compensation for period
     *
     * @return $this
     */
    public function setSmpNic(?float $smpNic): static
    {
        if (is_null($smpNic)) {
            throw new InvalidArgumentException('non-nullable smpNic cannot be null');
        }
        $this->container['smpNic'] = $smpNic;

        return $this;
    }

    /**
     * Gets spp
     *
     * @return float|null
     */
    public function getSpp(): ?float
    {
        return $this->container['spp'];
    }

    /**
     * Sets spp
     *
     * @param float|null $spp [readonly] SPP recovered from payments in period
     *
     * @return $this
     */
    public function setSpp(?float $spp): static
    {
        if (is_null($spp)) {
            throw new InvalidArgumentException('non-nullable spp cannot be null');
        }
        $this->container['spp'] = $spp;

        return $this;
    }

    /**
     * Gets sppNic
     *
     * @return float|null
     */
    public function getSppNic(): ?float
    {
        return $this->container['sppNic'];
    }

    /**
     * Sets sppNic
     *
     * @param float|null $sppNic [readonly] SPP Nic Compensation for period
     *
     * @return $this
     */
    public function setSppNic(?float $sppNic): static
    {
        if (is_null($sppNic)) {
            throw new InvalidArgumentException('non-nullable sppNic cannot be null');
        }
        $this->container['sppNic'] = $sppNic;

        return $this;
    }

    /**
     * Gets sap
     *
     * @return float|null
     */
    public function getSap(): ?float
    {
        return $this->container['sap'];
    }

    /**
     * Sets sap
     *
     * @param float|null $sap [readonly] SAP recovered from payments in period
     *
     * @return $this
     */
    public function setSap(?float $sap): static
    {
        if (is_null($sap)) {
            throw new InvalidArgumentException('non-nullable sap cannot be null');
        }
        $this->container['sap'] = $sap;

        return $this;
    }

    /**
     * Gets sapNic
     *
     * @return float|null
     */
    public function getSapNic(): ?float
    {
        return $this->container['sapNic'];
    }

    /**
     * Sets sapNic
     *
     * @param float|null $sapNic [readonly] SAP Nic Compensation for period
     *
     * @return $this
     */
    public function setSapNic(?float $sapNic): static
    {
        if (is_null($sapNic)) {
            throw new InvalidArgumentException('non-nullable sapNic cannot be null');
        }
        $this->container['sapNic'] = $sapNic;

        return $this;
    }

    /**
     * Gets shpp
     *
     * @return float|null
     */
    public function getShpp(): ?float
    {
        return $this->container['shpp'];
    }

    /**
     * Sets shpp
     *
     * @param float|null $shpp [readonly] ShPP recovered from payments in period
     *
     * @return $this
     */
    public function setShpp(?float $shpp): static
    {
        if (is_null($shpp)) {
            throw new InvalidArgumentException('non-nullable shpp cannot be null');
        }
        $this->container['shpp'] = $shpp;

        return $this;
    }

    /**
     * Gets shppNic
     *
     * @return float|null
     */
    public function getShppNic(): ?float
    {
        return $this->container['shppNic'];
    }

    /**
     * Sets shppNic
     *
     * @param float|null $shppNic [readonly] ShPP Nic Compensation for period
     *
     * @return $this
     */
    public function setShppNic(?float $shppNic): static
    {
        if (is_null($shppNic)) {
            throw new InvalidArgumentException('non-nullable shppNic cannot be null');
        }
        $this->container['shppNic'] = $shppNic;

        return $this;
    }

    /**
     * Gets spbp
     *
     * @return float|null
     */
    public function getSpbp(): ?float
    {
        return $this->container['spbp'];
    }

    /**
     * Sets spbp
     *
     * @param float|null $spbp [readonly] SPBP recovered from payments in period
     *
     * @return $this
     */
    public function setSpbp(?float $spbp): static
    {
        if (is_null($spbp)) {
            throw new InvalidArgumentException('non-nullable spbp cannot be null');
        }
        $this->container['spbp'] = $spbp;

        return $this;
    }

    /**
     * Gets spbpNic
     *
     * @return float|null
     */
    public function getSpbpNic(): ?float
    {
        return $this->container['spbpNic'];
    }

    /**
     * Sets spbpNic
     *
     * @param float|null $spbpNic [readonly] SPBP Nic Compensation for period
     *
     * @return $this
     */
    public function setSpbpNic(?float $spbpNic): static
    {
        if (is_null($spbpNic)) {
            throw new InvalidArgumentException('non-nullable spbpNic cannot be null');
        }
        $this->container['spbpNic'] = $spbpNic;

        return $this;
    }

    /**
     * Gets eligibleForEmploymentAllowance
     *
     * @return bool|null
     */
    public function getEligibleForEmploymentAllowance(): ?bool
    {
        return $this->container['eligibleForEmploymentAllowance'];
    }

    /**
     * Sets eligibleForEmploymentAllowance
     *
     * @param bool|null $eligibleForEmploymentAllowance [readonly] Indicates whether the Employer settings say the Employer is eligible for Employment Allowance
     *
     * @return $this
     */
    public function setEligibleForEmploymentAllowance(?bool $eligibleForEmploymentAllowance): static
    {
        if (is_null($eligibleForEmploymentAllowance)) {
            throw new InvalidArgumentException('non-nullable eligibleForEmploymentAllowance cannot be null');
        }
        $this->container['eligibleForEmploymentAllowance'] = $eligibleForEmploymentAllowance;

        return $this;
    }

    /**
     * Gets employmentAllowanceClaim
     *
     * @return float|null
     */
    public function getEmploymentAllowanceClaim(): ?float
    {
        return $this->container['employmentAllowanceClaim'];
    }

    /**
     * Sets employmentAllowanceClaim
     *
     * @param float|null $employmentAllowanceClaim Amount to claim with respect to the Employment Allowance
     *
     * @return $this
     */
    public function setEmploymentAllowanceClaim(?float $employmentAllowanceClaim): static
    {
        if (is_null($employmentAllowanceClaim)) {
            throw new InvalidArgumentException('non-nullable employmentAllowanceClaim cannot be null');
        }
        $this->container['employmentAllowanceClaim'] = $employmentAllowanceClaim;

        return $this;
    }

    /**
     * Gets employmentAllowanceClaimAuto
     *
     * @return bool|null
     */
    public function getEmploymentAllowanceClaimAuto(): ?bool
    {
        return $this->container['employmentAllowanceClaimAuto'];
    }

    /**
     * Sets employmentAllowanceClaimAuto
     *
     * @param bool|null $employmentAllowanceClaimAuto If set to true, we'll automatically claim the maximum allowed.  If set to false then you can enter your own value.  If EligibleForEmploymentAllowance is false then the EmploymentAllowanceClaim will   always be overwritten with a zero value regardless of this property
     *
     * @return $this
     */
    public function setEmploymentAllowanceClaimAuto(?bool $employmentAllowanceClaimAuto): static
    {
        if (is_null($employmentAllowanceClaimAuto)) {
            throw new InvalidArgumentException('non-nullable employmentAllowanceClaimAuto cannot be null');
        }
        $this->container['employmentAllowanceClaimAuto'] = $employmentAllowanceClaimAuto;

        return $this;
    }

    /**
     * Gets liableForApprenticeshipLevy
     *
     * @return bool|null
     */
    public function getLiableForApprenticeshipLevy(): ?bool
    {
        return $this->container['liableForApprenticeshipLevy'];
    }

    /**
     * Sets liableForApprenticeshipLevy
     *
     * @param bool|null $liableForApprenticeshipLevy [readonly] Indicates whether the Employer settings say the Employer is liable for the Apprenticeship Levy
     *
     * @return $this
     */
    public function setLiableForApprenticeshipLevy(?bool $liableForApprenticeshipLevy): static
    {
        if (is_null($liableForApprenticeshipLevy)) {
            throw new InvalidArgumentException('non-nullable liableForApprenticeshipLevy cannot be null');
        }
        $this->container['liableForApprenticeshipLevy'] = $liableForApprenticeshipLevy;

        return $this;
    }

    /**
     * Gets apprenticeshipLevy
     *
     * @return float|null
     */
    public function getApprenticeshipLevy(): ?float
    {
        return $this->container['apprenticeshipLevy'];
    }

    /**
     * Sets apprenticeshipLevy
     *
     * @param float|null $apprenticeshipLevy Amount due with respect to the Apprenticeship Levy
     *
     * @return $this
     */
    public function setApprenticeshipLevy(?float $apprenticeshipLevy): static
    {
        if (is_null($apprenticeshipLevy)) {
            throw new InvalidArgumentException('non-nullable apprenticeshipLevy cannot be null');
        }
        $this->container['apprenticeshipLevy'] = $apprenticeshipLevy;

        return $this;
    }

    /**
     * Gets apprenticeshipLevyAuto
     *
     * @return bool|null
     */
    public function getApprenticeshipLevyAuto(): ?bool
    {
        return $this->container['apprenticeshipLevyAuto'];
    }

    /**
     * Sets apprenticeshipLevyAuto
     *
     * @param bool|null $apprenticeshipLevyAuto If set to true, we'll automatically calculate your liability  If set to false then you can enter your own value.  If LiableForApprenticeshipLevy is false then the ApprenticeshipLevy will   always be overwritten with a zero value regardless of this property
     *
     * @return $this
     */
    public function setApprenticeshipLevyAuto(?bool $apprenticeshipLevyAuto): static
    {
        if (is_null($apprenticeshipLevyAuto)) {
            throw new InvalidArgumentException('non-nullable apprenticeshipLevyAuto cannot be null');
        }
        $this->container['apprenticeshipLevyAuto'] = $apprenticeshipLevyAuto;

        return $this;
    }

    /**
     * Gets liabilityArisingInPeriod
     *
     * @return float|null
     */
    public function getLiabilityArisingInPeriod(): ?float
    {
        return $this->container['liabilityArisingInPeriod'];
    }

    /**
     * Sets liabilityArisingInPeriod
     *
     * @param float|null $liabilityArisingInPeriod [readonly] Total Liability (before any deductions) arising in this Period
     *
     * @return $this
     */
    public function setLiabilityArisingInPeriod(?float $liabilityArisingInPeriod): static
    {
        if (is_null($liabilityArisingInPeriod)) {
            throw new InvalidArgumentException('non-nullable liabilityArisingInPeriod cannot be null');
        }
        $this->container['liabilityArisingInPeriod'] = $liabilityArisingInPeriod;

        return $this;
    }

    /**
     * Gets dueInPreviousPeriods
     *
     * @return float|null
     */
    public function getDueInPreviousPeriods(): ?float
    {
        return $this->container['dueInPreviousPeriods'];
    }

    /**
     * Sets dueInPreviousPeriods
     *
     * @param float|null $dueInPreviousPeriods [readonly] Amount due to HMRC in previous periods for this Tax Year
     *
     * @return $this
     */
    public function setDueInPreviousPeriods(?float $dueInPreviousPeriods): static
    {
        if (is_null($dueInPreviousPeriods)) {
            throw new InvalidArgumentException('non-nullable dueInPreviousPeriods cannot be null');
        }
        $this->container['dueInPreviousPeriods'] = $dueInPreviousPeriods;

        return $this;
    }

    /**
     * Gets paidInPreviousPeriods
     *
     * @return float|null
     */
    public function getPaidInPreviousPeriods(): ?float
    {
        return $this->container['paidInPreviousPeriods'];
    }

    /**
     * Sets paidInPreviousPeriods
     *
     * @param float|null $paidInPreviousPeriods [readonly] Amount paid to HMRC in previous periods for this Tax Year
     *
     * @return $this
     */
    public function setPaidInPreviousPeriods(?float $paidInPreviousPeriods): static
    {
        if (is_null($paidInPreviousPeriods)) {
            throw new InvalidArgumentException('non-nullable paidInPreviousPeriods cannot be null');
        }
        $this->container['paidInPreviousPeriods'] = $paidInPreviousPeriods;

        return $this;
    }

    /**
     * Gets employmentAllowanceClaimInPreviousPeriods
     *
     * @return float|null
     */
    public function getEmploymentAllowanceClaimInPreviousPeriods(): ?float
    {
        return $this->container['employmentAllowanceClaimInPreviousPeriods'];
    }

    /**
     * Sets employmentAllowanceClaimInPreviousPeriods
     *
     * @param float|null $employmentAllowanceClaimInPreviousPeriods [readonly] The amount of Employment Allowance claimed in previous periods for this Tax Year
     *
     * @return $this
     */
    public function setEmploymentAllowanceClaimInPreviousPeriods(?float $employmentAllowanceClaimInPreviousPeriods): static
    {
        if (is_null($employmentAllowanceClaimInPreviousPeriods)) {
            throw new InvalidArgumentException('non-nullable employmentAllowanceClaimInPreviousPeriods cannot be null');
        }
        $this->container['employmentAllowanceClaimInPreviousPeriods'] = $employmentAllowanceClaimInPreviousPeriods;

        return $this;
    }

    /**
     * Gets receivedFromHMRCToRefundTax
     *
     * @return float|null
     */
    public function getReceivedFromHMRCToRefundTax(): ?float
    {
        return $this->container['receivedFromHMRCToRefundTax'];
    }

    /**
     * Sets receivedFromHMRCToRefundTax
     *
     * @param float|null $receivedFromHMRCToRefundTax Any amount received from HMRC to refund Tax in Period
     *
     * @return $this
     */
    public function setReceivedFromHMRCToRefundTax(?float $receivedFromHMRCToRefundTax): static
    {
        if (is_null($receivedFromHMRCToRefundTax)) {
            throw new InvalidArgumentException('non-nullable receivedFromHMRCToRefundTax cannot be null');
        }
        $this->container['receivedFromHMRCToRefundTax'] = $receivedFromHMRCToRefundTax;

        return $this;
    }

    /**
     * Gets receivedFromHMRCToPayStatutoryPay
     *
     * @return float|null
     */
    public function getReceivedFromHMRCToPayStatutoryPay(): ?float
    {
        return $this->container['receivedFromHMRCToPayStatutoryPay'];
    }

    /**
     * Sets receivedFromHMRCToPayStatutoryPay
     *
     * @param float|null $receivedFromHMRCToPayStatutoryPay Any amount received from HMRC to pay Statutory Pay Period
     *
     * @return $this
     */
    public function setReceivedFromHMRCToPayStatutoryPay(?float $receivedFromHMRCToPayStatutoryPay): static
    {
        if (is_null($receivedFromHMRCToPayStatutoryPay)) {
            throw new InvalidArgumentException('non-nullable receivedFromHMRCToPayStatutoryPay cannot be null');
        }
        $this->container['receivedFromHMRCToPayStatutoryPay'] = $receivedFromHMRCToPayStatutoryPay;

        return $this;
    }

    /**
     * Gets cisDeductionsSuffered
     *
     * @return float|null
     */
    public function getCisDeductionsSuffered(): ?float
    {
        return $this->container['cisDeductionsSuffered'];
    }

    /**
     * Sets cisDeductionsSuffered
     *
     * @param float|null $cisDeductionsSuffered CIS Deductions Suffered in Period
     *
     * @return $this
     */
    public function setCisDeductionsSuffered(?float $cisDeductionsSuffered): static
    {
        if (is_null($cisDeductionsSuffered)) {
            throw new InvalidArgumentException('non-nullable cisDeductionsSuffered cannot be null');
        }
        $this->container['cisDeductionsSuffered'] = $cisDeductionsSuffered;

        return $this;
    }

    /**
     * Gets adjustment
     *
     * @return float|null
     */
    public function getAdjustment(): ?float
    {
        return $this->container['adjustment'];
    }

    /**
     * Sets adjustment
     *
     * @param float|null $adjustment Any manual adjustment for Period
     *
     * @return $this
     */
    public function setAdjustment(?float $adjustment): static
    {
        if (is_null($adjustment)) {
            throw new InvalidArgumentException('non-nullable adjustment cannot be null');
        }
        $this->container['adjustment'] = $adjustment;

        return $this;
    }

    /**
     * Gets netLiabilityForPeriod
     *
     * @return float|null
     */
    public function getNetLiabilityForPeriod(): ?float
    {
        return $this->container['netLiabilityForPeriod'];
    }

    /**
     * Sets netLiabilityForPeriod
     *
     * @param float|null $netLiabilityForPeriod [readonly] Net Liability (including any deductions/additions) arising in this Period
     *
     * @return $this
     */
    public function setNetLiabilityForPeriod(?float $netLiabilityForPeriod): static
    {
        if (is_null($netLiabilityForPeriod)) {
            throw new InvalidArgumentException('non-nullable netLiabilityForPeriod cannot be null');
        }
        $this->container['netLiabilityForPeriod'] = $netLiabilityForPeriod;

        return $this;
    }

    /**
     * Gets totalPaid
     *
     * @return float|null
     */
    public function getTotalPaid(): ?float
    {
        return $this->container['totalPaid'];
    }

    /**
     * Sets totalPaid
     *
     * @param float|null $totalPaid [readonly] The total value of all payments in this period
     *
     * @return $this
     */
    public function setTotalPaid(?float $totalPaid): static
    {
        if (is_null($totalPaid)) {
            throw new InvalidArgumentException('non-nullable totalPaid cannot be null');
        }
        $this->container['totalPaid'] = $totalPaid;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \SynergiTech\Staffology\Model\HmrcPayment[]|null
     */
    public function getPayments(): ?array
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \SynergiTech\Staffology\Model\HmrcPayment[]|null $payments payments
     *
     * @return $this
     */
    public function setPayments(?array $payments): static
    {
        if (is_null($payments)) {
            array_push($this->openAPINullablesSetToNull, 'payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets fpsList
     *
     * @return \SynergiTech\Staffology\Model\Item[]|null
     */
    public function getFpsList(): ?array
    {
        return $this->container['fpsList'];
    }

    /**
     * Sets fpsList
     *
     * @param \SynergiTech\Staffology\Model\Item[]|null $fpsList fpsList
     *
     * @return $this
     */
    public function setFpsList(?array $fpsList): static
    {
        if (is_null($fpsList)) {
            array_push($this->openAPINullablesSetToNull, 'fpsList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fpsList', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fpsList'] = $fpsList;

        return $this;
    }

    /**
     * Gets allowLinkedEps
     *
     * @return bool|null
     */
    public function getAllowLinkedEps(): ?bool
    {
        return $this->container['allowLinkedEps'];
    }

    /**
     * Sets allowLinkedEps
     *
     * @param bool|null $allowLinkedEps If true this will allow you to submit a combined Employer Payment Summary
     *
     * @return $this
     */
    public function setAllowLinkedEps(?bool $allowLinkedEps): static
    {
        if (is_null($allowLinkedEps)) {
            throw new InvalidArgumentException('non-nullable allowLinkedEps cannot be null');
        }
        $this->container['allowLinkedEps'] = $allowLinkedEps;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


