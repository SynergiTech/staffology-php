<?php
/**
 * ContractHmrcDetailsResponse
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractHmrcDetailsResponse Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractHmrcDetailsResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.HmrcDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'officeNumber' => 'string',
        'payeReference' => 'string',
        'accountsOfficeReference' => 'string',
        'econ' => 'string',
        'utr' => 'string',
        'coTax' => 'string',
        'employmentAllowance' => 'bool',
        'employmentAllowanceMaxClaim' => 'float',
        'smallEmployersRelief' => 'bool',
        'apprenticeshipLevy' => 'bool',
        'apprenticeshipLevyAllowance' => 'float',
        'quarterlyPaymentSchedule' => 'bool',
        'includeEmploymentAllowanceOnMonthlyJournal' => 'bool',
        'carryForwardUnpaidLiabilities' => 'bool',
        'paymentDateRule' => '\SynergiTech\Staffology\Model\PaymentDateRule',
        'paymentDateDayOfMonth' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'officeNumber' => null,
        'payeReference' => null,
        'accountsOfficeReference' => null,
        'econ' => null,
        'utr' => null,
        'coTax' => null,
        'employmentAllowance' => null,
        'employmentAllowanceMaxClaim' => 'double',
        'smallEmployersRelief' => null,
        'apprenticeshipLevy' => null,
        'apprenticeshipLevyAllowance' => 'double',
        'quarterlyPaymentSchedule' => null,
        'includeEmploymentAllowanceOnMonthlyJournal' => null,
        'carryForwardUnpaidLiabilities' => null,
        'paymentDateRule' => null,
        'paymentDateDayOfMonth' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'officeNumber' => true,
        'payeReference' => true,
        'accountsOfficeReference' => true,
        'econ' => true,
        'utr' => true,
        'coTax' => true,
        'employmentAllowance' => false,
        'employmentAllowanceMaxClaim' => false,
        'smallEmployersRelief' => false,
        'apprenticeshipLevy' => false,
        'apprenticeshipLevyAllowance' => false,
        'quarterlyPaymentSchedule' => false,
        'includeEmploymentAllowanceOnMonthlyJournal' => false,
        'carryForwardUnpaidLiabilities' => false,
        'paymentDateRule' => false,
        'paymentDateDayOfMonth' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'officeNumber' => 'officeNumber',
        'payeReference' => 'payeReference',
        'accountsOfficeReference' => 'accountsOfficeReference',
        'econ' => 'econ',
        'utr' => 'utr',
        'coTax' => 'coTax',
        'employmentAllowance' => 'employmentAllowance',
        'employmentAllowanceMaxClaim' => 'employmentAllowanceMaxClaim',
        'smallEmployersRelief' => 'smallEmployersRelief',
        'apprenticeshipLevy' => 'apprenticeshipLevy',
        'apprenticeshipLevyAllowance' => 'apprenticeshipLevyAllowance',
        'quarterlyPaymentSchedule' => 'quarterlyPaymentSchedule',
        'includeEmploymentAllowanceOnMonthlyJournal' => 'includeEmploymentAllowanceOnMonthlyJournal',
        'carryForwardUnpaidLiabilities' => 'carryForwardUnpaidLiabilities',
        'paymentDateRule' => 'paymentDateRule',
        'paymentDateDayOfMonth' => 'paymentDateDayOfMonth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'officeNumber' => 'setOfficeNumber',
        'payeReference' => 'setPayeReference',
        'accountsOfficeReference' => 'setAccountsOfficeReference',
        'econ' => 'setEcon',
        'utr' => 'setUtr',
        'coTax' => 'setCoTax',
        'employmentAllowance' => 'setEmploymentAllowance',
        'employmentAllowanceMaxClaim' => 'setEmploymentAllowanceMaxClaim',
        'smallEmployersRelief' => 'setSmallEmployersRelief',
        'apprenticeshipLevy' => 'setApprenticeshipLevy',
        'apprenticeshipLevyAllowance' => 'setApprenticeshipLevyAllowance',
        'quarterlyPaymentSchedule' => 'setQuarterlyPaymentSchedule',
        'includeEmploymentAllowanceOnMonthlyJournal' => 'setIncludeEmploymentAllowanceOnMonthlyJournal',
        'carryForwardUnpaidLiabilities' => 'setCarryForwardUnpaidLiabilities',
        'paymentDateRule' => 'setPaymentDateRule',
        'paymentDateDayOfMonth' => 'setPaymentDateDayOfMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'officeNumber' => 'getOfficeNumber',
        'payeReference' => 'getPayeReference',
        'accountsOfficeReference' => 'getAccountsOfficeReference',
        'econ' => 'getEcon',
        'utr' => 'getUtr',
        'coTax' => 'getCoTax',
        'employmentAllowance' => 'getEmploymentAllowance',
        'employmentAllowanceMaxClaim' => 'getEmploymentAllowanceMaxClaim',
        'smallEmployersRelief' => 'getSmallEmployersRelief',
        'apprenticeshipLevy' => 'getApprenticeshipLevy',
        'apprenticeshipLevyAllowance' => 'getApprenticeshipLevyAllowance',
        'quarterlyPaymentSchedule' => 'getQuarterlyPaymentSchedule',
        'includeEmploymentAllowanceOnMonthlyJournal' => 'getIncludeEmploymentAllowanceOnMonthlyJournal',
        'carryForwardUnpaidLiabilities' => 'getCarryForwardUnpaidLiabilities',
        'paymentDateRule' => 'getPaymentDateRule',
        'paymentDateDayOfMonth' => 'getPaymentDateDayOfMonth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('officeNumber', $data ?? [], null);
        $this->setIfExists('payeReference', $data ?? [], null);
        $this->setIfExists('accountsOfficeReference', $data ?? [], null);
        $this->setIfExists('econ', $data ?? [], null);
        $this->setIfExists('utr', $data ?? [], null);
        $this->setIfExists('coTax', $data ?? [], null);
        $this->setIfExists('employmentAllowance', $data ?? [], null);
        $this->setIfExists('employmentAllowanceMaxClaim', $data ?? [], null);
        $this->setIfExists('smallEmployersRelief', $data ?? [], null);
        $this->setIfExists('apprenticeshipLevy', $data ?? [], null);
        $this->setIfExists('apprenticeshipLevyAllowance', $data ?? [], null);
        $this->setIfExists('quarterlyPaymentSchedule', $data ?? [], null);
        $this->setIfExists('includeEmploymentAllowanceOnMonthlyJournal', $data ?? [], null);
        $this->setIfExists('carryForwardUnpaidLiabilities', $data ?? [], null);
        $this->setIfExists('paymentDateRule', $data ?? [], null);
        $this->setIfExists('paymentDateDayOfMonth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets officeNumber
     *
     * @return string|null
     */
    public function getOfficeNumber(): ?string
    {
        return $this->container['officeNumber'];
    }

    /**
     * Sets officeNumber
     *
     * @param string|null $officeNumber officeNumber
     *
     * @return $this
     */
    public function setOfficeNumber(?string $officeNumber): static
    {
        if (is_null($officeNumber)) {
            array_push($this->openAPINullablesSetToNull, 'officeNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('officeNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['officeNumber'] = $officeNumber;

        return $this;
    }

    /**
     * Gets payeReference
     *
     * @return string|null
     */
    public function getPayeReference(): ?string
    {
        return $this->container['payeReference'];
    }

    /**
     * Sets payeReference
     *
     * @param string|null $payeReference payeReference
     *
     * @return $this
     */
    public function setPayeReference(?string $payeReference): static
    {
        if (is_null($payeReference)) {
            array_push($this->openAPINullablesSetToNull, 'payeReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payeReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payeReference'] = $payeReference;

        return $this;
    }

    /**
     * Gets accountsOfficeReference
     *
     * @return string|null
     */
    public function getAccountsOfficeReference(): ?string
    {
        return $this->container['accountsOfficeReference'];
    }

    /**
     * Sets accountsOfficeReference
     *
     * @param string|null $accountsOfficeReference accountsOfficeReference
     *
     * @return $this
     */
    public function setAccountsOfficeReference(?string $accountsOfficeReference): static
    {
        if (is_null($accountsOfficeReference)) {
            array_push($this->openAPINullablesSetToNull, 'accountsOfficeReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountsOfficeReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountsOfficeReference'] = $accountsOfficeReference;

        return $this;
    }

    /**
     * Gets econ
     *
     * @return string|null
     */
    public function getEcon(): ?string
    {
        return $this->container['econ'];
    }

    /**
     * Sets econ
     *
     * @param string|null $econ econ
     *
     * @return $this
     */
    public function setEcon(?string $econ): static
    {
        if (is_null($econ)) {
            array_push($this->openAPINullablesSetToNull, 'econ');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('econ', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['econ'] = $econ;

        return $this;
    }

    /**
     * Gets utr
     *
     * @return string|null
     */
    public function getUtr(): ?string
    {
        return $this->container['utr'];
    }

    /**
     * Sets utr
     *
     * @param string|null $utr utr
     *
     * @return $this
     */
    public function setUtr(?string $utr): static
    {
        if (is_null($utr)) {
            array_push($this->openAPINullablesSetToNull, 'utr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['utr'] = $utr;

        return $this;
    }

    /**
     * Gets coTax
     *
     * @return string|null
     */
    public function getCoTax(): ?string
    {
        return $this->container['coTax'];
    }

    /**
     * Sets coTax
     *
     * @param string|null $coTax coTax
     *
     * @return $this
     */
    public function setCoTax(?string $coTax): static
    {
        if (is_null($coTax)) {
            array_push($this->openAPINullablesSetToNull, 'coTax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coTax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coTax'] = $coTax;

        return $this;
    }

    /**
     * Gets employmentAllowance
     *
     * @return bool|null
     */
    public function getEmploymentAllowance(): ?bool
    {
        return $this->container['employmentAllowance'];
    }

    /**
     * Sets employmentAllowance
     *
     * @param bool|null $employmentAllowance employmentAllowance
     *
     * @return $this
     */
    public function setEmploymentAllowance(?bool $employmentAllowance): static
    {
        if (is_null($employmentAllowance)) {
            throw new InvalidArgumentException('non-nullable employmentAllowance cannot be null');
        }
        $this->container['employmentAllowance'] = $employmentAllowance;

        return $this;
    }

    /**
     * Gets employmentAllowanceMaxClaim
     *
     * @return float|null
     */
    public function getEmploymentAllowanceMaxClaim(): ?float
    {
        return $this->container['employmentAllowanceMaxClaim'];
    }

    /**
     * Sets employmentAllowanceMaxClaim
     *
     * @param float|null $employmentAllowanceMaxClaim You might reduce this from the default if you've made/are making a claim in another system
     *
     * @return $this
     */
    public function setEmploymentAllowanceMaxClaim(?float $employmentAllowanceMaxClaim): static
    {
        if (is_null($employmentAllowanceMaxClaim)) {
            throw new InvalidArgumentException('non-nullable employmentAllowanceMaxClaim cannot be null');
        }
        $this->container['employmentAllowanceMaxClaim'] = $employmentAllowanceMaxClaim;

        return $this;
    }

    /**
     * Gets smallEmployersRelief
     *
     * @return bool|null
     */
    public function getSmallEmployersRelief(): ?bool
    {
        return $this->container['smallEmployersRelief'];
    }

    /**
     * Sets smallEmployersRelief
     *
     * @param bool|null $smallEmployersRelief smallEmployersRelief
     *
     * @return $this
     */
    public function setSmallEmployersRelief(?bool $smallEmployersRelief): static
    {
        if (is_null($smallEmployersRelief)) {
            throw new InvalidArgumentException('non-nullable smallEmployersRelief cannot be null');
        }
        $this->container['smallEmployersRelief'] = $smallEmployersRelief;

        return $this;
    }

    /**
     * Gets apprenticeshipLevy
     *
     * @return bool|null
     */
    public function getApprenticeshipLevy(): ?bool
    {
        return $this->container['apprenticeshipLevy'];
    }

    /**
     * Sets apprenticeshipLevy
     *
     * @param bool|null $apprenticeshipLevy apprenticeshipLevy
     *
     * @return $this
     */
    public function setApprenticeshipLevy(?bool $apprenticeshipLevy): static
    {
        if (is_null($apprenticeshipLevy)) {
            throw new InvalidArgumentException('non-nullable apprenticeshipLevy cannot be null');
        }
        $this->container['apprenticeshipLevy'] = $apprenticeshipLevy;

        return $this;
    }

    /**
     * Gets apprenticeshipLevyAllowance
     *
     * @return float|null
     */
    public function getApprenticeshipLevyAllowance(): ?float
    {
        return $this->container['apprenticeshipLevyAllowance'];
    }

    /**
     * Sets apprenticeshipLevyAllowance
     *
     * @param float|null $apprenticeshipLevyAllowance apprenticeshipLevyAllowance
     *
     * @return $this
     */
    public function setApprenticeshipLevyAllowance(?float $apprenticeshipLevyAllowance): static
    {
        if (is_null($apprenticeshipLevyAllowance)) {
            throw new InvalidArgumentException('non-nullable apprenticeshipLevyAllowance cannot be null');
        }
        $this->container['apprenticeshipLevyAllowance'] = $apprenticeshipLevyAllowance;

        return $this;
    }

    /**
     * Gets quarterlyPaymentSchedule
     *
     * @return bool|null
     */
    public function getQuarterlyPaymentSchedule(): ?bool
    {
        return $this->container['quarterlyPaymentSchedule'];
    }

    /**
     * Sets quarterlyPaymentSchedule
     *
     * @param bool|null $quarterlyPaymentSchedule Set to true if the employer pays HMRC on a quarterly schedule.  A value of false implies a monthly schedule.  <b>Warning:</b> Changing this value after starting PayRuns will  delete any existing payments or adjustments you may have entered.
     *
     * @return $this
     */
    public function setQuarterlyPaymentSchedule(?bool $quarterlyPaymentSchedule): static
    {
        if (is_null($quarterlyPaymentSchedule)) {
            throw new InvalidArgumentException('non-nullable quarterlyPaymentSchedule cannot be null');
        }
        $this->container['quarterlyPaymentSchedule'] = $quarterlyPaymentSchedule;

        return $this;
    }

    /**
     * Gets includeEmploymentAllowanceOnMonthlyJournal
     *
     * @return bool|null
     */
    public function getIncludeEmploymentAllowanceOnMonthlyJournal(): ?bool
    {
        return $this->container['includeEmploymentAllowanceOnMonthlyJournal'];
    }

    /**
     * Sets includeEmploymentAllowanceOnMonthlyJournal
     *
     * @param bool|null $includeEmploymentAllowanceOnMonthlyJournal If the employer is not on a QuarterlyPaymentSchedule  and is claiming EmploymentAllowance, then set this to true to include a line for  Employment Allowance on the journal for the monthly schedule.
     *
     * @return $this
     */
    public function setIncludeEmploymentAllowanceOnMonthlyJournal(?bool $includeEmploymentAllowanceOnMonthlyJournal): static
    {
        if (is_null($includeEmploymentAllowanceOnMonthlyJournal)) {
            throw new InvalidArgumentException('non-nullable includeEmploymentAllowanceOnMonthlyJournal cannot be null');
        }
        $this->container['includeEmploymentAllowanceOnMonthlyJournal'] = $includeEmploymentAllowanceOnMonthlyJournal;

        return $this;
    }

    /**
     * Gets carryForwardUnpaidLiabilities
     *
     * @return bool|null
     */
    public function getCarryForwardUnpaidLiabilities(): ?bool
    {
        return $this->container['carryForwardUnpaidLiabilities'];
    }

    /**
     * Sets carryForwardUnpaidLiabilities
     *
     * @param bool|null $carryForwardUnpaidLiabilities If set to true then any unpaid amounts from previous periods will be brought forward  to work out the liability for the current period.  You'd set this to false if you don't want to track payments.
     *
     * @return $this
     */
    public function setCarryForwardUnpaidLiabilities(?bool $carryForwardUnpaidLiabilities): static
    {
        if (is_null($carryForwardUnpaidLiabilities)) {
            throw new InvalidArgumentException('non-nullable carryForwardUnpaidLiabilities cannot be null');
        }
        $this->container['carryForwardUnpaidLiabilities'] = $carryForwardUnpaidLiabilities;

        return $this;
    }

    /**
     * Gets paymentDateRule
     *
     * @return \SynergiTech\Staffology\Model\PaymentDateRule|null
     */
    public function getPaymentDateRule(): ?\SynergiTech\Staffology\Model\PaymentDateRule
    {
        return $this->container['paymentDateRule'];
    }

    /**
     * Sets paymentDateRule
     *
     * @param \SynergiTech\Staffology\Model\PaymentDateRule|null $paymentDateRule paymentDateRule
     *
     * @return $this
     */
    public function setPaymentDateRule(?\SynergiTech\Staffology\Model\PaymentDateRule $paymentDateRule): static
    {
        if (is_null($paymentDateRule)) {
            throw new InvalidArgumentException('non-nullable paymentDateRule cannot be null');
        }
        $this->container['paymentDateRule'] = $paymentDateRule;

        return $this;
    }

    /**
     * Gets paymentDateDayOfMonth
     *
     * @return int|null
     */
    public function getPaymentDateDayOfMonth(): ?int
    {
        return $this->container['paymentDateDayOfMonth'];
    }

    /**
     * Sets paymentDateDayOfMonth
     *
     * @param int|null $paymentDateDayOfMonth paymentDateDayOfMonth
     *
     * @return $this
     */
    public function setPaymentDateDayOfMonth(?int $paymentDateDayOfMonth): static
    {
        if (is_null($paymentDateDayOfMonth)) {
            array_push($this->openAPINullablesSetToNull, 'paymentDateDayOfMonth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDateDayOfMonth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDateDayOfMonth'] = $paymentDateDayOfMonth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


