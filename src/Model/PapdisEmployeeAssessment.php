<?php
/**
 * PapdisEmployeeAssessment
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PapdisEmployeeAssessment Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PapdisEmployeeAssessment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PapdisEmployeeAssessment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'assessmentCode' => 'int',
        'eventCode' => 'int',
        'eventDate' => '\DateTime',
        'statutoryLetterCode' => 'string',
        'isIndividualAlreadyMemberOfQPS' => 'bool',
        'deferralDate' => '\DateTime',
        'enrolmentCommunicationsIssuedDate' => '\DateTime',
        'workerExclusionCode' => 'string',
        'reenrolmentIndicator' => 'bool',
        'optOutWindowEndDate' => '\DateTime',
        'pensionJoinReason' => '\SynergiTech\Staffology\Model\PensionJoinReason',
        'pensionStartDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'assessmentCode' => 'int32',
        'eventCode' => 'int32',
        'eventDate' => 'date',
        'statutoryLetterCode' => null,
        'isIndividualAlreadyMemberOfQPS' => null,
        'deferralDate' => 'date',
        'enrolmentCommunicationsIssuedDate' => 'date',
        'workerExclusionCode' => null,
        'reenrolmentIndicator' => null,
        'optOutWindowEndDate' => 'date',
        'pensionJoinReason' => null,
        'pensionStartDate' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'assessmentCode' => false,
        'eventCode' => false,
        'eventDate' => true,
        'statutoryLetterCode' => true,
        'isIndividualAlreadyMemberOfQPS' => false,
        'deferralDate' => true,
        'enrolmentCommunicationsIssuedDate' => true,
        'workerExclusionCode' => true,
        'reenrolmentIndicator' => false,
        'optOutWindowEndDate' => true,
        'pensionJoinReason' => false,
        'pensionStartDate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'assessmentCode' => 'assessmentCode',
        'eventCode' => 'eventCode',
        'eventDate' => 'eventDate',
        'statutoryLetterCode' => 'statutoryLetterCode',
        'isIndividualAlreadyMemberOfQPS' => 'isIndividualAlreadyMemberOfQPS',
        'deferralDate' => 'deferralDate',
        'enrolmentCommunicationsIssuedDate' => 'enrolmentCommunicationsIssuedDate',
        'workerExclusionCode' => 'workerExclusionCode',
        'reenrolmentIndicator' => 'reenrolmentIndicator',
        'optOutWindowEndDate' => 'optOutWindowEndDate',
        'pensionJoinReason' => 'pensionJoinReason',
        'pensionStartDate' => 'pensionStartDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'assessmentCode' => 'setAssessmentCode',
        'eventCode' => 'setEventCode',
        'eventDate' => 'setEventDate',
        'statutoryLetterCode' => 'setStatutoryLetterCode',
        'isIndividualAlreadyMemberOfQPS' => 'setIsIndividualAlreadyMemberOfQPS',
        'deferralDate' => 'setDeferralDate',
        'enrolmentCommunicationsIssuedDate' => 'setEnrolmentCommunicationsIssuedDate',
        'workerExclusionCode' => 'setWorkerExclusionCode',
        'reenrolmentIndicator' => 'setReenrolmentIndicator',
        'optOutWindowEndDate' => 'setOptOutWindowEndDate',
        'pensionJoinReason' => 'setPensionJoinReason',
        'pensionStartDate' => 'setPensionStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'assessmentCode' => 'getAssessmentCode',
        'eventCode' => 'getEventCode',
        'eventDate' => 'getEventDate',
        'statutoryLetterCode' => 'getStatutoryLetterCode',
        'isIndividualAlreadyMemberOfQPS' => 'getIsIndividualAlreadyMemberOfQPS',
        'deferralDate' => 'getDeferralDate',
        'enrolmentCommunicationsIssuedDate' => 'getEnrolmentCommunicationsIssuedDate',
        'workerExclusionCode' => 'getWorkerExclusionCode',
        'reenrolmentIndicator' => 'getReenrolmentIndicator',
        'optOutWindowEndDate' => 'getOptOutWindowEndDate',
        'pensionJoinReason' => 'getPensionJoinReason',
        'pensionStartDate' => 'getPensionStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('assessmentCode', $data ?? [], null);
        $this->setIfExists('eventCode', $data ?? [], null);
        $this->setIfExists('eventDate', $data ?? [], null);
        $this->setIfExists('statutoryLetterCode', $data ?? [], null);
        $this->setIfExists('isIndividualAlreadyMemberOfQPS', $data ?? [], null);
        $this->setIfExists('deferralDate', $data ?? [], null);
        $this->setIfExists('enrolmentCommunicationsIssuedDate', $data ?? [], null);
        $this->setIfExists('workerExclusionCode', $data ?? [], null);
        $this->setIfExists('reenrolmentIndicator', $data ?? [], null);
        $this->setIfExists('optOutWindowEndDate', $data ?? [], null);
        $this->setIfExists('pensionJoinReason', $data ?? [], null);
        $this->setIfExists('pensionStartDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assessmentCode
     *
     * @return int|null
     */
    public function getAssessmentCode(): ?int
    {
        return $this->container['assessmentCode'];
    }

    /**
     * Sets assessmentCode
     *
     * @param int|null $assessmentCode [readonly]
     *
     * @return $this
     */
    public function setAssessmentCode(?int $assessmentCode): static
    {
        if (is_null($assessmentCode)) {
            throw new InvalidArgumentException('non-nullable assessmentCode cannot be null');
        }
        $this->container['assessmentCode'] = $assessmentCode;

        return $this;
    }

    /**
     * Gets eventCode
     *
     * @return int|null
     */
    public function getEventCode(): ?int
    {
        return $this->container['eventCode'];
    }

    /**
     * Sets eventCode
     *
     * @param int|null $eventCode [readonly]
     *
     * @return $this
     */
    public function setEventCode(?int $eventCode): static
    {
        if (is_null($eventCode)) {
            throw new InvalidArgumentException('non-nullable eventCode cannot be null');
        }
        $this->container['eventCode'] = $eventCode;

        return $this;
    }

    /**
     * Gets eventDate
     *
     * @return \DateTime|null
     */
    public function getEventDate(): ?\DateTime
    {
        return $this->container['eventDate'];
    }

    /**
     * Sets eventDate
     *
     * @param \DateTime|null $eventDate [readonly]
     *
     * @return $this
     */
    public function setEventDate(?\DateTime $eventDate): static
    {
        if (is_null($eventDate)) {
            array_push($this->openAPINullablesSetToNull, 'eventDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eventDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eventDate'] = $eventDate;

        return $this;
    }

    /**
     * Gets statutoryLetterCode
     *
     * @return string|null
     */
    public function getStatutoryLetterCode(): ?string
    {
        return $this->container['statutoryLetterCode'];
    }

    /**
     * Sets statutoryLetterCode
     *
     * @param string|null $statutoryLetterCode [readonly]
     *
     * @return $this
     */
    public function setStatutoryLetterCode(?string $statutoryLetterCode): static
    {
        if (is_null($statutoryLetterCode)) {
            array_push($this->openAPINullablesSetToNull, 'statutoryLetterCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statutoryLetterCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statutoryLetterCode'] = $statutoryLetterCode;

        return $this;
    }

    /**
     * Gets isIndividualAlreadyMemberOfQPS
     *
     * @return bool|null
     */
    public function getIsIndividualAlreadyMemberOfQPS(): ?bool
    {
        return $this->container['isIndividualAlreadyMemberOfQPS'];
    }

    /**
     * Sets isIndividualAlreadyMemberOfQPS
     *
     * @param bool|null $isIndividualAlreadyMemberOfQPS [readonly]
     *
     * @return $this
     */
    public function setIsIndividualAlreadyMemberOfQPS(?bool $isIndividualAlreadyMemberOfQPS): static
    {
        if (is_null($isIndividualAlreadyMemberOfQPS)) {
            throw new InvalidArgumentException('non-nullable isIndividualAlreadyMemberOfQPS cannot be null');
        }
        $this->container['isIndividualAlreadyMemberOfQPS'] = $isIndividualAlreadyMemberOfQPS;

        return $this;
    }

    /**
     * Gets deferralDate
     *
     * @return \DateTime|null
     */
    public function getDeferralDate(): ?\DateTime
    {
        return $this->container['deferralDate'];
    }

    /**
     * Sets deferralDate
     *
     * @param \DateTime|null $deferralDate [readonly]
     *
     * @return $this
     */
    public function setDeferralDate(?\DateTime $deferralDate): static
    {
        if (is_null($deferralDate)) {
            array_push($this->openAPINullablesSetToNull, 'deferralDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deferralDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deferralDate'] = $deferralDate;

        return $this;
    }

    /**
     * Gets enrolmentCommunicationsIssuedDate
     *
     * @return \DateTime|null
     */
    public function getEnrolmentCommunicationsIssuedDate(): ?\DateTime
    {
        return $this->container['enrolmentCommunicationsIssuedDate'];
    }

    /**
     * Sets enrolmentCommunicationsIssuedDate
     *
     * @param \DateTime|null $enrolmentCommunicationsIssuedDate [readonly]
     *
     * @return $this
     */
    public function setEnrolmentCommunicationsIssuedDate(?\DateTime $enrolmentCommunicationsIssuedDate): static
    {
        if (is_null($enrolmentCommunicationsIssuedDate)) {
            array_push($this->openAPINullablesSetToNull, 'enrolmentCommunicationsIssuedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrolmentCommunicationsIssuedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrolmentCommunicationsIssuedDate'] = $enrolmentCommunicationsIssuedDate;

        return $this;
    }

    /**
     * Gets workerExclusionCode
     *
     * @return string|null
     */
    public function getWorkerExclusionCode(): ?string
    {
        return $this->container['workerExclusionCode'];
    }

    /**
     * Sets workerExclusionCode
     *
     * @param string|null $workerExclusionCode [readonly]
     *
     * @return $this
     */
    public function setWorkerExclusionCode(?string $workerExclusionCode): static
    {
        if (is_null($workerExclusionCode)) {
            array_push($this->openAPINullablesSetToNull, 'workerExclusionCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workerExclusionCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workerExclusionCode'] = $workerExclusionCode;

        return $this;
    }

    /**
     * Gets reenrolmentIndicator
     *
     * @return bool|null
     */
    public function getReenrolmentIndicator(): ?bool
    {
        return $this->container['reenrolmentIndicator'];
    }

    /**
     * Sets reenrolmentIndicator
     *
     * @param bool|null $reenrolmentIndicator [readonly]
     *
     * @return $this
     */
    public function setReenrolmentIndicator(?bool $reenrolmentIndicator): static
    {
        if (is_null($reenrolmentIndicator)) {
            throw new InvalidArgumentException('non-nullable reenrolmentIndicator cannot be null');
        }
        $this->container['reenrolmentIndicator'] = $reenrolmentIndicator;

        return $this;
    }

    /**
     * Gets optOutWindowEndDate
     *
     * @return \DateTime|null
     */
    public function getOptOutWindowEndDate(): ?\DateTime
    {
        return $this->container['optOutWindowEndDate'];
    }

    /**
     * Sets optOutWindowEndDate
     *
     * @param \DateTime|null $optOutWindowEndDate [readonly]
     *
     * @return $this
     */
    public function setOptOutWindowEndDate(?\DateTime $optOutWindowEndDate): static
    {
        if (is_null($optOutWindowEndDate)) {
            array_push($this->openAPINullablesSetToNull, 'optOutWindowEndDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('optOutWindowEndDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['optOutWindowEndDate'] = $optOutWindowEndDate;

        return $this;
    }

    /**
     * Gets pensionJoinReason
     *
     * @return \SynergiTech\Staffology\Model\PensionJoinReason|null
     */
    public function getPensionJoinReason(): ?\SynergiTech\Staffology\Model\PensionJoinReason
    {
        return $this->container['pensionJoinReason'];
    }

    /**
     * Sets pensionJoinReason
     *
     * @param \SynergiTech\Staffology\Model\PensionJoinReason|null $pensionJoinReason pensionJoinReason
     *
     * @return $this
     */
    public function setPensionJoinReason(?\SynergiTech\Staffology\Model\PensionJoinReason $pensionJoinReason): static
    {
        if (is_null($pensionJoinReason)) {
            throw new InvalidArgumentException('non-nullable pensionJoinReason cannot be null');
        }
        $this->container['pensionJoinReason'] = $pensionJoinReason;

        return $this;
    }

    /**
     * Gets pensionStartDate
     *
     * @return \DateTime|null
     */
    public function getPensionStartDate(): ?\DateTime
    {
        return $this->container['pensionStartDate'];
    }

    /**
     * Sets pensionStartDate
     *
     * @param \DateTime|null $pensionStartDate [readonly]
     *
     * @return $this
     */
    public function setPensionStartDate(?\DateTime $pensionStartDate): static
    {
        if (is_null($pensionStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'pensionStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionStartDate'] = $pensionStartDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


