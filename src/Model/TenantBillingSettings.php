<?php
/**
 * TenantBillingSettings
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * TenantBillingSettings Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class TenantBillingSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TenantBillingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'discount' => 'float',
        'monthlyMinimum' => 'float',
        'aggregatedPricing' => 'bool',
        'billTo' => 'string',
        'pricingTable' => 'string',
        'netSuiteDefaultItemCode' => 'string',
        'netSuiteDefaultDescription' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'discount' => 'double',
        'monthlyMinimum' => 'double',
        'aggregatedPricing' => null,
        'billTo' => null,
        'pricingTable' => 'uuid',
        'netSuiteDefaultItemCode' => null,
        'netSuiteDefaultDescription' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'discount' => false,
        'monthlyMinimum' => false,
        'aggregatedPricing' => false,
        'billTo' => true,
        'pricingTable' => true,
        'netSuiteDefaultItemCode' => true,
        'netSuiteDefaultDescription' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'discount' => 'discount',
        'monthlyMinimum' => 'monthlyMinimum',
        'aggregatedPricing' => 'aggregatedPricing',
        'billTo' => 'billTo',
        'pricingTable' => 'pricingTable',
        'netSuiteDefaultItemCode' => 'netSuiteDefaultItemCode',
        'netSuiteDefaultDescription' => 'netSuiteDefaultDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'discount' => 'setDiscount',
        'monthlyMinimum' => 'setMonthlyMinimum',
        'aggregatedPricing' => 'setAggregatedPricing',
        'billTo' => 'setBillTo',
        'pricingTable' => 'setPricingTable',
        'netSuiteDefaultItemCode' => 'setNetSuiteDefaultItemCode',
        'netSuiteDefaultDescription' => 'setNetSuiteDefaultDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'discount' => 'getDiscount',
        'monthlyMinimum' => 'getMonthlyMinimum',
        'aggregatedPricing' => 'getAggregatedPricing',
        'billTo' => 'getBillTo',
        'pricingTable' => 'getPricingTable',
        'netSuiteDefaultItemCode' => 'getNetSuiteDefaultItemCode',
        'netSuiteDefaultDescription' => 'getNetSuiteDefaultDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('monthlyMinimum', $data ?? [], null);
        $this->setIfExists('aggregatedPricing', $data ?? [], null);
        $this->setIfExists('billTo', $data ?? [], null);
        $this->setIfExists('pricingTable', $data ?? [], null);
        $this->setIfExists('netSuiteDefaultItemCode', $data ?? [], null);
        $this->setIfExists('netSuiteDefaultDescription', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount(): ?float
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return $this
     */
    public function setDiscount(?float $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets monthlyMinimum
     *
     * @return float|null
     */
    public function getMonthlyMinimum(): ?float
    {
        return $this->container['monthlyMinimum'];
    }

    /**
     * Sets monthlyMinimum
     *
     * @param float|null $monthlyMinimum monthlyMinimum
     *
     * @return $this
     */
    public function setMonthlyMinimum(?float $monthlyMinimum): static
    {
        if (is_null($monthlyMinimum)) {
            throw new InvalidArgumentException('non-nullable monthlyMinimum cannot be null');
        }
        $this->container['monthlyMinimum'] = $monthlyMinimum;

        return $this;
    }

    /**
     * Gets aggregatedPricing
     *
     * @return bool|null
     */
    public function getAggregatedPricing(): ?bool
    {
        return $this->container['aggregatedPricing'];
    }

    /**
     * Sets aggregatedPricing
     *
     * @param bool|null $aggregatedPricing aggregatedPricing
     *
     * @return $this
     */
    public function setAggregatedPricing(?bool $aggregatedPricing): static
    {
        if (is_null($aggregatedPricing)) {
            throw new InvalidArgumentException('non-nullable aggregatedPricing cannot be null');
        }
        $this->container['aggregatedPricing'] = $aggregatedPricing;

        return $this;
    }

    /**
     * Gets billTo
     *
     * @return string|null
     */
    public function getBillTo(): ?string
    {
        return $this->container['billTo'];
    }

    /**
     * Sets billTo
     *
     * @param string|null $billTo If all activity for a Tenant is being biulled to a specifc user, set the email address here
     *
     * @return $this
     */
    public function setBillTo(?string $billTo): static
    {
        if (is_null($billTo)) {
            array_push($this->openAPINullablesSetToNull, 'billTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billTo'] = $billTo;

        return $this;
    }

    /**
     * Gets pricingTable
     *
     * @return string|null
     */
    public function getPricingTable(): ?string
    {
        return $this->container['pricingTable'];
    }

    /**
     * Sets pricingTable
     *
     * @param string|null $pricingTable If BillTo is set, then specify a Pricing Table to use from the Staffology tenant, otherwise the default Staffology Pricing Table will be used
     *
     * @return $this
     */
    public function setPricingTable(?string $pricingTable): static
    {
        if (is_null($pricingTable)) {
            array_push($this->openAPINullablesSetToNull, 'pricingTable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricingTable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pricingTable'] = $pricingTable;

        return $this;
    }

    /**
     * Gets netSuiteDefaultItemCode
     *
     * @return string|null
     */
    public function getNetSuiteDefaultItemCode(): ?string
    {
        return $this->container['netSuiteDefaultItemCode'];
    }

    /**
     * Sets netSuiteDefaultItemCode
     *
     * @param string|null $netSuiteDefaultItemCode [readonly] The item code used in the NetSuite billing if not specified in the pricing table
     *
     * @return $this
     */
    public function setNetSuiteDefaultItemCode(?string $netSuiteDefaultItemCode): static
    {
        if (is_null($netSuiteDefaultItemCode)) {
            array_push($this->openAPINullablesSetToNull, 'netSuiteDefaultItemCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netSuiteDefaultItemCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netSuiteDefaultItemCode'] = $netSuiteDefaultItemCode;

        return $this;
    }

    /**
     * Gets netSuiteDefaultDescription
     *
     * @return string|null
     */
    public function getNetSuiteDefaultDescription(): ?string
    {
        return $this->container['netSuiteDefaultDescription'];
    }

    /**
     * Sets netSuiteDefaultDescription
     *
     * @param string|null $netSuiteDefaultDescription [readonly] The product description used in the NetSuite billing if not specified in the pricing table
     *
     * @return $this
     */
    public function setNetSuiteDefaultDescription(?string $netSuiteDefaultDescription): static
    {
        if (is_null($netSuiteDefaultDescription)) {
            array_push($this->openAPINullablesSetToNull, 'netSuiteDefaultDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netSuiteDefaultDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netSuiteDefaultDescription'] = $netSuiteDefaultDescription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


