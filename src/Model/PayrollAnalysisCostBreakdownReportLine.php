<?php
/**
 * PayrollAnalysisCostBreakdownReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayrollAnalysisCostBreakdownReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayrollAnalysisCostBreakdownReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayrollAnalysisCostBreakdownReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'payrollCode' => 'string',
        'lastName' => 'string',
        'department' => '\SynergiTech\Staffology\Model\StringDecimalKeyValuePair',
        'costCentre' => '\SynergiTech\Staffology\Model\StringDecimalKeyValuePair',
        'employeeRoleAnalysisCategory' => 'array<string,\SynergiTech\Staffology\Model\StringDecimalKeyValuePair>',
        'lines' => '\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportValue[]',
        'totalPay' => 'float',
        'niablePay' => 'float',
        'pensionPay' => 'float',
        'niPercent' => 'float',
        'ersNi' => 'float',
        'pensionPercent' => 'float',
        'ersPension' => 'float',
        'taxablePay' => 'float',
        'taxablePercent' => 'float',
        'employeeNi' => 'float',
        'taxPaid' => 'float',
        'studentLoan' => 'float',
        'employeePension' => 'float',
        'employeePensionContributionSalarySacrifice' => 'float',
        'employeePensionContributionReliefAtSource' => 'float',
        'pensionSummaryCostBreakdowns' => '\SynergiTech\Staffology\Model\PensionSummaryCostBreakdown[]',
        'roleId' => 'string',
        'roleWeightage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'payrollCode' => null,
        'lastName' => null,
        'department' => null,
        'costCentre' => null,
        'employeeRoleAnalysisCategory' => null,
        'lines' => null,
        'totalPay' => 'double',
        'niablePay' => 'double',
        'pensionPay' => 'double',
        'niPercent' => 'double',
        'ersNi' => 'double',
        'pensionPercent' => 'double',
        'ersPension' => 'double',
        'taxablePay' => 'double',
        'taxablePercent' => 'double',
        'employeeNi' => 'double',
        'taxPaid' => 'double',
        'studentLoan' => 'double',
        'employeePension' => 'double',
        'employeePensionContributionSalarySacrifice' => 'double',
        'employeePensionContributionReliefAtSource' => 'double',
        'pensionSummaryCostBreakdowns' => null,
        'roleId' => 'uuid',
        'roleWeightage' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'payrollCode' => true,
        'lastName' => true,
        'department' => false,
        'costCentre' => false,
        'employeeRoleAnalysisCategory' => true,
        'lines' => true,
        'totalPay' => false,
        'niablePay' => false,
        'pensionPay' => false,
        'niPercent' => false,
        'ersNi' => false,
        'pensionPercent' => false,
        'ersPension' => false,
        'taxablePay' => false,
        'taxablePercent' => false,
        'employeeNi' => false,
        'taxPaid' => false,
        'studentLoan' => false,
        'employeePension' => false,
        'employeePensionContributionSalarySacrifice' => false,
        'employeePensionContributionReliefAtSource' => false,
        'pensionSummaryCostBreakdowns' => true,
        'roleId' => true,
        'roleWeightage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'payrollCode' => 'payrollCode',
        'lastName' => 'lastName',
        'department' => 'department',
        'costCentre' => 'costCentre',
        'employeeRoleAnalysisCategory' => 'employeeRoleAnalysisCategory',
        'lines' => 'lines',
        'totalPay' => 'totalPay',
        'niablePay' => 'niablePay',
        'pensionPay' => 'pensionPay',
        'niPercent' => 'niPercent',
        'ersNi' => 'ersNi',
        'pensionPercent' => 'pensionPercent',
        'ersPension' => 'ersPension',
        'taxablePay' => 'taxablePay',
        'taxablePercent' => 'taxablePercent',
        'employeeNi' => 'employeeNi',
        'taxPaid' => 'taxPaid',
        'studentLoan' => 'studentLoan',
        'employeePension' => 'employeePension',
        'employeePensionContributionSalarySacrifice' => 'employeePensionContributionSalarySacrifice',
        'employeePensionContributionReliefAtSource' => 'employeePensionContributionReliefAtSource',
        'pensionSummaryCostBreakdowns' => 'pensionSummaryCostBreakdowns',
        'roleId' => 'roleId',
        'roleWeightage' => 'roleWeightage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'payrollCode' => 'setPayrollCode',
        'lastName' => 'setLastName',
        'department' => 'setDepartment',
        'costCentre' => 'setCostCentre',
        'employeeRoleAnalysisCategory' => 'setEmployeeRoleAnalysisCategory',
        'lines' => 'setLines',
        'totalPay' => 'setTotalPay',
        'niablePay' => 'setNiablePay',
        'pensionPay' => 'setPensionPay',
        'niPercent' => 'setNiPercent',
        'ersNi' => 'setErsNi',
        'pensionPercent' => 'setPensionPercent',
        'ersPension' => 'setErsPension',
        'taxablePay' => 'setTaxablePay',
        'taxablePercent' => 'setTaxablePercent',
        'employeeNi' => 'setEmployeeNi',
        'taxPaid' => 'setTaxPaid',
        'studentLoan' => 'setStudentLoan',
        'employeePension' => 'setEmployeePension',
        'employeePensionContributionSalarySacrifice' => 'setEmployeePensionContributionSalarySacrifice',
        'employeePensionContributionReliefAtSource' => 'setEmployeePensionContributionReliefAtSource',
        'pensionSummaryCostBreakdowns' => 'setPensionSummaryCostBreakdowns',
        'roleId' => 'setRoleId',
        'roleWeightage' => 'setRoleWeightage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'payrollCode' => 'getPayrollCode',
        'lastName' => 'getLastName',
        'department' => 'getDepartment',
        'costCentre' => 'getCostCentre',
        'employeeRoleAnalysisCategory' => 'getEmployeeRoleAnalysisCategory',
        'lines' => 'getLines',
        'totalPay' => 'getTotalPay',
        'niablePay' => 'getNiablePay',
        'pensionPay' => 'getPensionPay',
        'niPercent' => 'getNiPercent',
        'ersNi' => 'getErsNi',
        'pensionPercent' => 'getPensionPercent',
        'ersPension' => 'getErsPension',
        'taxablePay' => 'getTaxablePay',
        'taxablePercent' => 'getTaxablePercent',
        'employeeNi' => 'getEmployeeNi',
        'taxPaid' => 'getTaxPaid',
        'studentLoan' => 'getStudentLoan',
        'employeePension' => 'getEmployeePension',
        'employeePensionContributionSalarySacrifice' => 'getEmployeePensionContributionSalarySacrifice',
        'employeePensionContributionReliefAtSource' => 'getEmployeePensionContributionReliefAtSource',
        'pensionSummaryCostBreakdowns' => 'getPensionSummaryCostBreakdowns',
        'roleId' => 'getRoleId',
        'roleWeightage' => 'getRoleWeightage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('costCentre', $data ?? [], null);
        $this->setIfExists('employeeRoleAnalysisCategory', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('totalPay', $data ?? [], null);
        $this->setIfExists('niablePay', $data ?? [], null);
        $this->setIfExists('pensionPay', $data ?? [], null);
        $this->setIfExists('niPercent', $data ?? [], null);
        $this->setIfExists('ersNi', $data ?? [], null);
        $this->setIfExists('pensionPercent', $data ?? [], null);
        $this->setIfExists('ersPension', $data ?? [], null);
        $this->setIfExists('taxablePay', $data ?? [], null);
        $this->setIfExists('taxablePercent', $data ?? [], null);
        $this->setIfExists('employeeNi', $data ?? [], null);
        $this->setIfExists('taxPaid', $data ?? [], null);
        $this->setIfExists('studentLoan', $data ?? [], null);
        $this->setIfExists('employeePension', $data ?? [], null);
        $this->setIfExists('employeePensionContributionSalarySacrifice', $data ?? [], null);
        $this->setIfExists('employeePensionContributionReliefAtSource', $data ?? [], null);
        $this->setIfExists('pensionSummaryCostBreakdowns', $data ?? [], null);
        $this->setIfExists('roleId', $data ?? [], null);
        $this->setIfExists('roleWeightage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode payrollCode
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return $this
     */
    public function setLastName(?string $lastName): static
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \SynergiTech\Staffology\Model\StringDecimalKeyValuePair|null
     */
    public function getDepartment(): ?\SynergiTech\Staffology\Model\StringDecimalKeyValuePair
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \SynergiTech\Staffology\Model\StringDecimalKeyValuePair|null $department department
     *
     * @return $this
     */
    public function setDepartment(?\SynergiTech\Staffology\Model\StringDecimalKeyValuePair $department): static
    {
        if (is_null($department)) {
            throw new InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets costCentre
     *
     * @return \SynergiTech\Staffology\Model\StringDecimalKeyValuePair|null
     */
    public function getCostCentre(): ?\SynergiTech\Staffology\Model\StringDecimalKeyValuePair
    {
        return $this->container['costCentre'];
    }

    /**
     * Sets costCentre
     *
     * @param \SynergiTech\Staffology\Model\StringDecimalKeyValuePair|null $costCentre costCentre
     *
     * @return $this
     */
    public function setCostCentre(?\SynergiTech\Staffology\Model\StringDecimalKeyValuePair $costCentre): static
    {
        if (is_null($costCentre)) {
            throw new InvalidArgumentException('non-nullable costCentre cannot be null');
        }
        $this->container['costCentre'] = $costCentre;

        return $this;
    }

    /**
     * Gets employeeRoleAnalysisCategory
     *
     * @return array<string,\SynergiTech\Staffology\Model\StringDecimalKeyValuePair>|null
     */
    public function getEmployeeRoleAnalysisCategory(): ?array
    {
        return $this->container['employeeRoleAnalysisCategory'];
    }

    /**
     * Sets employeeRoleAnalysisCategory
     *
     * @param array<string,\SynergiTech\Staffology\Model\StringDecimalKeyValuePair>|null $employeeRoleAnalysisCategory employeeRoleAnalysisCategory
     *
     * @return $this
     */
    public function setEmployeeRoleAnalysisCategory(?array $employeeRoleAnalysisCategory): static
    {
        if (is_null($employeeRoleAnalysisCategory)) {
            array_push($this->openAPINullablesSetToNull, 'employeeRoleAnalysisCategory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeRoleAnalysisCategory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeRoleAnalysisCategory'] = $employeeRoleAnalysisCategory;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportValue[]|null
     */
    public function getLines(): ?array
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportValue[]|null $lines lines
     *
     * @return $this
     */
    public function setLines(?array $lines): static
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets totalPay
     *
     * @return float|null
     */
    public function getTotalPay(): ?float
    {
        return $this->container['totalPay'];
    }

    /**
     * Sets totalPay
     *
     * @param float|null $totalPay totalPay
     *
     * @return $this
     */
    public function setTotalPay(?float $totalPay): static
    {
        if (is_null($totalPay)) {
            throw new InvalidArgumentException('non-nullable totalPay cannot be null');
        }
        $this->container['totalPay'] = $totalPay;

        return $this;
    }

    /**
     * Gets niablePay
     *
     * @return float|null
     */
    public function getNiablePay(): ?float
    {
        return $this->container['niablePay'];
    }

    /**
     * Sets niablePay
     *
     * @param float|null $niablePay niablePay
     *
     * @return $this
     */
    public function setNiablePay(?float $niablePay): static
    {
        if (is_null($niablePay)) {
            throw new InvalidArgumentException('non-nullable niablePay cannot be null');
        }
        $this->container['niablePay'] = $niablePay;

        return $this;
    }

    /**
     * Gets pensionPay
     *
     * @return float|null
     */
    public function getPensionPay(): ?float
    {
        return $this->container['pensionPay'];
    }

    /**
     * Sets pensionPay
     *
     * @param float|null $pensionPay pensionPay
     *
     * @return $this
     */
    public function setPensionPay(?float $pensionPay): static
    {
        if (is_null($pensionPay)) {
            throw new InvalidArgumentException('non-nullable pensionPay cannot be null');
        }
        $this->container['pensionPay'] = $pensionPay;

        return $this;
    }

    /**
     * Gets niPercent
     *
     * @return float|null
     */
    public function getNiPercent(): ?float
    {
        return $this->container['niPercent'];
    }

    /**
     * Sets niPercent
     *
     * @param float|null $niPercent niPercent
     *
     * @return $this
     */
    public function setNiPercent(?float $niPercent): static
    {
        if (is_null($niPercent)) {
            throw new InvalidArgumentException('non-nullable niPercent cannot be null');
        }
        $this->container['niPercent'] = $niPercent;

        return $this;
    }

    /**
     * Gets ersNi
     *
     * @return float|null
     */
    public function getErsNi(): ?float
    {
        return $this->container['ersNi'];
    }

    /**
     * Sets ersNi
     *
     * @param float|null $ersNi ersNi
     *
     * @return $this
     */
    public function setErsNi(?float $ersNi): static
    {
        if (is_null($ersNi)) {
            throw new InvalidArgumentException('non-nullable ersNi cannot be null');
        }
        $this->container['ersNi'] = $ersNi;

        return $this;
    }

    /**
     * Gets pensionPercent
     *
     * @return float|null
     */
    public function getPensionPercent(): ?float
    {
        return $this->container['pensionPercent'];
    }

    /**
     * Sets pensionPercent
     *
     * @param float|null $pensionPercent pensionPercent
     *
     * @return $this
     */
    public function setPensionPercent(?float $pensionPercent): static
    {
        if (is_null($pensionPercent)) {
            throw new InvalidArgumentException('non-nullable pensionPercent cannot be null');
        }
        $this->container['pensionPercent'] = $pensionPercent;

        return $this;
    }

    /**
     * Gets ersPension
     *
     * @return float|null
     */
    public function getErsPension(): ?float
    {
        return $this->container['ersPension'];
    }

    /**
     * Sets ersPension
     *
     * @param float|null $ersPension ersPension
     *
     * @return $this
     */
    public function setErsPension(?float $ersPension): static
    {
        if (is_null($ersPension)) {
            throw new InvalidArgumentException('non-nullable ersPension cannot be null');
        }
        $this->container['ersPension'] = $ersPension;

        return $this;
    }

    /**
     * Gets taxablePay
     *
     * @return float|null
     */
    public function getTaxablePay(): ?float
    {
        return $this->container['taxablePay'];
    }

    /**
     * Sets taxablePay
     *
     * @param float|null $taxablePay taxablePay
     *
     * @return $this
     */
    public function setTaxablePay(?float $taxablePay): static
    {
        if (is_null($taxablePay)) {
            throw new InvalidArgumentException('non-nullable taxablePay cannot be null');
        }
        $this->container['taxablePay'] = $taxablePay;

        return $this;
    }

    /**
     * Gets taxablePercent
     *
     * @return float|null
     */
    public function getTaxablePercent(): ?float
    {
        return $this->container['taxablePercent'];
    }

    /**
     * Sets taxablePercent
     *
     * @param float|null $taxablePercent taxablePercent
     *
     * @return $this
     */
    public function setTaxablePercent(?float $taxablePercent): static
    {
        if (is_null($taxablePercent)) {
            throw new InvalidArgumentException('non-nullable taxablePercent cannot be null');
        }
        $this->container['taxablePercent'] = $taxablePercent;

        return $this;
    }

    /**
     * Gets employeeNi
     *
     * @return float|null
     */
    public function getEmployeeNi(): ?float
    {
        return $this->container['employeeNi'];
    }

    /**
     * Sets employeeNi
     *
     * @param float|null $employeeNi employeeNi
     *
     * @return $this
     */
    public function setEmployeeNi(?float $employeeNi): static
    {
        if (is_null($employeeNi)) {
            throw new InvalidArgumentException('non-nullable employeeNi cannot be null');
        }
        $this->container['employeeNi'] = $employeeNi;

        return $this;
    }

    /**
     * Gets taxPaid
     *
     * @return float|null
     */
    public function getTaxPaid(): ?float
    {
        return $this->container['taxPaid'];
    }

    /**
     * Sets taxPaid
     *
     * @param float|null $taxPaid taxPaid
     *
     * @return $this
     */
    public function setTaxPaid(?float $taxPaid): static
    {
        if (is_null($taxPaid)) {
            throw new InvalidArgumentException('non-nullable taxPaid cannot be null');
        }
        $this->container['taxPaid'] = $taxPaid;

        return $this;
    }

    /**
     * Gets studentLoan
     *
     * @return float|null
     */
    public function getStudentLoan(): ?float
    {
        return $this->container['studentLoan'];
    }

    /**
     * Sets studentLoan
     *
     * @param float|null $studentLoan studentLoan
     *
     * @return $this
     */
    public function setStudentLoan(?float $studentLoan): static
    {
        if (is_null($studentLoan)) {
            throw new InvalidArgumentException('non-nullable studentLoan cannot be null');
        }
        $this->container['studentLoan'] = $studentLoan;

        return $this;
    }

    /**
     * Gets employeePension
     *
     * @return float|null
     */
    public function getEmployeePension(): ?float
    {
        return $this->container['employeePension'];
    }

    /**
     * Sets employeePension
     *
     * @param float|null $employeePension The value of the Pension Contribution(PENSION) being made by the Employee
     *
     * @return $this
     */
    public function setEmployeePension(?float $employeePension): static
    {
        if (is_null($employeePension)) {
            throw new InvalidArgumentException('non-nullable employeePension cannot be null');
        }
        $this->container['employeePension'] = $employeePension;

        return $this;
    }

    /**
     * Gets employeePensionContributionSalarySacrifice
     *
     * @return float|null
     */
    public function getEmployeePensionContributionSalarySacrifice(): ?float
    {
        return $this->container['employeePensionContributionSalarySacrifice'];
    }

    /**
     * Sets employeePensionContributionSalarySacrifice
     *
     * @param float|null $employeePensionContributionSalarySacrifice The value of the Pension Contribution Salary Sacrifice(PENSIONSS) being made by the Employee
     *
     * @return $this
     */
    public function setEmployeePensionContributionSalarySacrifice(?float $employeePensionContributionSalarySacrifice): static
    {
        if (is_null($employeePensionContributionSalarySacrifice)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionSalarySacrifice cannot be null');
        }
        $this->container['employeePensionContributionSalarySacrifice'] = $employeePensionContributionSalarySacrifice;

        return $this;
    }

    /**
     * Gets employeePensionContributionReliefAtSource
     *
     * @return float|null
     */
    public function getEmployeePensionContributionReliefAtSource(): ?float
    {
        return $this->container['employeePensionContributionReliefAtSource'];
    }

    /**
     * Sets employeePensionContributionReliefAtSource
     *
     * @param float|null $employeePensionContributionReliefAtSource The value of the Pension Contribution Relief At Source(PENSIONRAS) being made by the Employee
     *
     * @return $this
     */
    public function setEmployeePensionContributionReliefAtSource(?float $employeePensionContributionReliefAtSource): static
    {
        if (is_null($employeePensionContributionReliefAtSource)) {
            throw new InvalidArgumentException('non-nullable employeePensionContributionReliefAtSource cannot be null');
        }
        $this->container['employeePensionContributionReliefAtSource'] = $employeePensionContributionReliefAtSource;

        return $this;
    }

    /**
     * Gets pensionSummaryCostBreakdowns
     *
     * @return \SynergiTech\Staffology\Model\PensionSummaryCostBreakdown[]|null
     */
    public function getPensionSummaryCostBreakdowns(): ?array
    {
        return $this->container['pensionSummaryCostBreakdowns'];
    }

    /**
     * Sets pensionSummaryCostBreakdowns
     *
     * @param \SynergiTech\Staffology\Model\PensionSummaryCostBreakdown[]|null $pensionSummaryCostBreakdowns List of pension summaries, each representing a breakdown of various pension components
     *
     * @return $this
     */
    public function setPensionSummaryCostBreakdowns(?array $pensionSummaryCostBreakdowns): static
    {
        if (is_null($pensionSummaryCostBreakdowns)) {
            array_push($this->openAPINullablesSetToNull, 'pensionSummaryCostBreakdowns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionSummaryCostBreakdowns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionSummaryCostBreakdowns'] = $pensionSummaryCostBreakdowns;

        return $this;
    }

    /**
     * Gets roleId
     *
     * @return string|null
     */
    public function getRoleId(): ?string
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId
     *
     * @param string|null $roleId RoleId of that particular line entry
     *
     * @return $this
     */
    public function setRoleId(?string $roleId): static
    {
        if (is_null($roleId)) {
            array_push($this->openAPINullablesSetToNull, 'roleId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets roleWeightage
     *
     * @return float|null
     */
    public function getRoleWeightage(): ?float
    {
        return $this->container['roleWeightage'];
    }

    /**
     * Sets roleWeightage
     *
     * @param float|null $roleWeightage Weightage value of the given employee role
     *
     * @return $this
     */
    public function setRoleWeightage(?float $roleWeightage): static
    {
        if (is_null($roleWeightage)) {
            throw new InvalidArgumentException('non-nullable roleWeightage cannot be null');
        }
        $this->container['roleWeightage'] = $roleWeightage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


