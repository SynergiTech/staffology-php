<?php
/**
 * PapdisEmployee
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PapdisEmployee Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PapdisEmployee implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PapdisEmployee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'employeeId' => 'string',
        'name' => '\SynergiTech\Staffology\Model\PapdisEmployeeName',
        'identity' => '\SynergiTech\Staffology\Model\PapdisEmployeeIdentity',
        'contact' => '\SynergiTech\Staffology\Model\PapdisEmployeeContact',
        'pay' => '\SynergiTech\Staffology\Model\PapdisEmployeePay',
        'assessment' => '\SynergiTech\Staffology\Model\PapdisEmployeeAssessment',
        'contribution' => '\SynergiTech\Staffology\Model\PapdisEmployeeContribution',
        'exit' => '\SynergiTech\Staffology\Model\PapdisEmployeeExit',
        'payrollCode' => 'string',
        'aeStateDate' => '\DateTime',
        'leaveDate' => '\DateTime',
        'statePensionAge' => 'int',
        'contractualJoinerIndicator' => 'bool',
        'jobTitle' => 'string',
        'pensionMemberReference' => 'string',
        'pensionUniqueId' => 'string',
        'employeeRoleUniqueId' => 'string',
        'lastPaymentDate' => '\DateTime',
        'hasPrevioulyLeftPension' => 'bool',
        'pensionablePayDefinition' => '\SynergiTech\Staffology\Model\PensionablePayDefinition'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int32',
        'employeeId' => 'uuid',
        'name' => null,
        'identity' => null,
        'contact' => null,
        'pay' => null,
        'assessment' => null,
        'contribution' => null,
        'exit' => null,
        'payrollCode' => null,
        'aeStateDate' => 'date',
        'leaveDate' => 'date',
        'statePensionAge' => 'int32',
        'contractualJoinerIndicator' => null,
        'jobTitle' => null,
        'pensionMemberReference' => null,
        'pensionUniqueId' => null,
        'employeeRoleUniqueId' => 'uuid',
        'lastPaymentDate' => 'date',
        'hasPrevioulyLeftPension' => null,
        'pensionablePayDefinition' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employeeId' => false,
        'name' => false,
        'identity' => false,
        'contact' => false,
        'pay' => false,
        'assessment' => false,
        'contribution' => false,
        'exit' => false,
        'payrollCode' => true,
        'aeStateDate' => true,
        'leaveDate' => true,
        'statePensionAge' => false,
        'contractualJoinerIndicator' => false,
        'jobTitle' => true,
        'pensionMemberReference' => true,
        'pensionUniqueId' => true,
        'employeeRoleUniqueId' => false,
        'lastPaymentDate' => true,
        'hasPrevioulyLeftPension' => false,
        'pensionablePayDefinition' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'employeeId' => 'employeeId',
        'name' => 'name',
        'identity' => 'identity',
        'contact' => 'contact',
        'pay' => 'pay',
        'assessment' => 'assessment',
        'contribution' => 'contribution',
        'exit' => 'exit',
        'payrollCode' => 'payrollCode',
        'aeStateDate' => 'aeStateDate',
        'leaveDate' => 'leaveDate',
        'statePensionAge' => 'statePensionAge',
        'contractualJoinerIndicator' => 'contractualJoinerIndicator',
        'jobTitle' => 'jobTitle',
        'pensionMemberReference' => 'pensionMemberReference',
        'pensionUniqueId' => 'pensionUniqueId',
        'employeeRoleUniqueId' => 'employeeRoleUniqueId',
        'lastPaymentDate' => 'lastPaymentDate',
        'hasPrevioulyLeftPension' => 'hasPrevioulyLeftPension',
        'pensionablePayDefinition' => 'pensionablePayDefinition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'employeeId' => 'setEmployeeId',
        'name' => 'setName',
        'identity' => 'setIdentity',
        'contact' => 'setContact',
        'pay' => 'setPay',
        'assessment' => 'setAssessment',
        'contribution' => 'setContribution',
        'exit' => 'setExit',
        'payrollCode' => 'setPayrollCode',
        'aeStateDate' => 'setAeStateDate',
        'leaveDate' => 'setLeaveDate',
        'statePensionAge' => 'setStatePensionAge',
        'contractualJoinerIndicator' => 'setContractualJoinerIndicator',
        'jobTitle' => 'setJobTitle',
        'pensionMemberReference' => 'setPensionMemberReference',
        'pensionUniqueId' => 'setPensionUniqueId',
        'employeeRoleUniqueId' => 'setEmployeeRoleUniqueId',
        'lastPaymentDate' => 'setLastPaymentDate',
        'hasPrevioulyLeftPension' => 'setHasPrevioulyLeftPension',
        'pensionablePayDefinition' => 'setPensionablePayDefinition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'employeeId' => 'getEmployeeId',
        'name' => 'getName',
        'identity' => 'getIdentity',
        'contact' => 'getContact',
        'pay' => 'getPay',
        'assessment' => 'getAssessment',
        'contribution' => 'getContribution',
        'exit' => 'getExit',
        'payrollCode' => 'getPayrollCode',
        'aeStateDate' => 'getAeStateDate',
        'leaveDate' => 'getLeaveDate',
        'statePensionAge' => 'getStatePensionAge',
        'contractualJoinerIndicator' => 'getContractualJoinerIndicator',
        'jobTitle' => 'getJobTitle',
        'pensionMemberReference' => 'getPensionMemberReference',
        'pensionUniqueId' => 'getPensionUniqueId',
        'employeeRoleUniqueId' => 'getEmployeeRoleUniqueId',
        'lastPaymentDate' => 'getLastPaymentDate',
        'hasPrevioulyLeftPension' => 'getHasPrevioulyLeftPension',
        'pensionablePayDefinition' => 'getPensionablePayDefinition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employeeId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('identity', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('pay', $data ?? [], null);
        $this->setIfExists('assessment', $data ?? [], null);
        $this->setIfExists('contribution', $data ?? [], null);
        $this->setIfExists('exit', $data ?? [], null);
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('aeStateDate', $data ?? [], null);
        $this->setIfExists('leaveDate', $data ?? [], null);
        $this->setIfExists('statePensionAge', $data ?? [], null);
        $this->setIfExists('contractualJoinerIndicator', $data ?? [], null);
        $this->setIfExists('jobTitle', $data ?? [], null);
        $this->setIfExists('pensionMemberReference', $data ?? [], null);
        $this->setIfExists('pensionUniqueId', $data ?? [], null);
        $this->setIfExists('employeeRoleUniqueId', $data ?? [], null);
        $this->setIfExists('lastPaymentDate', $data ?? [], null);
        $this->setIfExists('hasPrevioulyLeftPension', $data ?? [], null);
        $this->setIfExists('pensionablePayDefinition', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id [readonly]
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employeeId
     *
     * @return string|null
     */
    public function getEmployeeId(): ?string
    {
        return $this->container['employeeId'];
    }

    /**
     * Sets employeeId
     *
     * @param string|null $employeeId [readonly]
     *
     * @return $this
     */
    public function setEmployeeId(?string $employeeId): static
    {
        if (is_null($employeeId)) {
            throw new InvalidArgumentException('non-nullable employeeId cannot be null');
        }
        $this->container['employeeId'] = $employeeId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeeName|null
     */
    public function getName(): ?\SynergiTech\Staffology\Model\PapdisEmployeeName
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeeName|null $name name
     *
     * @return $this
     */
    public function setName(?\SynergiTech\Staffology\Model\PapdisEmployeeName $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeeIdentity|null
     */
    public function getIdentity(): ?\SynergiTech\Staffology\Model\PapdisEmployeeIdentity
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeeIdentity|null $identity identity
     *
     * @return $this
     */
    public function setIdentity(?\SynergiTech\Staffology\Model\PapdisEmployeeIdentity $identity): static
    {
        if (is_null($identity)) {
            throw new InvalidArgumentException('non-nullable identity cannot be null');
        }
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeeContact|null
     */
    public function getContact(): ?\SynergiTech\Staffology\Model\PapdisEmployeeContact
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeeContact|null $contact contact
     *
     * @return $this
     */
    public function setContact(?\SynergiTech\Staffology\Model\PapdisEmployeeContact $contact): static
    {
        if (is_null($contact)) {
            throw new InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets pay
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeePay|null
     */
    public function getPay(): ?\SynergiTech\Staffology\Model\PapdisEmployeePay
    {
        return $this->container['pay'];
    }

    /**
     * Sets pay
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeePay|null $pay pay
     *
     * @return $this
     */
    public function setPay(?\SynergiTech\Staffology\Model\PapdisEmployeePay $pay): static
    {
        if (is_null($pay)) {
            throw new InvalidArgumentException('non-nullable pay cannot be null');
        }
        $this->container['pay'] = $pay;

        return $this;
    }

    /**
     * Gets assessment
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeeAssessment|null
     */
    public function getAssessment(): ?\SynergiTech\Staffology\Model\PapdisEmployeeAssessment
    {
        return $this->container['assessment'];
    }

    /**
     * Sets assessment
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeeAssessment|null $assessment assessment
     *
     * @return $this
     */
    public function setAssessment(?\SynergiTech\Staffology\Model\PapdisEmployeeAssessment $assessment): static
    {
        if (is_null($assessment)) {
            throw new InvalidArgumentException('non-nullable assessment cannot be null');
        }
        $this->container['assessment'] = $assessment;

        return $this;
    }

    /**
     * Gets contribution
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeeContribution|null
     */
    public function getContribution(): ?\SynergiTech\Staffology\Model\PapdisEmployeeContribution
    {
        return $this->container['contribution'];
    }

    /**
     * Sets contribution
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeeContribution|null $contribution contribution
     *
     * @return $this
     */
    public function setContribution(?\SynergiTech\Staffology\Model\PapdisEmployeeContribution $contribution): static
    {
        if (is_null($contribution)) {
            throw new InvalidArgumentException('non-nullable contribution cannot be null');
        }
        $this->container['contribution'] = $contribution;

        return $this;
    }

    /**
     * Gets exit
     *
     * @return \SynergiTech\Staffology\Model\PapdisEmployeeExit|null
     */
    public function getExit(): ?\SynergiTech\Staffology\Model\PapdisEmployeeExit
    {
        return $this->container['exit'];
    }

    /**
     * Sets exit
     *
     * @param \SynergiTech\Staffology\Model\PapdisEmployeeExit|null $exit exit
     *
     * @return $this
     */
    public function setExit(?\SynergiTech\Staffology\Model\PapdisEmployeeExit $exit): static
    {
        if (is_null($exit)) {
            throw new InvalidArgumentException('non-nullable exit cannot be null');
        }
        $this->container['exit'] = $exit;

        return $this;
    }

    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode [readonly]
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets aeStateDate
     *
     * @return \DateTime|null
     */
    public function getAeStateDate(): ?\DateTime
    {
        return $this->container['aeStateDate'];
    }

    /**
     * Sets aeStateDate
     *
     * @param \DateTime|null $aeStateDate aeStateDate
     *
     * @return $this
     */
    public function setAeStateDate(?\DateTime $aeStateDate): static
    {
        if (is_null($aeStateDate)) {
            array_push($this->openAPINullablesSetToNull, 'aeStateDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aeStateDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aeStateDate'] = $aeStateDate;

        return $this;
    }

    /**
     * Gets leaveDate
     *
     * @return \DateTime|null
     */
    public function getLeaveDate(): ?\DateTime
    {
        return $this->container['leaveDate'];
    }

    /**
     * Sets leaveDate
     *
     * @param \DateTime|null $leaveDate leaveDate
     *
     * @return $this
     */
    public function setLeaveDate(?\DateTime $leaveDate): static
    {
        if (is_null($leaveDate)) {
            array_push($this->openAPINullablesSetToNull, 'leaveDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('leaveDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['leaveDate'] = $leaveDate;

        return $this;
    }

    /**
     * Gets statePensionAge
     *
     * @return int|null
     */
    public function getStatePensionAge(): ?int
    {
        return $this->container['statePensionAge'];
    }

    /**
     * Sets statePensionAge
     *
     * @param int|null $statePensionAge statePensionAge
     *
     * @return $this
     */
    public function setStatePensionAge(?int $statePensionAge): static
    {
        if (is_null($statePensionAge)) {
            throw new InvalidArgumentException('non-nullable statePensionAge cannot be null');
        }
        $this->container['statePensionAge'] = $statePensionAge;

        return $this;
    }

    /**
     * Gets contractualJoinerIndicator
     *
     * @return bool|null
     */
    public function getContractualJoinerIndicator(): ?bool
    {
        return $this->container['contractualJoinerIndicator'];
    }

    /**
     * Sets contractualJoinerIndicator
     *
     * @param bool|null $contractualJoinerIndicator contractualJoinerIndicator
     *
     * @return $this
     */
    public function setContractualJoinerIndicator(?bool $contractualJoinerIndicator): static
    {
        if (is_null($contractualJoinerIndicator)) {
            throw new InvalidArgumentException('non-nullable contractualJoinerIndicator cannot be null');
        }
        $this->container['contractualJoinerIndicator'] = $contractualJoinerIndicator;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return string|null
     */
    public function getJobTitle(): ?string
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     *
     * @param string|null $jobTitle jobTitle
     *
     * @return $this
     */
    public function setJobTitle(?string $jobTitle): static
    {
        if (is_null($jobTitle)) {
            array_push($this->openAPINullablesSetToNull, 'jobTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobTitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets pensionMemberReference
     *
     * @return string|null
     */
    public function getPensionMemberReference(): ?string
    {
        return $this->container['pensionMemberReference'];
    }

    /**
     * Sets pensionMemberReference
     *
     * @param string|null $pensionMemberReference pensionMemberReference
     *
     * @return $this
     */
    public function setPensionMemberReference(?string $pensionMemberReference): static
    {
        if (is_null($pensionMemberReference)) {
            array_push($this->openAPINullablesSetToNull, 'pensionMemberReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionMemberReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionMemberReference'] = $pensionMemberReference;

        return $this;
    }

    /**
     * Gets pensionUniqueId
     *
     * @return string|null
     */
    public function getPensionUniqueId(): ?string
    {
        return $this->container['pensionUniqueId'];
    }

    /**
     * Sets pensionUniqueId
     *
     * @param string|null $pensionUniqueId pensionUniqueId
     *
     * @return $this
     */
    public function setPensionUniqueId(?string $pensionUniqueId): static
    {
        if (is_null($pensionUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'pensionUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionUniqueId'] = $pensionUniqueId;

        return $this;
    }

    /**
     * Gets employeeRoleUniqueId
     *
     * @return string|null
     */
    public function getEmployeeRoleUniqueId(): ?string
    {
        return $this->container['employeeRoleUniqueId'];
    }

    /**
     * Sets employeeRoleUniqueId
     *
     * @param string|null $employeeRoleUniqueId employeeRoleUniqueId
     *
     * @return $this
     */
    public function setEmployeeRoleUniqueId(?string $employeeRoleUniqueId): static
    {
        if (is_null($employeeRoleUniqueId)) {
            throw new InvalidArgumentException('non-nullable employeeRoleUniqueId cannot be null');
        }
        $this->container['employeeRoleUniqueId'] = $employeeRoleUniqueId;

        return $this;
    }

    /**
     * Gets lastPaymentDate
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDate(): ?\DateTime
    {
        return $this->container['lastPaymentDate'];
    }

    /**
     * Sets lastPaymentDate
     *
     * @param \DateTime|null $lastPaymentDate The last time the employee was paid
     *
     * @return $this
     */
    public function setLastPaymentDate(?\DateTime $lastPaymentDate): static
    {
        if (is_null($lastPaymentDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastPaymentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastPaymentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastPaymentDate'] = $lastPaymentDate;

        return $this;
    }

    /**
     * Gets hasPrevioulyLeftPension
     *
     * @return bool|null
     */
    public function getHasPrevioulyLeftPension(): ?bool
    {
        return $this->container['hasPrevioulyLeftPension'];
    }

    /**
     * Sets hasPrevioulyLeftPension
     *
     * @param bool|null $hasPrevioulyLeftPension Flag indicating the employee has previously left the pension
     *
     * @return $this
     */
    public function setHasPrevioulyLeftPension(?bool $hasPrevioulyLeftPension): static
    {
        if (is_null($hasPrevioulyLeftPension)) {
            throw new InvalidArgumentException('non-nullable hasPrevioulyLeftPension cannot be null');
        }
        $this->container['hasPrevioulyLeftPension'] = $hasPrevioulyLeftPension;

        return $this;
    }

    /**
     * Gets pensionablePayDefinition
     *
     * @return \SynergiTech\Staffology\Model\PensionablePayDefinition|null
     */
    public function getPensionablePayDefinition(): ?\SynergiTech\Staffology\Model\PensionablePayDefinition
    {
        return $this->container['pensionablePayDefinition'];
    }

    /**
     * Sets pensionablePayDefinition
     *
     * @param \SynergiTech\Staffology\Model\PensionablePayDefinition|null $pensionablePayDefinition pensionablePayDefinition
     *
     * @return $this
     */
    public function setPensionablePayDefinition(?\SynergiTech\Staffology\Model\PensionablePayDefinition $pensionablePayDefinition): static
    {
        if (is_null($pensionablePayDefinition)) {
            throw new InvalidArgumentException('non-nullable pensionablePayDefinition cannot be null');
        }
        $this->container['pensionablePayDefinition'] = $pensionablePayDefinition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


