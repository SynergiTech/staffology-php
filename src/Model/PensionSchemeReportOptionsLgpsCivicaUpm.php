<?php
/**
 * PensionSchemeReportOptionsLgpsCivicaUpm
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PensionSchemeReportOptionsLgpsCivicaUpm Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PensionSchemeReportOptionsLgpsCivicaUpm implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PensionSchemeReportOptionsLgpsCivicaUpm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'payrollNumber' => '\SynergiTech\Staffology\Model\LgpsCivicaPayrollNumber',
        'casualHours' => '\SynergiTech\Staffology\Model\LgpsCivicaCasualHours',
        'omitHeaderLine' => 'bool',
        'includeFolderNo' => 'bool',
        'excludeSchoolEmployerName' => 'bool',
        'addressesForNewJoinersOnly' => 'bool',
        'proRatePtHoursWeeksWorked' => 'bool',
        'fullTimeHoursAsOneHundred' => 'bool',
        'includeWeeksWorkedColumns' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'payrollNumber' => null,
        'casualHours' => null,
        'omitHeaderLine' => null,
        'includeFolderNo' => null,
        'excludeSchoolEmployerName' => null,
        'addressesForNewJoinersOnly' => null,
        'proRatePtHoursWeeksWorked' => null,
        'fullTimeHoursAsOneHundred' => null,
        'includeWeeksWorkedColumns' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'payrollNumber' => false,
        'casualHours' => false,
        'omitHeaderLine' => false,
        'includeFolderNo' => false,
        'excludeSchoolEmployerName' => false,
        'addressesForNewJoinersOnly' => false,
        'proRatePtHoursWeeksWorked' => false,
        'fullTimeHoursAsOneHundred' => false,
        'includeWeeksWorkedColumns' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'payrollNumber' => 'payrollNumber',
        'casualHours' => 'casualHours',
        'omitHeaderLine' => 'omitHeaderLine',
        'includeFolderNo' => 'includeFolderNo',
        'excludeSchoolEmployerName' => 'excludeSchoolEmployerName',
        'addressesForNewJoinersOnly' => 'addressesForNewJoinersOnly',
        'proRatePtHoursWeeksWorked' => 'proRatePtHoursWeeksWorked',
        'fullTimeHoursAsOneHundred' => 'fullTimeHoursAsOneHundred',
        'includeWeeksWorkedColumns' => 'includeWeeksWorkedColumns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'payrollNumber' => 'setPayrollNumber',
        'casualHours' => 'setCasualHours',
        'omitHeaderLine' => 'setOmitHeaderLine',
        'includeFolderNo' => 'setIncludeFolderNo',
        'excludeSchoolEmployerName' => 'setExcludeSchoolEmployerName',
        'addressesForNewJoinersOnly' => 'setAddressesForNewJoinersOnly',
        'proRatePtHoursWeeksWorked' => 'setProRatePtHoursWeeksWorked',
        'fullTimeHoursAsOneHundred' => 'setFullTimeHoursAsOneHundred',
        'includeWeeksWorkedColumns' => 'setIncludeWeeksWorkedColumns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'payrollNumber' => 'getPayrollNumber',
        'casualHours' => 'getCasualHours',
        'omitHeaderLine' => 'getOmitHeaderLine',
        'includeFolderNo' => 'getIncludeFolderNo',
        'excludeSchoolEmployerName' => 'getExcludeSchoolEmployerName',
        'addressesForNewJoinersOnly' => 'getAddressesForNewJoinersOnly',
        'proRatePtHoursWeeksWorked' => 'getProRatePtHoursWeeksWorked',
        'fullTimeHoursAsOneHundred' => 'getFullTimeHoursAsOneHundred',
        'includeWeeksWorkedColumns' => 'getIncludeWeeksWorkedColumns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payrollNumber', $data ?? [], null);
        $this->setIfExists('casualHours', $data ?? [], null);
        $this->setIfExists('omitHeaderLine', $data ?? [], null);
        $this->setIfExists('includeFolderNo', $data ?? [], null);
        $this->setIfExists('excludeSchoolEmployerName', $data ?? [], null);
        $this->setIfExists('addressesForNewJoinersOnly', $data ?? [], null);
        $this->setIfExists('proRatePtHoursWeeksWorked', $data ?? [], null);
        $this->setIfExists('fullTimeHoursAsOneHundred', $data ?? [], null);
        $this->setIfExists('includeWeeksWorkedColumns', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payrollNumber
     *
     * @return \SynergiTech\Staffology\Model\LgpsCivicaPayrollNumber|null
     */
    public function getPayrollNumber(): ?\SynergiTech\Staffology\Model\LgpsCivicaPayrollNumber
    {
        return $this->container['payrollNumber'];
    }

    /**
     * Sets payrollNumber
     *
     * @param \SynergiTech\Staffology\Model\LgpsCivicaPayrollNumber|null $payrollNumber payrollNumber
     *
     * @return $this
     */
    public function setPayrollNumber(?\SynergiTech\Staffology\Model\LgpsCivicaPayrollNumber $payrollNumber): static
    {
        if (is_null($payrollNumber)) {
            throw new InvalidArgumentException('non-nullable payrollNumber cannot be null');
        }
        $this->container['payrollNumber'] = $payrollNumber;

        return $this;
    }

    /**
     * Gets casualHours
     *
     * @return \SynergiTech\Staffology\Model\LgpsCivicaCasualHours|null
     */
    public function getCasualHours(): ?\SynergiTech\Staffology\Model\LgpsCivicaCasualHours
    {
        return $this->container['casualHours'];
    }

    /**
     * Sets casualHours
     *
     * @param \SynergiTech\Staffology\Model\LgpsCivicaCasualHours|null $casualHours casualHours
     *
     * @return $this
     */
    public function setCasualHours(?\SynergiTech\Staffology\Model\LgpsCivicaCasualHours $casualHours): static
    {
        if (is_null($casualHours)) {
            throw new InvalidArgumentException('non-nullable casualHours cannot be null');
        }
        $this->container['casualHours'] = $casualHours;

        return $this;
    }

    /**
     * Gets omitHeaderLine
     *
     * @return bool|null
     */
    public function getOmitHeaderLine(): ?bool
    {
        return $this->container['omitHeaderLine'];
    }

    /**
     * Sets omitHeaderLine
     *
     * @param bool|null $omitHeaderLine omitHeaderLine
     *
     * @return $this
     */
    public function setOmitHeaderLine(?bool $omitHeaderLine): static
    {
        if (is_null($omitHeaderLine)) {
            throw new InvalidArgumentException('non-nullable omitHeaderLine cannot be null');
        }
        $this->container['omitHeaderLine'] = $omitHeaderLine;

        return $this;
    }

    /**
     * Gets includeFolderNo
     *
     * @return bool|null
     */
    public function getIncludeFolderNo(): ?bool
    {
        return $this->container['includeFolderNo'];
    }

    /**
     * Sets includeFolderNo
     *
     * @param bool|null $includeFolderNo includeFolderNo
     *
     * @return $this
     */
    public function setIncludeFolderNo(?bool $includeFolderNo): static
    {
        if (is_null($includeFolderNo)) {
            throw new InvalidArgumentException('non-nullable includeFolderNo cannot be null');
        }
        $this->container['includeFolderNo'] = $includeFolderNo;

        return $this;
    }

    /**
     * Gets excludeSchoolEmployerName
     *
     * @return bool|null
     */
    public function getExcludeSchoolEmployerName(): ?bool
    {
        return $this->container['excludeSchoolEmployerName'];
    }

    /**
     * Sets excludeSchoolEmployerName
     *
     * @param bool|null $excludeSchoolEmployerName excludeSchoolEmployerName
     *
     * @return $this
     */
    public function setExcludeSchoolEmployerName(?bool $excludeSchoolEmployerName): static
    {
        if (is_null($excludeSchoolEmployerName)) {
            throw new InvalidArgumentException('non-nullable excludeSchoolEmployerName cannot be null');
        }
        $this->container['excludeSchoolEmployerName'] = $excludeSchoolEmployerName;

        return $this;
    }

    /**
     * Gets addressesForNewJoinersOnly
     *
     * @return bool|null
     */
    public function getAddressesForNewJoinersOnly(): ?bool
    {
        return $this->container['addressesForNewJoinersOnly'];
    }

    /**
     * Sets addressesForNewJoinersOnly
     *
     * @param bool|null $addressesForNewJoinersOnly addressesForNewJoinersOnly
     *
     * @return $this
     */
    public function setAddressesForNewJoinersOnly(?bool $addressesForNewJoinersOnly): static
    {
        if (is_null($addressesForNewJoinersOnly)) {
            throw new InvalidArgumentException('non-nullable addressesForNewJoinersOnly cannot be null');
        }
        $this->container['addressesForNewJoinersOnly'] = $addressesForNewJoinersOnly;

        return $this;
    }

    /**
     * Gets proRatePtHoursWeeksWorked
     *
     * @return bool|null
     */
    public function getProRatePtHoursWeeksWorked(): ?bool
    {
        return $this->container['proRatePtHoursWeeksWorked'];
    }

    /**
     * Sets proRatePtHoursWeeksWorked
     *
     * @param bool|null $proRatePtHoursWeeksWorked proRatePtHoursWeeksWorked
     *
     * @return $this
     */
    public function setProRatePtHoursWeeksWorked(?bool $proRatePtHoursWeeksWorked): static
    {
        if (is_null($proRatePtHoursWeeksWorked)) {
            throw new InvalidArgumentException('non-nullable proRatePtHoursWeeksWorked cannot be null');
        }
        $this->container['proRatePtHoursWeeksWorked'] = $proRatePtHoursWeeksWorked;

        return $this;
    }

    /**
     * Gets fullTimeHoursAsOneHundred
     *
     * @return bool|null
     */
    public function getFullTimeHoursAsOneHundred(): ?bool
    {
        return $this->container['fullTimeHoursAsOneHundred'];
    }

    /**
     * Sets fullTimeHoursAsOneHundred
     *
     * @param bool|null $fullTimeHoursAsOneHundred fullTimeHoursAsOneHundred
     *
     * @return $this
     */
    public function setFullTimeHoursAsOneHundred(?bool $fullTimeHoursAsOneHundred): static
    {
        if (is_null($fullTimeHoursAsOneHundred)) {
            throw new InvalidArgumentException('non-nullable fullTimeHoursAsOneHundred cannot be null');
        }
        $this->container['fullTimeHoursAsOneHundred'] = $fullTimeHoursAsOneHundred;

        return $this;
    }

    /**
     * Gets includeWeeksWorkedColumns
     *
     * @return bool|null
     */
    public function getIncludeWeeksWorkedColumns(): ?bool
    {
        return $this->container['includeWeeksWorkedColumns'];
    }

    /**
     * Sets includeWeeksWorkedColumns
     *
     * @param bool|null $includeWeeksWorkedColumns includeWeeksWorkedColumns
     *
     * @return $this
     */
    public function setIncludeWeeksWorkedColumns(?bool $includeWeeksWorkedColumns): static
    {
        if (is_null($includeWeeksWorkedColumns)) {
            throw new InvalidArgumentException('non-nullable includeWeeksWorkedColumns cannot be null');
        }
        $this->container['includeWeeksWorkedColumns'] = $includeWeeksWorkedColumns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


