<?php
/**
 * ContractPensionSchemeRequest
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractPensionSchemeRequest Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractPensionSchemeRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.PensionSchemeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'provider' => '\SynergiTech\Staffology\Model\ContractPensionProviderRequest',
        'administrator' => '\SynergiTech\Staffology\Model\ContractPensionAdministratorRequest',
        'pensionRule' => '\SynergiTech\Staffology\Model\PensionRule',
        'qualifyingScheme' => 'bool',
        'disableAeLetters' => 'bool',
        'subtractBasicRateTax' => 'bool',
        'payMethod' => '\SynergiTech\Staffology\Model\PayMethod',
        'bankDetails' => '\SynergiTech\Staffology\Model\ContractBankDetails',
        'useCustomPayCodes' => 'bool',
        'useCustomPayCodesForTierablePay' => 'bool',
        'customPayCodes' => 'string[]',
        'tierablePayCustomPayCodes' => 'string[]',
        'workerGroups' => '\SynergiTech\Staffology\Model\ContractWorkerGroupRequest[]',
        'externalDataProviderId' => '\SynergiTech\Staffology\Model\ExternalDataProviderId',
        'externalDataCompany' => '\SynergiTech\Staffology\Model\ContractExternalDataCompanyRequest',
        'displayName' => 'string',
        'payCodeType' => '\SynergiTech\Staffology\Model\PensionPayCode',
        'tierablePayPayCodeType' => '\SynergiTech\Staffology\Model\PensionPayCode',
        'payCodeSetUniqueId' => 'string',
        'tierablePayPayCodeSetUniqueId' => 'string',
        'paymentDateRule' => '\SynergiTech\Staffology\Model\PaymentDateRule',
        'paymentDateDayOfWeek' => '\SynergiTech\Staffology\Model\DayOfWeek',
        'paymentDateDayOfMonth' => 'int',
        'reportOptionsLgpsIConnect' => '\SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsIConnectRequest',
        'reportOptionsLgpsCivicaUpm' => '\SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsCivicaUpmRequest',
        'deficitValueOrdinal' => 'int',
        'deficitValue' => 'float',
        'includeDeficitValue' => 'bool',
        'deficitValuePayPeriod' => '\SynergiTech\Staffology\Model\PayPeriods',
        'nominalCodeMappings' => '\SynergiTech\Staffology\Model\ContractPensionSchemeNominalCodeMappingRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'provider' => null,
        'administrator' => null,
        'pensionRule' => null,
        'qualifyingScheme' => null,
        'disableAeLetters' => null,
        'subtractBasicRateTax' => null,
        'payMethod' => null,
        'bankDetails' => null,
        'useCustomPayCodes' => null,
        'useCustomPayCodesForTierablePay' => null,
        'customPayCodes' => null,
        'tierablePayCustomPayCodes' => null,
        'workerGroups' => null,
        'externalDataProviderId' => null,
        'externalDataCompany' => null,
        'displayName' => null,
        'payCodeType' => null,
        'tierablePayPayCodeType' => null,
        'payCodeSetUniqueId' => 'uuid',
        'tierablePayPayCodeSetUniqueId' => 'uuid',
        'paymentDateRule' => null,
        'paymentDateDayOfWeek' => null,
        'paymentDateDayOfMonth' => 'int32',
        'reportOptionsLgpsIConnect' => null,
        'reportOptionsLgpsCivicaUpm' => null,
        'deficitValueOrdinal' => 'int32',
        'deficitValue' => 'double',
        'includeDeficitValue' => null,
        'deficitValuePayPeriod' => null,
        'nominalCodeMappings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'provider' => false,
        'administrator' => false,
        'pensionRule' => false,
        'qualifyingScheme' => false,
        'disableAeLetters' => false,
        'subtractBasicRateTax' => false,
        'payMethod' => false,
        'bankDetails' => false,
        'useCustomPayCodes' => false,
        'useCustomPayCodesForTierablePay' => false,
        'customPayCodes' => true,
        'tierablePayCustomPayCodes' => true,
        'workerGroups' => true,
        'externalDataProviderId' => false,
        'externalDataCompany' => false,
        'displayName' => true,
        'payCodeType' => false,
        'tierablePayPayCodeType' => false,
        'payCodeSetUniqueId' => true,
        'tierablePayPayCodeSetUniqueId' => true,
        'paymentDateRule' => false,
        'paymentDateDayOfWeek' => false,
        'paymentDateDayOfMonth' => true,
        'reportOptionsLgpsIConnect' => false,
        'reportOptionsLgpsCivicaUpm' => false,
        'deficitValueOrdinal' => true,
        'deficitValue' => true,
        'includeDeficitValue' => false,
        'deficitValuePayPeriod' => false,
        'nominalCodeMappings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'provider' => 'provider',
        'administrator' => 'administrator',
        'pensionRule' => 'pensionRule',
        'qualifyingScheme' => 'qualifyingScheme',
        'disableAeLetters' => 'disableAeLetters',
        'subtractBasicRateTax' => 'subtractBasicRateTax',
        'payMethod' => 'payMethod',
        'bankDetails' => 'bankDetails',
        'useCustomPayCodes' => 'useCustomPayCodes',
        'useCustomPayCodesForTierablePay' => 'useCustomPayCodesForTierablePay',
        'customPayCodes' => 'customPayCodes',
        'tierablePayCustomPayCodes' => 'tierablePayCustomPayCodes',
        'workerGroups' => 'workerGroups',
        'externalDataProviderId' => 'externalDataProviderId',
        'externalDataCompany' => 'externalDataCompany',
        'displayName' => 'displayName',
        'payCodeType' => 'payCodeType',
        'tierablePayPayCodeType' => 'tierablePayPayCodeType',
        'payCodeSetUniqueId' => 'payCodeSetUniqueId',
        'tierablePayPayCodeSetUniqueId' => 'tierablePayPayCodeSetUniqueId',
        'paymentDateRule' => 'paymentDateRule',
        'paymentDateDayOfWeek' => 'paymentDateDayOfWeek',
        'paymentDateDayOfMonth' => 'paymentDateDayOfMonth',
        'reportOptionsLgpsIConnect' => 'reportOptionsLgpsIConnect',
        'reportOptionsLgpsCivicaUpm' => 'reportOptionsLgpsCivicaUpm',
        'deficitValueOrdinal' => 'deficitValueOrdinal',
        'deficitValue' => 'deficitValue',
        'includeDeficitValue' => 'includeDeficitValue',
        'deficitValuePayPeriod' => 'deficitValuePayPeriod',
        'nominalCodeMappings' => 'nominalCodeMappings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'provider' => 'setProvider',
        'administrator' => 'setAdministrator',
        'pensionRule' => 'setPensionRule',
        'qualifyingScheme' => 'setQualifyingScheme',
        'disableAeLetters' => 'setDisableAeLetters',
        'subtractBasicRateTax' => 'setSubtractBasicRateTax',
        'payMethod' => 'setPayMethod',
        'bankDetails' => 'setBankDetails',
        'useCustomPayCodes' => 'setUseCustomPayCodes',
        'useCustomPayCodesForTierablePay' => 'setUseCustomPayCodesForTierablePay',
        'customPayCodes' => 'setCustomPayCodes',
        'tierablePayCustomPayCodes' => 'setTierablePayCustomPayCodes',
        'workerGroups' => 'setWorkerGroups',
        'externalDataProviderId' => 'setExternalDataProviderId',
        'externalDataCompany' => 'setExternalDataCompany',
        'displayName' => 'setDisplayName',
        'payCodeType' => 'setPayCodeType',
        'tierablePayPayCodeType' => 'setTierablePayPayCodeType',
        'payCodeSetUniqueId' => 'setPayCodeSetUniqueId',
        'tierablePayPayCodeSetUniqueId' => 'setTierablePayPayCodeSetUniqueId',
        'paymentDateRule' => 'setPaymentDateRule',
        'paymentDateDayOfWeek' => 'setPaymentDateDayOfWeek',
        'paymentDateDayOfMonth' => 'setPaymentDateDayOfMonth',
        'reportOptionsLgpsIConnect' => 'setReportOptionsLgpsIConnect',
        'reportOptionsLgpsCivicaUpm' => 'setReportOptionsLgpsCivicaUpm',
        'deficitValueOrdinal' => 'setDeficitValueOrdinal',
        'deficitValue' => 'setDeficitValue',
        'includeDeficitValue' => 'setIncludeDeficitValue',
        'deficitValuePayPeriod' => 'setDeficitValuePayPeriod',
        'nominalCodeMappings' => 'setNominalCodeMappings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'provider' => 'getProvider',
        'administrator' => 'getAdministrator',
        'pensionRule' => 'getPensionRule',
        'qualifyingScheme' => 'getQualifyingScheme',
        'disableAeLetters' => 'getDisableAeLetters',
        'subtractBasicRateTax' => 'getSubtractBasicRateTax',
        'payMethod' => 'getPayMethod',
        'bankDetails' => 'getBankDetails',
        'useCustomPayCodes' => 'getUseCustomPayCodes',
        'useCustomPayCodesForTierablePay' => 'getUseCustomPayCodesForTierablePay',
        'customPayCodes' => 'getCustomPayCodes',
        'tierablePayCustomPayCodes' => 'getTierablePayCustomPayCodes',
        'workerGroups' => 'getWorkerGroups',
        'externalDataProviderId' => 'getExternalDataProviderId',
        'externalDataCompany' => 'getExternalDataCompany',
        'displayName' => 'getDisplayName',
        'payCodeType' => 'getPayCodeType',
        'tierablePayPayCodeType' => 'getTierablePayPayCodeType',
        'payCodeSetUniqueId' => 'getPayCodeSetUniqueId',
        'tierablePayPayCodeSetUniqueId' => 'getTierablePayPayCodeSetUniqueId',
        'paymentDateRule' => 'getPaymentDateRule',
        'paymentDateDayOfWeek' => 'getPaymentDateDayOfWeek',
        'paymentDateDayOfMonth' => 'getPaymentDateDayOfMonth',
        'reportOptionsLgpsIConnect' => 'getReportOptionsLgpsIConnect',
        'reportOptionsLgpsCivicaUpm' => 'getReportOptionsLgpsCivicaUpm',
        'deficitValueOrdinal' => 'getDeficitValueOrdinal',
        'deficitValue' => 'getDeficitValue',
        'includeDeficitValue' => 'getIncludeDeficitValue',
        'deficitValuePayPeriod' => 'getDeficitValuePayPeriod',
        'nominalCodeMappings' => 'getNominalCodeMappings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('administrator', $data ?? [], null);
        $this->setIfExists('pensionRule', $data ?? [], null);
        $this->setIfExists('qualifyingScheme', $data ?? [], null);
        $this->setIfExists('disableAeLetters', $data ?? [], null);
        $this->setIfExists('subtractBasicRateTax', $data ?? [], null);
        $this->setIfExists('payMethod', $data ?? [], null);
        $this->setIfExists('bankDetails', $data ?? [], null);
        $this->setIfExists('useCustomPayCodes', $data ?? [], null);
        $this->setIfExists('useCustomPayCodesForTierablePay', $data ?? [], null);
        $this->setIfExists('customPayCodes', $data ?? [], null);
        $this->setIfExists('tierablePayCustomPayCodes', $data ?? [], null);
        $this->setIfExists('workerGroups', $data ?? [], null);
        $this->setIfExists('externalDataProviderId', $data ?? [], null);
        $this->setIfExists('externalDataCompany', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('payCodeType', $data ?? [], null);
        $this->setIfExists('tierablePayPayCodeType', $data ?? [], null);
        $this->setIfExists('payCodeSetUniqueId', $data ?? [], null);
        $this->setIfExists('tierablePayPayCodeSetUniqueId', $data ?? [], null);
        $this->setIfExists('paymentDateRule', $data ?? [], null);
        $this->setIfExists('paymentDateDayOfWeek', $data ?? [], null);
        $this->setIfExists('paymentDateDayOfMonth', $data ?? [], null);
        $this->setIfExists('reportOptionsLgpsIConnect', $data ?? [], null);
        $this->setIfExists('reportOptionsLgpsCivicaUpm', $data ?? [], null);
        $this->setIfExists('deficitValueOrdinal', $data ?? [], null);
        $this->setIfExists('deficitValue', $data ?? [], null);
        $this->setIfExists('includeDeficitValue', $data ?? [], null);
        $this->setIfExists('deficitValuePayPeriod', $data ?? [], null);
        $this->setIfExists('nominalCodeMappings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionProviderRequest|null
     */
    public function getProvider(): ?\SynergiTech\Staffology\Model\ContractPensionProviderRequest
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionProviderRequest|null $provider provider
     *
     * @return $this
     */
    public function setProvider(?\SynergiTech\Staffology\Model\ContractPensionProviderRequest $provider): static
    {
        if (is_null($provider)) {
            throw new InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets administrator
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionAdministratorRequest|null
     */
    public function getAdministrator(): ?\SynergiTech\Staffology\Model\ContractPensionAdministratorRequest
    {
        return $this->container['administrator'];
    }

    /**
     * Sets administrator
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionAdministratorRequest|null $administrator administrator
     *
     * @return $this
     */
    public function setAdministrator(?\SynergiTech\Staffology\Model\ContractPensionAdministratorRequest $administrator): static
    {
        if (is_null($administrator)) {
            throw new InvalidArgumentException('non-nullable administrator cannot be null');
        }
        $this->container['administrator'] = $administrator;

        return $this;
    }

    /**
     * Gets pensionRule
     *
     * @return \SynergiTech\Staffology\Model\PensionRule|null
     */
    public function getPensionRule(): ?\SynergiTech\Staffology\Model\PensionRule
    {
        return $this->container['pensionRule'];
    }

    /**
     * Sets pensionRule
     *
     * @param \SynergiTech\Staffology\Model\PensionRule|null $pensionRule pensionRule
     *
     * @return $this
     */
    public function setPensionRule(?\SynergiTech\Staffology\Model\PensionRule $pensionRule): static
    {
        if (is_null($pensionRule)) {
            throw new InvalidArgumentException('non-nullable pensionRule cannot be null');
        }
        $this->container['pensionRule'] = $pensionRule;

        return $this;
    }

    /**
     * Gets qualifyingScheme
     *
     * @return bool|null
     */
    public function getQualifyingScheme(): ?bool
    {
        return $this->container['qualifyingScheme'];
    }

    /**
     * Sets qualifyingScheme
     *
     * @param bool|null $qualifyingScheme Set to true if this is a Qualifying Scheme for Auto Enrolment
     *
     * @return $this
     */
    public function setQualifyingScheme(?bool $qualifyingScheme): static
    {
        if (is_null($qualifyingScheme)) {
            throw new InvalidArgumentException('non-nullable qualifyingScheme cannot be null');
        }
        $this->container['qualifyingScheme'] = $qualifyingScheme;

        return $this;
    }

    /**
     * Gets disableAeLetters
     *
     * @return bool|null
     */
    public function getDisableAeLetters(): ?bool
    {
        return $this->container['disableAeLetters'];
    }

    /**
     * Sets disableAeLetters
     *
     * @param bool|null $disableAeLetters Set to true if the provider deals with AutoEnrolment Letters and therefore the system should not generate them
     *
     * @return $this
     */
    public function setDisableAeLetters(?bool $disableAeLetters): static
    {
        if (is_null($disableAeLetters)) {
            throw new InvalidArgumentException('non-nullable disableAeLetters cannot be null');
        }
        $this->container['disableAeLetters'] = $disableAeLetters;

        return $this;
    }

    /**
     * Gets subtractBasicRateTax
     *
     * @return bool|null
     */
    public function getSubtractBasicRateTax(): ?bool
    {
        return $this->container['subtractBasicRateTax'];
    }

    /**
     * Sets subtractBasicRateTax
     *
     * @param bool|null $subtractBasicRateTax subtractBasicRateTax
     *
     * @return $this
     */
    public function setSubtractBasicRateTax(?bool $subtractBasicRateTax): static
    {
        if (is_null($subtractBasicRateTax)) {
            throw new InvalidArgumentException('non-nullable subtractBasicRateTax cannot be null');
        }
        $this->container['subtractBasicRateTax'] = $subtractBasicRateTax;

        return $this;
    }

    /**
     * Gets payMethod
     *
     * @return \SynergiTech\Staffology\Model\PayMethod|null
     */
    public function getPayMethod(): ?\SynergiTech\Staffology\Model\PayMethod
    {
        return $this->container['payMethod'];
    }

    /**
     * Sets payMethod
     *
     * @param \SynergiTech\Staffology\Model\PayMethod|null $payMethod payMethod
     *
     * @return $this
     */
    public function setPayMethod(?\SynergiTech\Staffology\Model\PayMethod $payMethod): static
    {
        if (is_null($payMethod)) {
            throw new InvalidArgumentException('non-nullable payMethod cannot be null');
        }
        $this->container['payMethod'] = $payMethod;

        return $this;
    }

    /**
     * Gets bankDetails
     *
     * @return \SynergiTech\Staffology\Model\ContractBankDetails|null
     */
    public function getBankDetails(): ?\SynergiTech\Staffology\Model\ContractBankDetails
    {
        return $this->container['bankDetails'];
    }

    /**
     * Sets bankDetails
     *
     * @param \SynergiTech\Staffology\Model\ContractBankDetails|null $bankDetails bankDetails
     *
     * @return $this
     */
    public function setBankDetails(?\SynergiTech\Staffology\Model\ContractBankDetails $bankDetails): static
    {
        if (is_null($bankDetails)) {
            throw new InvalidArgumentException('non-nullable bankDetails cannot be null');
        }
        $this->container['bankDetails'] = $bankDetails;

        return $this;
    }

    /**
     * Gets useCustomPayCodes
     *
     * @return bool|null
     */
    public function getUseCustomPayCodes(): ?bool
    {
        return $this->container['useCustomPayCodes'];
    }

    /**
     * Sets useCustomPayCodes
     *
     * @param bool|null $useCustomPayCodes If set to true then rather than using the setting on the PayCode to determine if the pay is pensionable  we'll instead treat it as pensionable if the Code is included in CustomPayCodes
     *
     * @return $this
     */
    public function setUseCustomPayCodes(?bool $useCustomPayCodes): static
    {
        if (is_null($useCustomPayCodes)) {
            throw new InvalidArgumentException('non-nullable useCustomPayCodes cannot be null');
        }
        $this->container['useCustomPayCodes'] = $useCustomPayCodes;

        return $this;
    }

    /**
     * Gets useCustomPayCodesForTierablePay
     *
     * @return bool|null
     */
    public function getUseCustomPayCodesForTierablePay(): ?bool
    {
        return $this->container['useCustomPayCodesForTierablePay'];
    }

    /**
     * Sets useCustomPayCodesForTierablePay
     *
     * @param bool|null $useCustomPayCodesForTierablePay If set to true then rather than using the setting on the PayCode to determine if the pay is tierable  we'll instead treat it as tierable if the Code is included in TierablePayCustomPayCodes
     *
     * @return $this
     */
    public function setUseCustomPayCodesForTierablePay(?bool $useCustomPayCodesForTierablePay): static
    {
        if (is_null($useCustomPayCodesForTierablePay)) {
            throw new InvalidArgumentException('non-nullable useCustomPayCodesForTierablePay cannot be null');
        }
        $this->container['useCustomPayCodesForTierablePay'] = $useCustomPayCodesForTierablePay;

        return $this;
    }

    /**
     * Gets customPayCodes
     *
     * @return string[]|null
     */
    public function getCustomPayCodes(): ?array
    {
        return $this->container['customPayCodes'];
    }

    /**
     * Sets customPayCodes
     *
     * @param string[]|null $customPayCodes If UseCustomPayCodes is set to true then this contains a list of PayCodes.Code  that we'll treat as being pensionable.
     *
     * @return $this
     */
    public function setCustomPayCodes(?array $customPayCodes): static
    {
        if (is_null($customPayCodes)) {
            array_push($this->openAPINullablesSetToNull, 'customPayCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customPayCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customPayCodes'] = $customPayCodes;

        return $this;
    }

    /**
     * Gets tierablePayCustomPayCodes
     *
     * @return string[]|null
     */
    public function getTierablePayCustomPayCodes(): ?array
    {
        return $this->container['tierablePayCustomPayCodes'];
    }

    /**
     * Sets tierablePayCustomPayCodes
     *
     * @param string[]|null $tierablePayCustomPayCodes If UseCustomPayCodesForTierablePay is set to true then this contains a list of PayCodes.Code  that we'll treat as being tierable.
     *
     * @return $this
     */
    public function setTierablePayCustomPayCodes(?array $tierablePayCustomPayCodes): static
    {
        if (is_null($tierablePayCustomPayCodes)) {
            array_push($this->openAPINullablesSetToNull, 'tierablePayCustomPayCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierablePayCustomPayCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tierablePayCustomPayCodes'] = $tierablePayCustomPayCodes;

        return $this;
    }

    /**
     * Gets workerGroups
     *
     * @return \SynergiTech\Staffology\Model\ContractWorkerGroupRequest[]|null
     */
    public function getWorkerGroups(): ?array
    {
        return $this->container['workerGroups'];
    }

    /**
     * Sets workerGroups
     *
     * @param \SynergiTech\Staffology\Model\ContractWorkerGroupRequest[]|null $workerGroups A list of WorkerGroups for this Pension. There must always be at least one WorkerGroup
     *
     * @return $this
     */
    public function setWorkerGroups(?array $workerGroups): static
    {
        if (is_null($workerGroups)) {
            array_push($this->openAPINullablesSetToNull, 'workerGroups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workerGroups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workerGroups'] = $workerGroups;

        return $this;
    }

    /**
     * Gets externalDataProviderId
     *
     * @return \SynergiTech\Staffology\Model\ExternalDataProviderId|null
     */
    public function getExternalDataProviderId(): ?\SynergiTech\Staffology\Model\ExternalDataProviderId
    {
        return $this->container['externalDataProviderId'];
    }

    /**
     * Sets externalDataProviderId
     *
     * @param \SynergiTech\Staffology\Model\ExternalDataProviderId|null $externalDataProviderId externalDataProviderId
     *
     * @return $this
     */
    public function setExternalDataProviderId(?\SynergiTech\Staffology\Model\ExternalDataProviderId $externalDataProviderId): static
    {
        if (is_null($externalDataProviderId)) {
            throw new InvalidArgumentException('non-nullable externalDataProviderId cannot be null');
        }
        $this->container['externalDataProviderId'] = $externalDataProviderId;

        return $this;
    }

    /**
     * Gets externalDataCompany
     *
     * @return \SynergiTech\Staffology\Model\ContractExternalDataCompanyRequest|null
     */
    public function getExternalDataCompany(): ?\SynergiTech\Staffology\Model\ContractExternalDataCompanyRequest
    {
        return $this->container['externalDataCompany'];
    }

    /**
     * Sets externalDataCompany
     *
     * @param \SynergiTech\Staffology\Model\ContractExternalDataCompanyRequest|null $externalDataCompany externalDataCompany
     *
     * @return $this
     */
    public function setExternalDataCompany(?\SynergiTech\Staffology\Model\ContractExternalDataCompanyRequest $externalDataCompany): static
    {
        if (is_null($externalDataCompany)) {
            throw new InvalidArgumentException('non-nullable externalDataCompany cannot be null');
        }
        $this->container['externalDataCompany'] = $externalDataCompany;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName(?string $displayName): static
    {
        if (is_null($displayName)) {
            array_push($this->openAPINullablesSetToNull, 'displayName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets payCodeType
     *
     * @return \SynergiTech\Staffology\Model\PensionPayCode|null
     */
    public function getPayCodeType(): ?\SynergiTech\Staffology\Model\PensionPayCode
    {
        return $this->container['payCodeType'];
    }

    /**
     * Sets payCodeType
     *
     * @param \SynergiTech\Staffology\Model\PensionPayCode|null $payCodeType payCodeType
     *
     * @return $this
     */
    public function setPayCodeType(?\SynergiTech\Staffology\Model\PensionPayCode $payCodeType): static
    {
        if (is_null($payCodeType)) {
            throw new InvalidArgumentException('non-nullable payCodeType cannot be null');
        }
        $this->container['payCodeType'] = $payCodeType;

        return $this;
    }

    /**
     * Gets tierablePayPayCodeType
     *
     * @return \SynergiTech\Staffology\Model\PensionPayCode|null
     */
    public function getTierablePayPayCodeType(): ?\SynergiTech\Staffology\Model\PensionPayCode
    {
        return $this->container['tierablePayPayCodeType'];
    }

    /**
     * Sets tierablePayPayCodeType
     *
     * @param \SynergiTech\Staffology\Model\PensionPayCode|null $tierablePayPayCodeType tierablePayPayCodeType
     *
     * @return $this
     */
    public function setTierablePayPayCodeType(?\SynergiTech\Staffology\Model\PensionPayCode $tierablePayPayCodeType): static
    {
        if (is_null($tierablePayPayCodeType)) {
            throw new InvalidArgumentException('non-nullable tierablePayPayCodeType cannot be null');
        }
        $this->container['tierablePayPayCodeType'] = $tierablePayPayCodeType;

        return $this;
    }

    /**
     * Gets payCodeSetUniqueId
     *
     * @return string|null
     */
    public function getPayCodeSetUniqueId(): ?string
    {
        return $this->container['payCodeSetUniqueId'];
    }

    /**
     * Sets payCodeSetUniqueId
     *
     * @param string|null $payCodeSetUniqueId payCodeSetUniqueId
     *
     * @return $this
     */
    public function setPayCodeSetUniqueId(?string $payCodeSetUniqueId): static
    {
        if (is_null($payCodeSetUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'payCodeSetUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCodeSetUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCodeSetUniqueId'] = $payCodeSetUniqueId;

        return $this;
    }

    /**
     * Gets tierablePayPayCodeSetUniqueId
     *
     * @return string|null
     */
    public function getTierablePayPayCodeSetUniqueId(): ?string
    {
        return $this->container['tierablePayPayCodeSetUniqueId'];
    }

    /**
     * Sets tierablePayPayCodeSetUniqueId
     *
     * @param string|null $tierablePayPayCodeSetUniqueId tierablePayPayCodeSetUniqueId
     *
     * @return $this
     */
    public function setTierablePayPayCodeSetUniqueId(?string $tierablePayPayCodeSetUniqueId): static
    {
        if (is_null($tierablePayPayCodeSetUniqueId)) {
            array_push($this->openAPINullablesSetToNull, 'tierablePayPayCodeSetUniqueId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tierablePayPayCodeSetUniqueId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tierablePayPayCodeSetUniqueId'] = $tierablePayPayCodeSetUniqueId;

        return $this;
    }

    /**
     * Gets paymentDateRule
     *
     * @return \SynergiTech\Staffology\Model\PaymentDateRule|null
     */
    public function getPaymentDateRule(): ?\SynergiTech\Staffology\Model\PaymentDateRule
    {
        return $this->container['paymentDateRule'];
    }

    /**
     * Sets paymentDateRule
     *
     * @param \SynergiTech\Staffology\Model\PaymentDateRule|null $paymentDateRule paymentDateRule
     *
     * @return $this
     */
    public function setPaymentDateRule(?\SynergiTech\Staffology\Model\PaymentDateRule $paymentDateRule): static
    {
        if (is_null($paymentDateRule)) {
            throw new InvalidArgumentException('non-nullable paymentDateRule cannot be null');
        }
        $this->container['paymentDateRule'] = $paymentDateRule;

        return $this;
    }

    /**
     * Gets paymentDateDayOfWeek
     *
     * @return \SynergiTech\Staffology\Model\DayOfWeek|null
     */
    public function getPaymentDateDayOfWeek(): ?\SynergiTech\Staffology\Model\DayOfWeek
    {
        return $this->container['paymentDateDayOfWeek'];
    }

    /**
     * Sets paymentDateDayOfWeek
     *
     * @param \SynergiTech\Staffology\Model\DayOfWeek|null $paymentDateDayOfWeek paymentDateDayOfWeek
     *
     * @return $this
     */
    public function setPaymentDateDayOfWeek(?\SynergiTech\Staffology\Model\DayOfWeek $paymentDateDayOfWeek): static
    {
        if (is_null($paymentDateDayOfWeek)) {
            throw new InvalidArgumentException('non-nullable paymentDateDayOfWeek cannot be null');
        }
        $this->container['paymentDateDayOfWeek'] = $paymentDateDayOfWeek;

        return $this;
    }

    /**
     * Gets paymentDateDayOfMonth
     *
     * @return int|null
     */
    public function getPaymentDateDayOfMonth(): ?int
    {
        return $this->container['paymentDateDayOfMonth'];
    }

    /**
     * Sets paymentDateDayOfMonth
     *
     * @param int|null $paymentDateDayOfMonth paymentDateDayOfMonth
     *
     * @return $this
     */
    public function setPaymentDateDayOfMonth(?int $paymentDateDayOfMonth): static
    {
        if (is_null($paymentDateDayOfMonth)) {
            array_push($this->openAPINullablesSetToNull, 'paymentDateDayOfMonth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDateDayOfMonth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDateDayOfMonth'] = $paymentDateDayOfMonth;

        return $this;
    }

    /**
     * Gets reportOptionsLgpsIConnect
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsIConnectRequest|null
     */
    public function getReportOptionsLgpsIConnect(): ?\SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsIConnectRequest
    {
        return $this->container['reportOptionsLgpsIConnect'];
    }

    /**
     * Sets reportOptionsLgpsIConnect
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsIConnectRequest|null $reportOptionsLgpsIConnect reportOptionsLgpsIConnect
     *
     * @return $this
     */
    public function setReportOptionsLgpsIConnect(?\SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsIConnectRequest $reportOptionsLgpsIConnect): static
    {
        if (is_null($reportOptionsLgpsIConnect)) {
            throw new InvalidArgumentException('non-nullable reportOptionsLgpsIConnect cannot be null');
        }
        $this->container['reportOptionsLgpsIConnect'] = $reportOptionsLgpsIConnect;

        return $this;
    }

    /**
     * Gets reportOptionsLgpsCivicaUpm
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsCivicaUpmRequest|null
     */
    public function getReportOptionsLgpsCivicaUpm(): ?\SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsCivicaUpmRequest
    {
        return $this->container['reportOptionsLgpsCivicaUpm'];
    }

    /**
     * Sets reportOptionsLgpsCivicaUpm
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsCivicaUpmRequest|null $reportOptionsLgpsCivicaUpm reportOptionsLgpsCivicaUpm
     *
     * @return $this
     */
    public function setReportOptionsLgpsCivicaUpm(?\SynergiTech\Staffology\Model\ContractPensionSchemeReportOptionsLgpsCivicaUpmRequest $reportOptionsLgpsCivicaUpm): static
    {
        if (is_null($reportOptionsLgpsCivicaUpm)) {
            throw new InvalidArgumentException('non-nullable reportOptionsLgpsCivicaUpm cannot be null');
        }
        $this->container['reportOptionsLgpsCivicaUpm'] = $reportOptionsLgpsCivicaUpm;

        return $this;
    }

    /**
     * Gets deficitValueOrdinal
     *
     * @return int|null
     */
    public function getDeficitValueOrdinal(): ?int
    {
        return $this->container['deficitValueOrdinal'];
    }

    /**
     * Sets deficitValueOrdinal
     *
     * @param int|null $deficitValueOrdinal The Ordinal used to identify the PaySchedule which the Deficit will be against
     *
     * @return $this
     */
    public function setDeficitValueOrdinal(?int $deficitValueOrdinal): static
    {
        if (is_null($deficitValueOrdinal)) {
            array_push($this->openAPINullablesSetToNull, 'deficitValueOrdinal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deficitValueOrdinal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deficitValueOrdinal'] = $deficitValueOrdinal;

        return $this;
    }

    /**
     * Gets deficitValue
     *
     * @return float|null
     */
    public function getDeficitValue(): ?float
    {
        return $this->container['deficitValue'];
    }

    /**
     * Sets deficitValue
     *
     * @param float|null $deficitValue The Defict value that will be deducted in a PaySchedule
     *
     * @return $this
     */
    public function setDeficitValue(?float $deficitValue): static
    {
        if (is_null($deficitValue)) {
            array_push($this->openAPINullablesSetToNull, 'deficitValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deficitValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deficitValue'] = $deficitValue;

        return $this;
    }

    /**
     * Gets includeDeficitValue
     *
     * @return bool|null
     */
    public function getIncludeDeficitValue(): ?bool
    {
        return $this->container['includeDeficitValue'];
    }

    /**
     * Sets includeDeficitValue
     *
     * @param bool|null $includeDeficitValue Set to true if this a Deficit Payment needs to be assigned to a PaySchedule
     *
     * @return $this
     */
    public function setIncludeDeficitValue(?bool $includeDeficitValue): static
    {
        if (is_null($includeDeficitValue)) {
            throw new InvalidArgumentException('non-nullable includeDeficitValue cannot be null');
        }
        $this->container['includeDeficitValue'] = $includeDeficitValue;

        return $this;
    }

    /**
     * Gets deficitValuePayPeriod
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getDeficitValuePayPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['deficitValuePayPeriod'];
    }

    /**
     * Sets deficitValuePayPeriod
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $deficitValuePayPeriod deficitValuePayPeriod
     *
     * @return $this
     */
    public function setDeficitValuePayPeriod(?\SynergiTech\Staffology\Model\PayPeriods $deficitValuePayPeriod): static
    {
        if (is_null($deficitValuePayPeriod)) {
            throw new InvalidArgumentException('non-nullable deficitValuePayPeriod cannot be null');
        }
        $this->container['deficitValuePayPeriod'] = $deficitValuePayPeriod;

        return $this;
    }

    /**
     * Gets nominalCodeMappings
     *
     * @return \SynergiTech\Staffology\Model\ContractPensionSchemeNominalCodeMappingRequest[]|null
     */
    public function getNominalCodeMappings(): ?array
    {
        return $this->container['nominalCodeMappings'];
    }

    /**
     * Sets nominalCodeMappings
     *
     * @param \SynergiTech\Staffology\Model\ContractPensionSchemeNominalCodeMappingRequest[]|null $nominalCodeMappings The PensionSchemeNominalCodeMappings used to map the PayCodes to a PensionScheme for the journal configuration
     *
     * @return $this
     */
    public function setNominalCodeMappings(?array $nominalCodeMappings): static
    {
        if (is_null($nominalCodeMappings)) {
            array_push($this->openAPINullablesSetToNull, 'nominalCodeMappings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nominalCodeMappings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nominalCodeMappings'] = $nominalCodeMappings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


