<?php
/**
 * P11Line
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * P11Line Class Doc Comment
 *
 * @description Lines for the P11 Report
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class P11Line implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'P11Line';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'date' => '\DateTime',
        'period' => 'string',
        'grossTaxablePay' => 'float',
        'grossTaxablePayYTD' => 'float',
        'tax' => 'float',
        'taxYTD' => 'float',
        'smpYTD' => 'float',
        'sppYTD' => 'float',
        'sapYTD' => 'float',
        'shppYTD' => 'float',
        'spbpYTD' => 'float',
        'sncpYTD' => 'float',
        'studentLoanYTD' => 'float',
        'postgradLoanYTD' => 'float',
        'niValues' => '\SynergiTech\Staffology\Model\P11NiValues[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'date' => 'date',
        'period' => null,
        'grossTaxablePay' => 'double',
        'grossTaxablePayYTD' => 'double',
        'tax' => 'double',
        'taxYTD' => 'double',
        'smpYTD' => 'double',
        'sppYTD' => 'double',
        'sapYTD' => 'double',
        'shppYTD' => 'double',
        'spbpYTD' => 'double',
        'sncpYTD' => 'double',
        'studentLoanYTD' => 'double',
        'postgradLoanYTD' => 'double',
        'niValues' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'date' => false,
        'period' => true,
        'grossTaxablePay' => false,
        'grossTaxablePayYTD' => false,
        'tax' => false,
        'taxYTD' => false,
        'smpYTD' => false,
        'sppYTD' => false,
        'sapYTD' => false,
        'shppYTD' => false,
        'spbpYTD' => false,
        'sncpYTD' => false,
        'studentLoanYTD' => false,
        'postgradLoanYTD' => false,
        'niValues' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'date' => 'date',
        'period' => 'period',
        'grossTaxablePay' => 'grossTaxablePay',
        'grossTaxablePayYTD' => 'grossTaxablePayYTD',
        'tax' => 'tax',
        'taxYTD' => 'taxYTD',
        'smpYTD' => 'smpYTD',
        'sppYTD' => 'sppYTD',
        'sapYTD' => 'sapYTD',
        'shppYTD' => 'shppYTD',
        'spbpYTD' => 'spbpYTD',
        'sncpYTD' => 'sncpYTD',
        'studentLoanYTD' => 'studentLoanYTD',
        'postgradLoanYTD' => 'postgradLoanYTD',
        'niValues' => 'niValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'date' => 'setDate',
        'period' => 'setPeriod',
        'grossTaxablePay' => 'setGrossTaxablePay',
        'grossTaxablePayYTD' => 'setGrossTaxablePayYTD',
        'tax' => 'setTax',
        'taxYTD' => 'setTaxYTD',
        'smpYTD' => 'setSmpYTD',
        'sppYTD' => 'setSppYTD',
        'sapYTD' => 'setSapYTD',
        'shppYTD' => 'setShppYTD',
        'spbpYTD' => 'setSpbpYTD',
        'sncpYTD' => 'setSncpYTD',
        'studentLoanYTD' => 'setStudentLoanYTD',
        'postgradLoanYTD' => 'setPostgradLoanYTD',
        'niValues' => 'setNiValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'date' => 'getDate',
        'period' => 'getPeriod',
        'grossTaxablePay' => 'getGrossTaxablePay',
        'grossTaxablePayYTD' => 'getGrossTaxablePayYTD',
        'tax' => 'getTax',
        'taxYTD' => 'getTaxYTD',
        'smpYTD' => 'getSmpYTD',
        'sppYTD' => 'getSppYTD',
        'sapYTD' => 'getSapYTD',
        'shppYTD' => 'getShppYTD',
        'spbpYTD' => 'getSpbpYTD',
        'sncpYTD' => 'getSncpYTD',
        'studentLoanYTD' => 'getStudentLoanYTD',
        'postgradLoanYTD' => 'getPostgradLoanYTD',
        'niValues' => 'getNiValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('grossTaxablePay', $data ?? [], null);
        $this->setIfExists('grossTaxablePayYTD', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('taxYTD', $data ?? [], null);
        $this->setIfExists('smpYTD', $data ?? [], null);
        $this->setIfExists('sppYTD', $data ?? [], null);
        $this->setIfExists('sapYTD', $data ?? [], null);
        $this->setIfExists('shppYTD', $data ?? [], null);
        $this->setIfExists('spbpYTD', $data ?? [], null);
        $this->setIfExists('sncpYTD', $data ?? [], null);
        $this->setIfExists('studentLoanYTD', $data ?? [], null);
        $this->setIfExists('postgradLoanYTD', $data ?? [], null);
        $this->setIfExists('niValues', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date [readonly]
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod(): ?string
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period [readonly]
     *
     * @return $this
     */
    public function setPeriod(?string $period): static
    {
        if (is_null($period)) {
            array_push($this->openAPINullablesSetToNull, 'period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets grossTaxablePay
     *
     * @return float|null
     */
    public function getGrossTaxablePay(): ?float
    {
        return $this->container['grossTaxablePay'];
    }

    /**
     * Sets grossTaxablePay
     *
     * @param float|null $grossTaxablePay [readonly]
     *
     * @return $this
     */
    public function setGrossTaxablePay(?float $grossTaxablePay): static
    {
        if (is_null($grossTaxablePay)) {
            throw new InvalidArgumentException('non-nullable grossTaxablePay cannot be null');
        }
        $this->container['grossTaxablePay'] = $grossTaxablePay;

        return $this;
    }

    /**
     * Gets grossTaxablePayYTD
     *
     * @return float|null
     */
    public function getGrossTaxablePayYTD(): ?float
    {
        return $this->container['grossTaxablePayYTD'];
    }

    /**
     * Sets grossTaxablePayYTD
     *
     * @param float|null $grossTaxablePayYTD [readonly]
     *
     * @return $this
     */
    public function setGrossTaxablePayYTD(?float $grossTaxablePayYTD): static
    {
        if (is_null($grossTaxablePayYTD)) {
            throw new InvalidArgumentException('non-nullable grossTaxablePayYTD cannot be null');
        }
        $this->container['grossTaxablePayYTD'] = $grossTaxablePayYTD;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax(): ?float
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax [readonly]
     *
     * @return $this
     */
    public function setTax(?float $tax): static
    {
        if (is_null($tax)) {
            throw new InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets taxYTD
     *
     * @return float|null
     */
    public function getTaxYTD(): ?float
    {
        return $this->container['taxYTD'];
    }

    /**
     * Sets taxYTD
     *
     * @param float|null $taxYTD [readonly]
     *
     * @return $this
     */
    public function setTaxYTD(?float $taxYTD): static
    {
        if (is_null($taxYTD)) {
            throw new InvalidArgumentException('non-nullable taxYTD cannot be null');
        }
        $this->container['taxYTD'] = $taxYTD;

        return $this;
    }

    /**
     * Gets smpYTD
     *
     * @return float|null
     */
    public function getSmpYTD(): ?float
    {
        return $this->container['smpYTD'];
    }

    /**
     * Sets smpYTD
     *
     * @param float|null $smpYTD [readonly]
     *
     * @return $this
     */
    public function setSmpYTD(?float $smpYTD): static
    {
        if (is_null($smpYTD)) {
            throw new InvalidArgumentException('non-nullable smpYTD cannot be null');
        }
        $this->container['smpYTD'] = $smpYTD;

        return $this;
    }

    /**
     * Gets sppYTD
     *
     * @return float|null
     */
    public function getSppYTD(): ?float
    {
        return $this->container['sppYTD'];
    }

    /**
     * Sets sppYTD
     *
     * @param float|null $sppYTD [readonly]
     *
     * @return $this
     */
    public function setSppYTD(?float $sppYTD): static
    {
        if (is_null($sppYTD)) {
            throw new InvalidArgumentException('non-nullable sppYTD cannot be null');
        }
        $this->container['sppYTD'] = $sppYTD;

        return $this;
    }

    /**
     * Gets sapYTD
     *
     * @return float|null
     */
    public function getSapYTD(): ?float
    {
        return $this->container['sapYTD'];
    }

    /**
     * Sets sapYTD
     *
     * @param float|null $sapYTD [readonly]
     *
     * @return $this
     */
    public function setSapYTD(?float $sapYTD): static
    {
        if (is_null($sapYTD)) {
            throw new InvalidArgumentException('non-nullable sapYTD cannot be null');
        }
        $this->container['sapYTD'] = $sapYTD;

        return $this;
    }

    /**
     * Gets shppYTD
     *
     * @return float|null
     */
    public function getShppYTD(): ?float
    {
        return $this->container['shppYTD'];
    }

    /**
     * Sets shppYTD
     *
     * @param float|null $shppYTD [readonly]
     *
     * @return $this
     */
    public function setShppYTD(?float $shppYTD): static
    {
        if (is_null($shppYTD)) {
            throw new InvalidArgumentException('non-nullable shppYTD cannot be null');
        }
        $this->container['shppYTD'] = $shppYTD;

        return $this;
    }

    /**
     * Gets spbpYTD
     *
     * @return float|null
     */
    public function getSpbpYTD(): ?float
    {
        return $this->container['spbpYTD'];
    }

    /**
     * Sets spbpYTD
     *
     * @param float|null $spbpYTD [readonly]
     *
     * @return $this
     */
    public function setSpbpYTD(?float $spbpYTD): static
    {
        if (is_null($spbpYTD)) {
            throw new InvalidArgumentException('non-nullable spbpYTD cannot be null');
        }
        $this->container['spbpYTD'] = $spbpYTD;

        return $this;
    }

    /**
     * Gets sncpYTD
     *
     * @return float|null
     */
    public function getSncpYTD(): ?float
    {
        return $this->container['sncpYTD'];
    }

    /**
     * Sets sncpYTD
     *
     * @param float|null $sncpYTD [readonly]
     *
     * @return $this
     */
    public function setSncpYTD(?float $sncpYTD): static
    {
        if (is_null($sncpYTD)) {
            throw new InvalidArgumentException('non-nullable sncpYTD cannot be null');
        }
        $this->container['sncpYTD'] = $sncpYTD;

        return $this;
    }

    /**
     * Gets studentLoanYTD
     *
     * @return float|null
     */
    public function getStudentLoanYTD(): ?float
    {
        return $this->container['studentLoanYTD'];
    }

    /**
     * Sets studentLoanYTD
     *
     * @param float|null $studentLoanYTD [readonly]
     *
     * @return $this
     */
    public function setStudentLoanYTD(?float $studentLoanYTD): static
    {
        if (is_null($studentLoanYTD)) {
            throw new InvalidArgumentException('non-nullable studentLoanYTD cannot be null');
        }
        $this->container['studentLoanYTD'] = $studentLoanYTD;

        return $this;
    }

    /**
     * Gets postgradLoanYTD
     *
     * @return float|null
     */
    public function getPostgradLoanYTD(): ?float
    {
        return $this->container['postgradLoanYTD'];
    }

    /**
     * Sets postgradLoanYTD
     *
     * @param float|null $postgradLoanYTD [readonly]
     *
     * @return $this
     */
    public function setPostgradLoanYTD(?float $postgradLoanYTD): static
    {
        if (is_null($postgradLoanYTD)) {
            throw new InvalidArgumentException('non-nullable postgradLoanYTD cannot be null');
        }
        $this->container['postgradLoanYTD'] = $postgradLoanYTD;

        return $this;
    }

    /**
     * Gets niValues
     *
     * @return \SynergiTech\Staffology\Model\P11NiValues[]|null
     */
    public function getNiValues(): ?array
    {
        return $this->container['niValues'];
    }

    /**
     * Sets niValues
     *
     * @param \SynergiTech\Staffology\Model\P11NiValues[]|null $niValues [readonly]
     *
     * @return $this
     */
    public function setNiValues(?array $niValues): static
    {
        if (is_null($niValues)) {
            array_push($this->openAPINullablesSetToNull, 'niValues');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('niValues', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['niValues'] = $niValues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


