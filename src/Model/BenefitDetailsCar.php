<?php
/**
 * BenefitDetailsCar
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * BenefitDetailsCar Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BenefitDetailsCar implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BenefitDetailsCar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'makeAndModel' => 'string',
        'registration' => 'string',
        'firstRegistered' => '\DateTime',
        'hasApprovedEmissionsValue' => 'bool',
        'co2Emissions' => 'int',
        'engineSize' => 'int',
        'zeroEmissionsMileage' => 'int',
        'fuelType' => '\SynergiTech\Staffology\Model\BenefitDetailsCarPowerType',
        'availableFrom' => '\DateTime',
        'availableTo' => '\DateTime',
        'daysUnavailable' => 'int',
        'listPrice' => 'float',
        'nonStandardAccessories' => 'float',
        'employeeCapitalContributions' => 'float',
        'employeePrivateContributions' => 'float',
        'freeFuel' => 'bool',
        'fuelAvailableFrom' => '\DateTime',
        'fuelAvailableTo' => '\DateTime',
        'freeFuelReinstated' => 'bool',
        'registeredPriorTo1998' => 'bool',
        'rate' => 'float',
        'chargeableValue' => 'float',
        'fullYearCharge' => 'float',
        'cashEquivalent' => 'float',
        'cashEquivalentFuel' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'makeAndModel' => null,
        'registration' => null,
        'firstRegistered' => 'date',
        'hasApprovedEmissionsValue' => null,
        'co2Emissions' => 'int32',
        'engineSize' => 'int32',
        'zeroEmissionsMileage' => 'int32',
        'fuelType' => null,
        'availableFrom' => 'date',
        'availableTo' => 'date',
        'daysUnavailable' => 'int32',
        'listPrice' => 'double',
        'nonStandardAccessories' => 'double',
        'employeeCapitalContributions' => 'double',
        'employeePrivateContributions' => 'double',
        'freeFuel' => null,
        'fuelAvailableFrom' => 'date',
        'fuelAvailableTo' => 'date',
        'freeFuelReinstated' => null,
        'registeredPriorTo1998' => null,
        'rate' => 'double',
        'chargeableValue' => 'double',
        'fullYearCharge' => 'double',
        'cashEquivalent' => 'double',
        'cashEquivalentFuel' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'makeAndModel' => true,
        'registration' => true,
        'firstRegistered' => true,
        'hasApprovedEmissionsValue' => false,
        'co2Emissions' => false,
        'engineSize' => false,
        'zeroEmissionsMileage' => false,
        'fuelType' => false,
        'availableFrom' => true,
        'availableTo' => true,
        'daysUnavailable' => false,
        'listPrice' => false,
        'nonStandardAccessories' => false,
        'employeeCapitalContributions' => false,
        'employeePrivateContributions' => false,
        'freeFuel' => false,
        'fuelAvailableFrom' => true,
        'fuelAvailableTo' => true,
        'freeFuelReinstated' => false,
        'registeredPriorTo1998' => false,
        'rate' => false,
        'chargeableValue' => false,
        'fullYearCharge' => false,
        'cashEquivalent' => false,
        'cashEquivalentFuel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'makeAndModel' => 'makeAndModel',
        'registration' => 'registration',
        'firstRegistered' => 'firstRegistered',
        'hasApprovedEmissionsValue' => 'hasApprovedEmissionsValue',
        'co2Emissions' => 'co2Emissions',
        'engineSize' => 'engineSize',
        'zeroEmissionsMileage' => 'zeroEmissionsMileage',
        'fuelType' => 'fuelType',
        'availableFrom' => 'availableFrom',
        'availableTo' => 'availableTo',
        'daysUnavailable' => 'daysUnavailable',
        'listPrice' => 'listPrice',
        'nonStandardAccessories' => 'nonStandardAccessories',
        'employeeCapitalContributions' => 'employeeCapitalContributions',
        'employeePrivateContributions' => 'employeePrivateContributions',
        'freeFuel' => 'freeFuel',
        'fuelAvailableFrom' => 'fuelAvailableFrom',
        'fuelAvailableTo' => 'fuelAvailableTo',
        'freeFuelReinstated' => 'freeFuelReinstated',
        'registeredPriorTo1998' => 'registeredPriorTo1998',
        'rate' => 'rate',
        'chargeableValue' => 'chargeableValue',
        'fullYearCharge' => 'fullYearCharge',
        'cashEquivalent' => 'cashEquivalent',
        'cashEquivalentFuel' => 'cashEquivalentFuel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'makeAndModel' => 'setMakeAndModel',
        'registration' => 'setRegistration',
        'firstRegistered' => 'setFirstRegistered',
        'hasApprovedEmissionsValue' => 'setHasApprovedEmissionsValue',
        'co2Emissions' => 'setCo2Emissions',
        'engineSize' => 'setEngineSize',
        'zeroEmissionsMileage' => 'setZeroEmissionsMileage',
        'fuelType' => 'setFuelType',
        'availableFrom' => 'setAvailableFrom',
        'availableTo' => 'setAvailableTo',
        'daysUnavailable' => 'setDaysUnavailable',
        'listPrice' => 'setListPrice',
        'nonStandardAccessories' => 'setNonStandardAccessories',
        'employeeCapitalContributions' => 'setEmployeeCapitalContributions',
        'employeePrivateContributions' => 'setEmployeePrivateContributions',
        'freeFuel' => 'setFreeFuel',
        'fuelAvailableFrom' => 'setFuelAvailableFrom',
        'fuelAvailableTo' => 'setFuelAvailableTo',
        'freeFuelReinstated' => 'setFreeFuelReinstated',
        'registeredPriorTo1998' => 'setRegisteredPriorTo1998',
        'rate' => 'setRate',
        'chargeableValue' => 'setChargeableValue',
        'fullYearCharge' => 'setFullYearCharge',
        'cashEquivalent' => 'setCashEquivalent',
        'cashEquivalentFuel' => 'setCashEquivalentFuel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'makeAndModel' => 'getMakeAndModel',
        'registration' => 'getRegistration',
        'firstRegistered' => 'getFirstRegistered',
        'hasApprovedEmissionsValue' => 'getHasApprovedEmissionsValue',
        'co2Emissions' => 'getCo2Emissions',
        'engineSize' => 'getEngineSize',
        'zeroEmissionsMileage' => 'getZeroEmissionsMileage',
        'fuelType' => 'getFuelType',
        'availableFrom' => 'getAvailableFrom',
        'availableTo' => 'getAvailableTo',
        'daysUnavailable' => 'getDaysUnavailable',
        'listPrice' => 'getListPrice',
        'nonStandardAccessories' => 'getNonStandardAccessories',
        'employeeCapitalContributions' => 'getEmployeeCapitalContributions',
        'employeePrivateContributions' => 'getEmployeePrivateContributions',
        'freeFuel' => 'getFreeFuel',
        'fuelAvailableFrom' => 'getFuelAvailableFrom',
        'fuelAvailableTo' => 'getFuelAvailableTo',
        'freeFuelReinstated' => 'getFreeFuelReinstated',
        'registeredPriorTo1998' => 'getRegisteredPriorTo1998',
        'rate' => 'getRate',
        'chargeableValue' => 'getChargeableValue',
        'fullYearCharge' => 'getFullYearCharge',
        'cashEquivalent' => 'getCashEquivalent',
        'cashEquivalentFuel' => 'getCashEquivalentFuel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('makeAndModel', $data ?? [], null);
        $this->setIfExists('registration', $data ?? [], null);
        $this->setIfExists('firstRegistered', $data ?? [], null);
        $this->setIfExists('hasApprovedEmissionsValue', $data ?? [], null);
        $this->setIfExists('co2Emissions', $data ?? [], null);
        $this->setIfExists('engineSize', $data ?? [], null);
        $this->setIfExists('zeroEmissionsMileage', $data ?? [], null);
        $this->setIfExists('fuelType', $data ?? [], null);
        $this->setIfExists('availableFrom', $data ?? [], null);
        $this->setIfExists('availableTo', $data ?? [], null);
        $this->setIfExists('daysUnavailable', $data ?? [], null);
        $this->setIfExists('listPrice', $data ?? [], null);
        $this->setIfExists('nonStandardAccessories', $data ?? [], null);
        $this->setIfExists('employeeCapitalContributions', $data ?? [], null);
        $this->setIfExists('employeePrivateContributions', $data ?? [], null);
        $this->setIfExists('freeFuel', $data ?? [], null);
        $this->setIfExists('fuelAvailableFrom', $data ?? [], null);
        $this->setIfExists('fuelAvailableTo', $data ?? [], null);
        $this->setIfExists('freeFuelReinstated', $data ?? [], null);
        $this->setIfExists('registeredPriorTo1998', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('chargeableValue', $data ?? [], null);
        $this->setIfExists('fullYearCharge', $data ?? [], null);
        $this->setIfExists('cashEquivalent', $data ?? [], null);
        $this->setIfExists('cashEquivalentFuel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets makeAndModel
     *
     * @return string|null
     */
    public function getMakeAndModel(): ?string
    {
        return $this->container['makeAndModel'];
    }

    /**
     * Sets makeAndModel
     *
     * @param string|null $makeAndModel makeAndModel
     *
     * @return $this
     */
    public function setMakeAndModel(?string $makeAndModel): static
    {
        if (is_null($makeAndModel)) {
            array_push($this->openAPINullablesSetToNull, 'makeAndModel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('makeAndModel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['makeAndModel'] = $makeAndModel;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return string|null
     */
    public function getRegistration(): ?string
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param string|null $registration registration
     *
     * @return $this
     */
    public function setRegistration(?string $registration): static
    {
        if (is_null($registration)) {
            array_push($this->openAPINullablesSetToNull, 'registration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration'] = $registration;

        return $this;
    }

    /**
     * Gets firstRegistered
     *
     * @return \DateTime|null
     */
    public function getFirstRegistered(): ?\DateTime
    {
        return $this->container['firstRegistered'];
    }

    /**
     * Sets firstRegistered
     *
     * @param \DateTime|null $firstRegistered firstRegistered
     *
     * @return $this
     */
    public function setFirstRegistered(?\DateTime $firstRegistered): static
    {
        if (is_null($firstRegistered)) {
            array_push($this->openAPINullablesSetToNull, 'firstRegistered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstRegistered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstRegistered'] = $firstRegistered;

        return $this;
    }

    /**
     * Gets hasApprovedEmissionsValue
     *
     * @return bool|null
     */
    public function getHasApprovedEmissionsValue(): ?bool
    {
        return $this->container['hasApprovedEmissionsValue'];
    }

    /**
     * Sets hasApprovedEmissionsValue
     *
     * @param bool|null $hasApprovedEmissionsValue hasApprovedEmissionsValue
     *
     * @return $this
     */
    public function setHasApprovedEmissionsValue(?bool $hasApprovedEmissionsValue): static
    {
        if (is_null($hasApprovedEmissionsValue)) {
            throw new InvalidArgumentException('non-nullable hasApprovedEmissionsValue cannot be null');
        }
        $this->container['hasApprovedEmissionsValue'] = $hasApprovedEmissionsValue;

        return $this;
    }

    /**
     * Gets co2Emissions
     *
     * @return int|null
     */
    public function getCo2Emissions(): ?int
    {
        return $this->container['co2Emissions'];
    }

    /**
     * Sets co2Emissions
     *
     * @param int|null $co2Emissions co2Emissions
     *
     * @return $this
     */
    public function setCo2Emissions(?int $co2Emissions): static
    {
        if (is_null($co2Emissions)) {
            throw new InvalidArgumentException('non-nullable co2Emissions cannot be null');
        }
        $this->container['co2Emissions'] = $co2Emissions;

        return $this;
    }

    /**
     * Gets engineSize
     *
     * @return int|null
     */
    public function getEngineSize(): ?int
    {
        return $this->container['engineSize'];
    }

    /**
     * Sets engineSize
     *
     * @param int|null $engineSize engineSize
     *
     * @return $this
     */
    public function setEngineSize(?int $engineSize): static
    {
        if (is_null($engineSize)) {
            throw new InvalidArgumentException('non-nullable engineSize cannot be null');
        }
        $this->container['engineSize'] = $engineSize;

        return $this;
    }

    /**
     * Gets zeroEmissionsMileage
     *
     * @return int|null
     */
    public function getZeroEmissionsMileage(): ?int
    {
        return $this->container['zeroEmissionsMileage'];
    }

    /**
     * Sets zeroEmissionsMileage
     *
     * @param int|null $zeroEmissionsMileage zeroEmissionsMileage
     *
     * @return $this
     */
    public function setZeroEmissionsMileage(?int $zeroEmissionsMileage): static
    {
        if (is_null($zeroEmissionsMileage)) {
            throw new InvalidArgumentException('non-nullable zeroEmissionsMileage cannot be null');
        }
        $this->container['zeroEmissionsMileage'] = $zeroEmissionsMileage;

        return $this;
    }

    /**
     * Gets fuelType
     *
     * @return \SynergiTech\Staffology\Model\BenefitDetailsCarPowerType|null
     */
    public function getFuelType(): ?\SynergiTech\Staffology\Model\BenefitDetailsCarPowerType
    {
        return $this->container['fuelType'];
    }

    /**
     * Sets fuelType
     *
     * @param \SynergiTech\Staffology\Model\BenefitDetailsCarPowerType|null $fuelType fuelType
     *
     * @return $this
     */
    public function setFuelType(?\SynergiTech\Staffology\Model\BenefitDetailsCarPowerType $fuelType): static
    {
        if (is_null($fuelType)) {
            throw new InvalidArgumentException('non-nullable fuelType cannot be null');
        }
        $this->container['fuelType'] = $fuelType;

        return $this;
    }

    /**
     * Gets availableFrom
     *
     * @return \DateTime|null
     */
    public function getAvailableFrom(): ?\DateTime
    {
        return $this->container['availableFrom'];
    }

    /**
     * Sets availableFrom
     *
     * @param \DateTime|null $availableFrom availableFrom
     *
     * @return $this
     */
    public function setAvailableFrom(?\DateTime $availableFrom): static
    {
        if (is_null($availableFrom)) {
            array_push($this->openAPINullablesSetToNull, 'availableFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableFrom'] = $availableFrom;

        return $this;
    }

    /**
     * Gets availableTo
     *
     * @return \DateTime|null
     */
    public function getAvailableTo(): ?\DateTime
    {
        return $this->container['availableTo'];
    }

    /**
     * Sets availableTo
     *
     * @param \DateTime|null $availableTo availableTo
     *
     * @return $this
     */
    public function setAvailableTo(?\DateTime $availableTo): static
    {
        if (is_null($availableTo)) {
            array_push($this->openAPINullablesSetToNull, 'availableTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableTo'] = $availableTo;

        return $this;
    }

    /**
     * Gets daysUnavailable
     *
     * @return int|null
     */
    public function getDaysUnavailable(): ?int
    {
        return $this->container['daysUnavailable'];
    }

    /**
     * Sets daysUnavailable
     *
     * @param int|null $daysUnavailable daysUnavailable
     *
     * @return $this
     */
    public function setDaysUnavailable(?int $daysUnavailable): static
    {
        if (is_null($daysUnavailable)) {
            throw new InvalidArgumentException('non-nullable daysUnavailable cannot be null');
        }
        $this->container['daysUnavailable'] = $daysUnavailable;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return float|null
     */
    public function getListPrice(): ?float
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param float|null $listPrice listPrice
     *
     * @return $this
     */
    public function setListPrice(?float $listPrice): static
    {
        if (is_null($listPrice)) {
            throw new InvalidArgumentException('non-nullable listPrice cannot be null');
        }
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets nonStandardAccessories
     *
     * @return float|null
     */
    public function getNonStandardAccessories(): ?float
    {
        return $this->container['nonStandardAccessories'];
    }

    /**
     * Sets nonStandardAccessories
     *
     * @param float|null $nonStandardAccessories nonStandardAccessories
     *
     * @return $this
     */
    public function setNonStandardAccessories(?float $nonStandardAccessories): static
    {
        if (is_null($nonStandardAccessories)) {
            throw new InvalidArgumentException('non-nullable nonStandardAccessories cannot be null');
        }
        $this->container['nonStandardAccessories'] = $nonStandardAccessories;

        return $this;
    }

    /**
     * Gets employeeCapitalContributions
     *
     * @return float|null
     */
    public function getEmployeeCapitalContributions(): ?float
    {
        return $this->container['employeeCapitalContributions'];
    }

    /**
     * Sets employeeCapitalContributions
     *
     * @param float|null $employeeCapitalContributions employeeCapitalContributions
     *
     * @return $this
     */
    public function setEmployeeCapitalContributions(?float $employeeCapitalContributions): static
    {
        if (is_null($employeeCapitalContributions)) {
            throw new InvalidArgumentException('non-nullable employeeCapitalContributions cannot be null');
        }
        $this->container['employeeCapitalContributions'] = $employeeCapitalContributions;

        return $this;
    }

    /**
     * Gets employeePrivateContributions
     *
     * @return float|null
     */
    public function getEmployeePrivateContributions(): ?float
    {
        return $this->container['employeePrivateContributions'];
    }

    /**
     * Sets employeePrivateContributions
     *
     * @param float|null $employeePrivateContributions employeePrivateContributions
     *
     * @return $this
     */
    public function setEmployeePrivateContributions(?float $employeePrivateContributions): static
    {
        if (is_null($employeePrivateContributions)) {
            throw new InvalidArgumentException('non-nullable employeePrivateContributions cannot be null');
        }
        $this->container['employeePrivateContributions'] = $employeePrivateContributions;

        return $this;
    }

    /**
     * Gets freeFuel
     *
     * @return bool|null
     */
    public function getFreeFuel(): ?bool
    {
        return $this->container['freeFuel'];
    }

    /**
     * Sets freeFuel
     *
     * @param bool|null $freeFuel freeFuel
     *
     * @return $this
     */
    public function setFreeFuel(?bool $freeFuel): static
    {
        if (is_null($freeFuel)) {
            throw new InvalidArgumentException('non-nullable freeFuel cannot be null');
        }
        $this->container['freeFuel'] = $freeFuel;

        return $this;
    }

    /**
     * Gets fuelAvailableFrom
     *
     * @return \DateTime|null
     */
    public function getFuelAvailableFrom(): ?\DateTime
    {
        return $this->container['fuelAvailableFrom'];
    }

    /**
     * Sets fuelAvailableFrom
     *
     * @param \DateTime|null $fuelAvailableFrom fuelAvailableFrom
     *
     * @return $this
     */
    public function setFuelAvailableFrom(?\DateTime $fuelAvailableFrom): static
    {
        if (is_null($fuelAvailableFrom)) {
            array_push($this->openAPINullablesSetToNull, 'fuelAvailableFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fuelAvailableFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fuelAvailableFrom'] = $fuelAvailableFrom;

        return $this;
    }

    /**
     * Gets fuelAvailableTo
     *
     * @return \DateTime|null
     */
    public function getFuelAvailableTo(): ?\DateTime
    {
        return $this->container['fuelAvailableTo'];
    }

    /**
     * Sets fuelAvailableTo
     *
     * @param \DateTime|null $fuelAvailableTo fuelAvailableTo
     *
     * @return $this
     */
    public function setFuelAvailableTo(?\DateTime $fuelAvailableTo): static
    {
        if (is_null($fuelAvailableTo)) {
            array_push($this->openAPINullablesSetToNull, 'fuelAvailableTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fuelAvailableTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fuelAvailableTo'] = $fuelAvailableTo;

        return $this;
    }

    /**
     * Gets freeFuelReinstated
     *
     * @return bool|null
     */
    public function getFreeFuelReinstated(): ?bool
    {
        return $this->container['freeFuelReinstated'];
    }

    /**
     * Sets freeFuelReinstated
     *
     * @param bool|null $freeFuelReinstated freeFuelReinstated
     *
     * @return $this
     */
    public function setFreeFuelReinstated(?bool $freeFuelReinstated): static
    {
        if (is_null($freeFuelReinstated)) {
            throw new InvalidArgumentException('non-nullable freeFuelReinstated cannot be null');
        }
        $this->container['freeFuelReinstated'] = $freeFuelReinstated;

        return $this;
    }

    /**
     * Gets registeredPriorTo1998
     *
     * @return bool|null
     */
    public function getRegisteredPriorTo1998(): ?bool
    {
        return $this->container['registeredPriorTo1998'];
    }

    /**
     * Sets registeredPriorTo1998
     *
     * @param bool|null $registeredPriorTo1998 [readonly]
     *
     * @return $this
     */
    public function setRegisteredPriorTo1998(?bool $registeredPriorTo1998): static
    {
        if (is_null($registeredPriorTo1998)) {
            throw new InvalidArgumentException('non-nullable registeredPriorTo1998 cannot be null');
        }
        $this->container['registeredPriorTo1998'] = $registeredPriorTo1998;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate(): ?float
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate [readonly] The applicable rate based on CO2Emissions and Engine Size
     *
     * @return $this
     */
    public function setRate(?float $rate): static
    {
        if (is_null($rate)) {
            throw new InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets chargeableValue
     *
     * @return float|null
     */
    public function getChargeableValue(): ?float
    {
        return $this->container['chargeableValue'];
    }

    /**
     * Sets chargeableValue
     *
     * @param float|null $chargeableValue [readonly] The chargeable value of the car
     *
     * @return $this
     */
    public function setChargeableValue(?float $chargeableValue): static
    {
        if (is_null($chargeableValue)) {
            throw new InvalidArgumentException('non-nullable chargeableValue cannot be null');
        }
        $this->container['chargeableValue'] = $chargeableValue;

        return $this;
    }

    /**
     * Gets fullYearCharge
     *
     * @return float|null
     */
    public function getFullYearCharge(): ?float
    {
        return $this->container['fullYearCharge'];
    }

    /**
     * Sets fullYearCharge
     *
     * @param float|null $fullYearCharge [readonly] The charge for the car for a full year, not taking in to account available dates or EmployeePrivateContributions
     *
     * @return $this
     */
    public function setFullYearCharge(?float $fullYearCharge): static
    {
        if (is_null($fullYearCharge)) {
            throw new InvalidArgumentException('non-nullable fullYearCharge cannot be null');
        }
        $this->container['fullYearCharge'] = $fullYearCharge;

        return $this;
    }

    /**
     * Gets cashEquivalent
     *
     * @return float|null
     */
    public function getCashEquivalent(): ?float
    {
        return $this->container['cashEquivalent'];
    }

    /**
     * Sets cashEquivalent
     *
     * @param float|null $cashEquivalent [readonly]
     *
     * @return $this
     */
    public function setCashEquivalent(?float $cashEquivalent): static
    {
        if (is_null($cashEquivalent)) {
            throw new InvalidArgumentException('non-nullable cashEquivalent cannot be null');
        }
        $this->container['cashEquivalent'] = $cashEquivalent;

        return $this;
    }

    /**
     * Gets cashEquivalentFuel
     *
     * @return float|null
     */
    public function getCashEquivalentFuel(): ?float
    {
        return $this->container['cashEquivalentFuel'];
    }

    /**
     * Sets cashEquivalentFuel
     *
     * @param float|null $cashEquivalentFuel [readonly]
     *
     * @return $this
     */
    public function setCashEquivalentFuel(?float $cashEquivalentFuel): static
    {
        if (is_null($cashEquivalentFuel)) {
            throw new InvalidArgumentException('non-nullable cashEquivalentFuel cannot be null');
        }
        $this->container['cashEquivalentFuel'] = $cashEquivalentFuel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


