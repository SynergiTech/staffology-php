<?php
/**
 * LoanBalancesReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * LoanBalancesReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class LoanBalancesReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'LoanBalancesReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'employeeName' => 'string',
        'payrollCode' => 'string',
        'issueDate' => '\DateTime',
        'reference' => 'string',
        'payCode' => 'string',
        'loanAmount' => 'float',
        'paidAmount' => 'float',
        'outstandingBalance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'employeeName' => null,
        'payrollCode' => null,
        'issueDate' => 'date',
        'reference' => null,
        'payCode' => null,
        'loanAmount' => 'double',
        'paidAmount' => 'double',
        'outstandingBalance' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'employeeName' => true,
        'payrollCode' => true,
        'issueDate' => false,
        'reference' => true,
        'payCode' => true,
        'loanAmount' => false,
        'paidAmount' => false,
        'outstandingBalance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'employeeName' => 'employeeName',
        'payrollCode' => 'payrollCode',
        'issueDate' => 'issueDate',
        'reference' => 'reference',
        'payCode' => 'payCode',
        'loanAmount' => 'loanAmount',
        'paidAmount' => 'paidAmount',
        'outstandingBalance' => 'outstandingBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'employeeName' => 'setEmployeeName',
        'payrollCode' => 'setPayrollCode',
        'issueDate' => 'setIssueDate',
        'reference' => 'setReference',
        'payCode' => 'setPayCode',
        'loanAmount' => 'setLoanAmount',
        'paidAmount' => 'setPaidAmount',
        'outstandingBalance' => 'setOutstandingBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'employeeName' => 'getEmployeeName',
        'payrollCode' => 'getPayrollCode',
        'issueDate' => 'getIssueDate',
        'reference' => 'getReference',
        'payCode' => 'getPayCode',
        'loanAmount' => 'getLoanAmount',
        'paidAmount' => 'getPaidAmount',
        'outstandingBalance' => 'getOutstandingBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employeeName', $data ?? [], null);
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('issueDate', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('payCode', $data ?? [], null);
        $this->setIfExists('loanAmount', $data ?? [], null);
        $this->setIfExists('paidAmount', $data ?? [], null);
        $this->setIfExists('outstandingBalance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employeeName
     *
     * @return string|null
     */
    public function getEmployeeName(): ?string
    {
        return $this->container['employeeName'];
    }

    /**
     * Sets employeeName
     *
     * @param string|null $employeeName employeeName
     *
     * @return $this
     */
    public function setEmployeeName(?string $employeeName): static
    {
        if (is_null($employeeName)) {
            array_push($this->openAPINullablesSetToNull, 'employeeName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeName'] = $employeeName;

        return $this;
    }

    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode payrollCode
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets issueDate
     *
     * @return \DateTime|null
     */
    public function getIssueDate(): ?\DateTime
    {
        return $this->container['issueDate'];
    }

    /**
     * Sets issueDate
     *
     * @param \DateTime|null $issueDate issueDate
     *
     * @return $this
     */
    public function setIssueDate(?\DateTime $issueDate): static
    {
        if (is_null($issueDate)) {
            throw new InvalidArgumentException('non-nullable issueDate cannot be null');
        }
        $this->container['issueDate'] = $issueDate;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets payCode
     *
     * @return string|null
     */
    public function getPayCode(): ?string
    {
        return $this->container['payCode'];
    }

    /**
     * Sets payCode
     *
     * @param string|null $payCode payCode
     *
     * @return $this
     */
    public function setPayCode(?string $payCode): static
    {
        if (is_null($payCode)) {
            array_push($this->openAPINullablesSetToNull, 'payCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCode'] = $payCode;

        return $this;
    }

    /**
     * Gets loanAmount
     *
     * @return float|null
     */
    public function getLoanAmount(): ?float
    {
        return $this->container['loanAmount'];
    }

    /**
     * Sets loanAmount
     *
     * @param float|null $loanAmount loanAmount
     *
     * @return $this
     */
    public function setLoanAmount(?float $loanAmount): static
    {
        if (is_null($loanAmount)) {
            throw new InvalidArgumentException('non-nullable loanAmount cannot be null');
        }
        $this->container['loanAmount'] = $loanAmount;

        return $this;
    }

    /**
     * Gets paidAmount
     *
     * @return float|null
     */
    public function getPaidAmount(): ?float
    {
        return $this->container['paidAmount'];
    }

    /**
     * Sets paidAmount
     *
     * @param float|null $paidAmount paidAmount
     *
     * @return $this
     */
    public function setPaidAmount(?float $paidAmount): static
    {
        if (is_null($paidAmount)) {
            throw new InvalidArgumentException('non-nullable paidAmount cannot be null');
        }
        $this->container['paidAmount'] = $paidAmount;

        return $this;
    }

    /**
     * Gets outstandingBalance
     *
     * @return float|null
     */
    public function getOutstandingBalance(): ?float
    {
        return $this->container['outstandingBalance'];
    }

    /**
     * Sets outstandingBalance
     *
     * @param float|null $outstandingBalance outstandingBalance
     *
     * @return $this
     */
    public function setOutstandingBalance(?float $outstandingBalance): static
    {
        if (is_null($outstandingBalance)) {
            throw new InvalidArgumentException('non-nullable outstandingBalance cannot be null');
        }
        $this->container['outstandingBalance'] = $outstandingBalance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


