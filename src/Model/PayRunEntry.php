<?php
/**
 * PayRunEntry
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayRunEntry Class Doc Comment
 *
 * @description A PayRun contains multiple PayRunEntries, one for each Employee that is being paid.  The value for &#x60;&#x60;&#x60;PersonalDetails&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;EmploymentDetails&#x60;&#x60;&#x60; is copied from the Employee record.  So to change them you should update the Employee, not the PayRunEntry.  Changes made to the Employee are only reflected whilst the PayRun is still open.  Once you finalise and close the PayRun then a snapshot is taken of these values which is stored with the PayRunEntry for future reference.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PayRunEntry implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PayRunEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxYear' => '\SynergiTech\Staffology\Model\TaxYear',
        'taxMonth' => 'int',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'note' => 'string',
        'bacsSubReference' => 'string',
        'bacsHashCode' => 'string',
        'percentageOfWorkingDaysPaidAsNormal' => 'float',
        'workingDaysNotPaidAsNormal' => 'float',
        'payPeriod' => '\SynergiTech\Staffology\Model\PayPeriods',
        'ordinal' => 'int',
        'period' => 'int',
        'isNewStarter' => 'bool',
        'unpaidAbsence' => 'bool',
        'hasAttachmentOrders' => 'bool',
        'paymentDate' => '\DateTime',
        'priorPayrollCode' => 'string',
        'pensionSummary' => '\SynergiTech\Staffology\Model\PensionSummary',
        'pensionSummaries' => '\SynergiTech\Staffology\Model\PensionSummary[]',
        'employee' => '\SynergiTech\Staffology\Model\Item',
        'totals' => '\SynergiTech\Staffology\Model\PayRunTotals',
        'periodOverrides' => '\SynergiTech\Staffology\Model\ValueOverride[]',
        'totalsYtd' => '\SynergiTech\Staffology\Model\PayRunTotals',
        'totalsYtdOverrides' => '\SynergiTech\Staffology\Model\ValueOverride[]',
        'forcedCisVatAmount' => 'float',
        'holidayAccrued' => 'float',
        'state' => '\SynergiTech\Staffology\Model\PayRunState',
        'isClosed' => 'bool',
        'manualNi' => 'bool',
        'niSplit' => 'bool',
        'nationalInsuranceCalculation' => '\SynergiTech\Staffology\Model\NationalInsuranceCalculation',
        'payrollCodeChanged' => 'bool',
        'aeNotEnroledWarning' => 'bool',
        'fps' => '\SynergiTech\Staffology\Model\Item',
        'emailId' => 'string',
        'recievingOffsetPay' => 'bool',
        'paymentAfterLeaving' => 'bool',
        'umbrellaPayment' => '\SynergiTech\Staffology\Model\UmbrellaPayment',
        'isRemoved' => 'bool',
        'isRolledBack' => 'bool',
        'periodsCovered' => 'int',
        'employeeRolePayItems' => '\SynergiTech\Staffology\Model\EmployeeRolePayItem[]',
        'warnings' => '\SynergiTech\Staffology\Model\PayRunEntryWarningType',
        'niLetterError' => '\SynergiTech\Staffology\Model\NiLetterError',
        'teachersPensionAgeWarning' => '\SynergiTech\Staffology\Model\TeachersPensionAgeWarning',
        'id' => 'string',
        'personalDetails' => '\SynergiTech\Staffology\Model\PersonalDetails',
        'employmentDetails' => '\SynergiTech\Staffology\Model\EmploymentDetails',
        'payOptions' => '\SynergiTech\Staffology\Model\PayOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxYear' => null,
        'taxMonth' => 'int32',
        'startDate' => 'date',
        'endDate' => 'date',
        'note' => null,
        'bacsSubReference' => null,
        'bacsHashCode' => null,
        'percentageOfWorkingDaysPaidAsNormal' => 'double',
        'workingDaysNotPaidAsNormal' => 'double',
        'payPeriod' => null,
        'ordinal' => 'int32',
        'period' => 'int32',
        'isNewStarter' => null,
        'unpaidAbsence' => null,
        'hasAttachmentOrders' => null,
        'paymentDate' => 'date',
        'priorPayrollCode' => null,
        'pensionSummary' => null,
        'pensionSummaries' => null,
        'employee' => null,
        'totals' => null,
        'periodOverrides' => null,
        'totalsYtd' => null,
        'totalsYtdOverrides' => null,
        'forcedCisVatAmount' => 'double',
        'holidayAccrued' => 'double',
        'state' => null,
        'isClosed' => null,
        'manualNi' => null,
        'niSplit' => null,
        'nationalInsuranceCalculation' => null,
        'payrollCodeChanged' => null,
        'aeNotEnroledWarning' => null,
        'fps' => null,
        'emailId' => 'uuid',
        'recievingOffsetPay' => null,
        'paymentAfterLeaving' => null,
        'umbrellaPayment' => null,
        'isRemoved' => null,
        'isRolledBack' => null,
        'periodsCovered' => 'int32',
        'employeeRolePayItems' => null,
        'warnings' => null,
        'niLetterError' => null,
        'teachersPensionAgeWarning' => null,
        'id' => 'uuid',
        'personalDetails' => null,
        'employmentDetails' => null,
        'payOptions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxYear' => false,
        'taxMonth' => false,
        'startDate' => false,
        'endDate' => false,
        'note' => true,
        'bacsSubReference' => true,
        'bacsHashCode' => true,
        'percentageOfWorkingDaysPaidAsNormal' => false,
        'workingDaysNotPaidAsNormal' => false,
        'payPeriod' => false,
        'ordinal' => false,
        'period' => false,
        'isNewStarter' => false,
        'unpaidAbsence' => false,
        'hasAttachmentOrders' => false,
        'paymentDate' => false,
        'priorPayrollCode' => true,
        'pensionSummary' => false,
        'pensionSummaries' => true,
        'employee' => false,
        'totals' => false,
        'periodOverrides' => true,
        'totalsYtd' => false,
        'totalsYtdOverrides' => true,
        'forcedCisVatAmount' => true,
        'holidayAccrued' => false,
        'state' => false,
        'isClosed' => false,
        'manualNi' => false,
        'niSplit' => false,
        'nationalInsuranceCalculation' => false,
        'payrollCodeChanged' => false,
        'aeNotEnroledWarning' => false,
        'fps' => false,
        'emailId' => true,
        'recievingOffsetPay' => false,
        'paymentAfterLeaving' => false,
        'umbrellaPayment' => false,
        'isRemoved' => false,
        'isRolledBack' => false,
        'periodsCovered' => false,
        'employeeRolePayItems' => true,
        'warnings' => false,
        'niLetterError' => false,
        'teachersPensionAgeWarning' => false,
        'id' => false,
        'personalDetails' => false,
        'employmentDetails' => false,
        'payOptions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxYear' => 'taxYear',
        'taxMonth' => 'taxMonth',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'note' => 'note',
        'bacsSubReference' => 'bacsSubReference',
        'bacsHashCode' => 'bacsHashCode',
        'percentageOfWorkingDaysPaidAsNormal' => 'percentageOfWorkingDaysPaidAsNormal',
        'workingDaysNotPaidAsNormal' => 'workingDaysNotPaidAsNormal',
        'payPeriod' => 'payPeriod',
        'ordinal' => 'ordinal',
        'period' => 'period',
        'isNewStarter' => 'isNewStarter',
        'unpaidAbsence' => 'unpaidAbsence',
        'hasAttachmentOrders' => 'hasAttachmentOrders',
        'paymentDate' => 'paymentDate',
        'priorPayrollCode' => 'priorPayrollCode',
        'pensionSummary' => 'pensionSummary',
        'pensionSummaries' => 'pensionSummaries',
        'employee' => 'employee',
        'totals' => 'totals',
        'periodOverrides' => 'periodOverrides',
        'totalsYtd' => 'totalsYtd',
        'totalsYtdOverrides' => 'totalsYtdOverrides',
        'forcedCisVatAmount' => 'forcedCisVatAmount',
        'holidayAccrued' => 'holidayAccrued',
        'state' => 'state',
        'isClosed' => 'isClosed',
        'manualNi' => 'manualNi',
        'niSplit' => 'niSplit',
        'nationalInsuranceCalculation' => 'nationalInsuranceCalculation',
        'payrollCodeChanged' => 'payrollCodeChanged',
        'aeNotEnroledWarning' => 'aeNotEnroledWarning',
        'fps' => 'fps',
        'emailId' => 'emailId',
        'recievingOffsetPay' => 'recievingOffsetPay',
        'paymentAfterLeaving' => 'paymentAfterLeaving',
        'umbrellaPayment' => 'umbrellaPayment',
        'isRemoved' => 'isRemoved',
        'isRolledBack' => 'isRolledBack',
        'periodsCovered' => 'periodsCovered',
        'employeeRolePayItems' => 'employeeRolePayItems',
        'warnings' => 'warnings',
        'niLetterError' => 'niLetterError',
        'teachersPensionAgeWarning' => 'teachersPensionAgeWarning',
        'id' => 'id',
        'personalDetails' => 'personalDetails',
        'employmentDetails' => 'employmentDetails',
        'payOptions' => 'payOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxYear' => 'setTaxYear',
        'taxMonth' => 'setTaxMonth',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'note' => 'setNote',
        'bacsSubReference' => 'setBacsSubReference',
        'bacsHashCode' => 'setBacsHashCode',
        'percentageOfWorkingDaysPaidAsNormal' => 'setPercentageOfWorkingDaysPaidAsNormal',
        'workingDaysNotPaidAsNormal' => 'setWorkingDaysNotPaidAsNormal',
        'payPeriod' => 'setPayPeriod',
        'ordinal' => 'setOrdinal',
        'period' => 'setPeriod',
        'isNewStarter' => 'setIsNewStarter',
        'unpaidAbsence' => 'setUnpaidAbsence',
        'hasAttachmentOrders' => 'setHasAttachmentOrders',
        'paymentDate' => 'setPaymentDate',
        'priorPayrollCode' => 'setPriorPayrollCode',
        'pensionSummary' => 'setPensionSummary',
        'pensionSummaries' => 'setPensionSummaries',
        'employee' => 'setEmployee',
        'totals' => 'setTotals',
        'periodOverrides' => 'setPeriodOverrides',
        'totalsYtd' => 'setTotalsYtd',
        'totalsYtdOverrides' => 'setTotalsYtdOverrides',
        'forcedCisVatAmount' => 'setForcedCisVatAmount',
        'holidayAccrued' => 'setHolidayAccrued',
        'state' => 'setState',
        'isClosed' => 'setIsClosed',
        'manualNi' => 'setManualNi',
        'niSplit' => 'setNiSplit',
        'nationalInsuranceCalculation' => 'setNationalInsuranceCalculation',
        'payrollCodeChanged' => 'setPayrollCodeChanged',
        'aeNotEnroledWarning' => 'setAeNotEnroledWarning',
        'fps' => 'setFps',
        'emailId' => 'setEmailId',
        'recievingOffsetPay' => 'setRecievingOffsetPay',
        'paymentAfterLeaving' => 'setPaymentAfterLeaving',
        'umbrellaPayment' => 'setUmbrellaPayment',
        'isRemoved' => 'setIsRemoved',
        'isRolledBack' => 'setIsRolledBack',
        'periodsCovered' => 'setPeriodsCovered',
        'employeeRolePayItems' => 'setEmployeeRolePayItems',
        'warnings' => 'setWarnings',
        'niLetterError' => 'setNiLetterError',
        'teachersPensionAgeWarning' => 'setTeachersPensionAgeWarning',
        'id' => 'setId',
        'personalDetails' => 'setPersonalDetails',
        'employmentDetails' => 'setEmploymentDetails',
        'payOptions' => 'setPayOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxYear' => 'getTaxYear',
        'taxMonth' => 'getTaxMonth',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'note' => 'getNote',
        'bacsSubReference' => 'getBacsSubReference',
        'bacsHashCode' => 'getBacsHashCode',
        'percentageOfWorkingDaysPaidAsNormal' => 'getPercentageOfWorkingDaysPaidAsNormal',
        'workingDaysNotPaidAsNormal' => 'getWorkingDaysNotPaidAsNormal',
        'payPeriod' => 'getPayPeriod',
        'ordinal' => 'getOrdinal',
        'period' => 'getPeriod',
        'isNewStarter' => 'getIsNewStarter',
        'unpaidAbsence' => 'getUnpaidAbsence',
        'hasAttachmentOrders' => 'getHasAttachmentOrders',
        'paymentDate' => 'getPaymentDate',
        'priorPayrollCode' => 'getPriorPayrollCode',
        'pensionSummary' => 'getPensionSummary',
        'pensionSummaries' => 'getPensionSummaries',
        'employee' => 'getEmployee',
        'totals' => 'getTotals',
        'periodOverrides' => 'getPeriodOverrides',
        'totalsYtd' => 'getTotalsYtd',
        'totalsYtdOverrides' => 'getTotalsYtdOverrides',
        'forcedCisVatAmount' => 'getForcedCisVatAmount',
        'holidayAccrued' => 'getHolidayAccrued',
        'state' => 'getState',
        'isClosed' => 'getIsClosed',
        'manualNi' => 'getManualNi',
        'niSplit' => 'getNiSplit',
        'nationalInsuranceCalculation' => 'getNationalInsuranceCalculation',
        'payrollCodeChanged' => 'getPayrollCodeChanged',
        'aeNotEnroledWarning' => 'getAeNotEnroledWarning',
        'fps' => 'getFps',
        'emailId' => 'getEmailId',
        'recievingOffsetPay' => 'getRecievingOffsetPay',
        'paymentAfterLeaving' => 'getPaymentAfterLeaving',
        'umbrellaPayment' => 'getUmbrellaPayment',
        'isRemoved' => 'getIsRemoved',
        'isRolledBack' => 'getIsRolledBack',
        'periodsCovered' => 'getPeriodsCovered',
        'employeeRolePayItems' => 'getEmployeeRolePayItems',
        'warnings' => 'getWarnings',
        'niLetterError' => 'getNiLetterError',
        'teachersPensionAgeWarning' => 'getTeachersPensionAgeWarning',
        'id' => 'getId',
        'personalDetails' => 'getPersonalDetails',
        'employmentDetails' => 'getEmploymentDetails',
        'payOptions' => 'getPayOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('taxYear', $data ?? [], null);
        $this->setIfExists('taxMonth', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('bacsSubReference', $data ?? [], null);
        $this->setIfExists('bacsHashCode', $data ?? [], null);
        $this->setIfExists('percentageOfWorkingDaysPaidAsNormal', $data ?? [], null);
        $this->setIfExists('workingDaysNotPaidAsNormal', $data ?? [], null);
        $this->setIfExists('payPeriod', $data ?? [], null);
        $this->setIfExists('ordinal', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('isNewStarter', $data ?? [], null);
        $this->setIfExists('unpaidAbsence', $data ?? [], null);
        $this->setIfExists('hasAttachmentOrders', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('priorPayrollCode', $data ?? [], null);
        $this->setIfExists('pensionSummary', $data ?? [], null);
        $this->setIfExists('pensionSummaries', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('totals', $data ?? [], null);
        $this->setIfExists('periodOverrides', $data ?? [], null);
        $this->setIfExists('totalsYtd', $data ?? [], null);
        $this->setIfExists('totalsYtdOverrides', $data ?? [], null);
        $this->setIfExists('forcedCisVatAmount', $data ?? [], null);
        $this->setIfExists('holidayAccrued', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('isClosed', $data ?? [], null);
        $this->setIfExists('manualNi', $data ?? [], null);
        $this->setIfExists('niSplit', $data ?? [], null);
        $this->setIfExists('nationalInsuranceCalculation', $data ?? [], null);
        $this->setIfExists('payrollCodeChanged', $data ?? [], null);
        $this->setIfExists('aeNotEnroledWarning', $data ?? [], null);
        $this->setIfExists('fps', $data ?? [], null);
        $this->setIfExists('emailId', $data ?? [], null);
        $this->setIfExists('recievingOffsetPay', $data ?? [], null);
        $this->setIfExists('paymentAfterLeaving', $data ?? [], null);
        $this->setIfExists('umbrellaPayment', $data ?? [], null);
        $this->setIfExists('isRemoved', $data ?? [], null);
        $this->setIfExists('isRolledBack', $data ?? [], null);
        $this->setIfExists('periodsCovered', $data ?? [], null);
        $this->setIfExists('employeeRolePayItems', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('niLetterError', $data ?? [], null);
        $this->setIfExists('teachersPensionAgeWarning', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('personalDetails', $data ?? [], null);
        $this->setIfExists('employmentDetails', $data ?? [], null);
        $this->setIfExists('payOptions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 500)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 500.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxYear
     *
     * @return \SynergiTech\Staffology\Model\TaxYear|null
     */
    public function getTaxYear(): ?\SynergiTech\Staffology\Model\TaxYear
    {
        return $this->container['taxYear'];
    }

    /**
     * Sets taxYear
     *
     * @param \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear
     *
     * @return $this
     */
    public function setTaxYear(?\SynergiTech\Staffology\Model\TaxYear $taxYear): static
    {
        if (is_null($taxYear)) {
            throw new InvalidArgumentException('non-nullable taxYear cannot be null');
        }
        $this->container['taxYear'] = $taxYear;

        return $this;
    }

    /**
     * Gets taxMonth
     *
     * @return int|null
     */
    public function getTaxMonth(): ?int
    {
        return $this->container['taxMonth'];
    }

    /**
     * Sets taxMonth
     *
     * @param int|null $taxMonth [readonly] The Tax Month that the Payment Date falls in
     *
     * @return $this
     */
    public function setTaxMonth(?int $taxMonth): static
    {
        if (is_null($taxMonth)) {
            throw new InvalidArgumentException('non-nullable taxMonth cannot be null');
        }
        $this->container['taxMonth'] = $taxMonth;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate [readonly]
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $startDate): static
    {
        if (is_null($startDate)) {
            throw new InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate(): ?\DateTime
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate [readonly]
     *
     * @return $this
     */
    public function setEndDate(?\DateTime $endDate): static
    {
        if (is_null($endDate)) {
            throw new InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote(): ?string
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Any note that you'd like to appear on the payslip
     *
     * @return $this
     */
    public function setNote(?string $note): static
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($note) && (mb_strlen($note) > 500)) {
            throw new InvalidArgumentException('invalid length for $note when calling PayRunEntry., must be smaller than or equal to 500.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets bacsSubReference
     *
     * @return string|null
     */
    public function getBacsSubReference(): ?string
    {
        return $this->container['bacsSubReference'];
    }

    /**
     * Sets bacsSubReference
     *
     * @param string|null $bacsSubReference [readonly] A randomly generated string for use with the RTI Hash Cross Reference
     *
     * @return $this
     */
    public function setBacsSubReference(?string $bacsSubReference): static
    {
        if (is_null($bacsSubReference)) {
            array_push($this->openAPINullablesSetToNull, 'bacsSubReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsSubReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsSubReference'] = $bacsSubReference;

        return $this;
    }

    /**
     * Gets bacsHashCode
     *
     * @return string|null
     */
    public function getBacsHashCode(): ?string
    {
        return $this->container['bacsHashCode'];
    }

    /**
     * Sets bacsHashCode
     *
     * @param string|null $bacsHashCode [readonly] A Hash Code used for RTI BACS Hash Cross Reference
     *
     * @return $this
     */
    public function setBacsHashCode(?string $bacsHashCode): static
    {
        if (is_null($bacsHashCode)) {
            array_push($this->openAPINullablesSetToNull, 'bacsHashCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bacsHashCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bacsHashCode'] = $bacsHashCode;

        return $this;
    }

    /**
     * Gets percentageOfWorkingDaysPaidAsNormal
     *
     * @return float|null
     */
    public function getPercentageOfWorkingDaysPaidAsNormal(): ?float
    {
        return $this->container['percentageOfWorkingDaysPaidAsNormal'];
    }

    /**
     * Sets percentageOfWorkingDaysPaidAsNormal
     *
     * @param float|null $percentageOfWorkingDaysPaidAsNormal [readonly] If the employee is paid a set amount per period (ie, not an hourly or daily rate) and there is any Leave that is either Not Paid or Statutory Pay then this value  will give the percentage of working days (based on the Working Pattern) that should be paid as normal.  If there is no Leave in the period or PayOptions.AutoAdjustForLeave is false, then this will be 1.
     *
     * @return $this
     */
    public function setPercentageOfWorkingDaysPaidAsNormal(?float $percentageOfWorkingDaysPaidAsNormal): static
    {
        if (is_null($percentageOfWorkingDaysPaidAsNormal)) {
            throw new InvalidArgumentException('non-nullable percentageOfWorkingDaysPaidAsNormal cannot be null');
        }
        $this->container['percentageOfWorkingDaysPaidAsNormal'] = $percentageOfWorkingDaysPaidAsNormal;

        return $this;
    }

    /**
     * Gets workingDaysNotPaidAsNormal
     *
     * @return float|null
     */
    public function getWorkingDaysNotPaidAsNormal(): ?float
    {
        return $this->container['workingDaysNotPaidAsNormal'];
    }

    /**
     * Sets workingDaysNotPaidAsNormal
     *
     * @param float|null $workingDaysNotPaidAsNormal [readonly] If PercentageOfWorkingDaysPaidAsNormal has a value other than 1  then this property will tell you how many working days have been deducted from the basic pay  due to either being Not Paid or Statutory Pay
     *
     * @return $this
     */
    public function setWorkingDaysNotPaidAsNormal(?float $workingDaysNotPaidAsNormal): static
    {
        if (is_null($workingDaysNotPaidAsNormal)) {
            throw new InvalidArgumentException('non-nullable workingDaysNotPaidAsNormal cannot be null');
        }
        $this->container['workingDaysNotPaidAsNormal'] = $workingDaysNotPaidAsNormal;

        return $this;
    }

    /**
     * Gets payPeriod
     *
     * @return \SynergiTech\Staffology\Model\PayPeriods|null
     */
    public function getPayPeriod(): ?\SynergiTech\Staffology\Model\PayPeriods
    {
        return $this->container['payPeriod'];
    }

    /**
     * Sets payPeriod
     *
     * @param \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod
     *
     * @return $this
     */
    public function setPayPeriod(?\SynergiTech\Staffology\Model\PayPeriods $payPeriod): static
    {
        if (is_null($payPeriod)) {
            throw new InvalidArgumentException('non-nullable payPeriod cannot be null');
        }
        $this->container['payPeriod'] = $payPeriod;

        return $this;
    }

    /**
     * Gets ordinal
     *
     * @return int|null
     */
    public function getOrdinal(): ?int
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param int|null $ordinal [readonly] Indicates whether this uses the first, second, third (etc) PaySchedule for this PayPeriod.
     *
     * @return $this
     */
    public function setOrdinal(?int $ordinal): static
    {
        if (is_null($ordinal)) {
            throw new InvalidArgumentException('non-nullable ordinal cannot be null');
        }
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod(): ?int
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period [readonly] The Tax Week or Tax Month number this PayRunEntry relates to
     *
     * @return $this
     */
    public function setPeriod(?int $period): static
    {
        if (is_null($period)) {
            throw new InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets isNewStarter
     *
     * @return bool|null
     */
    public function getIsNewStarter(): ?bool
    {
        return $this->container['isNewStarter'];
    }

    /**
     * Sets isNewStarter
     *
     * @param bool|null $isNewStarter Determines whether or not this Employee will be declared as a new starter on the resulting FPS
     *
     * @return $this
     */
    public function setIsNewStarter(?bool $isNewStarter): static
    {
        if (is_null($isNewStarter)) {
            throw new InvalidArgumentException('non-nullable isNewStarter cannot be null');
        }
        $this->container['isNewStarter'] = $isNewStarter;

        return $this;
    }

    /**
     * Gets unpaidAbsence
     *
     * @return bool|null
     */
    public function getUnpaidAbsence(): ?bool
    {
        return $this->container['unpaidAbsence'];
    }

    /**
     * Sets unpaidAbsence
     *
     * @param bool|null $unpaidAbsence [readonly] Indicates that there was unpaid absence in the pay period
     *
     * @return $this
     */
    public function setUnpaidAbsence(?bool $unpaidAbsence): static
    {
        if (is_null($unpaidAbsence)) {
            throw new InvalidArgumentException('non-nullable unpaidAbsence cannot be null');
        }
        $this->container['unpaidAbsence'] = $unpaidAbsence;

        return $this;
    }

    /**
     * Gets hasAttachmentOrders
     *
     * @return bool|null
     */
    public function getHasAttachmentOrders(): ?bool
    {
        return $this->container['hasAttachmentOrders'];
    }

    /**
     * Sets hasAttachmentOrders
     *
     * @param bool|null $hasAttachmentOrders [readonly] Indicates that there are AttachmentOrders for this Employee in this entry
     *
     * @return $this
     */
    public function setHasAttachmentOrders(?bool $hasAttachmentOrders): static
    {
        if (is_null($hasAttachmentOrders)) {
            throw new InvalidArgumentException('non-nullable hasAttachmentOrders cannot be null');
        }
        $this->container['hasAttachmentOrders'] = $hasAttachmentOrders;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return \DateTime|null
     */
    public function getPaymentDate(): ?\DateTime
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param \DateTime|null $paymentDate The date this payment was or will be made
     *
     * @return $this
     */
    public function setPaymentDate(?\DateTime $paymentDate): static
    {
        if (is_null($paymentDate)) {
            throw new InvalidArgumentException('non-nullable paymentDate cannot be null');
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets priorPayrollCode
     *
     * @return string|null
     */
    public function getPriorPayrollCode(): ?string
    {
        return $this->container['priorPayrollCode'];
    }

    /**
     * Sets priorPayrollCode
     *
     * @param string|null $priorPayrollCode [readonly] If the FPS needs to declare a change of PayId then this will contain the previous code  It's worked out automatically but can also be set from the Employees EmploymentDetails property.
     *
     * @return $this
     */
    public function setPriorPayrollCode(?string $priorPayrollCode): static
    {
        if (is_null($priorPayrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'priorPayrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priorPayrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priorPayrollCode'] = $priorPayrollCode;

        return $this;
    }

    /**
     * Gets pensionSummary
     *
     * @return \SynergiTech\Staffology\Model\PensionSummary|null
     */
    public function getPensionSummary(): ?\SynergiTech\Staffology\Model\PensionSummary
    {
        return $this->container['pensionSummary'];
    }

    /**
     * Sets pensionSummary
     *
     * @param \SynergiTech\Staffology\Model\PensionSummary|null $pensionSummary pensionSummary
     *
     * @return $this
     */
    public function setPensionSummary(?\SynergiTech\Staffology\Model\PensionSummary $pensionSummary): static
    {
        if (is_null($pensionSummary)) {
            throw new InvalidArgumentException('non-nullable pensionSummary cannot be null');
        }
        $this->container['pensionSummary'] = $pensionSummary;

        return $this;
    }

    /**
     * Gets pensionSummaries
     *
     * @return \SynergiTech\Staffology\Model\PensionSummary[]|null
     */
    public function getPensionSummaries(): ?array
    {
        return $this->container['pensionSummaries'];
    }

    /**
     * Sets pensionSummaries
     *
     * @param \SynergiTech\Staffology\Model\PensionSummary[]|null $pensionSummaries [readonly] A summary of the details for the Pensions (if any) that the Employee is assigned to.
     *
     * @return $this
     */
    public function setPensionSummaries(?array $pensionSummaries): static
    {
        if (is_null($pensionSummaries)) {
            array_push($this->openAPINullablesSetToNull, 'pensionSummaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pensionSummaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pensionSummaries'] = $pensionSummaries;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getEmployee(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \SynergiTech\Staffology\Model\Item|null $employee employee
     *
     * @return $this
     */
    public function setEmployee(?\SynergiTech\Staffology\Model\Item $employee): static
    {
        if (is_null($employee)) {
            throw new InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \SynergiTech\Staffology\Model\PayRunTotals|null
     */
    public function getTotals(): ?\SynergiTech\Staffology\Model\PayRunTotals
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \SynergiTech\Staffology\Model\PayRunTotals|null $totals totals
     *
     * @return $this
     */
    public function setTotals(?\SynergiTech\Staffology\Model\PayRunTotals $totals): static
    {
        if (is_null($totals)) {
            throw new InvalidArgumentException('non-nullable totals cannot be null');
        }
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets periodOverrides
     *
     * @return \SynergiTech\Staffology\Model\ValueOverride[]|null
     */
    public function getPeriodOverrides(): ?array
    {
        return $this->container['periodOverrides'];
    }

    /**
     * Sets periodOverrides
     *
     * @param \SynergiTech\Staffology\Model\ValueOverride[]|null $periodOverrides Any calculated values for this period that should be overridden with a different value
     *
     * @return $this
     */
    public function setPeriodOverrides(?array $periodOverrides): static
    {
        if (is_null($periodOverrides)) {
            array_push($this->openAPINullablesSetToNull, 'periodOverrides');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periodOverrides', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periodOverrides'] = $periodOverrides;

        return $this;
    }

    /**
     * Gets totalsYtd
     *
     * @return \SynergiTech\Staffology\Model\PayRunTotals|null
     */
    public function getTotalsYtd(): ?\SynergiTech\Staffology\Model\PayRunTotals
    {
        return $this->container['totalsYtd'];
    }

    /**
     * Sets totalsYtd
     *
     * @param \SynergiTech\Staffology\Model\PayRunTotals|null $totalsYtd totalsYtd
     *
     * @return $this
     */
    public function setTotalsYtd(?\SynergiTech\Staffology\Model\PayRunTotals $totalsYtd): static
    {
        if (is_null($totalsYtd)) {
            throw new InvalidArgumentException('non-nullable totalsYtd cannot be null');
        }
        $this->container['totalsYtd'] = $totalsYtd;

        return $this;
    }

    /**
     * Gets totalsYtdOverrides
     *
     * @return \SynergiTech\Staffology\Model\ValueOverride[]|null
     */
    public function getTotalsYtdOverrides(): ?array
    {
        return $this->container['totalsYtdOverrides'];
    }

    /**
     * Sets totalsYtdOverrides
     *
     * @param \SynergiTech\Staffology\Model\ValueOverride[]|null $totalsYtdOverrides Any values of TotalsYtd that should be overridden with a different value
     *
     * @return $this
     */
    public function setTotalsYtdOverrides(?array $totalsYtdOverrides): static
    {
        if (is_null($totalsYtdOverrides)) {
            array_push($this->openAPINullablesSetToNull, 'totalsYtdOverrides');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalsYtdOverrides', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalsYtdOverrides'] = $totalsYtdOverrides;

        return $this;
    }

    /**
     * Gets forcedCisVatAmount
     *
     * @return float|null
     */
    public function getForcedCisVatAmount(): ?float
    {
        return $this->container['forcedCisVatAmount'];
    }

    /**
     * Sets forcedCisVatAmount
     *
     * @param float|null $forcedCisVatAmount If this employee is a CIS Subcontractor registered for VAT, we'll automatically work out VAT at the set rate.  If you want to override this calculations then set this property to anything other than null.
     *
     * @return $this
     */
    public function setForcedCisVatAmount(?float $forcedCisVatAmount): static
    {
        if (is_null($forcedCisVatAmount)) {
            array_push($this->openAPINullablesSetToNull, 'forcedCisVatAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forcedCisVatAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forcedCisVatAmount'] = $forcedCisVatAmount;

        return $this;
    }

    /**
     * Gets holidayAccrued
     *
     * @return float|null
     */
    public function getHolidayAccrued(): ?float
    {
        return $this->container['holidayAccrued'];
    }

    /**
     * Sets holidayAccrued
     *
     * @param float|null $holidayAccrued The amount of holiday days or hours accrued in the period.
     *
     * @return $this
     */
    public function setHolidayAccrued(?float $holidayAccrued): static
    {
        if (is_null($holidayAccrued)) {
            throw new InvalidArgumentException('non-nullable holidayAccrued cannot be null');
        }
        $this->container['holidayAccrued'] = $holidayAccrued;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \SynergiTech\Staffology\Model\PayRunState|null
     */
    public function getState(): ?\SynergiTech\Staffology\Model\PayRunState
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SynergiTech\Staffology\Model\PayRunState|null $state state
     *
     * @return $this
     */
    public function setState(?\SynergiTech\Staffology\Model\PayRunState $state): static
    {
        if (is_null($state)) {
            throw new InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets isClosed
     *
     * @return bool|null
     */
    public function getIsClosed(): ?bool
    {
        return $this->container['isClosed'];
    }

    /**
     * Sets isClosed
     *
     * @param bool|null $isClosed [readonly] Set to True if the PayRun is Finalised and changes can no longer be made to the PayRunEntries
     *
     * @return $this
     */
    public function setIsClosed(?bool $isClosed): static
    {
        if (is_null($isClosed)) {
            throw new InvalidArgumentException('non-nullable isClosed cannot be null');
        }
        $this->container['isClosed'] = $isClosed;

        return $this;
    }

    /**
     * Gets manualNi
     *
     * @return bool|null
     */
    public function getManualNi(): ?bool
    {
        return $this->container['manualNi'];
    }

    /**
     * Sets manualNi
     *
     * @param bool|null $manualNi If set to true then you must provide your own value for NationalInsuranceCalculation.  You'd normally leave this set to false and let us automatically calculate NI amounts.
     *
     * @return $this
     */
    public function setManualNi(?bool $manualNi): static
    {
        if (is_null($manualNi)) {
            throw new InvalidArgumentException('non-nullable manualNi cannot be null');
        }
        $this->container['manualNi'] = $manualNi;

        return $this;
    }

    /**
     * Gets niSplit
     *
     * @return bool|null
     */
    public function getNiSplit(): ?bool
    {
        return $this->container['niSplit'];
    }

    /**
     * Sets niSplit
     *
     * @param bool|null $niSplit If set to true Ni calculations are done for backdated pay for each pay period separately and then summed up
     *
     * @return $this
     */
    public function setNiSplit(?bool $niSplit): static
    {
        if (is_null($niSplit)) {
            throw new InvalidArgumentException('non-nullable niSplit cannot be null');
        }
        $this->container['niSplit'] = $niSplit;

        return $this;
    }

    /**
     * Gets nationalInsuranceCalculation
     *
     * @return \SynergiTech\Staffology\Model\NationalInsuranceCalculation|null
     */
    public function getNationalInsuranceCalculation(): ?\SynergiTech\Staffology\Model\NationalInsuranceCalculation
    {
        return $this->container['nationalInsuranceCalculation'];
    }

    /**
     * Sets nationalInsuranceCalculation
     *
     * @param \SynergiTech\Staffology\Model\NationalInsuranceCalculation|null $nationalInsuranceCalculation nationalInsuranceCalculation
     *
     * @return $this
     */
    public function setNationalInsuranceCalculation(?\SynergiTech\Staffology\Model\NationalInsuranceCalculation $nationalInsuranceCalculation): static
    {
        if (is_null($nationalInsuranceCalculation)) {
            throw new InvalidArgumentException('non-nullable nationalInsuranceCalculation cannot be null');
        }
        $this->container['nationalInsuranceCalculation'] = $nationalInsuranceCalculation;

        return $this;
    }

    /**
     * Gets payrollCodeChanged
     *
     * @return bool|null
     */
    public function getPayrollCodeChanged(): ?bool
    {
        return $this->container['payrollCodeChanged'];
    }

    /**
     * Sets payrollCodeChanged
     *
     * @param bool|null $payrollCodeChanged [readonly] Indicates whether or not the Payroll Code for this Employee has changed since the last FPS
     *
     * @return $this
     */
    public function setPayrollCodeChanged(?bool $payrollCodeChanged): static
    {
        if (is_null($payrollCodeChanged)) {
            throw new InvalidArgumentException('non-nullable payrollCodeChanged cannot be null');
        }
        $this->container['payrollCodeChanged'] = $payrollCodeChanged;

        return $this;
    }

    /**
     * Gets aeNotEnroledWarning
     *
     * @return bool|null
     */
    public function getAeNotEnroledWarning(): ?bool
    {
        return $this->container['aeNotEnroledWarning'];
    }

    /**
     * Sets aeNotEnroledWarning
     *
     * @param bool|null $aeNotEnroledWarning [readonly] If true then this Employee needs to be on an Auto Enrolment pension but isn't yet.
     *
     * @return $this
     */
    public function setAeNotEnroledWarning(?bool $aeNotEnroledWarning): static
    {
        if (is_null($aeNotEnroledWarning)) {
            throw new InvalidArgumentException('non-nullable aeNotEnroledWarning cannot be null');
        }
        $this->container['aeNotEnroledWarning'] = $aeNotEnroledWarning;

        return $this;
    }

    /**
     * Gets fps
     *
     * @return \SynergiTech\Staffology\Model\Item|null
     */
    public function getFps(): ?\SynergiTech\Staffology\Model\Item
    {
        return $this->container['fps'];
    }

    /**
     * Sets fps
     *
     * @param \SynergiTech\Staffology\Model\Item|null $fps fps
     *
     * @return $this
     */
    public function setFps(?\SynergiTech\Staffology\Model\Item $fps): static
    {
        if (is_null($fps)) {
            throw new InvalidArgumentException('non-nullable fps cannot be null');
        }
        $this->container['fps'] = $fps;

        return $this;
    }

    /**
     * Gets emailId
     *
     * @return string|null
     */
    public function getEmailId(): ?string
    {
        return $this->container['emailId'];
    }

    /**
     * Sets emailId
     *
     * @param string|null $emailId If the Payslip for this PayRunEntry has been emailed to the employee then the Id for an EmployerEmail will be provided here.  if the value is all zeroes then the email is in the process of being created.
     *
     * @return $this
     */
    public function setEmailId(?string $emailId): static
    {
        if (is_null($emailId)) {
            array_push($this->openAPINullablesSetToNull, 'emailId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailId'] = $emailId;

        return $this;
    }

    /**
     * Gets recievingOffsetPay
     *
     * @return bool|null
     */
    public function getRecievingOffsetPay(): ?bool
    {
        return $this->container['recievingOffsetPay'];
    }

    /**
     * Sets recievingOffsetPay
     *
     * @param bool|null $recievingOffsetPay If the pay is being topped up due to an applied Leave having the offset value set to true then  this will be set to true
     *
     * @return $this
     */
    public function setRecievingOffsetPay(?bool $recievingOffsetPay): static
    {
        if (is_null($recievingOffsetPay)) {
            throw new InvalidArgumentException('non-nullable recievingOffsetPay cannot be null');
        }
        $this->container['recievingOffsetPay'] = $recievingOffsetPay;

        return $this;
    }

    /**
     * Gets paymentAfterLeaving
     *
     * @return bool|null
     */
    public function getPaymentAfterLeaving(): ?bool
    {
        return $this->container['paymentAfterLeaving'];
    }

    /**
     * Sets paymentAfterLeaving
     *
     * @param bool|null $paymentAfterLeaving [readonly] If this payment is for an employee that has left then this is set to true.
     *
     * @return $this
     */
    public function setPaymentAfterLeaving(?bool $paymentAfterLeaving): static
    {
        if (is_null($paymentAfterLeaving)) {
            throw new InvalidArgumentException('non-nullable paymentAfterLeaving cannot be null');
        }
        $this->container['paymentAfterLeaving'] = $paymentAfterLeaving;

        return $this;
    }

    /**
     * Gets umbrellaPayment
     *
     * @return \SynergiTech\Staffology\Model\UmbrellaPayment|null
     */
    public function getUmbrellaPayment(): ?\SynergiTech\Staffology\Model\UmbrellaPayment
    {
        return $this->container['umbrellaPayment'];
    }

    /**
     * Sets umbrellaPayment
     *
     * @param \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment umbrellaPayment
     *
     * @return $this
     */
    public function setUmbrellaPayment(?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment): static
    {
        if (is_null($umbrellaPayment)) {
            throw new InvalidArgumentException('non-nullable umbrellaPayment cannot be null');
        }
        $this->container['umbrellaPayment'] = $umbrellaPayment;

        return $this;
    }

    /**
     * Gets isRemoved
     *
     * @return bool|null
     */
    public function getIsRemoved(): ?bool
    {
        return $this->container['isRemoved'];
    }

    /**
     * Sets isRemoved
     *
     * @param bool|null $isRemoved Has the entry been removed from the payrun
     *
     * @return $this
     */
    public function setIsRemoved(?bool $isRemoved): static
    {
        if (is_null($isRemoved)) {
            throw new InvalidArgumentException('non-nullable isRemoved cannot be null');
        }
        $this->container['isRemoved'] = $isRemoved;

        return $this;
    }

    /**
     * Gets isRolledBack
     *
     * @return bool|null
     */
    public function getIsRolledBack(): ?bool
    {
        return $this->container['isRolledBack'];
    }

    /**
     * Sets isRolledBack
     *
     * @param bool|null $isRolledBack [readonly] Set to True if the Pay Run Entry is currently rolled back
     *
     * @return $this
     */
    public function setIsRolledBack(?bool $isRolledBack): static
    {
        if (is_null($isRolledBack)) {
            throw new InvalidArgumentException('non-nullable isRolledBack cannot be null');
        }
        $this->container['isRolledBack'] = $isRolledBack;

        return $this;
    }

    /**
     * Gets periodsCovered
     *
     * @return int|null
     */
    public function getPeriodsCovered(): ?int
    {
        return $this->container['periodsCovered'];
    }

    /**
     * Sets periodsCovered
     *
     * @param int|null $periodsCovered [readonly] The amount of periods that the Pay Run Entry covers. This can be > 1 when back pay for previous periods is paid in the current period
     *
     * @return $this
     */
    public function setPeriodsCovered(?int $periodsCovered): static
    {
        if (is_null($periodsCovered)) {
            throw new InvalidArgumentException('non-nullable periodsCovered cannot be null');
        }
        $this->container['periodsCovered'] = $periodsCovered;

        return $this;
    }

    /**
     * Gets employeeRolePayItems
     *
     * @return \SynergiTech\Staffology\Model\EmployeeRolePayItem[]|null
     */
    public function getEmployeeRolePayItems(): ?array
    {
        return $this->container['employeeRolePayItems'];
    }

    /**
     * Sets employeeRolePayItems
     *
     * @param \SynergiTech\Staffology\Model\EmployeeRolePayItem[]|null $employeeRolePayItems [readonly] Automatically populated.  Array of base hourly and daily rates for the employee roles
     *
     * @return $this
     */
    public function setEmployeeRolePayItems(?array $employeeRolePayItems): static
    {
        if (is_null($employeeRolePayItems)) {
            array_push($this->openAPINullablesSetToNull, 'employeeRolePayItems');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employeeRolePayItems', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employeeRolePayItems'] = $employeeRolePayItems;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \SynergiTech\Staffology\Model\PayRunEntryWarningType|null
     */
    public function getWarnings(): ?\SynergiTech\Staffology\Model\PayRunEntryWarningType
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \SynergiTech\Staffology\Model\PayRunEntryWarningType|null $warnings warnings
     *
     * @return $this
     */
    public function setWarnings(?\SynergiTech\Staffology\Model\PayRunEntryWarningType $warnings): static
    {
        if (is_null($warnings)) {
            throw new InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets niLetterError
     *
     * @return \SynergiTech\Staffology\Model\NiLetterError|null
     */
    public function getNiLetterError(): ?\SynergiTech\Staffology\Model\NiLetterError
    {
        return $this->container['niLetterError'];
    }

    /**
     * Sets niLetterError
     *
     * @param \SynergiTech\Staffology\Model\NiLetterError|null $niLetterError niLetterError
     *
     * @return $this
     */
    public function setNiLetterError(?\SynergiTech\Staffology\Model\NiLetterError $niLetterError): static
    {
        if (is_null($niLetterError)) {
            throw new InvalidArgumentException('non-nullable niLetterError cannot be null');
        }
        $this->container['niLetterError'] = $niLetterError;

        return $this;
    }

    /**
     * Gets teachersPensionAgeWarning
     *
     * @return \SynergiTech\Staffology\Model\TeachersPensionAgeWarning|null
     */
    public function getTeachersPensionAgeWarning(): ?\SynergiTech\Staffology\Model\TeachersPensionAgeWarning
    {
        return $this->container['teachersPensionAgeWarning'];
    }

    /**
     * Sets teachersPensionAgeWarning
     *
     * @param \SynergiTech\Staffology\Model\TeachersPensionAgeWarning|null $teachersPensionAgeWarning teachersPensionAgeWarning
     *
     * @return $this
     */
    public function setTeachersPensionAgeWarning(?\SynergiTech\Staffology\Model\TeachersPensionAgeWarning $teachersPensionAgeWarning): static
    {
        if (is_null($teachersPensionAgeWarning)) {
            throw new InvalidArgumentException('non-nullable teachersPensionAgeWarning cannot be null');
        }
        $this->container['teachersPensionAgeWarning'] = $teachersPensionAgeWarning;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id [readonly] The unique id of the object
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets personalDetails
     *
     * @return \SynergiTech\Staffology\Model\PersonalDetails|null
     */
    public function getPersonalDetails(): ?\SynergiTech\Staffology\Model\PersonalDetails
    {
        return $this->container['personalDetails'];
    }

    /**
     * Sets personalDetails
     *
     * @param \SynergiTech\Staffology\Model\PersonalDetails|null $personalDetails personalDetails
     *
     * @return $this
     */
    public function setPersonalDetails(?\SynergiTech\Staffology\Model\PersonalDetails $personalDetails): static
    {
        if (is_null($personalDetails)) {
            throw new InvalidArgumentException('non-nullable personalDetails cannot be null');
        }
        $this->container['personalDetails'] = $personalDetails;

        return $this;
    }

    /**
     * Gets employmentDetails
     *
     * @return \SynergiTech\Staffology\Model\EmploymentDetails|null
     */
    public function getEmploymentDetails(): ?\SynergiTech\Staffology\Model\EmploymentDetails
    {
        return $this->container['employmentDetails'];
    }

    /**
     * Sets employmentDetails
     *
     * @param \SynergiTech\Staffology\Model\EmploymentDetails|null $employmentDetails employmentDetails
     *
     * @return $this
     */
    public function setEmploymentDetails(?\SynergiTech\Staffology\Model\EmploymentDetails $employmentDetails): static
    {
        if (is_null($employmentDetails)) {
            throw new InvalidArgumentException('non-nullable employmentDetails cannot be null');
        }
        $this->container['employmentDetails'] = $employmentDetails;

        return $this;
    }

    /**
     * Gets payOptions
     *
     * @return \SynergiTech\Staffology\Model\PayOptions|null
     */
    public function getPayOptions(): ?\SynergiTech\Staffology\Model\PayOptions
    {
        return $this->container['payOptions'];
    }

    /**
     * Sets payOptions
     *
     * @param \SynergiTech\Staffology\Model\PayOptions|null $payOptions payOptions
     *
     * @return $this
     */
    public function setPayOptions(?\SynergiTech\Staffology\Model\PayOptions $payOptions): static
    {
        if (is_null($payOptions)) {
            throw new InvalidArgumentException('non-nullable payOptions cannot be null');
        }
        $this->container['payOptions'] = $payOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


