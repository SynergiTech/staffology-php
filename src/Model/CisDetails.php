<?php
/**
 * CisDetails
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * CisDetails Class Doc Comment
 *
 * @description If an Employee is marked as a CIS Subcontractor then this model provides further details specifically related to the CIS details of the Employee.
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CisDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CisDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => '\SynergiTech\Staffology\Model\CISSubContractorType',
        'utr' => 'string',
        'tradingName' => 'string',
        'companyUtr' => 'string',
        'companyNumber' => 'string',
        'vatRegistered' => 'bool',
        'vatNumber' => 'string',
        'vatRate' => 'float',
        'reverseChargeVAT' => 'bool',
        'verification' => '\SynergiTech\Staffology\Model\CisVerificationDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'utr' => null,
        'tradingName' => null,
        'companyUtr' => null,
        'companyNumber' => null,
        'vatRegistered' => null,
        'vatNumber' => null,
        'vatRate' => 'double',
        'reverseChargeVAT' => null,
        'verification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => false,
        'utr' => true,
        'tradingName' => true,
        'companyUtr' => true,
        'companyNumber' => true,
        'vatRegistered' => false,
        'vatNumber' => true,
        'vatRate' => false,
        'reverseChargeVAT' => false,
        'verification' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'utr' => 'utr',
        'tradingName' => 'tradingName',
        'companyUtr' => 'companyUtr',
        'companyNumber' => 'companyNumber',
        'vatRegistered' => 'vatRegistered',
        'vatNumber' => 'vatNumber',
        'vatRate' => 'vatRate',
        'reverseChargeVAT' => 'reverseChargeVAT',
        'verification' => 'verification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'utr' => 'setUtr',
        'tradingName' => 'setTradingName',
        'companyUtr' => 'setCompanyUtr',
        'companyNumber' => 'setCompanyNumber',
        'vatRegistered' => 'setVatRegistered',
        'vatNumber' => 'setVatNumber',
        'vatRate' => 'setVatRate',
        'reverseChargeVAT' => 'setReverseChargeVAT',
        'verification' => 'setVerification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'utr' => 'getUtr',
        'tradingName' => 'getTradingName',
        'companyUtr' => 'getCompanyUtr',
        'companyNumber' => 'getCompanyNumber',
        'vatRegistered' => 'getVatRegistered',
        'vatNumber' => 'getVatNumber',
        'vatRate' => 'getVatRate',
        'reverseChargeVAT' => 'getReverseChargeVAT',
        'verification' => 'getVerification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('utr', $data ?? [], null);
        $this->setIfExists('tradingName', $data ?? [], null);
        $this->setIfExists('companyUtr', $data ?? [], null);
        $this->setIfExists('companyNumber', $data ?? [], null);
        $this->setIfExists('vatRegistered', $data ?? [], null);
        $this->setIfExists('vatNumber', $data ?? [], null);
        $this->setIfExists('vatRate', $data ?? [], null);
        $this->setIfExists('reverseChargeVAT', $data ?? [], null);
        $this->setIfExists('verification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['utr']) && (mb_strlen($this->container['utr']) > 20)) {
            $invalidProperties[] = "invalid value for 'utr', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['tradingName']) && (mb_strlen($this->container['tradingName']) > 200)) {
            $invalidProperties[] = "invalid value for 'tradingName', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['companyUtr']) && (mb_strlen($this->container['companyUtr']) > 20)) {
            $invalidProperties[] = "invalid value for 'companyUtr', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['companyNumber']) && (mb_strlen($this->container['companyNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'companyNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['vatNumber']) && (mb_strlen($this->container['vatNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'vatNumber', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \SynergiTech\Staffology\Model\CISSubContractorType|null
     */
    public function getType(): ?\SynergiTech\Staffology\Model\CISSubContractorType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SynergiTech\Staffology\Model\CISSubContractorType|null $type type
     *
     * @return $this
     */
    public function setType(?\SynergiTech\Staffology\Model\CISSubContractorType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets utr
     *
     * @return string|null
     */
    public function getUtr(): ?string
    {
        return $this->container['utr'];
    }

    /**
     * Sets utr
     *
     * @param string|null $utr utr
     *
     * @return $this
     */
    public function setUtr(?string $utr): static
    {
        if (is_null($utr)) {
            array_push($this->openAPINullablesSetToNull, 'utr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utr) && (mb_strlen($utr) > 20)) {
            throw new InvalidArgumentException('invalid length for $utr when calling CisDetails., must be smaller than or equal to 20.');
        }

        $this->container['utr'] = $utr;

        return $this;
    }

    /**
     * Gets tradingName
     *
     * @return string|null
     */
    public function getTradingName(): ?string
    {
        return $this->container['tradingName'];
    }

    /**
     * Sets tradingName
     *
     * @param string|null $tradingName tradingName
     *
     * @return $this
     */
    public function setTradingName(?string $tradingName): static
    {
        if (is_null($tradingName)) {
            array_push($this->openAPINullablesSetToNull, 'tradingName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tradingName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tradingName) && (mb_strlen($tradingName) > 200)) {
            throw new InvalidArgumentException('invalid length for $tradingName when calling CisDetails., must be smaller than or equal to 200.');
        }

        $this->container['tradingName'] = $tradingName;

        return $this;
    }

    /**
     * Gets companyUtr
     *
     * @return string|null
     */
    public function getCompanyUtr(): ?string
    {
        return $this->container['companyUtr'];
    }

    /**
     * Sets companyUtr
     *
     * @param string|null $companyUtr companyUtr
     *
     * @return $this
     */
    public function setCompanyUtr(?string $companyUtr): static
    {
        if (is_null($companyUtr)) {
            array_push($this->openAPINullablesSetToNull, 'companyUtr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyUtr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyUtr) && (mb_strlen($companyUtr) > 20)) {
            throw new InvalidArgumentException('invalid length for $companyUtr when calling CisDetails., must be smaller than or equal to 20.');
        }

        $this->container['companyUtr'] = $companyUtr;

        return $this;
    }

    /**
     * Gets companyNumber
     *
     * @return string|null
     */
    public function getCompanyNumber(): ?string
    {
        return $this->container['companyNumber'];
    }

    /**
     * Sets companyNumber
     *
     * @param string|null $companyNumber companyNumber
     *
     * @return $this
     */
    public function setCompanyNumber(?string $companyNumber): static
    {
        if (is_null($companyNumber)) {
            array_push($this->openAPINullablesSetToNull, 'companyNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyNumber) && (mb_strlen($companyNumber) > 20)) {
            throw new InvalidArgumentException('invalid length for $companyNumber when calling CisDetails., must be smaller than or equal to 20.');
        }

        $this->container['companyNumber'] = $companyNumber;

        return $this;
    }

    /**
     * Gets vatRegistered
     *
     * @return bool|null
     */
    public function getVatRegistered(): ?bool
    {
        return $this->container['vatRegistered'];
    }

    /**
     * Sets vatRegistered
     *
     * @param bool|null $vatRegistered vatRegistered
     *
     * @return $this
     */
    public function setVatRegistered(?bool $vatRegistered): static
    {
        if (is_null($vatRegistered)) {
            throw new InvalidArgumentException('non-nullable vatRegistered cannot be null');
        }
        $this->container['vatRegistered'] = $vatRegistered;

        return $this;
    }

    /**
     * Gets vatNumber
     *
     * @return string|null
     */
    public function getVatNumber(): ?string
    {
        return $this->container['vatNumber'];
    }

    /**
     * Sets vatNumber
     *
     * @param string|null $vatNumber vatNumber
     *
     * @return $this
     */
    public function setVatNumber(?string $vatNumber): static
    {
        if (is_null($vatNumber)) {
            array_push($this->openAPINullablesSetToNull, 'vatNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vatNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vatNumber) && (mb_strlen($vatNumber) > 20)) {
            throw new InvalidArgumentException('invalid length for $vatNumber when calling CisDetails., must be smaller than or equal to 20.');
        }

        $this->container['vatNumber'] = $vatNumber;

        return $this;
    }

    /**
     * Gets vatRate
     *
     * @return float|null
     */
    public function getVatRate(): ?float
    {
        return $this->container['vatRate'];
    }

    /**
     * Sets vatRate
     *
     * @param float|null $vatRate vatRate
     *
     * @return $this
     */
    public function setVatRate(?float $vatRate): static
    {
        if (is_null($vatRate)) {
            throw new InvalidArgumentException('non-nullable vatRate cannot be null');
        }
        $this->container['vatRate'] = $vatRate;

        return $this;
    }

    /**
     * Gets reverseChargeVAT
     *
     * @return bool|null
     */
    public function getReverseChargeVAT(): ?bool
    {
        return $this->container['reverseChargeVAT'];
    }

    /**
     * Sets reverseChargeVAT
     *
     * @param bool|null $reverseChargeVAT reverseChargeVAT
     *
     * @return $this
     */
    public function setReverseChargeVAT(?bool $reverseChargeVAT): static
    {
        if (is_null($reverseChargeVAT)) {
            throw new InvalidArgumentException('non-nullable reverseChargeVAT cannot be null');
        }
        $this->container['reverseChargeVAT'] = $reverseChargeVAT;

        return $this;
    }

    /**
     * Gets verification
     *
     * @return \SynergiTech\Staffology\Model\CisVerificationDetails|null
     */
    public function getVerification(): ?\SynergiTech\Staffology\Model\CisVerificationDetails
    {
        return $this->container['verification'];
    }

    /**
     * Sets verification
     *
     * @param \SynergiTech\Staffology\Model\CisVerificationDetails|null $verification verification
     *
     * @return $this
     */
    public function setVerification(?\SynergiTech\Staffology\Model\CisVerificationDetails $verification): static
    {
        if (is_null($verification)) {
            throw new InvalidArgumentException('non-nullable verification cannot be null');
        }
        $this->container['verification'] = $verification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


