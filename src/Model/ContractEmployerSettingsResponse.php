<?php
/**
 * ContractEmployerSettingsResponse
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractEmployerSettingsResponse Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractEmployerSettingsResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.EmployerSettingsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'allowNegativePay' => 'bool',
        'manualStatutoryPayLinesEnabled' => 'bool',
        'mergeMatchingNominalsEnabled' => 'bool',
        'autoCalcBackPayForNewStarters' => 'bool',
        'payCodeValidationEnabled' => 'bool',
        'calculateEffectiveDateSalaryChanges' => 'bool',
        'groupPayLinesEnabled' => 'bool',
        'contractedWeeks' => 'float',
        'fullTimeContractedWeeks' => 'float',
        'fullTimeContractedHours' => 'float',
        'disabledPayRunWarningsBitmask' => 'int',
        'disabledPayRunWarningsList' => '\SynergiTech\Staffology\Model\PayRunEntryWarningType[]',
        'journalCsvFormat' => '\SynergiTech\Staffology\Model\JournalCsvFormat',
        'preferAsyncPayrunApiCalls' => 'bool',
        'nominalMappingsEnabled' => 'bool',
        'sortPayrollNumbersAlphanumerically' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'allowNegativePay' => null,
        'manualStatutoryPayLinesEnabled' => null,
        'mergeMatchingNominalsEnabled' => null,
        'autoCalcBackPayForNewStarters' => null,
        'payCodeValidationEnabled' => null,
        'calculateEffectiveDateSalaryChanges' => null,
        'groupPayLinesEnabled' => null,
        'contractedWeeks' => 'double',
        'fullTimeContractedWeeks' => 'double',
        'fullTimeContractedHours' => 'double',
        'disabledPayRunWarningsBitmask' => 'int32',
        'disabledPayRunWarningsList' => null,
        'journalCsvFormat' => null,
        'preferAsyncPayrunApiCalls' => null,
        'nominalMappingsEnabled' => null,
        'sortPayrollNumbersAlphanumerically' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'allowNegativePay' => false,
        'manualStatutoryPayLinesEnabled' => false,
        'mergeMatchingNominalsEnabled' => false,
        'autoCalcBackPayForNewStarters' => false,
        'payCodeValidationEnabled' => false,
        'calculateEffectiveDateSalaryChanges' => false,
        'groupPayLinesEnabled' => false,
        'contractedWeeks' => false,
        'fullTimeContractedWeeks' => false,
        'fullTimeContractedHours' => false,
        'disabledPayRunWarningsBitmask' => false,
        'disabledPayRunWarningsList' => true,
        'journalCsvFormat' => false,
        'preferAsyncPayrunApiCalls' => false,
        'nominalMappingsEnabled' => false,
        'sortPayrollNumbersAlphanumerically' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'allowNegativePay' => 'allowNegativePay',
        'manualStatutoryPayLinesEnabled' => 'manualStatutoryPayLinesEnabled',
        'mergeMatchingNominalsEnabled' => 'mergeMatchingNominalsEnabled',
        'autoCalcBackPayForNewStarters' => 'autoCalcBackPayForNewStarters',
        'payCodeValidationEnabled' => 'payCodeValidationEnabled',
        'calculateEffectiveDateSalaryChanges' => 'calculateEffectiveDateSalaryChanges',
        'groupPayLinesEnabled' => 'groupPayLinesEnabled',
        'contractedWeeks' => 'contractedWeeks',
        'fullTimeContractedWeeks' => 'fullTimeContractedWeeks',
        'fullTimeContractedHours' => 'fullTimeContractedHours',
        'disabledPayRunWarningsBitmask' => 'disabledPayRunWarningsBitmask',
        'disabledPayRunWarningsList' => 'disabledPayRunWarningsList',
        'journalCsvFormat' => 'journalCsvFormat',
        'preferAsyncPayrunApiCalls' => 'preferAsyncPayrunApiCalls',
        'nominalMappingsEnabled' => 'nominalMappingsEnabled',
        'sortPayrollNumbersAlphanumerically' => 'sortPayrollNumbersAlphanumerically'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'allowNegativePay' => 'setAllowNegativePay',
        'manualStatutoryPayLinesEnabled' => 'setManualStatutoryPayLinesEnabled',
        'mergeMatchingNominalsEnabled' => 'setMergeMatchingNominalsEnabled',
        'autoCalcBackPayForNewStarters' => 'setAutoCalcBackPayForNewStarters',
        'payCodeValidationEnabled' => 'setPayCodeValidationEnabled',
        'calculateEffectiveDateSalaryChanges' => 'setCalculateEffectiveDateSalaryChanges',
        'groupPayLinesEnabled' => 'setGroupPayLinesEnabled',
        'contractedWeeks' => 'setContractedWeeks',
        'fullTimeContractedWeeks' => 'setFullTimeContractedWeeks',
        'fullTimeContractedHours' => 'setFullTimeContractedHours',
        'disabledPayRunWarningsBitmask' => 'setDisabledPayRunWarningsBitmask',
        'disabledPayRunWarningsList' => 'setDisabledPayRunWarningsList',
        'journalCsvFormat' => 'setJournalCsvFormat',
        'preferAsyncPayrunApiCalls' => 'setPreferAsyncPayrunApiCalls',
        'nominalMappingsEnabled' => 'setNominalMappingsEnabled',
        'sortPayrollNumbersAlphanumerically' => 'setSortPayrollNumbersAlphanumerically'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'allowNegativePay' => 'getAllowNegativePay',
        'manualStatutoryPayLinesEnabled' => 'getManualStatutoryPayLinesEnabled',
        'mergeMatchingNominalsEnabled' => 'getMergeMatchingNominalsEnabled',
        'autoCalcBackPayForNewStarters' => 'getAutoCalcBackPayForNewStarters',
        'payCodeValidationEnabled' => 'getPayCodeValidationEnabled',
        'calculateEffectiveDateSalaryChanges' => 'getCalculateEffectiveDateSalaryChanges',
        'groupPayLinesEnabled' => 'getGroupPayLinesEnabled',
        'contractedWeeks' => 'getContractedWeeks',
        'fullTimeContractedWeeks' => 'getFullTimeContractedWeeks',
        'fullTimeContractedHours' => 'getFullTimeContractedHours',
        'disabledPayRunWarningsBitmask' => 'getDisabledPayRunWarningsBitmask',
        'disabledPayRunWarningsList' => 'getDisabledPayRunWarningsList',
        'journalCsvFormat' => 'getJournalCsvFormat',
        'preferAsyncPayrunApiCalls' => 'getPreferAsyncPayrunApiCalls',
        'nominalMappingsEnabled' => 'getNominalMappingsEnabled',
        'sortPayrollNumbersAlphanumerically' => 'getSortPayrollNumbersAlphanumerically'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allowNegativePay', $data ?? [], null);
        $this->setIfExists('manualStatutoryPayLinesEnabled', $data ?? [], null);
        $this->setIfExists('mergeMatchingNominalsEnabled', $data ?? [], null);
        $this->setIfExists('autoCalcBackPayForNewStarters', $data ?? [], null);
        $this->setIfExists('payCodeValidationEnabled', $data ?? [], null);
        $this->setIfExists('calculateEffectiveDateSalaryChanges', $data ?? [], null);
        $this->setIfExists('groupPayLinesEnabled', $data ?? [], null);
        $this->setIfExists('contractedWeeks', $data ?? [], null);
        $this->setIfExists('fullTimeContractedWeeks', $data ?? [], null);
        $this->setIfExists('fullTimeContractedHours', $data ?? [], null);
        $this->setIfExists('disabledPayRunWarningsBitmask', $data ?? [], null);
        $this->setIfExists('disabledPayRunWarningsList', $data ?? [], null);
        $this->setIfExists('journalCsvFormat', $data ?? [], null);
        $this->setIfExists('preferAsyncPayrunApiCalls', $data ?? [], null);
        $this->setIfExists('nominalMappingsEnabled', $data ?? [], null);
        $this->setIfExists('sortPayrollNumbersAlphanumerically', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowNegativePay
     *
     * @return bool|null
     */
    public function getAllowNegativePay(): ?bool
    {
        return $this->container['allowNegativePay'];
    }

    /**
     * Sets allowNegativePay
     *
     * @param bool|null $allowNegativePay allowNegativePay
     *
     * @return $this
     */
    public function setAllowNegativePay(?bool $allowNegativePay): static
    {
        if (is_null($allowNegativePay)) {
            throw new InvalidArgumentException('non-nullable allowNegativePay cannot be null');
        }
        $this->container['allowNegativePay'] = $allowNegativePay;

        return $this;
    }

    /**
     * Gets manualStatutoryPayLinesEnabled
     *
     * @return bool|null
     */
    public function getManualStatutoryPayLinesEnabled(): ?bool
    {
        return $this->container['manualStatutoryPayLinesEnabled'];
    }

    /**
     * Sets manualStatutoryPayLinesEnabled
     *
     * @param bool|null $manualStatutoryPayLinesEnabled manualStatutoryPayLinesEnabled
     *
     * @return $this
     */
    public function setManualStatutoryPayLinesEnabled(?bool $manualStatutoryPayLinesEnabled): static
    {
        if (is_null($manualStatutoryPayLinesEnabled)) {
            throw new InvalidArgumentException('non-nullable manualStatutoryPayLinesEnabled cannot be null');
        }
        $this->container['manualStatutoryPayLinesEnabled'] = $manualStatutoryPayLinesEnabled;

        return $this;
    }

    /**
     * Gets mergeMatchingNominalsEnabled
     *
     * @return bool|null
     */
    public function getMergeMatchingNominalsEnabled(): ?bool
    {
        return $this->container['mergeMatchingNominalsEnabled'];
    }

    /**
     * Sets mergeMatchingNominalsEnabled
     *
     * @param bool|null $mergeMatchingNominalsEnabled mergeMatchingNominalsEnabled
     *
     * @return $this
     */
    public function setMergeMatchingNominalsEnabled(?bool $mergeMatchingNominalsEnabled): static
    {
        if (is_null($mergeMatchingNominalsEnabled)) {
            throw new InvalidArgumentException('non-nullable mergeMatchingNominalsEnabled cannot be null');
        }
        $this->container['mergeMatchingNominalsEnabled'] = $mergeMatchingNominalsEnabled;

        return $this;
    }

    /**
     * Gets autoCalcBackPayForNewStarters
     *
     * @return bool|null
     */
    public function getAutoCalcBackPayForNewStarters(): ?bool
    {
        return $this->container['autoCalcBackPayForNewStarters'];
    }

    /**
     * Sets autoCalcBackPayForNewStarters
     *
     * @param bool|null $autoCalcBackPayForNewStarters autoCalcBackPayForNewStarters
     *
     * @return $this
     */
    public function setAutoCalcBackPayForNewStarters(?bool $autoCalcBackPayForNewStarters): static
    {
        if (is_null($autoCalcBackPayForNewStarters)) {
            throw new InvalidArgumentException('non-nullable autoCalcBackPayForNewStarters cannot be null');
        }
        $this->container['autoCalcBackPayForNewStarters'] = $autoCalcBackPayForNewStarters;

        return $this;
    }

    /**
     * Gets payCodeValidationEnabled
     *
     * @return bool|null
     */
    public function getPayCodeValidationEnabled(): ?bool
    {
        return $this->container['payCodeValidationEnabled'];
    }

    /**
     * Sets payCodeValidationEnabled
     *
     * @param bool|null $payCodeValidationEnabled payCodeValidationEnabled
     *
     * @return $this
     */
    public function setPayCodeValidationEnabled(?bool $payCodeValidationEnabled): static
    {
        if (is_null($payCodeValidationEnabled)) {
            throw new InvalidArgumentException('non-nullable payCodeValidationEnabled cannot be null');
        }
        $this->container['payCodeValidationEnabled'] = $payCodeValidationEnabled;

        return $this;
    }

    /**
     * Gets calculateEffectiveDateSalaryChanges
     *
     * @return bool|null
     */
    public function getCalculateEffectiveDateSalaryChanges(): ?bool
    {
        return $this->container['calculateEffectiveDateSalaryChanges'];
    }

    /**
     * Sets calculateEffectiveDateSalaryChanges
     *
     * @param bool|null $calculateEffectiveDateSalaryChanges calculateEffectiveDateSalaryChanges
     *
     * @return $this
     */
    public function setCalculateEffectiveDateSalaryChanges(?bool $calculateEffectiveDateSalaryChanges): static
    {
        if (is_null($calculateEffectiveDateSalaryChanges)) {
            throw new InvalidArgumentException('non-nullable calculateEffectiveDateSalaryChanges cannot be null');
        }
        $this->container['calculateEffectiveDateSalaryChanges'] = $calculateEffectiveDateSalaryChanges;

        return $this;
    }

    /**
     * Gets groupPayLinesEnabled
     *
     * @return bool|null
     */
    public function getGroupPayLinesEnabled(): ?bool
    {
        return $this->container['groupPayLinesEnabled'];
    }

    /**
     * Sets groupPayLinesEnabled
     *
     * @param bool|null $groupPayLinesEnabled A flag to indicate whether paylines should be grouped. The grouping is done based on the following PayLine properties: Rate, Multiplier, Code, Description and RoleId
     *
     * @return $this
     */
    public function setGroupPayLinesEnabled(?bool $groupPayLinesEnabled): static
    {
        if (is_null($groupPayLinesEnabled)) {
            throw new InvalidArgumentException('non-nullable groupPayLinesEnabled cannot be null');
        }
        $this->container['groupPayLinesEnabled'] = $groupPayLinesEnabled;

        return $this;
    }

    /**
     * Gets contractedWeeks
     *
     * @return float|null
     */
    public function getContractedWeeks(): ?float
    {
        return $this->container['contractedWeeks'];
    }

    /**
     * Sets contractedWeeks
     *
     * @param float|null $contractedWeeks The amount of weeks an employee works, utilise for employees who aren't working full time.  This value is the default which can be inherited when creating/updating a WorkingPattern.
     *
     * @return $this
     */
    public function setContractedWeeks(?float $contractedWeeks): static
    {
        if (is_null($contractedWeeks)) {
            throw new InvalidArgumentException('non-nullable contractedWeeks cannot be null');
        }
        $this->container['contractedWeeks'] = $contractedWeeks;

        return $this;
    }

    /**
     * Gets fullTimeContractedWeeks
     *
     * @return float|null
     */
    public function getFullTimeContractedWeeks(): ?float
    {
        return $this->container['fullTimeContractedWeeks'];
    }

    /**
     * Sets fullTimeContractedWeeks
     *
     * @param float|null $fullTimeContractedWeeks The amount of weeks an employee works (Full Time).  This value is the default which can be inherited when creating/updating a WorkingPattern.
     *
     * @return $this
     */
    public function setFullTimeContractedWeeks(?float $fullTimeContractedWeeks): static
    {
        if (is_null($fullTimeContractedWeeks)) {
            throw new InvalidArgumentException('non-nullable fullTimeContractedWeeks cannot be null');
        }
        $this->container['fullTimeContractedWeeks'] = $fullTimeContractedWeeks;

        return $this;
    }

    /**
     * Gets fullTimeContractedHours
     *
     * @return float|null
     */
    public function getFullTimeContractedHours(): ?float
    {
        return $this->container['fullTimeContractedHours'];
    }

    /**
     * Sets fullTimeContractedHours
     *
     * @param float|null $fullTimeContractedHours The amount of hours an employee works (Full Time).  This value is the default which can be inherited when creating/updating a WorkingPattern.
     *
     * @return $this
     */
    public function setFullTimeContractedHours(?float $fullTimeContractedHours): static
    {
        if (is_null($fullTimeContractedHours)) {
            throw new InvalidArgumentException('non-nullable fullTimeContractedHours cannot be null');
        }
        $this->container['fullTimeContractedHours'] = $fullTimeContractedHours;

        return $this;
    }

    /**
     * Gets disabledPayRunWarningsBitmask
     *
     * @return int|null
     */
    public function getDisabledPayRunWarningsBitmask(): ?int
    {
        return $this->container['disabledPayRunWarningsBitmask'];
    }

    /**
     * Sets disabledPayRunWarningsBitmask
     *
     * @param int|null $disabledPayRunWarningsBitmask disabledPayRunWarningsBitmask
     *
     * @return $this
     */
    public function setDisabledPayRunWarningsBitmask(?int $disabledPayRunWarningsBitmask): static
    {
        if (is_null($disabledPayRunWarningsBitmask)) {
            throw new InvalidArgumentException('non-nullable disabledPayRunWarningsBitmask cannot be null');
        }
        $this->container['disabledPayRunWarningsBitmask'] = $disabledPayRunWarningsBitmask;

        return $this;
    }

    /**
     * Gets disabledPayRunWarningsList
     *
     * @return \SynergiTech\Staffology\Model\PayRunEntryWarningType[]|null
     */
    public function getDisabledPayRunWarningsList(): ?array
    {
        return $this->container['disabledPayRunWarningsList'];
    }

    /**
     * Sets disabledPayRunWarningsList
     *
     * @param \SynergiTech\Staffology\Model\PayRunEntryWarningType[]|null $disabledPayRunWarningsList Pay run warnings that the user has opted to ignore.
     *
     * @return $this
     */
    public function setDisabledPayRunWarningsList(?array $disabledPayRunWarningsList): static
    {
        if (is_null($disabledPayRunWarningsList)) {
            array_push($this->openAPINullablesSetToNull, 'disabledPayRunWarningsList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disabledPayRunWarningsList', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disabledPayRunWarningsList'] = $disabledPayRunWarningsList;

        return $this;
    }

    /**
     * Gets journalCsvFormat
     *
     * @return \SynergiTech\Staffology\Model\JournalCsvFormat|null
     */
    public function getJournalCsvFormat(): ?\SynergiTech\Staffology\Model\JournalCsvFormat
    {
        return $this->container['journalCsvFormat'];
    }

    /**
     * Sets journalCsvFormat
     *
     * @param \SynergiTech\Staffology\Model\JournalCsvFormat|null $journalCsvFormat journalCsvFormat
     *
     * @return $this
     */
    public function setJournalCsvFormat(?\SynergiTech\Staffology\Model\JournalCsvFormat $journalCsvFormat): static
    {
        if (is_null($journalCsvFormat)) {
            throw new InvalidArgumentException('non-nullable journalCsvFormat cannot be null');
        }
        $this->container['journalCsvFormat'] = $journalCsvFormat;

        return $this;
    }

    /**
     * Gets preferAsyncPayrunApiCalls
     *
     * @return bool|null
     */
    public function getPreferAsyncPayrunApiCalls(): ?bool
    {
        return $this->container['preferAsyncPayrunApiCalls'];
    }

    /**
     * Sets preferAsyncPayrunApiCalls
     *
     * @param bool|null $preferAsyncPayrunApiCalls This setting is only available temporarily and is only setable by users with access to beta features enabled.  If set to true the the web applicaiton will use new async API calls for managing payruns
     *
     * @return $this
     */
    public function setPreferAsyncPayrunApiCalls(?bool $preferAsyncPayrunApiCalls): static
    {
        if (is_null($preferAsyncPayrunApiCalls)) {
            throw new InvalidArgumentException('non-nullable preferAsyncPayrunApiCalls cannot be null');
        }
        $this->container['preferAsyncPayrunApiCalls'] = $preferAsyncPayrunApiCalls;

        return $this;
    }

    /**
     * Gets nominalMappingsEnabled
     *
     * @return bool|null
     */
    public function getNominalMappingsEnabled(): ?bool
    {
        return $this->container['nominalMappingsEnabled'];
    }

    /**
     * Sets nominalMappingsEnabled
     *
     * @param bool|null $nominalMappingsEnabled Enables the nominal mappings(Custom Codes,System Codes,Control Codes,Employer Codes) for the employer, if set to true.
     *
     * @return $this
     */
    public function setNominalMappingsEnabled(?bool $nominalMappingsEnabled): static
    {
        if (is_null($nominalMappingsEnabled)) {
            throw new InvalidArgumentException('non-nullable nominalMappingsEnabled cannot be null');
        }
        $this->container['nominalMappingsEnabled'] = $nominalMappingsEnabled;

        return $this;
    }

    /**
     * Gets sortPayrollNumbersAlphanumerically
     *
     * @return bool|null
     */
    public function getSortPayrollNumbersAlphanumerically(): ?bool
    {
        return $this->container['sortPayrollNumbersAlphanumerically'];
    }

    /**
     * Sets sortPayrollNumbersAlphanumerically
     *
     * @param bool|null $sortPayrollNumbersAlphanumerically Enables the default sorting to be alphanumerically for payroll code, if set to true else numerical sorting will be applied
     *
     * @return $this
     */
    public function setSortPayrollNumbersAlphanumerically(?bool $sortPayrollNumbersAlphanumerically): static
    {
        if (is_null($sortPayrollNumbersAlphanumerically)) {
            throw new InvalidArgumentException('non-nullable sortPayrollNumbersAlphanumerically cannot be null');
        }
        $this->container['sortPayrollNumbersAlphanumerically'] = $sortPayrollNumbersAlphanumerically;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


