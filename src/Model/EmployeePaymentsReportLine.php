<?php
/**
 * EmployeePaymentsReportLine
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EmployeePaymentsReportLine Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class EmployeePaymentsReportLine implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'EmployeePaymentsReportLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'payrollCode' => 'string',
        'uniqueIdentifier' => 'string',
        'amount' => 'float',
        'multiplierType' => 'int',
        'multiplier' => 'float',
        'hours' => 'float',
        'days' => 'float',
        'payCode' => 'string',
        'description' => 'string',
        'effectiveFrom' => '\DateTime',
        'effectiveTo' => '\DateTime',
        'isNetToGross' => 'bool',
        'department' => 'string',
        'costCentre' => 'string',
        'isAutomaticBackPay' => 'bool',
        'ignoreInitialBackPay' => 'bool',
        'contributesToBasicPay' => 'bool',
        'autoAdjustForLeave' => 'bool',
        'roleReference' => 'string',
        'paySpine' => 'string',
        'payGrade' => 'string',
        'spinePoint' => 'string',
        'londonAllowanceType' => 'string',
        'calculateAsWhenPaid' => 'bool',
        'departmentId' => 'string',
        'costCentreId' => 'string',
        'paySpineId' => 'string',
        'spinalPointId' => 'string',
        'paySpineGradeId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'payrollCode' => null,
        'uniqueIdentifier' => 'uuid',
        'amount' => 'double',
        'multiplierType' => 'int32',
        'multiplier' => 'double',
        'hours' => 'double',
        'days' => 'double',
        'payCode' => null,
        'description' => null,
        'effectiveFrom' => 'date',
        'effectiveTo' => 'date',
        'isNetToGross' => null,
        'department' => null,
        'costCentre' => null,
        'isAutomaticBackPay' => null,
        'ignoreInitialBackPay' => null,
        'contributesToBasicPay' => null,
        'autoAdjustForLeave' => null,
        'roleReference' => null,
        'paySpine' => null,
        'payGrade' => null,
        'spinePoint' => null,
        'londonAllowanceType' => null,
        'calculateAsWhenPaid' => null,
        'departmentId' => 'uuid',
        'costCentreId' => 'uuid',
        'paySpineId' => 'uuid',
        'spinalPointId' => 'uuid',
        'paySpineGradeId' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'payrollCode' => true,
        'uniqueIdentifier' => false,
        'amount' => false,
        'multiplierType' => false,
        'multiplier' => true,
        'hours' => true,
        'days' => true,
        'payCode' => true,
        'description' => true,
        'effectiveFrom' => true,
        'effectiveTo' => true,
        'isNetToGross' => false,
        'department' => true,
        'costCentre' => true,
        'isAutomaticBackPay' => false,
        'ignoreInitialBackPay' => false,
        'contributesToBasicPay' => false,
        'autoAdjustForLeave' => false,
        'roleReference' => true,
        'paySpine' => true,
        'payGrade' => true,
        'spinePoint' => true,
        'londonAllowanceType' => true,
        'calculateAsWhenPaid' => false,
        'departmentId' => false,
        'costCentreId' => false,
        'paySpineId' => false,
        'spinalPointId' => false,
        'paySpineGradeId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'payrollCode' => 'payrollCode',
        'uniqueIdentifier' => 'uniqueIdentifier',
        'amount' => 'amount',
        'multiplierType' => 'multiplierType',
        'multiplier' => 'multiplier',
        'hours' => 'hours',
        'days' => 'days',
        'payCode' => 'payCode',
        'description' => 'description',
        'effectiveFrom' => 'effectiveFrom',
        'effectiveTo' => 'effectiveTo',
        'isNetToGross' => 'isNetToGross',
        'department' => 'department',
        'costCentre' => 'costCentre',
        'isAutomaticBackPay' => 'isAutomaticBackPay',
        'ignoreInitialBackPay' => 'ignoreInitialBackPay',
        'contributesToBasicPay' => 'contributesToBasicPay',
        'autoAdjustForLeave' => 'autoAdjustForLeave',
        'roleReference' => 'roleReference',
        'paySpine' => 'paySpine',
        'payGrade' => 'payGrade',
        'spinePoint' => 'spinePoint',
        'londonAllowanceType' => 'londonAllowanceType',
        'calculateAsWhenPaid' => 'calculateAsWhenPaid',
        'departmentId' => 'departmentId',
        'costCentreId' => 'costCentreId',
        'paySpineId' => 'paySpineId',
        'spinalPointId' => 'spinalPointId',
        'paySpineGradeId' => 'paySpineGradeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'payrollCode' => 'setPayrollCode',
        'uniqueIdentifier' => 'setUniqueIdentifier',
        'amount' => 'setAmount',
        'multiplierType' => 'setMultiplierType',
        'multiplier' => 'setMultiplier',
        'hours' => 'setHours',
        'days' => 'setDays',
        'payCode' => 'setPayCode',
        'description' => 'setDescription',
        'effectiveFrom' => 'setEffectiveFrom',
        'effectiveTo' => 'setEffectiveTo',
        'isNetToGross' => 'setIsNetToGross',
        'department' => 'setDepartment',
        'costCentre' => 'setCostCentre',
        'isAutomaticBackPay' => 'setIsAutomaticBackPay',
        'ignoreInitialBackPay' => 'setIgnoreInitialBackPay',
        'contributesToBasicPay' => 'setContributesToBasicPay',
        'autoAdjustForLeave' => 'setAutoAdjustForLeave',
        'roleReference' => 'setRoleReference',
        'paySpine' => 'setPaySpine',
        'payGrade' => 'setPayGrade',
        'spinePoint' => 'setSpinePoint',
        'londonAllowanceType' => 'setLondonAllowanceType',
        'calculateAsWhenPaid' => 'setCalculateAsWhenPaid',
        'departmentId' => 'setDepartmentId',
        'costCentreId' => 'setCostCentreId',
        'paySpineId' => 'setPaySpineId',
        'spinalPointId' => 'setSpinalPointId',
        'paySpineGradeId' => 'setPaySpineGradeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'payrollCode' => 'getPayrollCode',
        'uniqueIdentifier' => 'getUniqueIdentifier',
        'amount' => 'getAmount',
        'multiplierType' => 'getMultiplierType',
        'multiplier' => 'getMultiplier',
        'hours' => 'getHours',
        'days' => 'getDays',
        'payCode' => 'getPayCode',
        'description' => 'getDescription',
        'effectiveFrom' => 'getEffectiveFrom',
        'effectiveTo' => 'getEffectiveTo',
        'isNetToGross' => 'getIsNetToGross',
        'department' => 'getDepartment',
        'costCentre' => 'getCostCentre',
        'isAutomaticBackPay' => 'getIsAutomaticBackPay',
        'ignoreInitialBackPay' => 'getIgnoreInitialBackPay',
        'contributesToBasicPay' => 'getContributesToBasicPay',
        'autoAdjustForLeave' => 'getAutoAdjustForLeave',
        'roleReference' => 'getRoleReference',
        'paySpine' => 'getPaySpine',
        'payGrade' => 'getPayGrade',
        'spinePoint' => 'getSpinePoint',
        'londonAllowanceType' => 'getLondonAllowanceType',
        'calculateAsWhenPaid' => 'getCalculateAsWhenPaid',
        'departmentId' => 'getDepartmentId',
        'costCentreId' => 'getCostCentreId',
        'paySpineId' => 'getPaySpineId',
        'spinalPointId' => 'getSpinalPointId',
        'paySpineGradeId' => 'getPaySpineGradeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payrollCode', $data ?? [], null);
        $this->setIfExists('uniqueIdentifier', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('multiplierType', $data ?? [], null);
        $this->setIfExists('multiplier', $data ?? [], null);
        $this->setIfExists('hours', $data ?? [], null);
        $this->setIfExists('days', $data ?? [], null);
        $this->setIfExists('payCode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('effectiveFrom', $data ?? [], null);
        $this->setIfExists('effectiveTo', $data ?? [], null);
        $this->setIfExists('isNetToGross', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('costCentre', $data ?? [], null);
        $this->setIfExists('isAutomaticBackPay', $data ?? [], null);
        $this->setIfExists('ignoreInitialBackPay', $data ?? [], null);
        $this->setIfExists('contributesToBasicPay', $data ?? [], null);
        $this->setIfExists('autoAdjustForLeave', $data ?? [], null);
        $this->setIfExists('roleReference', $data ?? [], null);
        $this->setIfExists('paySpine', $data ?? [], null);
        $this->setIfExists('payGrade', $data ?? [], null);
        $this->setIfExists('spinePoint', $data ?? [], null);
        $this->setIfExists('londonAllowanceType', $data ?? [], null);
        $this->setIfExists('calculateAsWhenPaid', $data ?? [], null);
        $this->setIfExists('departmentId', $data ?? [], null);
        $this->setIfExists('costCentreId', $data ?? [], null);
        $this->setIfExists('paySpineId', $data ?? [], null);
        $this->setIfExists('spinalPointId', $data ?? [], null);
        $this->setIfExists('paySpineGradeId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payrollCode
     *
     * @return string|null
     */
    public function getPayrollCode(): ?string
    {
        return $this->container['payrollCode'];
    }

    /**
     * Sets payrollCode
     *
     * @param string|null $payrollCode Payroll Code for exported pay line
     *
     * @return $this
     */
    public function setPayrollCode(?string $payrollCode): static
    {
        if (is_null($payrollCode)) {
            array_push($this->openAPINullablesSetToNull, 'payrollCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payrollCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payrollCode'] = $payrollCode;

        return $this;
    }

    /**
     * Gets uniqueIdentifier
     *
     * @return string|null
     */
    public function getUniqueIdentifier(): ?string
    {
        return $this->container['uniqueIdentifier'];
    }

    /**
     * Sets uniqueIdentifier
     *
     * @param string|null $uniqueIdentifier Unique Id for exported pay line
     *
     * @return $this
     */
    public function setUniqueIdentifier(?string $uniqueIdentifier): static
    {
        if (is_null($uniqueIdentifier)) {
            throw new InvalidArgumentException('non-nullable uniqueIdentifier cannot be null');
        }
        $this->container['uniqueIdentifier'] = $uniqueIdentifier;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount(): ?float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Amount for exported pay line
     *
     * @return $this
     */
    public function setAmount(?float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets multiplierType
     *
     * @return int|null
     */
    public function getMultiplierType(): ?int
    {
        return $this->container['multiplierType'];
    }

    /**
     * Sets multiplierType
     *
     * @param int|null $multiplierType MultiplierType of exported pay line
     *
     * @return $this
     */
    public function setMultiplierType(?int $multiplierType): static
    {
        if (is_null($multiplierType)) {
            throw new InvalidArgumentException('non-nullable multiplierType cannot be null');
        }
        $this->container['multiplierType'] = $multiplierType;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return float|null
     */
    public function getMultiplier(): ?float
    {
        return $this->container['multiplier'];
    }

    /**
     * Sets multiplier
     *
     * @param float|null $multiplier Multiplier for exported pay line
     *
     * @return $this
     */
    public function setMultiplier(?float $multiplier): static
    {
        if (is_null($multiplier)) {
            array_push($this->openAPINullablesSetToNull, 'multiplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('multiplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return float|null
     */
    public function getHours(): ?float
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param float|null $hours Number of Hours for exported pay line
     *
     * @return $this
     */
    public function setHours(?float $hours): static
    {
        if (is_null($hours)) {
            array_push($this->openAPINullablesSetToNull, 'hours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets days
     *
     * @return float|null
     */
    public function getDays(): ?float
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param float|null $days Number of Days for exported pay line
     *
     * @return $this
     */
    public function setDays(?float $days): static
    {
        if (is_null($days)) {
            array_push($this->openAPINullablesSetToNull, 'days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets payCode
     *
     * @return string|null
     */
    public function getPayCode(): ?string
    {
        return $this->container['payCode'];
    }

    /**
     * Sets payCode
     *
     * @param string|null $payCode Pay code for exported pay line
     *
     * @return $this
     */
    public function setPayCode(?string $payCode): static
    {
        if (is_null($payCode)) {
            array_push($this->openAPINullablesSetToNull, 'payCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payCode'] = $payCode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Note for exported pay line
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets effectiveFrom
     *
     * @return \DateTime|null
     */
    public function getEffectiveFrom(): ?\DateTime
    {
        return $this->container['effectiveFrom'];
    }

    /**
     * Sets effectiveFrom
     *
     * @param \DateTime|null $effectiveFrom Effective From date for exported pay line
     *
     * @return $this
     */
    public function setEffectiveFrom(?\DateTime $effectiveFrom): static
    {
        if (is_null($effectiveFrom)) {
            array_push($this->openAPINullablesSetToNull, 'effectiveFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effectiveFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effectiveFrom'] = $effectiveFrom;

        return $this;
    }

    /**
     * Gets effectiveTo
     *
     * @return \DateTime|null
     */
    public function getEffectiveTo(): ?\DateTime
    {
        return $this->container['effectiveTo'];
    }

    /**
     * Sets effectiveTo
     *
     * @param \DateTime|null $effectiveTo Effective To date for exported pay line
     *
     * @return $this
     */
    public function setEffectiveTo(?\DateTime $effectiveTo): static
    {
        if (is_null($effectiveTo)) {
            array_push($this->openAPINullablesSetToNull, 'effectiveTo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effectiveTo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effectiveTo'] = $effectiveTo;

        return $this;
    }

    /**
     * Gets isNetToGross
     *
     * @return bool|null
     */
    public function getIsNetToGross(): ?bool
    {
        return $this->container['isNetToGross'];
    }

    /**
     * Sets isNetToGross
     *
     * @param bool|null $isNetToGross Indicates Gross To Net value for exported pay line
     *
     * @return $this
     */
    public function setIsNetToGross(?bool $isNetToGross): static
    {
        if (is_null($isNetToGross)) {
            throw new InvalidArgumentException('non-nullable isNetToGross cannot be null');
        }
        $this->container['isNetToGross'] = $isNetToGross;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment(): ?string
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department for exported pay line
     *
     * @return $this
     */
    public function setDepartment(?string $department): static
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets costCentre
     *
     * @return string|null
     */
    public function getCostCentre(): ?string
    {
        return $this->container['costCentre'];
    }

    /**
     * Sets costCentre
     *
     * @param string|null $costCentre Cost Centre for exported pay line
     *
     * @return $this
     */
    public function setCostCentre(?string $costCentre): static
    {
        if (is_null($costCentre)) {
            array_push($this->openAPINullablesSetToNull, 'costCentre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costCentre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costCentre'] = $costCentre;

        return $this;
    }

    /**
     * Gets isAutomaticBackPay
     *
     * @return bool|null
     */
    public function getIsAutomaticBackPay(): ?bool
    {
        return $this->container['isAutomaticBackPay'];
    }

    /**
     * Sets isAutomaticBackPay
     *
     * @param bool|null $isAutomaticBackPay Indicates Automatic Back Pay value for exported pay line
     *
     * @return $this
     */
    public function setIsAutomaticBackPay(?bool $isAutomaticBackPay): static
    {
        if (is_null($isAutomaticBackPay)) {
            throw new InvalidArgumentException('non-nullable isAutomaticBackPay cannot be null');
        }
        $this->container['isAutomaticBackPay'] = $isAutomaticBackPay;

        return $this;
    }

    /**
     * Gets ignoreInitialBackPay
     *
     * @return bool|null
     */
    public function getIgnoreInitialBackPay(): ?bool
    {
        return $this->container['ignoreInitialBackPay'];
    }

    /**
     * Sets ignoreInitialBackPay
     *
     * @param bool|null $ignoreInitialBackPay Indicates Ignore Initial Back Pay value for exported pay line
     *
     * @return $this
     */
    public function setIgnoreInitialBackPay(?bool $ignoreInitialBackPay): static
    {
        if (is_null($ignoreInitialBackPay)) {
            throw new InvalidArgumentException('non-nullable ignoreInitialBackPay cannot be null');
        }
        $this->container['ignoreInitialBackPay'] = $ignoreInitialBackPay;

        return $this;
    }

    /**
     * Gets contributesToBasicPay
     *
     * @return bool|null
     */
    public function getContributesToBasicPay(): ?bool
    {
        return $this->container['contributesToBasicPay'];
    }

    /**
     * Sets contributesToBasicPay
     *
     * @param bool|null $contributesToBasicPay Indicates Contributes To Basic Pay value for exported pay line
     *
     * @return $this
     */
    public function setContributesToBasicPay(?bool $contributesToBasicPay): static
    {
        if (is_null($contributesToBasicPay)) {
            throw new InvalidArgumentException('non-nullable contributesToBasicPay cannot be null');
        }
        $this->container['contributesToBasicPay'] = $contributesToBasicPay;

        return $this;
    }

    /**
     * Gets autoAdjustForLeave
     *
     * @return bool|null
     */
    public function getAutoAdjustForLeave(): ?bool
    {
        return $this->container['autoAdjustForLeave'];
    }

    /**
     * Sets autoAdjustForLeave
     *
     * @param bool|null $autoAdjustForLeave Indicates Auto Adjust For Leave value for exported pay line
     *
     * @return $this
     */
    public function setAutoAdjustForLeave(?bool $autoAdjustForLeave): static
    {
        if (is_null($autoAdjustForLeave)) {
            throw new InvalidArgumentException('non-nullable autoAdjustForLeave cannot be null');
        }
        $this->container['autoAdjustForLeave'] = $autoAdjustForLeave;

        return $this;
    }

    /**
     * Gets roleReference
     *
     * @return string|null
     */
    public function getRoleReference(): ?string
    {
        return $this->container['roleReference'];
    }

    /**
     * Sets roleReference
     *
     * @param string|null $roleReference Employee Role Reference for exported pay line
     *
     * @return $this
     */
    public function setRoleReference(?string $roleReference): static
    {
        if (is_null($roleReference)) {
            array_push($this->openAPINullablesSetToNull, 'roleReference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleReference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleReference'] = $roleReference;

        return $this;
    }

    /**
     * Gets paySpine
     *
     * @return string|null
     */
    public function getPaySpine(): ?string
    {
        return $this->container['paySpine'];
    }

    /**
     * Sets paySpine
     *
     * @param string|null $paySpine Pay Spine for exported pay line
     *
     * @return $this
     */
    public function setPaySpine(?string $paySpine): static
    {
        if (is_null($paySpine)) {
            array_push($this->openAPINullablesSetToNull, 'paySpine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paySpine', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paySpine'] = $paySpine;

        return $this;
    }

    /**
     * Gets payGrade
     *
     * @return string|null
     */
    public function getPayGrade(): ?string
    {
        return $this->container['payGrade'];
    }

    /**
     * Sets payGrade
     *
     * @param string|null $payGrade Pay Grade for exported pay line
     *
     * @return $this
     */
    public function setPayGrade(?string $payGrade): static
    {
        if (is_null($payGrade)) {
            array_push($this->openAPINullablesSetToNull, 'payGrade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payGrade', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payGrade'] = $payGrade;

        return $this;
    }

    /**
     * Gets spinePoint
     *
     * @return string|null
     */
    public function getSpinePoint(): ?string
    {
        return $this->container['spinePoint'];
    }

    /**
     * Sets spinePoint
     *
     * @param string|null $spinePoint Spine Point for exported pay line
     *
     * @return $this
     */
    public function setSpinePoint(?string $spinePoint): static
    {
        if (is_null($spinePoint)) {
            array_push($this->openAPINullablesSetToNull, 'spinePoint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spinePoint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spinePoint'] = $spinePoint;

        return $this;
    }

    /**
     * Gets londonAllowanceType
     *
     * @return string|null
     */
    public function getLondonAllowanceType(): ?string
    {
        return $this->container['londonAllowanceType'];
    }

    /**
     * Sets londonAllowanceType
     *
     * @param string|null $londonAllowanceType London Allowance type for exported pay line
     *
     * @return $this
     */
    public function setLondonAllowanceType(?string $londonAllowanceType): static
    {
        if (is_null($londonAllowanceType)) {
            array_push($this->openAPINullablesSetToNull, 'londonAllowanceType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('londonAllowanceType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['londonAllowanceType'] = $londonAllowanceType;

        return $this;
    }

    /**
     * Gets calculateAsWhenPaid
     *
     * @return bool|null
     */
    public function getCalculateAsWhenPaid(): ?bool
    {
        return $this->container['calculateAsWhenPaid'];
    }

    /**
     * Sets calculateAsWhenPaid
     *
     * @param bool|null $calculateAsWhenPaid Indicates whether this pay line should be treated as When Paid rather than When Earned
     *
     * @return $this
     */
    public function setCalculateAsWhenPaid(?bool $calculateAsWhenPaid): static
    {
        if (is_null($calculateAsWhenPaid)) {
            throw new InvalidArgumentException('non-nullable calculateAsWhenPaid cannot be null');
        }
        $this->container['calculateAsWhenPaid'] = $calculateAsWhenPaid;

        return $this;
    }

    /**
     * Gets departmentId
     *
     * @return string|null
     */
    public function getDepartmentId(): ?string
    {
        return $this->container['departmentId'];
    }

    /**
     * Sets departmentId
     *
     * @param string|null $departmentId Department ID associated with the exported payline
     *
     * @return $this
     */
    public function setDepartmentId(?string $departmentId): static
    {
        if (is_null($departmentId)) {
            throw new InvalidArgumentException('non-nullable departmentId cannot be null');
        }
        $this->container['departmentId'] = $departmentId;

        return $this;
    }

    /**
     * Gets costCentreId
     *
     * @return string|null
     */
    public function getCostCentreId(): ?string
    {
        return $this->container['costCentreId'];
    }

    /**
     * Sets costCentreId
     *
     * @param string|null $costCentreId Cost Centre ID associated with the exported payline
     *
     * @return $this
     */
    public function setCostCentreId(?string $costCentreId): static
    {
        if (is_null($costCentreId)) {
            throw new InvalidArgumentException('non-nullable costCentreId cannot be null');
        }
        $this->container['costCentreId'] = $costCentreId;

        return $this;
    }

    /**
     * Gets paySpineId
     *
     * @return string|null
     */
    public function getPaySpineId(): ?string
    {
        return $this->container['paySpineId'];
    }

    /**
     * Sets paySpineId
     *
     * @param string|null $paySpineId Pay Spine ID associated with the exported payline
     *
     * @return $this
     */
    public function setPaySpineId(?string $paySpineId): static
    {
        if (is_null($paySpineId)) {
            throw new InvalidArgumentException('non-nullable paySpineId cannot be null');
        }
        $this->container['paySpineId'] = $paySpineId;

        return $this;
    }

    /**
     * Gets spinalPointId
     *
     * @return string|null
     */
    public function getSpinalPointId(): ?string
    {
        return $this->container['spinalPointId'];
    }

    /**
     * Sets spinalPointId
     *
     * @param string|null $spinalPointId Spinal Point ID associated with the exported payline
     *
     * @return $this
     */
    public function setSpinalPointId(?string $spinalPointId): static
    {
        if (is_null($spinalPointId)) {
            throw new InvalidArgumentException('non-nullable spinalPointId cannot be null');
        }
        $this->container['spinalPointId'] = $spinalPointId;

        return $this;
    }

    /**
     * Gets paySpineGradeId
     *
     * @return string|null
     */
    public function getPaySpineGradeId(): ?string
    {
        return $this->container['paySpineGradeId'];
    }

    /**
     * Sets paySpineGradeId
     *
     * @param string|null $paySpineGradeId Pay Spine Grade ID associated with the exported payline
     *
     * @return $this
     */
    public function setPaySpineGradeId(?string $paySpineGradeId): static
    {
        if (is_null($paySpineGradeId)) {
            throw new InvalidArgumentException('non-nullable paySpineGradeId cannot be null');
        }
        $this->container['paySpineGradeId'] = $paySpineGradeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


