<?php
/**
 * ContractPensionSchemeReportOptionsLgpsIConnectResponse
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ContractPensionSchemeReportOptionsLgpsIConnectResponse Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContractPensionSchemeReportOptionsLgpsIConnectResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contract.PensionSchemeReportOptionsLgpsIConnectResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'fileType' => '\SynergiTech\Staffology\Model\LgpsIConnectFileType',
        'payrollReference1' => '\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference',
        'payrollReference2' => '\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference',
        'payrollReference3' => '\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference',
        'populateEmailAddress' => 'bool',
        'populateTelephoneNumber' => 'bool',
        'populateMobileNumber' => 'bool',
        'populateWorksPlaceName' => 'bool',
        'populateWorksAddress' => 'bool',
        'populateWorksEmailAddress' => 'bool',
        'includeEmploymentBreaks' => 'bool',
        'breakReasonSmpIndicatorOnly' => 'bool',
        'populateMaritalStatus' => 'bool',
        'includeAeQualifyingEarnings' => 'bool',
        'proRatePtHoursByTermTimeWeeks' => 'bool',
        'ignoreTermTimeWeeksForFteFinalPay' => 'bool',
        'showFteAnnualSalaryForFteFinalPay' => 'bool',
        'casualStaffHoursAsOne' => 'bool',
        'casualStaffIndicatorAsY' => 'bool',
        'ignoreHours' => 'bool',
        'forceUpperCase' => 'bool',
        'salaryType' => '\SynergiTech\Staffology\Model\LgpsIConnectSalaryType',
        'customText' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'fileType' => null,
        'payrollReference1' => null,
        'payrollReference2' => null,
        'payrollReference3' => null,
        'populateEmailAddress' => null,
        'populateTelephoneNumber' => null,
        'populateMobileNumber' => null,
        'populateWorksPlaceName' => null,
        'populateWorksAddress' => null,
        'populateWorksEmailAddress' => null,
        'includeEmploymentBreaks' => null,
        'breakReasonSmpIndicatorOnly' => null,
        'populateMaritalStatus' => null,
        'includeAeQualifyingEarnings' => null,
        'proRatePtHoursByTermTimeWeeks' => null,
        'ignoreTermTimeWeeksForFteFinalPay' => null,
        'showFteAnnualSalaryForFteFinalPay' => null,
        'casualStaffHoursAsOne' => null,
        'casualStaffIndicatorAsY' => null,
        'ignoreHours' => null,
        'forceUpperCase' => null,
        'salaryType' => null,
        'customText' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'fileType' => false,
        'payrollReference1' => false,
        'payrollReference2' => false,
        'payrollReference3' => false,
        'populateEmailAddress' => false,
        'populateTelephoneNumber' => false,
        'populateMobileNumber' => false,
        'populateWorksPlaceName' => false,
        'populateWorksAddress' => false,
        'populateWorksEmailAddress' => false,
        'includeEmploymentBreaks' => false,
        'breakReasonSmpIndicatorOnly' => false,
        'populateMaritalStatus' => false,
        'includeAeQualifyingEarnings' => false,
        'proRatePtHoursByTermTimeWeeks' => false,
        'ignoreTermTimeWeeksForFteFinalPay' => false,
        'showFteAnnualSalaryForFteFinalPay' => false,
        'casualStaffHoursAsOne' => false,
        'casualStaffIndicatorAsY' => false,
        'ignoreHours' => false,
        'forceUpperCase' => false,
        'salaryType' => false,
        'customText' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'fileType' => 'fileType',
        'payrollReference1' => 'payrollReference1',
        'payrollReference2' => 'payrollReference2',
        'payrollReference3' => 'payrollReference3',
        'populateEmailAddress' => 'populateEmailAddress',
        'populateTelephoneNumber' => 'populateTelephoneNumber',
        'populateMobileNumber' => 'populateMobileNumber',
        'populateWorksPlaceName' => 'populateWorksPlaceName',
        'populateWorksAddress' => 'populateWorksAddress',
        'populateWorksEmailAddress' => 'populateWorksEmailAddress',
        'includeEmploymentBreaks' => 'includeEmploymentBreaks',
        'breakReasonSmpIndicatorOnly' => 'breakReasonSmpIndicatorOnly',
        'populateMaritalStatus' => 'populateMaritalStatus',
        'includeAeQualifyingEarnings' => 'includeAeQualifyingEarnings',
        'proRatePtHoursByTermTimeWeeks' => 'proRatePtHoursByTermTimeWeeks',
        'ignoreTermTimeWeeksForFteFinalPay' => 'ignoreTermTimeWeeksForFteFinalPay',
        'showFteAnnualSalaryForFteFinalPay' => 'showFteAnnualSalaryForFteFinalPay',
        'casualStaffHoursAsOne' => 'casualStaffHoursAsOne',
        'casualStaffIndicatorAsY' => 'casualStaffIndicatorAsY',
        'ignoreHours' => 'ignoreHours',
        'forceUpperCase' => 'forceUpperCase',
        'salaryType' => 'salaryType',
        'customText' => 'customText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'fileType' => 'setFileType',
        'payrollReference1' => 'setPayrollReference1',
        'payrollReference2' => 'setPayrollReference2',
        'payrollReference3' => 'setPayrollReference3',
        'populateEmailAddress' => 'setPopulateEmailAddress',
        'populateTelephoneNumber' => 'setPopulateTelephoneNumber',
        'populateMobileNumber' => 'setPopulateMobileNumber',
        'populateWorksPlaceName' => 'setPopulateWorksPlaceName',
        'populateWorksAddress' => 'setPopulateWorksAddress',
        'populateWorksEmailAddress' => 'setPopulateWorksEmailAddress',
        'includeEmploymentBreaks' => 'setIncludeEmploymentBreaks',
        'breakReasonSmpIndicatorOnly' => 'setBreakReasonSmpIndicatorOnly',
        'populateMaritalStatus' => 'setPopulateMaritalStatus',
        'includeAeQualifyingEarnings' => 'setIncludeAeQualifyingEarnings',
        'proRatePtHoursByTermTimeWeeks' => 'setProRatePtHoursByTermTimeWeeks',
        'ignoreTermTimeWeeksForFteFinalPay' => 'setIgnoreTermTimeWeeksForFteFinalPay',
        'showFteAnnualSalaryForFteFinalPay' => 'setShowFteAnnualSalaryForFteFinalPay',
        'casualStaffHoursAsOne' => 'setCasualStaffHoursAsOne',
        'casualStaffIndicatorAsY' => 'setCasualStaffIndicatorAsY',
        'ignoreHours' => 'setIgnoreHours',
        'forceUpperCase' => 'setForceUpperCase',
        'salaryType' => 'setSalaryType',
        'customText' => 'setCustomText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'fileType' => 'getFileType',
        'payrollReference1' => 'getPayrollReference1',
        'payrollReference2' => 'getPayrollReference2',
        'payrollReference3' => 'getPayrollReference3',
        'populateEmailAddress' => 'getPopulateEmailAddress',
        'populateTelephoneNumber' => 'getPopulateTelephoneNumber',
        'populateMobileNumber' => 'getPopulateMobileNumber',
        'populateWorksPlaceName' => 'getPopulateWorksPlaceName',
        'populateWorksAddress' => 'getPopulateWorksAddress',
        'populateWorksEmailAddress' => 'getPopulateWorksEmailAddress',
        'includeEmploymentBreaks' => 'getIncludeEmploymentBreaks',
        'breakReasonSmpIndicatorOnly' => 'getBreakReasonSmpIndicatorOnly',
        'populateMaritalStatus' => 'getPopulateMaritalStatus',
        'includeAeQualifyingEarnings' => 'getIncludeAeQualifyingEarnings',
        'proRatePtHoursByTermTimeWeeks' => 'getProRatePtHoursByTermTimeWeeks',
        'ignoreTermTimeWeeksForFteFinalPay' => 'getIgnoreTermTimeWeeksForFteFinalPay',
        'showFteAnnualSalaryForFteFinalPay' => 'getShowFteAnnualSalaryForFteFinalPay',
        'casualStaffHoursAsOne' => 'getCasualStaffHoursAsOne',
        'casualStaffIndicatorAsY' => 'getCasualStaffIndicatorAsY',
        'ignoreHours' => 'getIgnoreHours',
        'forceUpperCase' => 'getForceUpperCase',
        'salaryType' => 'getSalaryType',
        'customText' => 'getCustomText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fileType', $data ?? [], null);
        $this->setIfExists('payrollReference1', $data ?? [], null);
        $this->setIfExists('payrollReference2', $data ?? [], null);
        $this->setIfExists('payrollReference3', $data ?? [], null);
        $this->setIfExists('populateEmailAddress', $data ?? [], null);
        $this->setIfExists('populateTelephoneNumber', $data ?? [], null);
        $this->setIfExists('populateMobileNumber', $data ?? [], null);
        $this->setIfExists('populateWorksPlaceName', $data ?? [], null);
        $this->setIfExists('populateWorksAddress', $data ?? [], null);
        $this->setIfExists('populateWorksEmailAddress', $data ?? [], null);
        $this->setIfExists('includeEmploymentBreaks', $data ?? [], null);
        $this->setIfExists('breakReasonSmpIndicatorOnly', $data ?? [], null);
        $this->setIfExists('populateMaritalStatus', $data ?? [], null);
        $this->setIfExists('includeAeQualifyingEarnings', $data ?? [], null);
        $this->setIfExists('proRatePtHoursByTermTimeWeeks', $data ?? [], null);
        $this->setIfExists('ignoreTermTimeWeeksForFteFinalPay', $data ?? [], null);
        $this->setIfExists('showFteAnnualSalaryForFteFinalPay', $data ?? [], null);
        $this->setIfExists('casualStaffHoursAsOne', $data ?? [], null);
        $this->setIfExists('casualStaffIndicatorAsY', $data ?? [], null);
        $this->setIfExists('ignoreHours', $data ?? [], null);
        $this->setIfExists('forceUpperCase', $data ?? [], null);
        $this->setIfExists('salaryType', $data ?? [], null);
        $this->setIfExists('customText', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fileType
     *
     * @return \SynergiTech\Staffology\Model\LgpsIConnectFileType|null
     */
    public function getFileType(): ?\SynergiTech\Staffology\Model\LgpsIConnectFileType
    {
        return $this->container['fileType'];
    }

    /**
     * Sets fileType
     *
     * @param \SynergiTech\Staffology\Model\LgpsIConnectFileType|null $fileType fileType
     *
     * @return $this
     */
    public function setFileType(?\SynergiTech\Staffology\Model\LgpsIConnectFileType $fileType): static
    {
        if (is_null($fileType)) {
            throw new InvalidArgumentException('non-nullable fileType cannot be null');
        }
        $this->container['fileType'] = $fileType;

        return $this;
    }

    /**
     * Gets payrollReference1
     *
     * @return \SynergiTech\Staffology\Model\LgpsIConnectPayrollReference|null
     */
    public function getPayrollReference1(): ?\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference
    {
        return $this->container['payrollReference1'];
    }

    /**
     * Sets payrollReference1
     *
     * @param \SynergiTech\Staffology\Model\LgpsIConnectPayrollReference|null $payrollReference1 payrollReference1
     *
     * @return $this
     */
    public function setPayrollReference1(?\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference $payrollReference1): static
    {
        if (is_null($payrollReference1)) {
            throw new InvalidArgumentException('non-nullable payrollReference1 cannot be null');
        }
        $this->container['payrollReference1'] = $payrollReference1;

        return $this;
    }

    /**
     * Gets payrollReference2
     *
     * @return \SynergiTech\Staffology\Model\LgpsIConnectPayrollReference|null
     */
    public function getPayrollReference2(): ?\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference
    {
        return $this->container['payrollReference2'];
    }

    /**
     * Sets payrollReference2
     *
     * @param \SynergiTech\Staffology\Model\LgpsIConnectPayrollReference|null $payrollReference2 payrollReference2
     *
     * @return $this
     */
    public function setPayrollReference2(?\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference $payrollReference2): static
    {
        if (is_null($payrollReference2)) {
            throw new InvalidArgumentException('non-nullable payrollReference2 cannot be null');
        }
        $this->container['payrollReference2'] = $payrollReference2;

        return $this;
    }

    /**
     * Gets payrollReference3
     *
     * @return \SynergiTech\Staffology\Model\LgpsIConnectPayrollReference|null
     */
    public function getPayrollReference3(): ?\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference
    {
        return $this->container['payrollReference3'];
    }

    /**
     * Sets payrollReference3
     *
     * @param \SynergiTech\Staffology\Model\LgpsIConnectPayrollReference|null $payrollReference3 payrollReference3
     *
     * @return $this
     */
    public function setPayrollReference3(?\SynergiTech\Staffology\Model\LgpsIConnectPayrollReference $payrollReference3): static
    {
        if (is_null($payrollReference3)) {
            throw new InvalidArgumentException('non-nullable payrollReference3 cannot be null');
        }
        $this->container['payrollReference3'] = $payrollReference3;

        return $this;
    }

    /**
     * Gets populateEmailAddress
     *
     * @return bool|null
     */
    public function getPopulateEmailAddress(): ?bool
    {
        return $this->container['populateEmailAddress'];
    }

    /**
     * Sets populateEmailAddress
     *
     * @param bool|null $populateEmailAddress populateEmailAddress
     *
     * @return $this
     */
    public function setPopulateEmailAddress(?bool $populateEmailAddress): static
    {
        if (is_null($populateEmailAddress)) {
            throw new InvalidArgumentException('non-nullable populateEmailAddress cannot be null');
        }
        $this->container['populateEmailAddress'] = $populateEmailAddress;

        return $this;
    }

    /**
     * Gets populateTelephoneNumber
     *
     * @return bool|null
     */
    public function getPopulateTelephoneNumber(): ?bool
    {
        return $this->container['populateTelephoneNumber'];
    }

    /**
     * Sets populateTelephoneNumber
     *
     * @param bool|null $populateTelephoneNumber populateTelephoneNumber
     *
     * @return $this
     */
    public function setPopulateTelephoneNumber(?bool $populateTelephoneNumber): static
    {
        if (is_null($populateTelephoneNumber)) {
            throw new InvalidArgumentException('non-nullable populateTelephoneNumber cannot be null');
        }
        $this->container['populateTelephoneNumber'] = $populateTelephoneNumber;

        return $this;
    }

    /**
     * Gets populateMobileNumber
     *
     * @return bool|null
     */
    public function getPopulateMobileNumber(): ?bool
    {
        return $this->container['populateMobileNumber'];
    }

    /**
     * Sets populateMobileNumber
     *
     * @param bool|null $populateMobileNumber populateMobileNumber
     *
     * @return $this
     */
    public function setPopulateMobileNumber(?bool $populateMobileNumber): static
    {
        if (is_null($populateMobileNumber)) {
            throw new InvalidArgumentException('non-nullable populateMobileNumber cannot be null');
        }
        $this->container['populateMobileNumber'] = $populateMobileNumber;

        return $this;
    }

    /**
     * Gets populateWorksPlaceName
     *
     * @return bool|null
     */
    public function getPopulateWorksPlaceName(): ?bool
    {
        return $this->container['populateWorksPlaceName'];
    }

    /**
     * Sets populateWorksPlaceName
     *
     * @param bool|null $populateWorksPlaceName populateWorksPlaceName
     *
     * @return $this
     */
    public function setPopulateWorksPlaceName(?bool $populateWorksPlaceName): static
    {
        if (is_null($populateWorksPlaceName)) {
            throw new InvalidArgumentException('non-nullable populateWorksPlaceName cannot be null');
        }
        $this->container['populateWorksPlaceName'] = $populateWorksPlaceName;

        return $this;
    }

    /**
     * Gets populateWorksAddress
     *
     * @return bool|null
     */
    public function getPopulateWorksAddress(): ?bool
    {
        return $this->container['populateWorksAddress'];
    }

    /**
     * Sets populateWorksAddress
     *
     * @param bool|null $populateWorksAddress populateWorksAddress
     *
     * @return $this
     */
    public function setPopulateWorksAddress(?bool $populateWorksAddress): static
    {
        if (is_null($populateWorksAddress)) {
            throw new InvalidArgumentException('non-nullable populateWorksAddress cannot be null');
        }
        $this->container['populateWorksAddress'] = $populateWorksAddress;

        return $this;
    }

    /**
     * Gets populateWorksEmailAddress
     *
     * @return bool|null
     */
    public function getPopulateWorksEmailAddress(): ?bool
    {
        return $this->container['populateWorksEmailAddress'];
    }

    /**
     * Sets populateWorksEmailAddress
     *
     * @param bool|null $populateWorksEmailAddress populateWorksEmailAddress
     *
     * @return $this
     */
    public function setPopulateWorksEmailAddress(?bool $populateWorksEmailAddress): static
    {
        if (is_null($populateWorksEmailAddress)) {
            throw new InvalidArgumentException('non-nullable populateWorksEmailAddress cannot be null');
        }
        $this->container['populateWorksEmailAddress'] = $populateWorksEmailAddress;

        return $this;
    }

    /**
     * Gets includeEmploymentBreaks
     *
     * @return bool|null
     */
    public function getIncludeEmploymentBreaks(): ?bool
    {
        return $this->container['includeEmploymentBreaks'];
    }

    /**
     * Sets includeEmploymentBreaks
     *
     * @param bool|null $includeEmploymentBreaks includeEmploymentBreaks
     *
     * @return $this
     */
    public function setIncludeEmploymentBreaks(?bool $includeEmploymentBreaks): static
    {
        if (is_null($includeEmploymentBreaks)) {
            throw new InvalidArgumentException('non-nullable includeEmploymentBreaks cannot be null');
        }
        $this->container['includeEmploymentBreaks'] = $includeEmploymentBreaks;

        return $this;
    }

    /**
     * Gets breakReasonSmpIndicatorOnly
     *
     * @return bool|null
     */
    public function getBreakReasonSmpIndicatorOnly(): ?bool
    {
        return $this->container['breakReasonSmpIndicatorOnly'];
    }

    /**
     * Sets breakReasonSmpIndicatorOnly
     *
     * @param bool|null $breakReasonSmpIndicatorOnly breakReasonSmpIndicatorOnly
     *
     * @return $this
     */
    public function setBreakReasonSmpIndicatorOnly(?bool $breakReasonSmpIndicatorOnly): static
    {
        if (is_null($breakReasonSmpIndicatorOnly)) {
            throw new InvalidArgumentException('non-nullable breakReasonSmpIndicatorOnly cannot be null');
        }
        $this->container['breakReasonSmpIndicatorOnly'] = $breakReasonSmpIndicatorOnly;

        return $this;
    }

    /**
     * Gets populateMaritalStatus
     *
     * @return bool|null
     */
    public function getPopulateMaritalStatus(): ?bool
    {
        return $this->container['populateMaritalStatus'];
    }

    /**
     * Sets populateMaritalStatus
     *
     * @param bool|null $populateMaritalStatus populateMaritalStatus
     *
     * @return $this
     */
    public function setPopulateMaritalStatus(?bool $populateMaritalStatus): static
    {
        if (is_null($populateMaritalStatus)) {
            throw new InvalidArgumentException('non-nullable populateMaritalStatus cannot be null');
        }
        $this->container['populateMaritalStatus'] = $populateMaritalStatus;

        return $this;
    }

    /**
     * Gets includeAeQualifyingEarnings
     *
     * @return bool|null
     */
    public function getIncludeAeQualifyingEarnings(): ?bool
    {
        return $this->container['includeAeQualifyingEarnings'];
    }

    /**
     * Sets includeAeQualifyingEarnings
     *
     * @param bool|null $includeAeQualifyingEarnings includeAeQualifyingEarnings
     *
     * @return $this
     */
    public function setIncludeAeQualifyingEarnings(?bool $includeAeQualifyingEarnings): static
    {
        if (is_null($includeAeQualifyingEarnings)) {
            throw new InvalidArgumentException('non-nullable includeAeQualifyingEarnings cannot be null');
        }
        $this->container['includeAeQualifyingEarnings'] = $includeAeQualifyingEarnings;

        return $this;
    }

    /**
     * Gets proRatePtHoursByTermTimeWeeks
     *
     * @return bool|null
     */
    public function getProRatePtHoursByTermTimeWeeks(): ?bool
    {
        return $this->container['proRatePtHoursByTermTimeWeeks'];
    }

    /**
     * Sets proRatePtHoursByTermTimeWeeks
     *
     * @param bool|null $proRatePtHoursByTermTimeWeeks proRatePtHoursByTermTimeWeeks
     *
     * @return $this
     */
    public function setProRatePtHoursByTermTimeWeeks(?bool $proRatePtHoursByTermTimeWeeks): static
    {
        if (is_null($proRatePtHoursByTermTimeWeeks)) {
            throw new InvalidArgumentException('non-nullable proRatePtHoursByTermTimeWeeks cannot be null');
        }
        $this->container['proRatePtHoursByTermTimeWeeks'] = $proRatePtHoursByTermTimeWeeks;

        return $this;
    }

    /**
     * Gets ignoreTermTimeWeeksForFteFinalPay
     *
     * @return bool|null
     */
    public function getIgnoreTermTimeWeeksForFteFinalPay(): ?bool
    {
        return $this->container['ignoreTermTimeWeeksForFteFinalPay'];
    }

    /**
     * Sets ignoreTermTimeWeeksForFteFinalPay
     *
     * @param bool|null $ignoreTermTimeWeeksForFteFinalPay ignoreTermTimeWeeksForFteFinalPay
     *
     * @return $this
     */
    public function setIgnoreTermTimeWeeksForFteFinalPay(?bool $ignoreTermTimeWeeksForFteFinalPay): static
    {
        if (is_null($ignoreTermTimeWeeksForFteFinalPay)) {
            throw new InvalidArgumentException('non-nullable ignoreTermTimeWeeksForFteFinalPay cannot be null');
        }
        $this->container['ignoreTermTimeWeeksForFteFinalPay'] = $ignoreTermTimeWeeksForFteFinalPay;

        return $this;
    }

    /**
     * Gets showFteAnnualSalaryForFteFinalPay
     *
     * @return bool|null
     */
    public function getShowFteAnnualSalaryForFteFinalPay(): ?bool
    {
        return $this->container['showFteAnnualSalaryForFteFinalPay'];
    }

    /**
     * Sets showFteAnnualSalaryForFteFinalPay
     *
     * @param bool|null $showFteAnnualSalaryForFteFinalPay showFteAnnualSalaryForFteFinalPay
     *
     * @return $this
     */
    public function setShowFteAnnualSalaryForFteFinalPay(?bool $showFteAnnualSalaryForFteFinalPay): static
    {
        if (is_null($showFteAnnualSalaryForFteFinalPay)) {
            throw new InvalidArgumentException('non-nullable showFteAnnualSalaryForFteFinalPay cannot be null');
        }
        $this->container['showFteAnnualSalaryForFteFinalPay'] = $showFteAnnualSalaryForFteFinalPay;

        return $this;
    }

    /**
     * Gets casualStaffHoursAsOne
     *
     * @return bool|null
     */
    public function getCasualStaffHoursAsOne(): ?bool
    {
        return $this->container['casualStaffHoursAsOne'];
    }

    /**
     * Sets casualStaffHoursAsOne
     *
     * @param bool|null $casualStaffHoursAsOne casualStaffHoursAsOne
     *
     * @return $this
     */
    public function setCasualStaffHoursAsOne(?bool $casualStaffHoursAsOne): static
    {
        if (is_null($casualStaffHoursAsOne)) {
            throw new InvalidArgumentException('non-nullable casualStaffHoursAsOne cannot be null');
        }
        $this->container['casualStaffHoursAsOne'] = $casualStaffHoursAsOne;

        return $this;
    }

    /**
     * Gets casualStaffIndicatorAsY
     *
     * @return bool|null
     */
    public function getCasualStaffIndicatorAsY(): ?bool
    {
        return $this->container['casualStaffIndicatorAsY'];
    }

    /**
     * Sets casualStaffIndicatorAsY
     *
     * @param bool|null $casualStaffIndicatorAsY casualStaffIndicatorAsY
     *
     * @return $this
     */
    public function setCasualStaffIndicatorAsY(?bool $casualStaffIndicatorAsY): static
    {
        if (is_null($casualStaffIndicatorAsY)) {
            throw new InvalidArgumentException('non-nullable casualStaffIndicatorAsY cannot be null');
        }
        $this->container['casualStaffIndicatorAsY'] = $casualStaffIndicatorAsY;

        return $this;
    }

    /**
     * Gets ignoreHours
     *
     * @return bool|null
     */
    public function getIgnoreHours(): ?bool
    {
        return $this->container['ignoreHours'];
    }

    /**
     * Sets ignoreHours
     *
     * @param bool|null $ignoreHours ignoreHours
     *
     * @return $this
     */
    public function setIgnoreHours(?bool $ignoreHours): static
    {
        if (is_null($ignoreHours)) {
            throw new InvalidArgumentException('non-nullable ignoreHours cannot be null');
        }
        $this->container['ignoreHours'] = $ignoreHours;

        return $this;
    }

    /**
     * Gets forceUpperCase
     *
     * @return bool|null
     */
    public function getForceUpperCase(): ?bool
    {
        return $this->container['forceUpperCase'];
    }

    /**
     * Sets forceUpperCase
     *
     * @param bool|null $forceUpperCase forceUpperCase
     *
     * @return $this
     */
    public function setForceUpperCase(?bool $forceUpperCase): static
    {
        if (is_null($forceUpperCase)) {
            throw new InvalidArgumentException('non-nullable forceUpperCase cannot be null');
        }
        $this->container['forceUpperCase'] = $forceUpperCase;

        return $this;
    }

    /**
     * Gets salaryType
     *
     * @return \SynergiTech\Staffology\Model\LgpsIConnectSalaryType|null
     */
    public function getSalaryType(): ?\SynergiTech\Staffology\Model\LgpsIConnectSalaryType
    {
        return $this->container['salaryType'];
    }

    /**
     * Sets salaryType
     *
     * @param \SynergiTech\Staffology\Model\LgpsIConnectSalaryType|null $salaryType salaryType
     *
     * @return $this
     */
    public function setSalaryType(?\SynergiTech\Staffology\Model\LgpsIConnectSalaryType $salaryType): static
    {
        if (is_null($salaryType)) {
            throw new InvalidArgumentException('non-nullable salaryType cannot be null');
        }
        $this->container['salaryType'] = $salaryType;

        return $this;
    }

    /**
     * Gets customText
     *
     * @return string|null
     */
    public function getCustomText(): ?string
    {
        return $this->container['customText'];
    }

    /**
     * Sets customText
     *
     * @param string|null $customText customText
     *
     * @return $this
     */
    public function setCustomText(?string $customText): static
    {
        if (is_null($customText)) {
            array_push($this->openAPINullablesSetToNull, 'customText');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customText', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customText'] = $customText;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


