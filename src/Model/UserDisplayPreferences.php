<?php
/**
 * UserDisplayPreferences
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * UserDisplayPreferences Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UserDisplayPreferences implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'UserDisplayPreferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'startPage' => '\SynergiTech\Staffology\Model\UserstartPage',
        'showZeroes' => 'bool',
        'showTaxCodeWhenViewingPayrunEntry' => 'bool',
        'allowJournalResubmit' => 'bool',
        'hideSalaryOnEmployeeIndexPage' => 'bool',
        'enableMultiEmployerImport' => 'bool',
        'enableCovid19Features' => 'bool',
        'hidePayslipCheckboxes' => 'bool',
        'hidePayslipSearchAndSort' => 'bool',
        'showYtdInPayslipView' => 'bool',
        'enableDpsXmlUpload' => 'bool',
        'enableRtiTimestampOverride' => 'bool',
        'enablePayrunWarnings' => 'bool',
        'enableWorkingDaysOverrides' => 'bool',
        'enablePayrunPagination' => 'bool',
        'dontHideFpsEmployeeList' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'startPage' => null,
        'showZeroes' => null,
        'showTaxCodeWhenViewingPayrunEntry' => null,
        'allowJournalResubmit' => null,
        'hideSalaryOnEmployeeIndexPage' => null,
        'enableMultiEmployerImport' => null,
        'enableCovid19Features' => null,
        'hidePayslipCheckboxes' => null,
        'hidePayslipSearchAndSort' => null,
        'showYtdInPayslipView' => null,
        'enableDpsXmlUpload' => null,
        'enableRtiTimestampOverride' => null,
        'enablePayrunWarnings' => null,
        'enableWorkingDaysOverrides' => null,
        'enablePayrunPagination' => null,
        'dontHideFpsEmployeeList' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'startPage' => false,
        'showZeroes' => false,
        'showTaxCodeWhenViewingPayrunEntry' => false,
        'allowJournalResubmit' => false,
        'hideSalaryOnEmployeeIndexPage' => false,
        'enableMultiEmployerImport' => false,
        'enableCovid19Features' => false,
        'hidePayslipCheckboxes' => false,
        'hidePayslipSearchAndSort' => false,
        'showYtdInPayslipView' => false,
        'enableDpsXmlUpload' => false,
        'enableRtiTimestampOverride' => false,
        'enablePayrunWarnings' => false,
        'enableWorkingDaysOverrides' => false,
        'enablePayrunPagination' => false,
        'dontHideFpsEmployeeList' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'startPage' => 'startPage',
        'showZeroes' => 'showZeroes',
        'showTaxCodeWhenViewingPayrunEntry' => 'showTaxCodeWhenViewingPayrunEntry',
        'allowJournalResubmit' => 'allowJournalResubmit',
        'hideSalaryOnEmployeeIndexPage' => 'hideSalaryOnEmployeeIndexPage',
        'enableMultiEmployerImport' => 'enableMultiEmployerImport',
        'enableCovid19Features' => 'enableCovid19Features',
        'hidePayslipCheckboxes' => 'hidePayslipCheckboxes',
        'hidePayslipSearchAndSort' => 'hidePayslipSearchAndSort',
        'showYtdInPayslipView' => 'showYtdInPayslipView',
        'enableDpsXmlUpload' => 'enableDpsXmlUpload',
        'enableRtiTimestampOverride' => 'enableRtiTimestampOverride',
        'enablePayrunWarnings' => 'enablePayrunWarnings',
        'enableWorkingDaysOverrides' => 'enableWorkingDaysOverrides',
        'enablePayrunPagination' => 'enablePayrunPagination',
        'dontHideFpsEmployeeList' => 'dontHideFpsEmployeeList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'startPage' => 'setStartPage',
        'showZeroes' => 'setShowZeroes',
        'showTaxCodeWhenViewingPayrunEntry' => 'setShowTaxCodeWhenViewingPayrunEntry',
        'allowJournalResubmit' => 'setAllowJournalResubmit',
        'hideSalaryOnEmployeeIndexPage' => 'setHideSalaryOnEmployeeIndexPage',
        'enableMultiEmployerImport' => 'setEnableMultiEmployerImport',
        'enableCovid19Features' => 'setEnableCovid19Features',
        'hidePayslipCheckboxes' => 'setHidePayslipCheckboxes',
        'hidePayslipSearchAndSort' => 'setHidePayslipSearchAndSort',
        'showYtdInPayslipView' => 'setShowYtdInPayslipView',
        'enableDpsXmlUpload' => 'setEnableDpsXmlUpload',
        'enableRtiTimestampOverride' => 'setEnableRtiTimestampOverride',
        'enablePayrunWarnings' => 'setEnablePayrunWarnings',
        'enableWorkingDaysOverrides' => 'setEnableWorkingDaysOverrides',
        'enablePayrunPagination' => 'setEnablePayrunPagination',
        'dontHideFpsEmployeeList' => 'setDontHideFpsEmployeeList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'startPage' => 'getStartPage',
        'showZeroes' => 'getShowZeroes',
        'showTaxCodeWhenViewingPayrunEntry' => 'getShowTaxCodeWhenViewingPayrunEntry',
        'allowJournalResubmit' => 'getAllowJournalResubmit',
        'hideSalaryOnEmployeeIndexPage' => 'getHideSalaryOnEmployeeIndexPage',
        'enableMultiEmployerImport' => 'getEnableMultiEmployerImport',
        'enableCovid19Features' => 'getEnableCovid19Features',
        'hidePayslipCheckboxes' => 'getHidePayslipCheckboxes',
        'hidePayslipSearchAndSort' => 'getHidePayslipSearchAndSort',
        'showYtdInPayslipView' => 'getShowYtdInPayslipView',
        'enableDpsXmlUpload' => 'getEnableDpsXmlUpload',
        'enableRtiTimestampOverride' => 'getEnableRtiTimestampOverride',
        'enablePayrunWarnings' => 'getEnablePayrunWarnings',
        'enableWorkingDaysOverrides' => 'getEnableWorkingDaysOverrides',
        'enablePayrunPagination' => 'getEnablePayrunPagination',
        'dontHideFpsEmployeeList' => 'getDontHideFpsEmployeeList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('startPage', $data ?? [], null);
        $this->setIfExists('showZeroes', $data ?? [], null);
        $this->setIfExists('showTaxCodeWhenViewingPayrunEntry', $data ?? [], null);
        $this->setIfExists('allowJournalResubmit', $data ?? [], null);
        $this->setIfExists('hideSalaryOnEmployeeIndexPage', $data ?? [], null);
        $this->setIfExists('enableMultiEmployerImport', $data ?? [], null);
        $this->setIfExists('enableCovid19Features', $data ?? [], null);
        $this->setIfExists('hidePayslipCheckboxes', $data ?? [], null);
        $this->setIfExists('hidePayslipSearchAndSort', $data ?? [], null);
        $this->setIfExists('showYtdInPayslipView', $data ?? [], null);
        $this->setIfExists('enableDpsXmlUpload', $data ?? [], null);
        $this->setIfExists('enableRtiTimestampOverride', $data ?? [], null);
        $this->setIfExists('enablePayrunWarnings', $data ?? [], null);
        $this->setIfExists('enableWorkingDaysOverrides', $data ?? [], null);
        $this->setIfExists('enablePayrunPagination', $data ?? [], null);
        $this->setIfExists('dontHideFpsEmployeeList', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets startPage
     *
     * @return \SynergiTech\Staffology\Model\UserstartPage|null
     */
    public function getStartPage(): ?\SynergiTech\Staffology\Model\UserstartPage
    {
        return $this->container['startPage'];
    }

    /**
     * Sets startPage
     *
     * @param \SynergiTech\Staffology\Model\UserstartPage|null $startPage startPage
     *
     * @return $this
     */
    public function setStartPage(?\SynergiTech\Staffology\Model\UserstartPage $startPage): static
    {
        if (is_null($startPage)) {
            throw new InvalidArgumentException('non-nullable startPage cannot be null');
        }
        $this->container['startPage'] = $startPage;

        return $this;
    }

    /**
     * Gets showZeroes
     *
     * @return bool|null
     */
    public function getShowZeroes(): ?bool
    {
        return $this->container['showZeroes'];
    }

    /**
     * Sets showZeroes
     *
     * @param bool|null $showZeroes showZeroes
     *
     * @return $this
     */
    public function setShowZeroes(?bool $showZeroes): static
    {
        if (is_null($showZeroes)) {
            throw new InvalidArgumentException('non-nullable showZeroes cannot be null');
        }
        $this->container['showZeroes'] = $showZeroes;

        return $this;
    }

    /**
     * Gets showTaxCodeWhenViewingPayrunEntry
     *
     * @return bool|null
     */
    public function getShowTaxCodeWhenViewingPayrunEntry(): ?bool
    {
        return $this->container['showTaxCodeWhenViewingPayrunEntry'];
    }

    /**
     * Sets showTaxCodeWhenViewingPayrunEntry
     *
     * @param bool|null $showTaxCodeWhenViewingPayrunEntry showTaxCodeWhenViewingPayrunEntry
     *
     * @return $this
     */
    public function setShowTaxCodeWhenViewingPayrunEntry(?bool $showTaxCodeWhenViewingPayrunEntry): static
    {
        if (is_null($showTaxCodeWhenViewingPayrunEntry)) {
            throw new InvalidArgumentException('non-nullable showTaxCodeWhenViewingPayrunEntry cannot be null');
        }
        $this->container['showTaxCodeWhenViewingPayrunEntry'] = $showTaxCodeWhenViewingPayrunEntry;

        return $this;
    }

    /**
     * Gets allowJournalResubmit
     *
     * @return bool|null
     */
    public function getAllowJournalResubmit(): ?bool
    {
        return $this->container['allowJournalResubmit'];
    }

    /**
     * Sets allowJournalResubmit
     *
     * @param bool|null $allowJournalResubmit allowJournalResubmit
     *
     * @return $this
     */
    public function setAllowJournalResubmit(?bool $allowJournalResubmit): static
    {
        if (is_null($allowJournalResubmit)) {
            throw new InvalidArgumentException('non-nullable allowJournalResubmit cannot be null');
        }
        $this->container['allowJournalResubmit'] = $allowJournalResubmit;

        return $this;
    }

    /**
     * Gets hideSalaryOnEmployeeIndexPage
     *
     * @return bool|null
     */
    public function getHideSalaryOnEmployeeIndexPage(): ?bool
    {
        return $this->container['hideSalaryOnEmployeeIndexPage'];
    }

    /**
     * Sets hideSalaryOnEmployeeIndexPage
     *
     * @param bool|null $hideSalaryOnEmployeeIndexPage hideSalaryOnEmployeeIndexPage
     *
     * @return $this
     */
    public function setHideSalaryOnEmployeeIndexPage(?bool $hideSalaryOnEmployeeIndexPage): static
    {
        if (is_null($hideSalaryOnEmployeeIndexPage)) {
            throw new InvalidArgumentException('non-nullable hideSalaryOnEmployeeIndexPage cannot be null');
        }
        $this->container['hideSalaryOnEmployeeIndexPage'] = $hideSalaryOnEmployeeIndexPage;

        return $this;
    }

    /**
     * Gets enableMultiEmployerImport
     *
     * @return bool|null
     */
    public function getEnableMultiEmployerImport(): ?bool
    {
        return $this->container['enableMultiEmployerImport'];
    }

    /**
     * Sets enableMultiEmployerImport
     *
     * @param bool|null $enableMultiEmployerImport enableMultiEmployerImport
     *
     * @return $this
     */
    public function setEnableMultiEmployerImport(?bool $enableMultiEmployerImport): static
    {
        if (is_null($enableMultiEmployerImport)) {
            throw new InvalidArgumentException('non-nullable enableMultiEmployerImport cannot be null');
        }
        $this->container['enableMultiEmployerImport'] = $enableMultiEmployerImport;

        return $this;
    }

    /**
     * Gets enableCovid19Features
     *
     * @return bool|null
     */
    public function getEnableCovid19Features(): ?bool
    {
        return $this->container['enableCovid19Features'];
    }

    /**
     * Sets enableCovid19Features
     *
     * @param bool|null $enableCovid19Features enableCovid19Features
     *
     * @return $this
     */
    public function setEnableCovid19Features(?bool $enableCovid19Features): static
    {
        if (is_null($enableCovid19Features)) {
            throw new InvalidArgumentException('non-nullable enableCovid19Features cannot be null');
        }
        $this->container['enableCovid19Features'] = $enableCovid19Features;

        return $this;
    }

    /**
     * Gets hidePayslipCheckboxes
     *
     * @return bool|null
     */
    public function getHidePayslipCheckboxes(): ?bool
    {
        return $this->container['hidePayslipCheckboxes'];
    }

    /**
     * Sets hidePayslipCheckboxes
     *
     * @param bool|null $hidePayslipCheckboxes hidePayslipCheckboxes
     *
     * @return $this
     */
    public function setHidePayslipCheckboxes(?bool $hidePayslipCheckboxes): static
    {
        if (is_null($hidePayslipCheckboxes)) {
            throw new InvalidArgumentException('non-nullable hidePayslipCheckboxes cannot be null');
        }
        $this->container['hidePayslipCheckboxes'] = $hidePayslipCheckboxes;

        return $this;
    }

    /**
     * Gets hidePayslipSearchAndSort
     *
     * @return bool|null
     */
    public function getHidePayslipSearchAndSort(): ?bool
    {
        return $this->container['hidePayslipSearchAndSort'];
    }

    /**
     * Sets hidePayslipSearchAndSort
     *
     * @param bool|null $hidePayslipSearchAndSort hidePayslipSearchAndSort
     *
     * @return $this
     */
    public function setHidePayslipSearchAndSort(?bool $hidePayslipSearchAndSort): static
    {
        if (is_null($hidePayslipSearchAndSort)) {
            throw new InvalidArgumentException('non-nullable hidePayslipSearchAndSort cannot be null');
        }
        $this->container['hidePayslipSearchAndSort'] = $hidePayslipSearchAndSort;

        return $this;
    }

    /**
     * Gets showYtdInPayslipView
     *
     * @return bool|null
     */
    public function getShowYtdInPayslipView(): ?bool
    {
        return $this->container['showYtdInPayslipView'];
    }

    /**
     * Sets showYtdInPayslipView
     *
     * @param bool|null $showYtdInPayslipView showYtdInPayslipView
     *
     * @return $this
     */
    public function setShowYtdInPayslipView(?bool $showYtdInPayslipView): static
    {
        if (is_null($showYtdInPayslipView)) {
            throw new InvalidArgumentException('non-nullable showYtdInPayslipView cannot be null');
        }
        $this->container['showYtdInPayslipView'] = $showYtdInPayslipView;

        return $this;
    }

    /**
     * Gets enableDpsXmlUpload
     *
     * @return bool|null
     */
    public function getEnableDpsXmlUpload(): ?bool
    {
        return $this->container['enableDpsXmlUpload'];
    }

    /**
     * Sets enableDpsXmlUpload
     *
     * @param bool|null $enableDpsXmlUpload enableDpsXmlUpload
     *
     * @return $this
     */
    public function setEnableDpsXmlUpload(?bool $enableDpsXmlUpload): static
    {
        if (is_null($enableDpsXmlUpload)) {
            throw new InvalidArgumentException('non-nullable enableDpsXmlUpload cannot be null');
        }
        $this->container['enableDpsXmlUpload'] = $enableDpsXmlUpload;

        return $this;
    }

    /**
     * Gets enableRtiTimestampOverride
     *
     * @return bool|null
     */
    public function getEnableRtiTimestampOverride(): ?bool
    {
        return $this->container['enableRtiTimestampOverride'];
    }

    /**
     * Sets enableRtiTimestampOverride
     *
     * @param bool|null $enableRtiTimestampOverride enableRtiTimestampOverride
     *
     * @return $this
     */
    public function setEnableRtiTimestampOverride(?bool $enableRtiTimestampOverride): static
    {
        if (is_null($enableRtiTimestampOverride)) {
            throw new InvalidArgumentException('non-nullable enableRtiTimestampOverride cannot be null');
        }
        $this->container['enableRtiTimestampOverride'] = $enableRtiTimestampOverride;

        return $this;
    }

    /**
     * Gets enablePayrunWarnings
     *
     * @return bool|null
     */
    public function getEnablePayrunWarnings(): ?bool
    {
        return $this->container['enablePayrunWarnings'];
    }

    /**
     * Sets enablePayrunWarnings
     *
     * @param bool|null $enablePayrunWarnings enablePayrunWarnings
     *
     * @return $this
     */
    public function setEnablePayrunWarnings(?bool $enablePayrunWarnings): static
    {
        if (is_null($enablePayrunWarnings)) {
            throw new InvalidArgumentException('non-nullable enablePayrunWarnings cannot be null');
        }
        $this->container['enablePayrunWarnings'] = $enablePayrunWarnings;

        return $this;
    }

    /**
     * Gets enableWorkingDaysOverrides
     *
     * @return bool|null
     */
    public function getEnableWorkingDaysOverrides(): ?bool
    {
        return $this->container['enableWorkingDaysOverrides'];
    }

    /**
     * Sets enableWorkingDaysOverrides
     *
     * @param bool|null $enableWorkingDaysOverrides enableWorkingDaysOverrides
     *
     * @return $this
     */
    public function setEnableWorkingDaysOverrides(?bool $enableWorkingDaysOverrides): static
    {
        if (is_null($enableWorkingDaysOverrides)) {
            throw new InvalidArgumentException('non-nullable enableWorkingDaysOverrides cannot be null');
        }
        $this->container['enableWorkingDaysOverrides'] = $enableWorkingDaysOverrides;

        return $this;
    }

    /**
     * Gets enablePayrunPagination
     *
     * @return bool|null
     */
    public function getEnablePayrunPagination(): ?bool
    {
        return $this->container['enablePayrunPagination'];
    }

    /**
     * Sets enablePayrunPagination
     *
     * @param bool|null $enablePayrunPagination enablePayrunPagination
     *
     * @return $this
     */
    public function setEnablePayrunPagination(?bool $enablePayrunPagination): static
    {
        if (is_null($enablePayrunPagination)) {
            throw new InvalidArgumentException('non-nullable enablePayrunPagination cannot be null');
        }
        $this->container['enablePayrunPagination'] = $enablePayrunPagination;

        return $this;
    }

    /**
     * Gets dontHideFpsEmployeeList
     *
     * @return bool|null
     */
    public function getDontHideFpsEmployeeList(): ?bool
    {
        return $this->container['dontHideFpsEmployeeList'];
    }

    /**
     * Sets dontHideFpsEmployeeList
     *
     * @param bool|null $dontHideFpsEmployeeList dontHideFpsEmployeeList
     *
     * @return $this
     */
    public function setDontHideFpsEmployeeList(?bool $dontHideFpsEmployeeList): static
    {
        if (is_null($dontHideFpsEmployeeList)) {
            throw new InvalidArgumentException('non-nullable dontHideFpsEmployeeList cannot be null');
        }
        $this->container['dontHideFpsEmployeeList'] = $dontHideFpsEmployeeList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


