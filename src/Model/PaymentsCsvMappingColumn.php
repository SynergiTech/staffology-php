<?php
/**
 * PaymentsCsvMappingColumn
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PaymentsCsvMappingColumn Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PaymentsCsvMappingColumn implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PaymentsCsvMappingColumn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'code' => 'string',
        'isReferenceOnly' => 'bool',
        'colIndex' => 'int',
        'isMultiplier' => 'bool',
        'isNetToGross' => 'bool',
        'rateColIndex' => 'int',
        'shouldSerializeRateColIndex' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'code' => null,
        'isReferenceOnly' => null,
        'colIndex' => 'int32',
        'isMultiplier' => null,
        'isNetToGross' => null,
        'rateColIndex' => 'int32',
        'shouldSerializeRateColIndex' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => false,
        'code' => true,
        'isReferenceOnly' => false,
        'colIndex' => false,
        'isMultiplier' => false,
        'isNetToGross' => false,
        'rateColIndex' => true,
        'shouldSerializeRateColIndex' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'code' => 'code',
        'isReferenceOnly' => 'isReferenceOnly',
        'colIndex' => 'colIndex',
        'isMultiplier' => 'isMultiplier',
        'isNetToGross' => 'isNetToGross',
        'rateColIndex' => 'rateColIndex',
        'shouldSerializeRateColIndex' => 'shouldSerializeRateColIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'code' => 'setCode',
        'isReferenceOnly' => 'setIsReferenceOnly',
        'colIndex' => 'setColIndex',
        'isMultiplier' => 'setIsMultiplier',
        'isNetToGross' => 'setIsNetToGross',
        'rateColIndex' => 'setRateColIndex',
        'shouldSerializeRateColIndex' => 'setShouldSerializeRateColIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'code' => 'getCode',
        'isReferenceOnly' => 'getIsReferenceOnly',
        'colIndex' => 'getColIndex',
        'isMultiplier' => 'getIsMultiplier',
        'isNetToGross' => 'getIsNetToGross',
        'rateColIndex' => 'getRateColIndex',
        'shouldSerializeRateColIndex' => 'getShouldSerializeRateColIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('isReferenceOnly', $data ?? [], null);
        $this->setIfExists('colIndex', $data ?? [], null);
        $this->setIfExists('isMultiplier', $data ?? [], null);
        $this->setIfExists('isNetToGross', $data ?? [], null);
        $this->setIfExists('rateColIndex', $data ?? [], null);
        $this->setIfExists('shouldSerializeRateColIndex', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 25)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 25.";
        }

        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle(): string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle(string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 25)) {
            throw new InvalidArgumentException('invalid length for $title when calling PaymentsCsvMappingColumn., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($title) < 1)) {
            throw new InvalidArgumentException('invalid length for $title when calling PaymentsCsvMappingColumn., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode(): ?string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return $this
     */
    public function setCode(?string $code): static
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets isReferenceOnly
     *
     * @return bool|null
     */
    public function getIsReferenceOnly(): ?bool
    {
        return $this->container['isReferenceOnly'];
    }

    /**
     * Sets isReferenceOnly
     *
     * @param bool|null $isReferenceOnly If set to true then no PayCode is mapped and this column is just for on-screen refernece only
     *
     * @return $this
     */
    public function setIsReferenceOnly(?bool $isReferenceOnly): static
    {
        if (is_null($isReferenceOnly)) {
            throw new InvalidArgumentException('non-nullable isReferenceOnly cannot be null');
        }
        $this->container['isReferenceOnly'] = $isReferenceOnly;

        return $this;
    }

    /**
     * Gets colIndex
     *
     * @return int|null
     */
    public function getColIndex(): ?int
    {
        return $this->container['colIndex'];
    }

    /**
     * Sets colIndex
     *
     * @param int|null $colIndex colIndex
     *
     * @return $this
     */
    public function setColIndex(?int $colIndex): static
    {
        if (is_null($colIndex)) {
            throw new InvalidArgumentException('non-nullable colIndex cannot be null');
        }
        $this->container['colIndex'] = $colIndex;

        return $this;
    }

    /**
     * Gets isMultiplier
     *
     * @return bool|null
     */
    public function getIsMultiplier(): ?bool
    {
        return $this->container['isMultiplier'];
    }

    /**
     * Sets isMultiplier
     *
     * @param bool|null $isMultiplier isMultiplier
     *
     * @return $this
     */
    public function setIsMultiplier(?bool $isMultiplier): static
    {
        if (is_null($isMultiplier)) {
            throw new InvalidArgumentException('non-nullable isMultiplier cannot be null');
        }
        $this->container['isMultiplier'] = $isMultiplier;

        return $this;
    }

    /**
     * Gets isNetToGross
     *
     * @return bool|null
     */
    public function getIsNetToGross(): ?bool
    {
        return $this->container['isNetToGross'];
    }

    /**
     * Sets isNetToGross
     *
     * @param bool|null $isNetToGross isNetToGross
     *
     * @return $this
     */
    public function setIsNetToGross(?bool $isNetToGross): static
    {
        if (is_null($isNetToGross)) {
            throw new InvalidArgumentException('non-nullable isNetToGross cannot be null');
        }
        $this->container['isNetToGross'] = $isNetToGross;

        return $this;
    }

    /**
     * Gets rateColIndex
     *
     * @return int|null
     */
    public function getRateColIndex(): ?int
    {
        return $this->container['rateColIndex'];
    }

    /**
     * Sets rateColIndex
     *
     * @param int|null $rateColIndex If the mapping IsMultiplier, then this optionally specifies another column from which to get the value
     *
     * @return $this
     */
    public function setRateColIndex(?int $rateColIndex): static
    {
        if (is_null($rateColIndex)) {
            array_push($this->openAPINullablesSetToNull, 'rateColIndex');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rateColIndex', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rateColIndex'] = $rateColIndex;

        return $this;
    }

    /**
     * Gets shouldSerializeRateColIndex
     *
     * @return bool|null
     */
    public function getShouldSerializeRateColIndex(): ?bool
    {
        return $this->container['shouldSerializeRateColIndex'];
    }

    /**
     * Sets shouldSerializeRateColIndex
     *
     * @param bool|null $shouldSerializeRateColIndex shouldSerializeRateColIndex
     *
     * @return $this
     */
    public function setShouldSerializeRateColIndex(?bool $shouldSerializeRateColIndex): static
    {
        if (is_null($shouldSerializeRateColIndex)) {
            throw new InvalidArgumentException('non-nullable shouldSerializeRateColIndex cannot be null');
        }
        $this->container['shouldSerializeRateColIndex'] = $shouldSerializeRateColIndex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


