<?php
/**
 * LeaveApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * LeaveApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LeaveApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addDocumentLeave' => [
            'multipart/form-data',
        ],
        'createLeave' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteDocumentLeave' => [
            'application/json',
        ],
        'deleteLeave' => [
            'application/json',
        ],
        'findLinkedPiwLeave' => [
            'application/json',
        ],
        'getDocumentLeave' => [
            'application/json',
        ],
        'getLeave' => [
            'application/json',
        ],
        'getMaternityLeaveScheduleLeave' => [
            'application/json',
        ],
        'getOccupationalMaternityScheduleLeave' => [
            'application/json',
        ],
        'indexLeave' => [
            'application/json',
        ],
        'updateLeave' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addDocumentLeave
     *
     * Add Document
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id The Id of the leave you want to attach documents to (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function addDocumentLeave(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['addDocumentLeave'][0]
    ): void
    {
        $this->addDocumentLeaveWithHttpInfo($employerId, $employeeId, $id, $file, $contentType);
    }

    /**
     * Operation addDocumentLeaveWithHttpInfo
     *
     * Add Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the leave you want to attach documents to (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['addDocumentLeave'][0]
    ): array
    {
        $request = $this->addDocumentLeaveRequest($employerId, $employeeId, $id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addDocumentLeaveAsync
     *
     * Add Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the leave you want to attach documents to (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addDocumentLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['addDocumentLeave'][0]
    ): PromiseInterface
    {
        return $this->addDocumentLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDocumentLeaveAsyncWithHttpInfo
     *
     * Add Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the leave you want to attach documents to (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addDocumentLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $file = null,
        string $contentType = self::contentTypes['addDocumentLeave'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->addDocumentLeaveRequest($employerId, $employeeId, $id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDocumentLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the leave you want to attach documents to (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDocumentLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        $file = null,
        string $contentType = self::contentTypes['addDocumentLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling addDocumentLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling addDocumentLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling addDocumentLeave'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/{id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLeave
     *
     * Create Leave
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function createLeave(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['createLeave'][0]
    ): void
    {
        $this->createLeaveWithHttpInfo($employerId, $employeeId, $leave, $contentType);
    }

    /**
     * Operation createLeaveWithHttpInfo
     *
     * Create Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['createLeave'][0]
    ): array
    {
        $request = $this->createLeaveRequest($employerId, $employeeId, $leave, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createLeaveAsync
     *
     * Create Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLeaveAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['createLeave'][0]
    ): PromiseInterface
    {
        return $this->createLeaveAsyncWithHttpInfo($employerId, $employeeId, $leave, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLeaveAsyncWithHttpInfo
     *
     * Create Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $leave = null,
        string $contentType = self::contentTypes['createLeave'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->createLeaveRequest($employerId, $employeeId, $leave, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLeaveRequest(
        $employerId,
        $employeeId,
        $leave = null,
        string $contentType = self::contentTypes['createLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling createLeave'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave));
            } else {
                $httpBody = $leave;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocumentLeave
     *
     * Delete Leave Document
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id id (required)
     * @param  string $documentId The Id of the Document you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteDocumentLeave(
        string $employerId,
        string $employeeId,
        string $id,
        string $documentId,
        string $contentType = self::contentTypes['deleteDocumentLeave'][0]
    ): void
    {
        $this->deleteDocumentLeaveWithHttpInfo($employerId, $employeeId, $id, $documentId, $contentType);
    }

    /**
     * Operation deleteDocumentLeaveWithHttpInfo
     *
     * Delete Leave Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $documentId,
        string $contentType = self::contentTypes['deleteDocumentLeave'][0]
    ): array
    {
        $request = $this->deleteDocumentLeaveRequest($employerId, $employeeId, $id, $documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentLeaveAsync
     *
     * Delete Leave Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteDocumentLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $documentId,
        string $contentType = self::contentTypes['deleteDocumentLeave'][0]
    ): PromiseInterface
    {
        return $this->deleteDocumentLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDocumentLeaveAsyncWithHttpInfo
     *
     * Delete Leave Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteDocumentLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $documentId,
        string $contentType = self::contentTypes['deleteDocumentLeave'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteDocumentLeaveRequest($employerId, $employeeId, $id, $documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocumentLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        $documentId,
        string $contentType = self::contentTypes['deleteDocumentLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteDocumentLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling deleteDocumentLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDocumentLeave'
            );
        }

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $documentId when calling deleteDocumentLeave'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/{id}/documents/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLeave
     *
     * Delete Leave
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id The Id of the Leave you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteLeave(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteLeave'][0]
    ): void
    {
        $this->deleteLeaveWithHttpInfo($employerId, $employeeId, $id, $contentType);
    }

    /**
     * Operation deleteLeaveWithHttpInfo
     *
     * Delete Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteLeave'][0]
    ): array
    {
        $request = $this->deleteLeaveRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLeaveAsync
     *
     * Delete Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteLeave'][0]
    ): PromiseInterface
    {
        return $this->deleteLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLeaveAsyncWithHttpInfo
     *
     * Delete Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['deleteLeave'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteLeaveRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['deleteLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling deleteLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLeave'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findLinkedPiwLeave
     *
     * Find Linked Piw
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of leave to you want to find a linked Piw for. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The type of leave pay to you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $from The leave from date you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $to The leave to date you want to find a linked Piw for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLinkedPiwLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\LinkedPiw
     */
    public function findLinkedPiwLeave(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\DateTime $from = null,
        ?\DateTime $to = null,
        string $contentType = self::contentTypes['findLinkedPiwLeave'][0]
    ): \SynergiTech\Staffology\Model\LinkedPiw
    {
        list($response) = $this->findLinkedPiwLeaveWithHttpInfo($employerId, $employeeId, $leaveType, $leavePayType, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation findLinkedPiwLeaveWithHttpInfo
     *
     * Find Linked Piw
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of leave to you want to find a linked Piw for. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The type of leave pay to you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $from The leave from date you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $to The leave to date you want to find a linked Piw for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLinkedPiwLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\LinkedPiw, HTTP status code, HTTP response headers (array of strings)
     */
    public function findLinkedPiwLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\DateTime $from = null,
        ?\DateTime $to = null,
        string $contentType = self::contentTypes['findLinkedPiwLeave'][0]
    ): array
    {
        $request = $this->findLinkedPiwLeaveRequest($employerId, $employeeId, $leaveType, $leavePayType, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\LinkedPiw', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\LinkedPiw' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\LinkedPiw', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\LinkedPiw';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\LinkedPiw',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findLinkedPiwLeaveAsync
     *
     * Find Linked Piw
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of leave to you want to find a linked Piw for. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The type of leave pay to you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $from The leave from date you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $to The leave to date you want to find a linked Piw for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLinkedPiwLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function findLinkedPiwLeaveAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\DateTime $from = null,
        ?\DateTime $to = null,
        string $contentType = self::contentTypes['findLinkedPiwLeave'][0]
    ): PromiseInterface
    {
        return $this->findLinkedPiwLeaveAsyncWithHttpInfo($employerId, $employeeId, $leaveType, $leavePayType, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findLinkedPiwLeaveAsyncWithHttpInfo
     *
     * Find Linked Piw
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of leave to you want to find a linked Piw for. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The type of leave pay to you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $from The leave from date you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $to The leave to date you want to find a linked Piw for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLinkedPiwLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function findLinkedPiwLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $leaveType = null,
        $leavePayType = null,
        $from = null,
        $to = null,
        string $contentType = self::contentTypes['findLinkedPiwLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\LinkedPiw';
        $request = $this->findLinkedPiwLeaveRequest($employerId, $employeeId, $leaveType, $leavePayType, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findLinkedPiwLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of leave to you want to find a linked Piw for. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The type of leave pay to you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $from The leave from date you want to find a linked Piw for. (optional)
     * @param  \DateTime|null $to The leave to date you want to find a linked Piw for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLinkedPiwLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findLinkedPiwLeaveRequest(
        $employerId,
        $employeeId,
        $leaveType = null,
        $leavePayType = null,
        $from = null,
        $to = null,
        string $contentType = self::contentTypes['findLinkedPiwLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling findLinkedPiwLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling findLinkedPiwLeave'
            );
        }






        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/findlinkedpiw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leaveType,
            'leaveType', // param base name
            'LeaveType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leavePayType,
            'leavePayType', // param base name
            'LeavePayType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentLeave
     *
     * Get Leave Document
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id id (required)
     * @param  string $documentId The Id of the Document you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SplFileObject
     */
    public function getDocumentLeave(
        string $employerId,
        string $employeeId,
        string $id,
        string $documentId,
        string $contentType = self::contentTypes['getDocumentLeave'][0]
    ): \SplFileObject
    {
        list($response) = $this->getDocumentLeaveWithHttpInfo($employerId, $employeeId, $id, $documentId, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentLeaveWithHttpInfo
     *
     * Get Leave Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $documentId,
        string $contentType = self::contentTypes['getDocumentLeave'][0]
    ): array
    {
        $request = $this->getDocumentLeaveRequest($employerId, $employeeId, $id, $documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SplFileObject', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentLeaveAsync
     *
     * Get Leave Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDocumentLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $documentId,
        string $contentType = self::contentTypes['getDocumentLeave'][0]
    ): PromiseInterface
    {
        return $this->getDocumentLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentLeaveAsyncWithHttpInfo
     *
     * Get Leave Document
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDocumentLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $documentId,
        string $contentType = self::contentTypes['getDocumentLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SplFileObject';
        $request = $this->getDocumentLeaveRequest($employerId, $employeeId, $id, $documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $documentId The Id of the Document you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        $documentId,
        string $contentType = self::contentTypes['getDocumentLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getDocumentLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getDocumentLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getDocumentLeave'
            );
        }

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $documentId when calling getDocumentLeave'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/{id}/documents/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeave
     *
     * Get Leave
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id The Id of the Leave you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Leave
     */
    public function getLeave(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getLeave'][0]
    ): \SynergiTech\Staffology\Model\Leave
    {
        list($response) = $this->getLeaveWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getLeaveWithHttpInfo
     *
     * Get Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Leave, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getLeave'][0]
    ): array
    {
        $request = $this->getLeaveRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Leave', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Leave' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Leave', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Leave';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Leave',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLeaveAsync
     *
     * Get Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getLeave'][0]
    ): PromiseInterface
    {
        return $this->getLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeaveAsyncWithHttpInfo
     *
     * Get Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Leave';
        $request = $this->getLeaveRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getLeave'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaternityLeaveScheduleLeave
     *
     * List Statutory Maternity Leave History
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  \DateTime|null $babyDueDate babyDueDate (optional)
     * @param  \DateTime|null $leaveFrom leaveFrom (optional)
     * @param  \DateTime|null $leaveTo leaveTo (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType leaveType (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType leavePayType (optional)
     * @param  \SynergiTech\Staffology\Model\StatPayFrequency|null $payFrequency payFrequency (optional)
     * @param  float|null $averageWeeklyEarnings averageWeeklyEarnings (optional, default to 0)
     * @param  bool|null $isReversed isReversed (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaternityLeaveScheduleLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getMaternityLeaveScheduleLeave(
        string $employerId,
        string $employeeId,
        ?\DateTime $babyDueDate = null,
        ?\DateTime $leaveFrom = null,
        ?\DateTime $leaveTo = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\SynergiTech\Staffology\Model\StatPayFrequency $payFrequency = null,
        ?float $averageWeeklyEarnings = 0,
        ?bool $isReversed = false,
        string $contentType = self::contentTypes['getMaternityLeaveScheduleLeave'][0]
    ): array
    {
        list($response) = $this->getMaternityLeaveScheduleLeaveWithHttpInfo($employerId, $employeeId, $babyDueDate, $leaveFrom, $leaveTo, $leaveType, $leavePayType, $payFrequency, $averageWeeklyEarnings, $isReversed, $contentType);
        return $response;
    }

    /**
     * Operation getMaternityLeaveScheduleLeaveWithHttpInfo
     *
     * List Statutory Maternity Leave History
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \DateTime|null $babyDueDate (optional)
     * @param  \DateTime|null $leaveFrom (optional)
     * @param  \DateTime|null $leaveTo (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType (optional)
     * @param  \SynergiTech\Staffology\Model\StatPayFrequency|null $payFrequency (optional)
     * @param  float|null $averageWeeklyEarnings (optional, default to 0)
     * @param  bool|null $isReversed (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaternityLeaveScheduleLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMaternityLeaveScheduleLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\DateTime $babyDueDate = null,
        ?\DateTime $leaveFrom = null,
        ?\DateTime $leaveTo = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\SynergiTech\Staffology\Model\StatPayFrequency $payFrequency = null,
        ?float $averageWeeklyEarnings = 0,
        ?bool $isReversed = false,
        string $contentType = self::contentTypes['getMaternityLeaveScheduleLeave'][0]
    ): array
    {
        $request = $this->getMaternityLeaveScheduleLeaveRequest($employerId, $employeeId, $babyDueDate, $leaveFrom, $leaveTo, $leaveType, $leavePayType, $payFrequency, $averageWeeklyEarnings, $isReversed, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaternityLeaveScheduleLeaveAsync
     *
     * List Statutory Maternity Leave History
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \DateTime|null $babyDueDate (optional)
     * @param  \DateTime|null $leaveFrom (optional)
     * @param  \DateTime|null $leaveTo (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType (optional)
     * @param  \SynergiTech\Staffology\Model\StatPayFrequency|null $payFrequency (optional)
     * @param  float|null $averageWeeklyEarnings (optional, default to 0)
     * @param  bool|null $isReversed (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaternityLeaveScheduleLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMaternityLeaveScheduleLeaveAsync(
        string $employerId,
        string $employeeId,
        ?\DateTime $babyDueDate = null,
        ?\DateTime $leaveFrom = null,
        ?\DateTime $leaveTo = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\SynergiTech\Staffology\Model\StatPayFrequency $payFrequency = null,
        ?float $averageWeeklyEarnings = 0,
        ?bool $isReversed = false,
        string $contentType = self::contentTypes['getMaternityLeaveScheduleLeave'][0]
    ): PromiseInterface
    {
        return $this->getMaternityLeaveScheduleLeaveAsyncWithHttpInfo($employerId, $employeeId, $babyDueDate, $leaveFrom, $leaveTo, $leaveType, $leavePayType, $payFrequency, $averageWeeklyEarnings, $isReversed, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMaternityLeaveScheduleLeaveAsyncWithHttpInfo
     *
     * List Statutory Maternity Leave History
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \DateTime|null $babyDueDate (optional)
     * @param  \DateTime|null $leaveFrom (optional)
     * @param  \DateTime|null $leaveTo (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType (optional)
     * @param  \SynergiTech\Staffology\Model\StatPayFrequency|null $payFrequency (optional)
     * @param  float|null $averageWeeklyEarnings (optional, default to 0)
     * @param  bool|null $isReversed (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaternityLeaveScheduleLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMaternityLeaveScheduleLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $babyDueDate = null,
        $leaveFrom = null,
        $leaveTo = null,
        $leaveType = null,
        $leavePayType = null,
        $payFrequency = null,
        $averageWeeklyEarnings = 0,
        $isReversed = false,
        string $contentType = self::contentTypes['getMaternityLeaveScheduleLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getMaternityLeaveScheduleLeaveRequest($employerId, $employeeId, $babyDueDate, $leaveFrom, $leaveTo, $leaveType, $leavePayType, $payFrequency, $averageWeeklyEarnings, $isReversed, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaternityLeaveScheduleLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  \DateTime|null $babyDueDate (optional)
     * @param  \DateTime|null $leaveFrom (optional)
     * @param  \DateTime|null $leaveTo (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType (optional)
     * @param  \SynergiTech\Staffology\Model\StatPayFrequency|null $payFrequency (optional)
     * @param  float|null $averageWeeklyEarnings (optional, default to 0)
     * @param  bool|null $isReversed (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaternityLeaveScheduleLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMaternityLeaveScheduleLeaveRequest(
        $employerId,
        $employeeId,
        $babyDueDate = null,
        $leaveFrom = null,
        $leaveTo = null,
        $leaveType = null,
        $leavePayType = null,
        $payFrequency = null,
        $averageWeeklyEarnings = 0,
        $isReversed = false,
        string $contentType = self::contentTypes['getMaternityLeaveScheduleLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getMaternityLeaveScheduleLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getMaternityLeaveScheduleLeave'
            );
        }










        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/statutorymaternityschedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $babyDueDate,
            'babyDueDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leaveFrom,
            'leaveFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leaveTo,
            'leaveTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leaveType,
            'leaveType', // param base name
            'LeaveType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leavePayType,
            'leavePayType', // param base name
            'LeavePayType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payFrequency,
            'payFrequency', // param base name
            'StatPayFrequency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $averageWeeklyEarnings,
            'averageWeeklyEarnings', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isReversed,
            'isReversed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOccupationalMaternityScheduleLeave
     *
     * List occupational Maternity Leave History
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOccupationalMaternityScheduleLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getOccupationalMaternityScheduleLeave(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getOccupationalMaternityScheduleLeave'][0]
    ): array
    {
        list($response) = $this->getOccupationalMaternityScheduleLeaveWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getOccupationalMaternityScheduleLeaveWithHttpInfo
     *
     * List occupational Maternity Leave History
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOccupationalMaternityScheduleLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOccupationalMaternityScheduleLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getOccupationalMaternityScheduleLeave'][0]
    ): array
    {
        $request = $this->getOccupationalMaternityScheduleLeaveRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOccupationalMaternityScheduleLeaveAsync
     *
     * List occupational Maternity Leave History
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOccupationalMaternityScheduleLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOccupationalMaternityScheduleLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getOccupationalMaternityScheduleLeave'][0]
    ): PromiseInterface
    {
        return $this->getOccupationalMaternityScheduleLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOccupationalMaternityScheduleLeaveAsyncWithHttpInfo
     *
     * List occupational Maternity Leave History
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOccupationalMaternityScheduleLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOccupationalMaternityScheduleLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getOccupationalMaternityScheduleLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getOccupationalMaternityScheduleLeaveRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOccupationalMaternityScheduleLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOccupationalMaternityScheduleLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOccupationalMaternityScheduleLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getOccupationalMaternityScheduleLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getOccupationalMaternityScheduleLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getOccupationalMaternityScheduleLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getOccupationalMaternityScheduleLeave'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/occupationalmaternityschedule/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexLeave
     *
     * List Leave
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function indexLeave(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['indexLeave'][0]
    ): array
    {
        list($response) = $this->indexLeaveWithHttpInfo($employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation indexLeaveWithHttpInfo
     *
     * List Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function indexLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['indexLeave'][0]
    ): array
    {
        $request = $this->indexLeaveRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexLeaveAsync
     *
     * List Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexLeaveAsync(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['indexLeave'][0]
    ): PromiseInterface
    {
        return $this->indexLeaveAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexLeaveAsyncWithHttpInfo
     *
     * List Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['indexLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->indexLeaveRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function indexLeaveRequest(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['indexLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling indexLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling indexLeave'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLeave
     *
     * Update Leave
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId employeeId (required)
     * @param  string $id The Id of the Leave you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Leave
     */
    public function updateLeave(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['updateLeave'][0]
    ): \SynergiTech\Staffology\Model\Leave
    {
        list($response) = $this->updateLeaveWithHttpInfo($employerId, $employeeId, $id, $leave, $contentType);
        return $response;
    }

    /**
     * Operation updateLeaveWithHttpInfo
     *
     * Update Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeave'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Leave, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLeaveWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['updateLeave'][0]
    ): array
    {
        $request = $this->updateLeaveRequest($employerId, $employeeId, $id, $leave, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Leave', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Leave' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Leave', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Leave';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Leave',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLeaveAsync
     *
     * Update Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLeaveAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['updateLeave'][0]
    ): PromiseInterface
    {
        return $this->updateLeaveAsyncWithHttpInfo($employerId, $employeeId, $id, $leave, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLeaveAsyncWithHttpInfo
     *
     * Update Leave
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLeaveAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $leave = null,
        string $contentType = self::contentTypes['updateLeave'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Leave';
        $request = $this->updateLeaveRequest($employerId, $employeeId, $id, $leave, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLeave'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId (required)
     * @param  string $id The Id of the Leave you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeave'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLeaveRequest(
        $employerId,
        $employeeId,
        $id,
        $leave = null,
        string $contentType = self::contentTypes['updateLeave'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateLeave'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateLeave'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateLeave'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/leave/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave));
            } else {
                $httpBody = $leave;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
