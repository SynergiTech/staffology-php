<?php
/**
 * OpeningBalancesApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * OpeningBalancesApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OpeningBalancesApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNicSummaryOpeningBalances' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteNicSummaryOpeningBalances' => [
            'application/json',
        ],
        'getNicSummariesOpeningBalances' => [
            'application/json',
        ],
        'getNicSummaryOpeningBalances' => [
            'application/json',
        ],
        'getOpeningBalances' => [
            'application/json',
        ],
        'getOpeningBalancesTotalsOpeningBalances' => [
            'application/json',
        ],
        'updateNicSummariesOpeningBalances' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateNicSummaryOpeningBalances' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateOpeningBalances' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateP45OpeningBalances' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateTerminationPaymentsOpeningBalances' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createNicSummaryOpeningBalances
     *
     * Create NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to create the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function createNicSummaryOpeningBalances(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['createNicSummaryOpeningBalances'][0]
    ): void
    {
        $this->createNicSummaryOpeningBalancesWithHttpInfo($employerId, $employeeId, $taxYear, $nicSummary, $contentType);
    }

    /**
     * Operation createNicSummaryOpeningBalancesWithHttpInfo
     *
     * Create NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to create the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNicSummaryOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['createNicSummaryOpeningBalances'][0]
    ): array
    {
        $request = $this->createNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $nicSummary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createNicSummaryOpeningBalancesAsync
     *
     * Create NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to create the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createNicSummaryOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['createNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->createNicSummaryOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $nicSummary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNicSummaryOpeningBalancesAsyncWithHttpInfo
     *
     * Create NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to create the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createNicSummaryOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['createNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->createNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $nicSummary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNicSummaryOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to create the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNicSummaryOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['createNicSummaryOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling createNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling createNicSummaryOpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($nicSummary)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($nicSummary));
            } else {
                $httpBody = $nicSummary;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNicSummaryOpeningBalances
     *
     * Delete NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to delete the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteNicSummaryOpeningBalances(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['deleteNicSummaryOpeningBalances'][0]
    ): void
    {
        $this->deleteNicSummaryOpeningBalancesWithHttpInfo($employerId, $employeeId, $taxYear, $uniqueId, $contentType);
    }

    /**
     * Operation deleteNicSummaryOpeningBalancesWithHttpInfo
     *
     * Delete NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to delete the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNicSummaryOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['deleteNicSummaryOpeningBalances'][0]
    ): array
    {
        $request = $this->deleteNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $uniqueId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNicSummaryOpeningBalancesAsync
     *
     * Delete NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to delete the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteNicSummaryOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['deleteNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->deleteNicSummaryOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $uniqueId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNicSummaryOpeningBalancesAsyncWithHttpInfo
     *
     * Delete NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to delete the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteNicSummaryOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['deleteNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $uniqueId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNicSummaryOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to delete the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNicSummaryOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['deleteNicSummaryOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling deleteNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling deleteNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'uniqueId' is set
        if ($uniqueId === null || (is_array($uniqueId) && count($uniqueId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uniqueId when calling deleteNicSummaryOpeningBalances'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}/{uniqueId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($uniqueId !== null) {
            $resourcePath = str_replace(
                '{' . 'uniqueId' . '}',
                ObjectSerializer::toPathValue($uniqueId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNicSummariesOpeningBalances
     *
     * Get NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  bool|null $openingBalancesOnly Limit the results to opening balance year to date (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NicSummary[]
     */
    public function getNicSummariesOpeningBalances(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $openingBalancesOnly = true,
        string $contentType = self::contentTypes['getNicSummariesOpeningBalances'][0]
    ): array
    {
        list($response) = $this->getNicSummariesOpeningBalancesWithHttpInfo($employerId, $employeeId, $taxYear, $openingBalancesOnly, $contentType);
        return $response;
    }

    /**
     * Operation getNicSummariesOpeningBalancesWithHttpInfo
     *
     * Get NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  bool|null $openingBalancesOnly Limit the results to opening balance year to date (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NicSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNicSummariesOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $openingBalancesOnly = true,
        string $contentType = self::contentTypes['getNicSummariesOpeningBalances'][0]
    ): array
    {
        $request = $this->getNicSummariesOpeningBalancesRequest($employerId, $employeeId, $taxYear, $openingBalancesOnly, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NicSummary[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NicSummary[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NicSummary[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NicSummary[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NicSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNicSummariesOpeningBalancesAsync
     *
     * Get NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  bool|null $openingBalancesOnly Limit the results to opening balance year to date (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getNicSummariesOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $openingBalancesOnly = true,
        string $contentType = self::contentTypes['getNicSummariesOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->getNicSummariesOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $openingBalancesOnly, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNicSummariesOpeningBalancesAsyncWithHttpInfo
     *
     * Get NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  bool|null $openingBalancesOnly Limit the results to opening balance year to date (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getNicSummariesOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $openingBalancesOnly = true,
        string $contentType = self::contentTypes['getNicSummariesOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NicSummary[]';
        $request = $this->getNicSummariesOpeningBalancesRequest($employerId, $employeeId, $taxYear, $openingBalancesOnly, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNicSummariesOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  bool|null $openingBalancesOnly Limit the results to opening balance year to date (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNicSummariesOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $openingBalancesOnly = true,
        string $contentType = self::contentTypes['getNicSummariesOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getNicSummariesOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getNicSummariesOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getNicSummariesOpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $openingBalancesOnly,
            'openingBalancesOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNicSummaryOpeningBalances
     *
     * Get NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NicSummary
     */
    public function getNicSummaryOpeningBalances(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['getNicSummaryOpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\NicSummary
    {
        list($response) = $this->getNicSummaryOpeningBalancesWithHttpInfo($employerId, $employeeId, $taxYear, $uniqueId, $contentType);
        return $response;
    }

    /**
     * Operation getNicSummaryOpeningBalancesWithHttpInfo
     *
     * Get NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NicSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNicSummaryOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['getNicSummaryOpeningBalances'][0]
    ): array
    {
        $request = $this->getNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $uniqueId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NicSummary', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NicSummary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NicSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NicSummary';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NicSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNicSummaryOpeningBalancesAsync
     *
     * Get NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getNicSummaryOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['getNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->getNicSummaryOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $uniqueId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNicSummaryOpeningBalancesAsyncWithHttpInfo
     *
     * Get NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getNicSummaryOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['getNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NicSummary';
        $request = $this->getNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $uniqueId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNicSummaryOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNicSummaryOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        string $contentType = self::contentTypes['getNicSummaryOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'uniqueId' is set
        if ($uniqueId === null || (is_array($uniqueId) && count($uniqueId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uniqueId when calling getNicSummaryOpeningBalances'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}/{uniqueId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($uniqueId !== null) {
            $resourcePath = str_replace(
                '{' . 'uniqueId' . '}',
                ObjectSerializer::toPathValue($uniqueId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOpeningBalances
     *
     * Get Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\OpeningBalances
     */
    public function getOpeningBalances(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getOpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\OpeningBalances
    {
        list($response) = $this->getOpeningBalancesWithHttpInfo($employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation getOpeningBalancesWithHttpInfo
     *
     * Get Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\OpeningBalances, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getOpeningBalances'][0]
    ): array
    {
        $request = $this->getOpeningBalancesRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\OpeningBalances', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\OpeningBalances' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\OpeningBalances', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\OpeningBalances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOpeningBalancesAsync
     *
     * Get Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->getOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOpeningBalancesAsyncWithHttpInfo
     *
     * Get Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
        $request = $this->getOpeningBalancesRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getOpeningBalances'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOpeningBalancesTotalsOpeningBalances
     *
     * Totals of employee opening balances for a tax year
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to Opening Balances totals. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalancesTotalsOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\OpeningBalancesTotals
     */
    public function getOpeningBalancesTotalsOpeningBalances(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getOpeningBalancesTotalsOpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\OpeningBalancesTotals
    {
        list($response) = $this->getOpeningBalancesTotalsOpeningBalancesWithHttpInfo($employerId, $taxYear, $contentType);
        return $response;
    }

    /**
     * Operation getOpeningBalancesTotalsOpeningBalancesWithHttpInfo
     *
     * Totals of employee opening balances for a tax year
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to Opening Balances totals. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalancesTotalsOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\OpeningBalancesTotals, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOpeningBalancesTotalsOpeningBalancesWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getOpeningBalancesTotalsOpeningBalances'][0]
    ): array
    {
        $request = $this->getOpeningBalancesTotalsOpeningBalancesRequest($employerId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\OpeningBalancesTotals', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\OpeningBalancesTotals' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\OpeningBalancesTotals', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\OpeningBalancesTotals';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\OpeningBalancesTotals',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOpeningBalancesTotalsOpeningBalancesAsync
     *
     * Totals of employee opening balances for a tax year
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to Opening Balances totals. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalancesTotalsOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOpeningBalancesTotalsOpeningBalancesAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getOpeningBalancesTotalsOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->getOpeningBalancesTotalsOpeningBalancesAsyncWithHttpInfo($employerId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOpeningBalancesTotalsOpeningBalancesAsyncWithHttpInfo
     *
     * Totals of employee opening balances for a tax year
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to Opening Balances totals. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalancesTotalsOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOpeningBalancesTotalsOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getOpeningBalancesTotalsOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\OpeningBalancesTotals';
        $request = $this->getOpeningBalancesTotalsOpeningBalancesRequest($employerId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOpeningBalancesTotalsOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to Opening Balances totals. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpeningBalancesTotalsOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOpeningBalancesTotalsOpeningBalancesRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getOpeningBalancesTotalsOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getOpeningBalancesTotalsOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getOpeningBalancesTotalsOpeningBalances'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/openingbalances/{taxYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNicSummariesOpeningBalances
     *
     * Update NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary[]|null $nicSummary nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NicSummary[]
     */
    public function updateNicSummariesOpeningBalances(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?array $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummariesOpeningBalances'][0]
    ): array
    {
        list($response) = $this->updateNicSummariesOpeningBalancesWithHttpInfo($employerId, $employeeId, $taxYear, $nicSummary, $contentType);
        return $response;
    }

    /**
     * Operation updateNicSummariesOpeningBalancesWithHttpInfo
     *
     * Update NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary[]|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NicSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNicSummariesOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?array $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummariesOpeningBalances'][0]
    ): array
    {
        $request = $this->updateNicSummariesOpeningBalancesRequest($employerId, $employeeId, $taxYear, $nicSummary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NicSummary[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NicSummary[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NicSummary[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NicSummary[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NicSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNicSummariesOpeningBalancesAsync
     *
     * Update NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary[]|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateNicSummariesOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?array $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummariesOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->updateNicSummariesOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $nicSummary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNicSummariesOpeningBalancesAsyncWithHttpInfo
     *
     * Update NicSummaries
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary[]|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateNicSummariesOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?array $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummariesOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NicSummary[]';
        $request = $this->updateNicSummariesOpeningBalancesRequest($employerId, $employeeId, $taxYear, $nicSummary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNicSummariesOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummaries apply to (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary[]|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummariesOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNicSummariesOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?array $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummariesOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateNicSummariesOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateNicSummariesOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling updateNicSummariesOpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($nicSummary)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($nicSummary));
            } else {
                $httpBody = $nicSummary;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNicSummaryOpeningBalances
     *
     * Update NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NicSummary
     */
    public function updateNicSummaryOpeningBalances(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummaryOpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\NicSummary
    {
        list($response) = $this->updateNicSummaryOpeningBalancesWithHttpInfo($employerId, $employeeId, $taxYear, $uniqueId, $nicSummary, $contentType);
        return $response;
    }

    /**
     * Operation updateNicSummaryOpeningBalancesWithHttpInfo
     *
     * Update NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NicSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNicSummaryOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummaryOpeningBalances'][0]
    ): array
    {
        $request = $this->updateNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $uniqueId, $nicSummary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NicSummary', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NicSummary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NicSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NicSummary';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NicSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNicSummaryOpeningBalancesAsync
     *
     * Update NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateNicSummaryOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->updateNicSummaryOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $uniqueId, $nicSummary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNicSummaryOpeningBalancesAsyncWithHttpInfo
     *
     * Update NicSummary
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateNicSummaryOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummaryOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NicSummary';
        $request = $this->updateNicSummaryOpeningBalancesRequest($employerId, $employeeId, $taxYear, $uniqueId, $nicSummary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNicSummaryOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update the Nic Summary (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the NicSummary applies to (required)
     * @param  string $uniqueId The Id of the NicSummary (required)
     * @param  \SynergiTech\Staffology\Model\NicSummary|null $nicSummary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNicSummaryOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNicSummaryOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $uniqueId,
        ?\SynergiTech\Staffology\Model\NicSummary $nicSummary = null,
        string $contentType = self::contentTypes['updateNicSummaryOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling updateNicSummaryOpeningBalances'
            );
        }

        // verify the required parameter 'uniqueId' is set
        if ($uniqueId === null || (is_array($uniqueId) && count($uniqueId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uniqueId when calling updateNicSummaryOpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/nic/{taxYear}/{uniqueId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($uniqueId !== null) {
            $resourcePath = str_replace(
                '{' . 'uniqueId' . '}',
                ObjectSerializer::toPathValue($uniqueId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($nicSummary)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($nicSummary));
            } else {
                $httpBody = $nicSummary;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOpeningBalances
     *
     * Update Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\OpeningBalances
     */
    public function updateOpeningBalances(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateOpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\OpeningBalances
    {
        list($response) = $this->updateOpeningBalancesWithHttpInfo($employerId, $employeeId, $openingBalances, $contentType);
        return $response;
    }

    /**
     * Operation updateOpeningBalancesWithHttpInfo
     *
     * Update Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\OpeningBalances, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateOpeningBalances'][0]
    ): array
    {
        $request = $this->updateOpeningBalancesRequest($employerId, $employeeId, $openingBalances, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\OpeningBalances', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\OpeningBalances' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\OpeningBalances', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\OpeningBalances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOpeningBalancesAsync
     *
     * Update Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->updateOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $openingBalances, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOpeningBalancesAsyncWithHttpInfo
     *
     * Update Opening Balances
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
        $request = $this->updateOpeningBalancesRequest($employerId, $employeeId, $openingBalances, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Opening Balances (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateOpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($openingBalances)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($openingBalances));
            } else {
                $httpBody = $openingBalances;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateP45OpeningBalances
     *
     * Update P45 Value
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update P45 figures (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateP45OpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\OpeningBalances
     */
    public function updateP45OpeningBalances(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateP45OpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\OpeningBalances
    {
        list($response) = $this->updateP45OpeningBalancesWithHttpInfo($employerId, $employeeId, $openingBalances, $contentType);
        return $response;
    }

    /**
     * Operation updateP45OpeningBalancesWithHttpInfo
     *
     * Update P45 Value
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update P45 figures (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateP45OpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\OpeningBalances, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateP45OpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateP45OpeningBalances'][0]
    ): array
    {
        $request = $this->updateP45OpeningBalancesRequest($employerId, $employeeId, $openingBalances, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\OpeningBalances', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\OpeningBalances' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\OpeningBalances', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\OpeningBalances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateP45OpeningBalancesAsync
     *
     * Update P45 Value
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update P45 figures (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateP45OpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateP45OpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateP45OpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->updateP45OpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $openingBalances, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateP45OpeningBalancesAsyncWithHttpInfo
     *
     * Update P45 Value
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update P45 figures (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateP45OpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateP45OpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateP45OpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
        $request = $this->updateP45OpeningBalancesRequest($employerId, $employeeId, $openingBalances, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateP45OpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update P45 figures (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateP45OpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateP45OpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateP45OpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateP45OpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateP45OpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/p45';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($openingBalances)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($openingBalances));
            } else {
                $httpBody = $openingBalances;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTerminationPaymentsOpeningBalances
     *
     * Update Termination Pay
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Termination Payments (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTerminationPaymentsOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\OpeningBalances
     */
    public function updateTerminationPaymentsOpeningBalances(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateTerminationPaymentsOpeningBalances'][0]
    ): \SynergiTech\Staffology\Model\OpeningBalances
    {
        list($response) = $this->updateTerminationPaymentsOpeningBalancesWithHttpInfo($employerId, $employeeId, $openingBalances, $contentType);
        return $response;
    }

    /**
     * Operation updateTerminationPaymentsOpeningBalancesWithHttpInfo
     *
     * Update Termination Pay
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Termination Payments (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTerminationPaymentsOpeningBalances'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\OpeningBalances, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTerminationPaymentsOpeningBalancesWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateTerminationPaymentsOpeningBalances'][0]
    ): array
    {
        $request = $this->updateTerminationPaymentsOpeningBalancesRequest($employerId, $employeeId, $openingBalances, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\OpeningBalances', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\OpeningBalances' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\OpeningBalances', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\OpeningBalances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTerminationPaymentsOpeningBalancesAsync
     *
     * Update Termination Pay
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Termination Payments (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTerminationPaymentsOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTerminationPaymentsOpeningBalancesAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateTerminationPaymentsOpeningBalances'][0]
    ): PromiseInterface
    {
        return $this->updateTerminationPaymentsOpeningBalancesAsyncWithHttpInfo($employerId, $employeeId, $openingBalances, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTerminationPaymentsOpeningBalancesAsyncWithHttpInfo
     *
     * Update Termination Pay
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Termination Payments (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTerminationPaymentsOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTerminationPaymentsOpeningBalancesAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateTerminationPaymentsOpeningBalances'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\OpeningBalances';
        $request = $this->updateTerminationPaymentsOpeningBalancesRequest($employerId, $employeeId, $openingBalances, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTerminationPaymentsOpeningBalances'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to update Termination Payments (required)
     * @param  \SynergiTech\Staffology\Model\OpeningBalances|null $openingBalances (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTerminationPaymentsOpeningBalances'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTerminationPaymentsOpeningBalancesRequest(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\OpeningBalances $openingBalances = null,
        string $contentType = self::contentTypes['updateTerminationPaymentsOpeningBalances'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateTerminationPaymentsOpeningBalances'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateTerminationPaymentsOpeningBalances'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/openingBalances/terminationpayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($openingBalances)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($openingBalances));
            } else {
                $httpBody = $openingBalances;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
