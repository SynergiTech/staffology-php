<?php
/**
 * ReportsApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'advancedVarianceReportReports' => [
            'application/json',
        ],
        'aeAssessmentsReports' => [
            'application/json',
        ],
        'aeoStatementReports' => [
            'application/json',
        ],
        'analysisReports' => [
            'application/json',
        ],
        'apprenticeshipLevyDetailsReports' => [
            'application/json',
        ],
        'attachmentOrdersReports' => [
            'application/json',
        ],
        'averageHolidayPayRateReports' => [
            'application/json',
        ],
        'bankPaymentInstructionsReports' => [
            'application/json',
        ],
        'changesReports' => [
            'application/json',
        ],
        'cis300Reports' => [
            'application/json',
        ],
        'cisStatementReports' => [
            'application/json',
        ],
        'cisSubContractorSummaryReports' => [
            'application/json',
        ],
        'costAnalysisReports' => [
            'application/json',
        ],
        'costOfEmploymentReports' => [
            'application/json',
        ],
        'downloadMaternitySchedulesReports' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'emailP11DMultipleReports' => [
            'application/json',
        ],
        'emailP11DReports' => [
            'application/json',
        ],
        'emailP45Reports' => [
            'application/json',
        ],
        'emailP60MultipleReports' => [
            'application/json',
        ],
        'emailP60Reports' => [
            'application/json',
        ],
        'employeeBenefitsReports' => [
            'application/json',
        ],
        'employeeExportReports' => [
            'application/json',
        ],
        'employeeLeaveReports' => [
            'application/json',
        ],
        'employeeRoleExportReports' => [
            'application/json',
        ],
        'employerChangesReports' => [
            'application/json',
        ],
        'employerExportReports' => [
            'application/json',
        ],
        'examplePayslipReports' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'exbReports' => [
            'application/json',
        ],
        'fpsReports' => [
            'application/json',
        ],
        'fullSummaryOfPayReports' => [
            'application/json',
        ],
        'furloughReportReports' => [
            'application/json',
        ],
        'genderPayGapReports' => [
            'application/json',
        ],
        'getPayRunCsvReports' => [
            'application/json',
        ],
        'grossToNetReports' => [
            'application/json',
        ],
        'holidayReports' => [
            'application/json',
        ],
        'hourlyPayReports' => [
            'application/json',
        ],
        'loanBalancesReports' => [
            'application/json',
        ],
        'niLetterValidationReportEmployeesReports' => [
            'application/json',
        ],
        'niLetterValidationReportReports' => [
            'application/json',
        ],
        'niYtdReports' => [
            'application/json',
        ],
        'p11DMultipleReports' => [
            'application/json',
        ],
        'p11DReports' => [
            'application/json',
        ],
        'p11DetailedMultipleReports' => [
            'application/json',
        ],
        'p11DetailedReports' => [
            'application/json',
        ],
        'p11Reports' => [
            'application/json',
        ],
        'p30Reports' => [
            'application/json',
        ],
        'p32Reports' => [
            'application/json',
        ],
        'p45Reports' => [
            'application/json',
        ],
        'p60MultipleReports' => [
            'application/json',
        ],
        'p60Reports' => [
            'application/json',
        ],
        'papdisFileReports' => [
            'application/json',
        ],
        'payCodeExportReports' => [
            'application/json',
        ],
        'payElementReports' => [
            'application/json',
        ],
        'payGradesReports' => [
            'application/json',
        ],
        'payRunCsvReports' => [
            'application/json',
        ],
        'payRunPaymentsReports' => [
            'application/json',
        ],
        'payRunSummaryReports' => [
            'application/json',
        ],
        'paySpineReports' => [
            'application/json',
        ],
        'payrollAnalysisCostBreakdownReports' => [
            'application/json',
        ],
        'payrollAnalysisEmployeeRoleBreakdownReports' => [
            'application/json',
        ],
        'payrollJournalCsvReportReports' => [
            'application/json',
        ],
        'payrunNiYtdReports' => [
            'application/json',
        ],
        'payrunYtdReports' => [
            'application/json',
        ],
        'payslipReports' => [
            'application/json',
        ],
        'payslipsReports' => [
            'application/json',
        ],
        'pensionMembershipsReports' => [
            'application/json',
        ],
        'rightToWorkReports' => [
            'application/json',
        ],
        'spinePointReports' => [
            'application/json',
        ],
        'statutoryPayReports' => [
            'application/json',
        ],
        'taxCodeChangesReports' => [
            'application/json',
        ],
        'teachersPensionEoyReports' => [
            'application/json',
        ],
        'umbrellaReconciliationReports' => [
            'application/json',
        ],
        'varianceReportReports' => [
            'application/json',
        ],
        'warningsReports' => [
            'application/json',
        ],
        'ytdReports' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation advancedVarianceReportReports
     *
     * Advanced Variance Report
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod (optional)
     * @param  int|null $ordinal ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  int|null $period period (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare taxYearCompare (optional)
     * @param  int|null $periodCompare periodCompare (optional)
     * @param  string|null $payCodes payCodes (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['advancedVarianceReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse
     */
    public function advancedVarianceReportReports(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $period = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $periodCompare = null,
        ?string $payCodes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['advancedVarianceReportReports'][0]
    ): \SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse
    {
        list($response) = $this->advancedVarianceReportReportsWithHttpInfo($employerId, $payPeriod, $ordinal, $taxYear, $period, $taxYearCompare, $periodCompare, $payCodes, $accept, $contentType);
        return $response;
    }

    /**
     * Operation advancedVarianceReportReportsWithHttpInfo
     *
     * Advanced Variance Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  int|null $period (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $periodCompare (optional)
     * @param  string|null $payCodes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['advancedVarianceReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function advancedVarianceReportReportsWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $period = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $periodCompare = null,
        ?string $payCodes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['advancedVarianceReportReports'][0]
    ): array
    {
        $request = $this->advancedVarianceReportReportsRequest($employerId, $payPeriod, $ordinal, $taxYear, $period, $taxYearCompare, $periodCompare, $payCodes, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation advancedVarianceReportReportsAsync
     *
     * Advanced Variance Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  int|null $period (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $periodCompare (optional)
     * @param  string|null $payCodes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['advancedVarianceReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function advancedVarianceReportReportsAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $period = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $periodCompare = null,
        ?string $payCodes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['advancedVarianceReportReports'][0]
    ): PromiseInterface
    {
        return $this->advancedVarianceReportReportsAsyncWithHttpInfo($employerId, $payPeriod, $ordinal, $taxYear, $period, $taxYearCompare, $periodCompare, $payCodes, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation advancedVarianceReportReportsAsyncWithHttpInfo
     *
     * Advanced Variance Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  int|null $period (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $periodCompare (optional)
     * @param  string|null $payCodes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['advancedVarianceReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function advancedVarianceReportReportsAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $period = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $periodCompare = null,
        ?string $payCodes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['advancedVarianceReportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AdvancedVarianceReportReportResponse';
        $request = $this->advancedVarianceReportReportsRequest($employerId, $payPeriod, $ordinal, $taxYear, $period, $taxYearCompare, $periodCompare, $payCodes, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'advancedVarianceReportReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  int|null $period (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $periodCompare (optional)
     * @param  string|null $payCodes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['advancedVarianceReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function advancedVarianceReportReportsRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $period = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $periodCompare = null,
        ?string $payCodes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['advancedVarianceReportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling advancedVarianceReportReports'
            );
        }










        $resourcePath = '/employers/{employerId}/reports/advancedvariance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYearCompare?->value,
            'taxYearCompare', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodCompare,
            'periodCompare', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payCodes,
            'payCodes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aeAssessmentsReports
     *
     * AutoEnrolment Assessments
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeAssessmentsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ItemListReportResponse
     */
    public function aeAssessmentsReports(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeAssessmentsReports'][0]
    ): \SynergiTech\Staffology\Model\ItemListReportResponse
    {
        list($response) = $this->aeAssessmentsReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation aeAssessmentsReportsWithHttpInfo
     *
     * AutoEnrolment Assessments
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeAssessmentsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ItemListReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function aeAssessmentsReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeAssessmentsReports'][0]
    ): array
    {
        $request = $this->aeAssessmentsReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ItemListReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ItemListReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ItemListReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ItemListReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ItemListReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aeAssessmentsReportsAsync
     *
     * AutoEnrolment Assessments
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeAssessmentsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function aeAssessmentsReportsAsync(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeAssessmentsReports'][0]
    ): PromiseInterface
    {
        return $this->aeAssessmentsReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aeAssessmentsReportsAsyncWithHttpInfo
     *
     * AutoEnrolment Assessments
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeAssessmentsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function aeAssessmentsReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeAssessmentsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ItemListReportResponse';
        $request = $this->aeAssessmentsReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aeAssessmentsReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeAssessmentsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aeAssessmentsReportsRequest(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeAssessmentsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling aeAssessmentsReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/AeAssessments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aeoStatementReports
     *
     * AEO Statement
     *
     * @param  string $employeeId employeeId (required)
     * @param  string $id The id of the AttachmentOrder (required)
     * @param  string|null $employerId employerId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoStatementReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AttachmentOrderReportResponse
     */
    public function aeoStatementReports(
        string $employeeId,
        string $id,
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeoStatementReports'][0]
    ): \SynergiTech\Staffology\Model\AttachmentOrderReportResponse
    {
        list($response) = $this->aeoStatementReportsWithHttpInfo($employeeId, $id, $employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation aeoStatementReportsWithHttpInfo
     *
     * AEO Statement
     *
     * @param  string $employeeId (required)
     * @param  string $id The id of the AttachmentOrder (required)
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoStatementReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AttachmentOrderReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function aeoStatementReportsWithHttpInfo(
        string $employeeId,
        string $id,
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeoStatementReports'][0]
    ): array
    {
        $request = $this->aeoStatementReportsRequest($employeeId, $id, $employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AttachmentOrderReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AttachmentOrderReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AttachmentOrderReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AttachmentOrderReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AttachmentOrderReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aeoStatementReportsAsync
     *
     * AEO Statement
     *
     * @param  string $employeeId (required)
     * @param  string $id The id of the AttachmentOrder (required)
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoStatementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function aeoStatementReportsAsync(
        string $employeeId,
        string $id,
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeoStatementReports'][0]
    ): PromiseInterface
    {
        return $this->aeoStatementReportsAsyncWithHttpInfo($employeeId, $id, $employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aeoStatementReportsAsyncWithHttpInfo
     *
     * AEO Statement
     *
     * @param  string $employeeId (required)
     * @param  string $id The id of the AttachmentOrder (required)
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoStatementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function aeoStatementReportsAsyncWithHttpInfo(
        string $employeeId,
        string $id,
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeoStatementReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AttachmentOrderReportResponse';
        $request = $this->aeoStatementReportsRequest($employeeId, $id, $employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aeoStatementReports'
     *
     * @param  string $employeeId (required)
     * @param  string $id The id of the AttachmentOrder (required)
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoStatementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aeoStatementReportsRequest(
        string $employeeId,
        string $id,
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['aeoStatementReports'][0]
    ): Request
    {

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling aeoStatementReports'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling aeoStatementReports'
            );
        }




        $resourcePath = '/aeo/{employeeId}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employerId,
            'employerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation analysisReports
     *
     * Analysis
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $showPayPeriodBreakdown If set to true, then the report will show a breakdown of each period for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analysisReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AnalysisReportReportResponse
     */
    public function analysisReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $showPayPeriodBreakdown = false,
        string $contentType = self::contentTypes['analysisReports'][0]
    ): \SynergiTech\Staffology\Model\AnalysisReportReportResponse
    {
        list($response) = $this->analysisReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $showPayPeriodBreakdown, $contentType);
        return $response;
    }

    /**
     * Operation analysisReportsWithHttpInfo
     *
     * Analysis
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $showPayPeriodBreakdown If set to true, then the report will show a breakdown of each period for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analysisReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AnalysisReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function analysisReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $showPayPeriodBreakdown = false,
        string $contentType = self::contentTypes['analysisReports'][0]
    ): array
    {
        $request = $this->analysisReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $showPayPeriodBreakdown, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AnalysisReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AnalysisReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AnalysisReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AnalysisReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AnalysisReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation analysisReportsAsync
     *
     * Analysis
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $showPayPeriodBreakdown If set to true, then the report will show a breakdown of each period for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analysisReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function analysisReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $showPayPeriodBreakdown = false,
        string $contentType = self::contentTypes['analysisReports'][0]
    ): PromiseInterface
    {
        return $this->analysisReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $showPayPeriodBreakdown, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation analysisReportsAsyncWithHttpInfo
     *
     * Analysis
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $showPayPeriodBreakdown If set to true, then the report will show a breakdown of each period for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analysisReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function analysisReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $showPayPeriodBreakdown = false,
        string $contentType = self::contentTypes['analysisReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AnalysisReportReportResponse';
        $request = $this->analysisReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $showPayPeriodBreakdown, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'analysisReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $showPayPeriodBreakdown If set to true, then the report will show a breakdown of each period for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['analysisReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function analysisReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $showPayPeriodBreakdown = false,
        string $contentType = self::contentTypes['analysisReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling analysisReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling analysisReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling analysisReports'
            );
        }








        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/analysis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptCode,
            'deptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showPayPeriodBreakdown,
            'showPayPeriodBreakdown', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apprenticeshipLevyDetailsReports
     *
     * Apprenticeship Levy Details
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear that the Apprenticeship Levy is for. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apprenticeshipLevyDetailsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function apprenticeshipLevyDetailsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['apprenticeshipLevyDetailsReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->apprenticeshipLevyDetailsReportsWithHttpInfo($employerId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation apprenticeshipLevyDetailsReportsWithHttpInfo
     *
     * Apprenticeship Levy Details
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear that the Apprenticeship Levy is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apprenticeshipLevyDetailsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apprenticeshipLevyDetailsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['apprenticeshipLevyDetailsReports'][0]
    ): array
    {
        $request = $this->apprenticeshipLevyDetailsReportsRequest($employerId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apprenticeshipLevyDetailsReportsAsync
     *
     * Apprenticeship Levy Details
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear that the Apprenticeship Levy is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apprenticeshipLevyDetailsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apprenticeshipLevyDetailsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['apprenticeshipLevyDetailsReports'][0]
    ): PromiseInterface
    {
        return $this->apprenticeshipLevyDetailsReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apprenticeshipLevyDetailsReportsAsyncWithHttpInfo
     *
     * Apprenticeship Levy Details
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear that the Apprenticeship Levy is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apprenticeshipLevyDetailsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apprenticeshipLevyDetailsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['apprenticeshipLevyDetailsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->apprenticeshipLevyDetailsReportsRequest($employerId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apprenticeshipLevyDetailsReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear that the Apprenticeship Levy is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apprenticeshipLevyDetailsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apprenticeshipLevyDetailsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['apprenticeshipLevyDetailsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling apprenticeshipLevyDetailsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling apprenticeshipLevyDetailsReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/apprenticeshiplevy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attachmentOrdersReports
     *
     * Attachment Orders
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachmentOrdersReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse
     */
    public function attachmentOrdersReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['attachmentOrdersReports'][0]
    ): \SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse
    {
        list($response) = $this->attachmentOrdersReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation attachmentOrdersReportsWithHttpInfo
     *
     * Attachment Orders
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachmentOrdersReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachmentOrdersReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['attachmentOrdersReports'][0]
    ): array
    {
        $request = $this->attachmentOrdersReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attachmentOrdersReportsAsync
     *
     * Attachment Orders
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachmentOrdersReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function attachmentOrdersReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['attachmentOrdersReports'][0]
    ): PromiseInterface
    {
        return $this->attachmentOrdersReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachmentOrdersReportsAsyncWithHttpInfo
     *
     * Attachment Orders
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachmentOrdersReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function attachmentOrdersReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['attachmentOrdersReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AttachmentOrdersReportReportResponse';
        $request = $this->attachmentOrdersReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachmentOrdersReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachmentOrdersReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachmentOrdersReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['attachmentOrdersReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling attachmentOrdersReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling attachmentOrdersReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling attachmentOrdersReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/attachmentorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation averageHolidayPayRateReports
     *
     * Average Holiday Pay Rate
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $period period (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageHolidayPayRateReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse
     */
    public function averageHolidayPayRateReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['averageHolidayPayRateReports'][0]
    ): \SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse
    {
        list($response) = $this->averageHolidayPayRateReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation averageHolidayPayRateReportsWithHttpInfo
     *
     * Average Holiday Pay Rate
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageHolidayPayRateReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function averageHolidayPayRateReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['averageHolidayPayRateReports'][0]
    ): array
    {
        $request = $this->averageHolidayPayRateReportsRequest($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation averageHolidayPayRateReportsAsync
     *
     * Average Holiday Pay Rate
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageHolidayPayRateReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function averageHolidayPayRateReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['averageHolidayPayRateReports'][0]
    ): PromiseInterface
    {
        return $this->averageHolidayPayRateReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation averageHolidayPayRateReportsAsyncWithHttpInfo
     *
     * Average Holiday Pay Rate
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageHolidayPayRateReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function averageHolidayPayRateReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['averageHolidayPayRateReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AverageHolidayPayRateReportReportResponse';
        $request = $this->averageHolidayPayRateReportsRequest($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'averageHolidayPayRateReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageHolidayPayRateReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function averageHolidayPayRateReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['averageHolidayPayRateReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling averageHolidayPayRateReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling averageHolidayPayRateReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling averageHolidayPayRateReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/averageholidaypayrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankPaymentInstructionsReports
     *
     * Bank Payment Instructions
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  \DateTime|null $paymentDate paymentDate (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $incPensions Set to true and we&#39;ll include any payment due to Pension Providers (optional, default to false)
     * @param  bool|null $incHmrc Set to true and we&#39;ll include any payment due to HMRC (optional, default to false)
     * @param  bool|null $incAeos Set to true and we&#39;ll include any payment due as a result of AttachmentOrders (optional, default to false)
     * @param  bool|null $incDeductions Set to true and we&#39;ll include any payment due to Deductions that are set to be paid to a Payee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankPaymentInstructionsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse
     */
    public function bankPaymentInstructionsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\DateTime $paymentDate = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $incPensions = false,
        ?bool $incHmrc = false,
        ?bool $incAeos = false,
        ?bool $incDeductions = false,
        string $contentType = self::contentTypes['bankPaymentInstructionsReports'][0]
    ): \SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse
    {
        list($response) = $this->bankPaymentInstructionsReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $paymentDate, $bankHoliday, $ordinal, $incPensions, $incHmrc, $incAeos, $incDeductions, $contentType);
        return $response;
    }

    /**
     * Operation bankPaymentInstructionsReportsWithHttpInfo
     *
     * Bank Payment Instructions
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $paymentDate (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $incPensions Set to true and we&#39;ll include any payment due to Pension Providers (optional, default to false)
     * @param  bool|null $incHmrc Set to true and we&#39;ll include any payment due to HMRC (optional, default to false)
     * @param  bool|null $incAeos Set to true and we&#39;ll include any payment due as a result of AttachmentOrders (optional, default to false)
     * @param  bool|null $incDeductions Set to true and we&#39;ll include any payment due to Deductions that are set to be paid to a Payee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankPaymentInstructionsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankPaymentInstructionsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\DateTime $paymentDate = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $incPensions = false,
        ?bool $incHmrc = false,
        ?bool $incAeos = false,
        ?bool $incDeductions = false,
        string $contentType = self::contentTypes['bankPaymentInstructionsReports'][0]
    ): array
    {
        $request = $this->bankPaymentInstructionsReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $paymentDate, $bankHoliday, $ordinal, $incPensions, $incHmrc, $incAeos, $incDeductions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankPaymentInstructionsReportsAsync
     *
     * Bank Payment Instructions
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $paymentDate (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $incPensions Set to true and we&#39;ll include any payment due to Pension Providers (optional, default to false)
     * @param  bool|null $incHmrc Set to true and we&#39;ll include any payment due to HMRC (optional, default to false)
     * @param  bool|null $incAeos Set to true and we&#39;ll include any payment due as a result of AttachmentOrders (optional, default to false)
     * @param  bool|null $incDeductions Set to true and we&#39;ll include any payment due to Deductions that are set to be paid to a Payee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankPaymentInstructionsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function bankPaymentInstructionsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\DateTime $paymentDate = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $incPensions = false,
        ?bool $incHmrc = false,
        ?bool $incAeos = false,
        ?bool $incDeductions = false,
        string $contentType = self::contentTypes['bankPaymentInstructionsReports'][0]
    ): PromiseInterface
    {
        return $this->bankPaymentInstructionsReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $paymentDate, $bankHoliday, $ordinal, $incPensions, $incHmrc, $incAeos, $incDeductions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankPaymentInstructionsReportsAsyncWithHttpInfo
     *
     * Bank Payment Instructions
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $paymentDate (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $incPensions Set to true and we&#39;ll include any payment due to Pension Providers (optional, default to false)
     * @param  bool|null $incHmrc Set to true and we&#39;ll include any payment due to HMRC (optional, default to false)
     * @param  bool|null $incAeos Set to true and we&#39;ll include any payment due as a result of AttachmentOrders (optional, default to false)
     * @param  bool|null $incDeductions Set to true and we&#39;ll include any payment due to Deductions that are set to be paid to a Payee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankPaymentInstructionsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function bankPaymentInstructionsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\DateTime $paymentDate = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $incPensions = false,
        ?bool $incHmrc = false,
        ?bool $incAeos = false,
        ?bool $incDeductions = false,
        string $contentType = self::contentTypes['bankPaymentInstructionsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\BankPaymentInstructionReportResponse';
        $request = $this->bankPaymentInstructionsReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $paymentDate, $bankHoliday, $ordinal, $incPensions, $incHmrc, $incAeos, $incDeductions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankPaymentInstructionsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $paymentDate (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $incPensions Set to true and we&#39;ll include any payment due to Pension Providers (optional, default to false)
     * @param  bool|null $incHmrc Set to true and we&#39;ll include any payment due to HMRC (optional, default to false)
     * @param  bool|null $incAeos Set to true and we&#39;ll include any payment due as a result of AttachmentOrders (optional, default to false)
     * @param  bool|null $incDeductions Set to true and we&#39;ll include any payment due to Deductions that are set to be paid to a Payee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankPaymentInstructionsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankPaymentInstructionsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\DateTime $paymentDate = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $incPensions = false,
        ?bool $incHmrc = false,
        ?bool $incAeos = false,
        ?bool $incDeductions = false,
        string $contentType = self::contentTypes['bankPaymentInstructionsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling bankPaymentInstructionsReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling bankPaymentInstructionsReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling bankPaymentInstructionsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling bankPaymentInstructionsReports'
            );
        }










        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payments/employee/credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentDate,
            'paymentDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bankHoliday?->value,
            'bankHoliday', // param base name
            'BankHolidayCollection', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incPensions,
            'incPensions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incHmrc,
            'incHmrc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incAeos,
            'incAeos', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incDeductions,
            'incDeductions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'application/zip', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesReports
     *
     * Gets audit changes of all employees within a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate fromDate (optional)
     * @param  \DateTime|null $toDate toDate (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ChangeSummaryListReportResponse
     */
    public function changesReports(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['changesReports'][0]
    ): \SynergiTech\Staffology\Model\ChangeSummaryListReportResponse
    {
        list($response) = $this->changesReportsWithHttpInfo($employerId, $fromDate, $toDate, $accept, $contentType);
        return $response;
    }

    /**
     * Operation changesReportsWithHttpInfo
     *
     * Gets audit changes of all employees within a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ChangeSummaryListReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function changesReportsWithHttpInfo(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['changesReports'][0]
    ): array
    {
        $request = $this->changesReportsRequest($employerId, $fromDate, $toDate, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesReportsAsync
     *
     * Gets audit changes of all employees within a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function changesReportsAsync(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['changesReports'][0]
    ): PromiseInterface
    {
        return $this->changesReportsAsyncWithHttpInfo($employerId, $fromDate, $toDate, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesReportsAsyncWithHttpInfo
     *
     * Gets audit changes of all employees within a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function changesReportsAsyncWithHttpInfo(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['changesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse';
        $request = $this->changesReportsRequest($employerId, $fromDate, $toDate, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesReports'
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changesReportsRequest(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['changesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling changesReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cis300Reports
     *
     * CIS300
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id The Id of CIS300. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cis300Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Cis300ReportResponse
     */
    public function cis300Reports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['cis300Reports'][0]
    ): \SynergiTech\Staffology\Model\Cis300ReportResponse
    {
        list($response) = $this->cis300ReportsWithHttpInfo($employerId, $taxYear, $id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation cis300ReportsWithHttpInfo
     *
     * CIS300
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of CIS300. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cis300Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Cis300ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cis300ReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['cis300Reports'][0]
    ): array
    {
        $request = $this->cis300ReportsRequest($employerId, $taxYear, $id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Cis300ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Cis300ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Cis300ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Cis300ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Cis300ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cis300ReportsAsync
     *
     * CIS300
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of CIS300. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cis300Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cis300ReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['cis300Reports'][0]
    ): PromiseInterface
    {
        return $this->cis300ReportsAsyncWithHttpInfo($employerId, $taxYear, $id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cis300ReportsAsyncWithHttpInfo
     *
     * CIS300
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of CIS300. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cis300Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cis300ReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['cis300Reports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Cis300ReportResponse';
        $request = $this->cis300ReportsRequest($employerId, $taxYear, $id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cis300Reports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of CIS300. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cis300Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cis300ReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['cis300Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling cis300Reports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling cis300Reports'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling cis300Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/cis300/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cisStatementReports
     *
     * CIS Statement
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int $taxMonth taxMonth (required)
     * @param  string|null $employeeId Specify an employeeId to get a single statement.              If you don&#39;t provide a value then all Subcontractors will be included. (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisStatementReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\CisStatementListReportResponse
     */
    public function cisStatementReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $taxMonth,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisStatementReports'][0]
    ): \SynergiTech\Staffology\Model\CisStatementListReportResponse
    {
        list($response) = $this->cisStatementReportsWithHttpInfo($employerId, $taxYear, $taxMonth, $employeeId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation cisStatementReportsWithHttpInfo
     *
     * CIS Statement
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $taxMonth (required)
     * @param  string|null $employeeId Specify an employeeId to get a single statement.              If you don&#39;t provide a value then all Subcontractors will be included. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisStatementReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\CisStatementListReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cisStatementReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $taxMonth,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisStatementReports'][0]
    ): array
    {
        $request = $this->cisStatementReportsRequest($employerId, $taxYear, $taxMonth, $employeeId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\CisStatementListReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\CisStatementListReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\CisStatementListReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\CisStatementListReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\CisStatementListReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cisStatementReportsAsync
     *
     * CIS Statement
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $taxMonth (required)
     * @param  string|null $employeeId Specify an employeeId to get a single statement.              If you don&#39;t provide a value then all Subcontractors will be included. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisStatementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cisStatementReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $taxMonth,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisStatementReports'][0]
    ): PromiseInterface
    {
        return $this->cisStatementReportsAsyncWithHttpInfo($employerId, $taxYear, $taxMonth, $employeeId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cisStatementReportsAsyncWithHttpInfo
     *
     * CIS Statement
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $taxMonth (required)
     * @param  string|null $employeeId Specify an employeeId to get a single statement.              If you don&#39;t provide a value then all Subcontractors will be included. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisStatementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cisStatementReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $taxMonth,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisStatementReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\CisStatementListReportResponse';
        $request = $this->cisStatementReportsRequest($employerId, $taxYear, $taxMonth, $employeeId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cisStatementReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $taxMonth (required)
     * @param  string|null $employeeId Specify an employeeId to get a single statement.              If you don&#39;t provide a value then all Subcontractors will be included. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisStatementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cisStatementReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $taxMonth,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisStatementReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling cisStatementReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling cisStatementReports'
            );
        }

        // verify the required parameter 'taxMonth' is set
        if ($taxMonth === null || (is_array($taxMonth) && count($taxMonth) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxMonth when calling cisStatementReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/cisstatement/{taxMonth}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($taxMonth !== null) {
            $resourcePath = str_replace(
                '{' . 'taxMonth' . '}',
                ObjectSerializer::toPathValue($taxMonth),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cisSubContractorSummaryReports
     *
     * CIS Subcontractor Summary
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisSubContractorSummaryReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse
     */
    public function cisSubContractorSummaryReports(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisSubContractorSummaryReports'][0]
    ): \SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse
    {
        list($response) = $this->cisSubContractorSummaryReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation cisSubContractorSummaryReportsWithHttpInfo
     *
     * CIS Subcontractor Summary
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisSubContractorSummaryReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cisSubContractorSummaryReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisSubContractorSummaryReports'][0]
    ): array
    {
        $request = $this->cisSubContractorSummaryReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cisSubContractorSummaryReportsAsync
     *
     * CIS Subcontractor Summary
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisSubContractorSummaryReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cisSubContractorSummaryReportsAsync(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisSubContractorSummaryReports'][0]
    ): PromiseInterface
    {
        return $this->cisSubContractorSummaryReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cisSubContractorSummaryReportsAsyncWithHttpInfo
     *
     * CIS Subcontractor Summary
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisSubContractorSummaryReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cisSubContractorSummaryReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisSubContractorSummaryReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\CisSubContractorSummaryListReportResponse';
        $request = $this->cisSubContractorSummaryReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cisSubContractorSummaryReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cisSubContractorSummaryReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cisSubContractorSummaryReportsRequest(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['cisSubContractorSummaryReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling cisSubContractorSummaryReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/cissummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'text/html', 'text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation costAnalysisReports
     *
     * Cost Analysis
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costAnalysisReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\CostAnalysisReportReportResponse
     */
    public function costAnalysisReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costAnalysisReports'][0]
    ): \SynergiTech\Staffology\Model\CostAnalysisReportReportResponse
    {
        list($response) = $this->costAnalysisReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation costAnalysisReportsWithHttpInfo
     *
     * Cost Analysis
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costAnalysisReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\CostAnalysisReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function costAnalysisReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costAnalysisReports'][0]
    ): array
    {
        $request = $this->costAnalysisReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\CostAnalysisReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\CostAnalysisReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\CostAnalysisReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\CostAnalysisReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\CostAnalysisReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation costAnalysisReportsAsync
     *
     * Cost Analysis
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costAnalysisReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function costAnalysisReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costAnalysisReports'][0]
    ): PromiseInterface
    {
        return $this->costAnalysisReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation costAnalysisReportsAsyncWithHttpInfo
     *
     * Cost Analysis
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costAnalysisReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function costAnalysisReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costAnalysisReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\CostAnalysisReportReportResponse';
        $request = $this->costAnalysisReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'costAnalysisReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costAnalysisReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function costAnalysisReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costAnalysisReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling costAnalysisReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling costAnalysisReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling costAnalysisReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/costanalysis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation costOfEmploymentReports
     *
     * Cost Of Employment
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costOfEmploymentReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse
     */
    public function costOfEmploymentReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costOfEmploymentReports'][0]
    ): \SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse
    {
        list($response) = $this->costOfEmploymentReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation costOfEmploymentReportsWithHttpInfo
     *
     * Cost Of Employment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costOfEmploymentReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function costOfEmploymentReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costOfEmploymentReports'][0]
    ): array
    {
        $request = $this->costOfEmploymentReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation costOfEmploymentReportsAsync
     *
     * Cost Of Employment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costOfEmploymentReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function costOfEmploymentReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costOfEmploymentReports'][0]
    ): PromiseInterface
    {
        return $this->costOfEmploymentReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation costOfEmploymentReportsAsyncWithHttpInfo
     *
     * Cost Of Employment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costOfEmploymentReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function costOfEmploymentReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costOfEmploymentReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\CostOfEmploymentReportReportResponse';
        $request = $this->costOfEmploymentReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'costOfEmploymentReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['costOfEmploymentReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function costOfEmploymentReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['costOfEmploymentReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling costOfEmploymentReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling costOfEmploymentReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling costOfEmploymentReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/costofemployment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadMaternitySchedulesReports
     *
     * Download Maternity Payment Schedule
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $employeeId employeeId (optional)
     * @param  string|null $id id (optional)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadMaternitySchedulesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function downloadMaternitySchedulesReports(
        string $employerId,
        ?string $employeeId = null,
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['downloadMaternitySchedulesReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->downloadMaternitySchedulesReportsWithHttpInfo($employerId, $employeeId, $id, $leave, $contentType);
        return $response;
    }

    /**
     * Operation downloadMaternitySchedulesReportsWithHttpInfo
     *
     * Download Maternity Payment Schedule
     *
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $id (optional)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadMaternitySchedulesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadMaternitySchedulesReportsWithHttpInfo(
        string $employerId,
        ?string $employeeId = null,
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['downloadMaternitySchedulesReports'][0]
    ): array
    {
        $request = $this->downloadMaternitySchedulesReportsRequest($employerId, $employeeId, $id, $leave, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadMaternitySchedulesReportsAsync
     *
     * Download Maternity Payment Schedule
     *
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $id (optional)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadMaternitySchedulesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadMaternitySchedulesReportsAsync(
        string $employerId,
        ?string $employeeId = null,
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['downloadMaternitySchedulesReports'][0]
    ): PromiseInterface
    {
        return $this->downloadMaternitySchedulesReportsAsyncWithHttpInfo($employerId, $employeeId, $id, $leave, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadMaternitySchedulesReportsAsyncWithHttpInfo
     *
     * Download Maternity Payment Schedule
     *
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $id (optional)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadMaternitySchedulesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadMaternitySchedulesReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $employeeId = null,
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['downloadMaternitySchedulesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->downloadMaternitySchedulesReportsRequest($employerId, $employeeId, $id, $leave, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadMaternitySchedulesReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $id (optional)
     * @param  \SynergiTech\Staffology\Model\Leave|null $leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadMaternitySchedulesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadMaternitySchedulesReportsRequest(
        string $employerId,
        ?string $employeeId = null,
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\Leave $leave = null,
        string $contentType = self::contentTypes['downloadMaternitySchedulesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling downloadMaternitySchedulesReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/downloadmaternityschedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave));
            } else {
                $httpBody = $leave;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailP11DMultipleReports
     *
     * Email P11D to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  bool|null $excludeEmployeesWithP11DEmailSent Exclude Employees with Already Sent P11D Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DMultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailP11DMultipleReports(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP11DEmailSent = false,
        string $contentType = self::contentTypes['emailP11DMultipleReports'][0]
    ): void
    {
        $this->emailP11DMultipleReportsWithHttpInfo($employerId, $taxYear, $excludeEmployeesWithP11DEmailSent, $contentType);
    }

    /**
     * Operation emailP11DMultipleReportsWithHttpInfo
     *
     * Email P11D to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  bool|null $excludeEmployeesWithP11DEmailSent Exclude Employees with Already Sent P11D Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DMultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailP11DMultipleReportsWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP11DEmailSent = false,
        string $contentType = self::contentTypes['emailP11DMultipleReports'][0]
    ): array
    {
        $request = $this->emailP11DMultipleReportsRequest($employerId, $taxYear, $excludeEmployeesWithP11DEmailSent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailP11DMultipleReportsAsync
     *
     * Email P11D to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  bool|null $excludeEmployeesWithP11DEmailSent Exclude Employees with Already Sent P11D Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP11DMultipleReportsAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP11DEmailSent = false,
        string $contentType = self::contentTypes['emailP11DMultipleReports'][0]
    ): PromiseInterface
    {
        return $this->emailP11DMultipleReportsAsyncWithHttpInfo($employerId, $taxYear, $excludeEmployeesWithP11DEmailSent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailP11DMultipleReportsAsyncWithHttpInfo
     *
     * Email P11D to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  bool|null $excludeEmployeesWithP11DEmailSent Exclude Employees with Already Sent P11D Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP11DMultipleReportsAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP11DEmailSent = false,
        string $contentType = self::contentTypes['emailP11DMultipleReports'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailP11DMultipleReportsRequest($employerId, $taxYear, $excludeEmployeesWithP11DEmailSent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailP11DMultipleReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  bool|null $excludeEmployeesWithP11DEmailSent Exclude Employees with Already Sent P11D Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailP11DMultipleReportsRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP11DEmailSent = false,
        string $contentType = self::contentTypes['emailP11DMultipleReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailP11DMultipleReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/p11d/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeEmployeesWithP11DEmailSent,
            'excludeEmployeesWithP11DEmailSent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailP11DReports
     *
     * Email P11D to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P11D to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailP11DReports(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP11DReports'][0]
    ): void
    {
        $this->emailP11DReportsWithHttpInfo($employerId, $employeeId, $taxYear, $contentType);
    }

    /**
     * Operation emailP11DReportsWithHttpInfo
     *
     * Email P11D to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P11D to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailP11DReportsWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP11DReports'][0]
    ): array
    {
        $request = $this->emailP11DReportsRequest($employerId, $employeeId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailP11DReportsAsync
     *
     * Email P11D to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P11D to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP11DReportsAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP11DReports'][0]
    ): PromiseInterface
    {
        return $this->emailP11DReportsAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailP11DReportsAsyncWithHttpInfo
     *
     * Email P11D to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P11D to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP11DReportsAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP11DReports'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailP11DReportsRequest($employerId, $employeeId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailP11DReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P11D to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P11Ds for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP11DReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailP11DReportsRequest(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP11DReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailP11DReports'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling emailP11DReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/p11d/email/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailP45Reports
     *
     * Email P45 to Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want the email a P45 to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP45Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailP45Reports(
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['emailP45Reports'][0]
    ): void
    {
        $this->emailP45ReportsWithHttpInfo($employerId, $employeeId, $contentType);
    }

    /**
     * Operation emailP45ReportsWithHttpInfo
     *
     * Email P45 to Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want the email a P45 to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP45Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailP45ReportsWithHttpInfo(
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['emailP45Reports'][0]
    ): array
    {
        $request = $this->emailP45ReportsRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailP45ReportsAsync
     *
     * Email P45 to Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want the email a P45 to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP45Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP45ReportsAsync(
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['emailP45Reports'][0]
    ): PromiseInterface
    {
        return $this->emailP45ReportsAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailP45ReportsAsyncWithHttpInfo
     *
     * Email P45 to Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want the email a P45 to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP45Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP45ReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['emailP45Reports'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailP45ReportsRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailP45Reports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want the email a P45 to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP45Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailP45ReportsRequest(
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['emailP45Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailP45Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/p45/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailP60MultipleReports
     *
     * Email P60 to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60MultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailP60MultipleReports(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['emailP60MultipleReports'][0]
    ): void
    {
        $this->emailP60MultipleReportsWithHttpInfo($employerId, $taxYear, $excludeEmployeesWithP60EmailSent, $contentType);
    }

    /**
     * Operation emailP60MultipleReportsWithHttpInfo
     *
     * Email P60 to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60MultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailP60MultipleReportsWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['emailP60MultipleReports'][0]
    ): array
    {
        $request = $this->emailP60MultipleReportsRequest($employerId, $taxYear, $excludeEmployeesWithP60EmailSent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailP60MultipleReportsAsync
     *
     * Email P60 to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60MultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP60MultipleReportsAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['emailP60MultipleReports'][0]
    ): PromiseInterface
    {
        return $this->emailP60MultipleReportsAsyncWithHttpInfo($employerId, $taxYear, $excludeEmployeesWithP60EmailSent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailP60MultipleReportsAsyncWithHttpInfo
     *
     * Email P60 to all Employees
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60MultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP60MultipleReportsAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['emailP60MultipleReports'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailP60MultipleReportsRequest($employerId, $taxYear, $excludeEmployeesWithP60EmailSent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailP60MultipleReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60MultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailP60MultipleReportsRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['emailP60MultipleReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailP60MultipleReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/p60/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeEmployeesWithP60EmailSent,
            'excludeEmployeesWithP60EmailSent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailP60Reports
     *
     * Email P60 to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P60 to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailP60Reports(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP60Reports'][0]
    ): void
    {
        $this->emailP60ReportsWithHttpInfo($employerId, $employeeId, $taxYear, $contentType);
    }

    /**
     * Operation emailP60ReportsWithHttpInfo
     *
     * Email P60 to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P60 to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailP60ReportsWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP60Reports'][0]
    ): array
    {
        $request = $this->emailP60ReportsRequest($employerId, $employeeId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailP60ReportsAsync
     *
     * Email P60 to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P60 to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP60ReportsAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP60Reports'][0]
    ): PromiseInterface
    {
        return $this->emailP60ReportsAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailP60ReportsAsyncWithHttpInfo
     *
     * Email P60 to an Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P60 to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailP60ReportsAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP60Reports'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailP60ReportsRequest($employerId, $employeeId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailP60Reports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee you want the email a P60 to. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The TaxYear you want P60s for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailP60Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailP60ReportsRequest(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['emailP60Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailP60Reports'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling emailP60Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/p60/email/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeBenefitsReports
     *
     * Employee Benefits
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $reportType reportType (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeBenefitsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse
     */
    public function employeeBenefitsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $reportType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeBenefitsReports'][0]
    ): \SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse
    {
        list($response) = $this->employeeBenefitsReportsWithHttpInfo($employerId, $taxYear, $reportType, $accept, $contentType);
        return $response;
    }

    /**
     * Operation employeeBenefitsReportsWithHttpInfo
     *
     * Employee Benefits
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $reportType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeBenefitsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeBenefitsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $reportType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeBenefitsReports'][0]
    ): array
    {
        $request = $this->employeeBenefitsReportsRequest($employerId, $taxYear, $reportType, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeBenefitsReportsAsync
     *
     * Employee Benefits
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $reportType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeBenefitsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeBenefitsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $reportType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeBenefitsReports'][0]
    ): PromiseInterface
    {
        return $this->employeeBenefitsReportsAsyncWithHttpInfo($employerId, $taxYear, $reportType, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeBenefitsReportsAsyncWithHttpInfo
     *
     * Employee Benefits
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $reportType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeBenefitsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeBenefitsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $reportType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeBenefitsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeBenefitsReportReportResponse';
        $request = $this->employeeBenefitsReportsRequest($employerId, $taxYear, $reportType, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeBenefitsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $reportType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeBenefitsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeBenefitsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $reportType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeBenefitsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employeeBenefitsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling employeeBenefitsReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/EmployeeBenefits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reportType,
            'reportType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeExportReports
     *
     * Employee Export Details
     *
     * @param  string|null $employerId employerId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  bool|null $includeBankAccountDetails includeBankAccountDetails (optional)
     * @param  bool|null $includeYtd includeYtd (optional)
     * @param  bool|null $incPensionInfo incPensionInfo (optional)
     * @param  bool|null $includePayInfo includePayInfo (optional)
     * @param  bool|null $includeNotes includeNotes (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function employeeExportReports(
        ?string $employerId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $includeBankAccountDetails = null,
        ?bool $includeYtd = null,
        ?bool $incPensionInfo = null,
        ?bool $includePayInfo = null,
        ?bool $includeNotes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeExportReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->employeeExportReportsWithHttpInfo($employerId, $taxYear, $includeBankAccountDetails, $includeYtd, $incPensionInfo, $includePayInfo, $includeNotes, $accept, $contentType);
        return $response;
    }

    /**
     * Operation employeeExportReportsWithHttpInfo
     *
     * Employee Export Details
     *
     * @param  string|null $employerId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $includeBankAccountDetails (optional)
     * @param  bool|null $includeYtd (optional)
     * @param  bool|null $incPensionInfo (optional)
     * @param  bool|null $includePayInfo (optional)
     * @param  bool|null $includeNotes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeExportReportsWithHttpInfo(
        ?string $employerId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $includeBankAccountDetails = null,
        ?bool $includeYtd = null,
        ?bool $incPensionInfo = null,
        ?bool $includePayInfo = null,
        ?bool $includeNotes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeExportReports'][0]
    ): array
    {
        $request = $this->employeeExportReportsRequest($employerId, $taxYear, $includeBankAccountDetails, $includeYtd, $incPensionInfo, $includePayInfo, $includeNotes, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeExportReportsAsync
     *
     * Employee Export Details
     *
     * @param  string|null $employerId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $includeBankAccountDetails (optional)
     * @param  bool|null $includeYtd (optional)
     * @param  bool|null $incPensionInfo (optional)
     * @param  bool|null $includePayInfo (optional)
     * @param  bool|null $includeNotes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeExportReportsAsync(
        ?string $employerId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $includeBankAccountDetails = null,
        ?bool $includeYtd = null,
        ?bool $incPensionInfo = null,
        ?bool $includePayInfo = null,
        ?bool $includeNotes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeExportReports'][0]
    ): PromiseInterface
    {
        return $this->employeeExportReportsAsyncWithHttpInfo($employerId, $taxYear, $includeBankAccountDetails, $includeYtd, $incPensionInfo, $includePayInfo, $includeNotes, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeExportReportsAsyncWithHttpInfo
     *
     * Employee Export Details
     *
     * @param  string|null $employerId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $includeBankAccountDetails (optional)
     * @param  bool|null $includeYtd (optional)
     * @param  bool|null $incPensionInfo (optional)
     * @param  bool|null $includePayInfo (optional)
     * @param  bool|null $includeNotes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeExportReportsAsyncWithHttpInfo(
        ?string $employerId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $includeBankAccountDetails = null,
        ?bool $includeYtd = null,
        ?bool $incPensionInfo = null,
        ?bool $includePayInfo = null,
        ?bool $includeNotes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeExportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->employeeExportReportsRequest($employerId, $taxYear, $includeBankAccountDetails, $includeYtd, $incPensionInfo, $includePayInfo, $includeNotes, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeExportReports'
     *
     * @param  string|null $employerId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $includeBankAccountDetails (optional)
     * @param  bool|null $includeYtd (optional)
     * @param  bool|null $incPensionInfo (optional)
     * @param  bool|null $includePayInfo (optional)
     * @param  bool|null $includeNotes (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeExportReportsRequest(
        ?string $employerId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $includeBankAccountDetails = null,
        ?bool $includeYtd = null,
        ?bool $incPensionInfo = null,
        ?bool $includePayInfo = null,
        ?bool $includeNotes = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeExportReports'][0]
    ): Request
    {










        $resourcePath = '/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employerId,
            'employerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeBankAccountDetails,
            'includeBankAccountDetails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeYtd,
            'includeYtd', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incPensionInfo,
            'incPensionInfo', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includePayInfo,
            'includePayInfo', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeNotes,
            'includeNotes', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeLeaveReports
     *
     * Employee Leave
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLeaveReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse
     */
    public function employeeLeaveReports(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeLeaveReports'][0]
    ): \SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse
    {
        list($response) = $this->employeeLeaveReportsWithHttpInfo($employerId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation employeeLeaveReportsWithHttpInfo
     *
     * Employee Leave
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLeaveReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeLeaveReportsWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeLeaveReports'][0]
    ): array
    {
        $request = $this->employeeLeaveReportsRequest($employerId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeLeaveReportsAsync
     *
     * Employee Leave
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLeaveReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeLeaveReportsAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeLeaveReports'][0]
    ): PromiseInterface
    {
        return $this->employeeLeaveReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeLeaveReportsAsyncWithHttpInfo
     *
     * Employee Leave
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLeaveReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeLeaveReportsAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeLeaveReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeLeaveReportReportResponse';
        $request = $this->employeeLeaveReportsRequest($employerId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeLeaveReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLeaveReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeLeaveReportsRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeLeaveReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employeeLeaveReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/employeeleave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeRoleExportReports
     *
     * Employee Export Roles Details
     *
     * @param  string|null $employerId employerId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeRoleExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function employeeRoleExportReports(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeRoleExportReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->employeeRoleExportReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation employeeRoleExportReportsWithHttpInfo
     *
     * Employee Export Roles Details
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeRoleExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeRoleExportReportsWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeRoleExportReports'][0]
    ): array
    {
        $request = $this->employeeRoleExportReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeRoleExportReportsAsync
     *
     * Employee Export Roles Details
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeRoleExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeRoleExportReportsAsync(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeRoleExportReports'][0]
    ): PromiseInterface
    {
        return $this->employeeRoleExportReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeRoleExportReportsAsyncWithHttpInfo
     *
     * Employee Export Roles Details
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeRoleExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeRoleExportReportsAsyncWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeRoleExportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->employeeRoleExportReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeRoleExportReports'
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeRoleExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeRoleExportReportsRequest(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employeeRoleExportReports'][0]
    ): Request
    {




        $resourcePath = '/employeeroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employerId,
            'employerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employerChangesReports
     *
     * Gets audit changes for a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate fromDate (optional)
     * @param  \DateTime|null $toDate toDate (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerChangesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ChangeSummaryListReportResponse
     */
    public function employerChangesReports(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerChangesReports'][0]
    ): \SynergiTech\Staffology\Model\ChangeSummaryListReportResponse
    {
        list($response) = $this->employerChangesReportsWithHttpInfo($employerId, $fromDate, $toDate, $accept, $contentType);
        return $response;
    }

    /**
     * Operation employerChangesReportsWithHttpInfo
     *
     * Gets audit changes for a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerChangesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ChangeSummaryListReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function employerChangesReportsWithHttpInfo(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerChangesReports'][0]
    ): array
    {
        $request = $this->employerChangesReportsRequest($employerId, $fromDate, $toDate, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employerChangesReportsAsync
     *
     * Gets audit changes for a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerChangesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerChangesReportsAsync(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerChangesReports'][0]
    ): PromiseInterface
    {
        return $this->employerChangesReportsAsyncWithHttpInfo($employerId, $fromDate, $toDate, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employerChangesReportsAsyncWithHttpInfo
     *
     * Gets audit changes for a company.
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerChangesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerChangesReportsAsyncWithHttpInfo(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerChangesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ChangeSummaryListReportResponse';
        $request = $this->employerChangesReportsRequest($employerId, $fromDate, $toDate, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employerChangesReports'
     *
     * @param  string $employerId The Id of any employer to which you have access. (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerChangesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employerChangesReportsRequest(
        string $employerId,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerChangesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employerChangesReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/employerchanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employerExportReports
     *
     * Employer Export
     *
     * @param  string $employerId The Id of any employer to which you have access. It wont affect the report results. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function employerExportReports(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerExportReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->employerExportReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation employerExportReportsWithHttpInfo
     *
     * Employer Export
     *
     * @param  string $employerId The Id of any employer to which you have access. It wont affect the report results. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function employerExportReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerExportReports'][0]
    ): array
    {
        $request = $this->employerExportReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employerExportReportsAsync
     *
     * Employer Export
     *
     * @param  string $employerId The Id of any employer to which you have access. It wont affect the report results. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerExportReportsAsync(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerExportReports'][0]
    ): PromiseInterface
    {
        return $this->employerExportReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employerExportReportsAsyncWithHttpInfo
     *
     * Employer Export
     *
     * @param  string $employerId The Id of any employer to which you have access. It wont affect the report results. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerExportReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerExportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->employerExportReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employerExportReports'
     *
     * @param  string $employerId The Id of any employer to which you have access. It wont affect the report results. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employerExportReportsRequest(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['employerExportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employerExportReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/employers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examplePayslipReports
     *
     * Example Payslip
     *
     * @param  string|null $employerId employerId (optional)
     * @param  string|null $accept accept (optional)
     * @param  \SynergiTech\Staffology\Model\PayslipCustomisation|null $payslipCustomisation Your PayslipCustomisation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['examplePayslipReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function examplePayslipReports(
        ?string $employerId = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\PayslipCustomisation $payslipCustomisation = null,
        string $contentType = self::contentTypes['examplePayslipReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->examplePayslipReportsWithHttpInfo($employerId, $accept, $payslipCustomisation, $contentType);
        return $response;
    }

    /**
     * Operation examplePayslipReportsWithHttpInfo
     *
     * Example Payslip
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\PayslipCustomisation|null $payslipCustomisation Your PayslipCustomisation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['examplePayslipReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function examplePayslipReportsWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\PayslipCustomisation $payslipCustomisation = null,
        string $contentType = self::contentTypes['examplePayslipReports'][0]
    ): array
    {
        $request = $this->examplePayslipReportsRequest($employerId, $accept, $payslipCustomisation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examplePayslipReportsAsync
     *
     * Example Payslip
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\PayslipCustomisation|null $payslipCustomisation Your PayslipCustomisation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['examplePayslipReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function examplePayslipReportsAsync(
        ?string $employerId = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\PayslipCustomisation $payslipCustomisation = null,
        string $contentType = self::contentTypes['examplePayslipReports'][0]
    ): PromiseInterface
    {
        return $this->examplePayslipReportsAsyncWithHttpInfo($employerId, $accept, $payslipCustomisation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examplePayslipReportsAsyncWithHttpInfo
     *
     * Example Payslip
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\PayslipCustomisation|null $payslipCustomisation Your PayslipCustomisation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['examplePayslipReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function examplePayslipReportsAsyncWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\PayslipCustomisation $payslipCustomisation = null,
        string $contentType = self::contentTypes['examplePayslipReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->examplePayslipReportsRequest($employerId, $accept, $payslipCustomisation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examplePayslipReports'
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\PayslipCustomisation|null $payslipCustomisation Your PayslipCustomisation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['examplePayslipReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function examplePayslipReportsRequest(
        ?string $employerId = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\PayslipCustomisation $payslipCustomisation = null,
        string $contentType = self::contentTypes['examplePayslipReports'][0]
    ): Request
    {





        $resourcePath = '/payslip/example/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employerId,
            'employerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payslipCustomisation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payslipCustomisation));
            } else {
                $httpBody = $payslipCustomisation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exbReports
     *
     * EXB
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id The Id of EXB. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exbReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ExbReportResponse
     */
    public function exbReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['exbReports'][0]
    ): \SynergiTech\Staffology\Model\ExbReportResponse
    {
        list($response) = $this->exbReportsWithHttpInfo($employerId, $taxYear, $id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation exbReportsWithHttpInfo
     *
     * EXB
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of EXB. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exbReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ExbReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function exbReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['exbReports'][0]
    ): array
    {
        $request = $this->exbReportsRequest($employerId, $taxYear, $id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ExbReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ExbReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ExbReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ExbReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ExbReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exbReportsAsync
     *
     * EXB
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of EXB. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exbReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exbReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['exbReports'][0]
    ): PromiseInterface
    {
        return $this->exbReportsAsyncWithHttpInfo($employerId, $taxYear, $id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exbReportsAsyncWithHttpInfo
     *
     * EXB
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of EXB. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exbReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exbReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['exbReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ExbReportResponse';
        $request = $this->exbReportsRequest($employerId, $taxYear, $id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exbReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of EXB. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exbReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exbReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['exbReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling exbReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling exbReports'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling exbReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/exb/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fpsReports
     *
     * FPS
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id The Id of FPS. (required)
     * @param  bool|null $incAllEmployees If true, then any employees that were paid earlier in the year but not on this FPS will also be included (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fpsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\FpsReportResponse
     */
    public function fpsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?bool $incAllEmployees = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['fpsReports'][0]
    ): \SynergiTech\Staffology\Model\FpsReportResponse
    {
        list($response) = $this->fpsReportsWithHttpInfo($employerId, $taxYear, $id, $incAllEmployees, $accept, $contentType);
        return $response;
    }

    /**
     * Operation fpsReportsWithHttpInfo
     *
     * FPS
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of FPS. (required)
     * @param  bool|null $incAllEmployees If true, then any employees that were paid earlier in the year but not on this FPS will also be included (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fpsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\FpsReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fpsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?bool $incAllEmployees = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['fpsReports'][0]
    ): array
    {
        $request = $this->fpsReportsRequest($employerId, $taxYear, $id, $incAllEmployees, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\FpsReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\FpsReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\FpsReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\FpsReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\FpsReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fpsReportsAsync
     *
     * FPS
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of FPS. (required)
     * @param  bool|null $incAllEmployees If true, then any employees that were paid earlier in the year but not on this FPS will also be included (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fpsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function fpsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?bool $incAllEmployees = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['fpsReports'][0]
    ): PromiseInterface
    {
        return $this->fpsReportsAsyncWithHttpInfo($employerId, $taxYear, $id, $incAllEmployees, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fpsReportsAsyncWithHttpInfo
     *
     * FPS
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of FPS. (required)
     * @param  bool|null $incAllEmployees If true, then any employees that were paid earlier in the year but not on this FPS will also be included (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fpsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function fpsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?bool $incAllEmployees = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['fpsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\FpsReportResponse';
        $request = $this->fpsReportsRequest($employerId, $taxYear, $id, $incAllEmployees, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fpsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of FPS. (required)
     * @param  bool|null $incAllEmployees If true, then any employees that were paid earlier in the year but not on this FPS will also be included (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fpsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fpsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?bool $incAllEmployees = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['fpsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling fpsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling fpsReports'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling fpsReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/fps/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incAllEmployees,
            'incAllEmployees', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullSummaryOfPayReports
     *
     * Cost Of Employment
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $period period (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullSummaryOfPayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse
     */
    public function fullSummaryOfPayReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['fullSummaryOfPayReports'][0]
    ): \SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse
    {
        list($response) = $this->fullSummaryOfPayReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation fullSummaryOfPayReportsWithHttpInfo
     *
     * Cost Of Employment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullSummaryOfPayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullSummaryOfPayReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['fullSummaryOfPayReports'][0]
    ): array
    {
        $request = $this->fullSummaryOfPayReportsRequest($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullSummaryOfPayReportsAsync
     *
     * Cost Of Employment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullSummaryOfPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function fullSummaryOfPayReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['fullSummaryOfPayReports'][0]
    ): PromiseInterface
    {
        return $this->fullSummaryOfPayReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullSummaryOfPayReportsAsyncWithHttpInfo
     *
     * Cost Of Employment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullSummaryOfPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function fullSummaryOfPayReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['fullSummaryOfPayReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\FullSummaryOfPayReportReportResponse';
        $request = $this->fullSummaryOfPayReportsRequest($employerId, $payPeriod, $taxYear, $period, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullSummaryOfPayReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $period (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullSummaryOfPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullSummaryOfPayReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $period = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['fullSummaryOfPayReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling fullSummaryOfPayReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling fullSummaryOfPayReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling fullSummaryOfPayReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/fullsummaryofpay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation furloughReportReports
     *
     * FurloughReport
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['furloughReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\FurloughReportReportResponse
     */
    public function furloughReportReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['furloughReportReports'][0]
    ): \SynergiTech\Staffology\Model\FurloughReportReportResponse
    {
        list($response) = $this->furloughReportReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation furloughReportReportsWithHttpInfo
     *
     * FurloughReport
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['furloughReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\FurloughReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function furloughReportReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['furloughReportReports'][0]
    ): array
    {
        $request = $this->furloughReportReportsRequest($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\FurloughReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\FurloughReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\FurloughReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\FurloughReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\FurloughReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation furloughReportReportsAsync
     *
     * FurloughReport
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['furloughReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function furloughReportReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['furloughReportReports'][0]
    ): PromiseInterface
    {
        return $this->furloughReportReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation furloughReportReportsAsyncWithHttpInfo
     *
     * FurloughReport
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['furloughReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function furloughReportReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['furloughReportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\FurloughReportReportResponse';
        $request = $this->furloughReportReportsRequest($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'furloughReportReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['furloughReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function furloughReportReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['furloughReportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling furloughReportReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling furloughReportReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling furloughReportReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling furloughReportReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/furlough';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genderPayGapReports
     *
     * Gender Pay Gap
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  \SynergiTech\Staffology\Model\GenderPayGapSnapShotDate|null $genderPayGapSnapShotDate genderPayGapSnapShotDate (optional)
     * @param  string|null $ordinaryPayCodeSetId ordinaryPayCodeSetId (optional)
     * @param  string|null $bonusPayCodeSetId bonusPayCodeSetId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genderPayGapReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\GenderPayGapReportReportResponse
     */
    public function genderPayGapReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\GenderPayGapSnapShotDate $genderPayGapSnapShotDate = null,
        ?string $ordinaryPayCodeSetId = null,
        ?string $bonusPayCodeSetId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['genderPayGapReports'][0]
    ): \SynergiTech\Staffology\Model\GenderPayGapReportReportResponse
    {
        list($response) = $this->genderPayGapReportsWithHttpInfo($employerId, $taxYear, $genderPayGapSnapShotDate, $ordinaryPayCodeSetId, $bonusPayCodeSetId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation genderPayGapReportsWithHttpInfo
     *
     * Gender Pay Gap
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\GenderPayGapSnapShotDate|null $genderPayGapSnapShotDate (optional)
     * @param  string|null $ordinaryPayCodeSetId (optional)
     * @param  string|null $bonusPayCodeSetId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genderPayGapReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\GenderPayGapReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function genderPayGapReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\GenderPayGapSnapShotDate $genderPayGapSnapShotDate = null,
        ?string $ordinaryPayCodeSetId = null,
        ?string $bonusPayCodeSetId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['genderPayGapReports'][0]
    ): array
    {
        $request = $this->genderPayGapReportsRequest($employerId, $taxYear, $genderPayGapSnapShotDate, $ordinaryPayCodeSetId, $bonusPayCodeSetId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\GenderPayGapReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\GenderPayGapReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\GenderPayGapReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\GenderPayGapReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\GenderPayGapReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genderPayGapReportsAsync
     *
     * Gender Pay Gap
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\GenderPayGapSnapShotDate|null $genderPayGapSnapShotDate (optional)
     * @param  string|null $ordinaryPayCodeSetId (optional)
     * @param  string|null $bonusPayCodeSetId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genderPayGapReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function genderPayGapReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\GenderPayGapSnapShotDate $genderPayGapSnapShotDate = null,
        ?string $ordinaryPayCodeSetId = null,
        ?string $bonusPayCodeSetId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['genderPayGapReports'][0]
    ): PromiseInterface
    {
        return $this->genderPayGapReportsAsyncWithHttpInfo($employerId, $taxYear, $genderPayGapSnapShotDate, $ordinaryPayCodeSetId, $bonusPayCodeSetId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genderPayGapReportsAsyncWithHttpInfo
     *
     * Gender Pay Gap
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\GenderPayGapSnapShotDate|null $genderPayGapSnapShotDate (optional)
     * @param  string|null $ordinaryPayCodeSetId (optional)
     * @param  string|null $bonusPayCodeSetId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genderPayGapReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function genderPayGapReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\GenderPayGapSnapShotDate $genderPayGapSnapShotDate = null,
        ?string $ordinaryPayCodeSetId = null,
        ?string $bonusPayCodeSetId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['genderPayGapReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\GenderPayGapReportReportResponse';
        $request = $this->genderPayGapReportsRequest($employerId, $taxYear, $genderPayGapSnapShotDate, $ordinaryPayCodeSetId, $bonusPayCodeSetId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genderPayGapReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\GenderPayGapSnapShotDate|null $genderPayGapSnapShotDate (optional)
     * @param  string|null $ordinaryPayCodeSetId (optional)
     * @param  string|null $bonusPayCodeSetId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genderPayGapReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genderPayGapReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\GenderPayGapSnapShotDate $genderPayGapSnapShotDate = null,
        ?string $ordinaryPayCodeSetId = null,
        ?string $bonusPayCodeSetId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['genderPayGapReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling genderPayGapReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling genderPayGapReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/GenderPayGap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $genderPayGapSnapShotDate?->value,
            'genderPayGapSnapShotDate', // param base name
            'GenderPayGapSnapShotDate', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinaryPayCodeSetId,
            'ordinaryPayCodeSetId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bonusPayCodeSetId,
            'bonusPayCodeSetId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunCsvReports
     *
     * Get PayRun CSV
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PayRunCsvType|null $csvType Choose the type of CSV you want to generate (optional)
     * @param  string|null $mappingId If you provide the id of a PaymentCsvMapping that is column based then we&#39;ll return the CSV formatted accordingly (optional)
     * @param  string|null $accept accept (optional, default to 'application/json')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunCsvReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function getPayRunCsvReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PayRunCsvType $csvType = null,
        ?string $mappingId = null,
        ?string $accept = 'application/json',
        string $contentType = self::contentTypes['getPayRunCsvReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->getPayRunCsvReportsWithHttpInfo($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $csvType, $mappingId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunCsvReportsWithHttpInfo
     *
     * Get PayRun CSV
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PayRunCsvType|null $csvType Choose the type of CSV you want to generate (optional)
     * @param  string|null $mappingId If you provide the id of a PaymentCsvMapping that is column based then we&#39;ll return the CSV formatted accordingly (optional)
     * @param  string|null $accept (optional, default to 'application/json')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunCsvReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunCsvReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PayRunCsvType $csvType = null,
        ?string $mappingId = null,
        ?string $accept = 'application/json',
        string $contentType = self::contentTypes['getPayRunCsvReports'][0]
    ): array
    {
        $request = $this->getPayRunCsvReportsRequest($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $csvType, $mappingId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunCsvReportsAsync
     *
     * Get PayRun CSV
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PayRunCsvType|null $csvType Choose the type of CSV you want to generate (optional)
     * @param  string|null $mappingId If you provide the id of a PaymentCsvMapping that is column based then we&#39;ll return the CSV formatted accordingly (optional)
     * @param  string|null $accept (optional, default to 'application/json')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunCsvReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunCsvReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PayRunCsvType $csvType = null,
        ?string $mappingId = null,
        ?string $accept = 'application/json',
        string $contentType = self::contentTypes['getPayRunCsvReports'][0]
    ): PromiseInterface
    {
        return $this->getPayRunCsvReportsAsyncWithHttpInfo($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $csvType, $mappingId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunCsvReportsAsyncWithHttpInfo
     *
     * Get PayRun CSV
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PayRunCsvType|null $csvType Choose the type of CSV you want to generate (optional)
     * @param  string|null $mappingId If you provide the id of a PaymentCsvMapping that is column based then we&#39;ll return the CSV formatted accordingly (optional)
     * @param  string|null $accept (optional, default to 'application/json')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunCsvReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunCsvReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PayRunCsvType $csvType = null,
        ?string $mappingId = null,
        ?string $accept = 'application/json',
        string $contentType = self::contentTypes['getPayRunCsvReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->getPayRunCsvReportsRequest($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $csvType, $mappingId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunCsvReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PayRunCsvType|null $csvType Choose the type of CSV you want to generate (optional)
     * @param  string|null $mappingId If you provide the id of a PaymentCsvMapping that is column based then we&#39;ll return the CSV formatted accordingly (optional)
     * @param  string|null $accept (optional, default to 'application/json')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunCsvReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunCsvReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PayRunCsvType $csvType = null,
        ?string $mappingId = null,
        ?string $accept = 'application/json',
        string $contentType = self::contentTypes['getPayRunCsvReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunCsvReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunCsvReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunCsvReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunCsvReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payruncsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $csvType?->value,
            'csvType', // param base name
            'PayRunCsvType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mappingId,
            'mappingId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation grossToNetReports
     *
     * Gross To Net
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  \SynergiTech\Staffology\Model\ReportSortBy|null $sortBy Defines the way to sort the data. Defaults to sorting by PayrollCode. (optional)
     * @param  bool|null $sortDescending Defines whether to sort the data in descending order. Defaults to false. (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $forCis If true then CIS Subcontractors are reported on.              If all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grossToNetReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\GrossToNetReportReportResponse
     */
    public function grossToNetReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\ReportSortBy $sortBy = null,
        ?bool $sortDescending = null,
        ?int $ordinal = 1,
        ?bool $forCis = false,
        string $contentType = self::contentTypes['grossToNetReports'][0]
    ): \SynergiTech\Staffology\Model\GrossToNetReportReportResponse
    {
        list($response) = $this->grossToNetReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $sortBy, $sortDescending, $ordinal, $forCis, $contentType);
        return $response;
    }

    /**
     * Operation grossToNetReportsWithHttpInfo
     *
     * Gross To Net
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\ReportSortBy|null $sortBy Defines the way to sort the data. Defaults to sorting by PayrollCode. (optional)
     * @param  bool|null $sortDescending Defines whether to sort the data in descending order. Defaults to false. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forCis If true then CIS Subcontractors are reported on.              If all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grossToNetReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\GrossToNetReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function grossToNetReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\ReportSortBy $sortBy = null,
        ?bool $sortDescending = null,
        ?int $ordinal = 1,
        ?bool $forCis = false,
        string $contentType = self::contentTypes['grossToNetReports'][0]
    ): array
    {
        $request = $this->grossToNetReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $sortBy, $sortDescending, $ordinal, $forCis, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\GrossToNetReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\GrossToNetReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\GrossToNetReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\GrossToNetReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\GrossToNetReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation grossToNetReportsAsync
     *
     * Gross To Net
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\ReportSortBy|null $sortBy Defines the way to sort the data. Defaults to sorting by PayrollCode. (optional)
     * @param  bool|null $sortDescending Defines whether to sort the data in descending order. Defaults to false. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forCis If true then CIS Subcontractors are reported on.              If all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grossToNetReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function grossToNetReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\ReportSortBy $sortBy = null,
        ?bool $sortDescending = null,
        ?int $ordinal = 1,
        ?bool $forCis = false,
        string $contentType = self::contentTypes['grossToNetReports'][0]
    ): PromiseInterface
    {
        return $this->grossToNetReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $sortBy, $sortDescending, $ordinal, $forCis, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation grossToNetReportsAsyncWithHttpInfo
     *
     * Gross To Net
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\ReportSortBy|null $sortBy Defines the way to sort the data. Defaults to sorting by PayrollCode. (optional)
     * @param  bool|null $sortDescending Defines whether to sort the data in descending order. Defaults to false. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forCis If true then CIS Subcontractors are reported on.              If all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grossToNetReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function grossToNetReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\ReportSortBy $sortBy = null,
        ?bool $sortDescending = null,
        ?int $ordinal = 1,
        ?bool $forCis = false,
        string $contentType = self::contentTypes['grossToNetReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\GrossToNetReportReportResponse';
        $request = $this->grossToNetReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $sortBy, $sortDescending, $ordinal, $forCis, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'grossToNetReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\ReportSortBy|null $sortBy Defines the way to sort the data. Defaults to sorting by PayrollCode. (optional)
     * @param  bool|null $sortDescending Defines whether to sort the data in descending order. Defaults to false. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forCis If true then CIS Subcontractors are reported on.              If all your employees are CIS Subcontractors then this will default to true, otherwise it defaults to false (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grossToNetReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function grossToNetReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\ReportSortBy $sortBy = null,
        ?bool $sortDescending = null,
        ?int $ordinal = 1,
        ?bool $forCis = false,
        string $contentType = self::contentTypes['grossToNetReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling grossToNetReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling grossToNetReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling grossToNetReports'
            );
        }









        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/gross-to-net';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortBy?->value,
            'sortBy', // param base name
            'ReportSortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortDescending,
            'sortDescending', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $forCis,
            'forCis', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation holidayReports
     *
     * Holiday
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $accept accept (optional)
     * @param  bool|null $accruals If set to true then you&#39;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false. (optional, default to false)
     * @param  bool|null $accrualsHrs If set to true then you&#39;ll receive a report for holiday pay accruals hours. Defaults to false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['holidayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\HolidayReportReportResponse
     */
    public function holidayReports(
        string $employerId,
        ?string $accept = null,
        ?bool $accruals = false,
        ?bool $accrualsHrs = false,
        string $contentType = self::contentTypes['holidayReports'][0]
    ): \SynergiTech\Staffology\Model\HolidayReportReportResponse
    {
        list($response) = $this->holidayReportsWithHttpInfo($employerId, $accept, $accruals, $accrualsHrs, $contentType);
        return $response;
    }

    /**
     * Operation holidayReportsWithHttpInfo
     *
     * Holiday
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $accruals If set to true then you&#39;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false. (optional, default to false)
     * @param  bool|null $accrualsHrs If set to true then you&#39;ll receive a report for holiday pay accruals hours. Defaults to false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['holidayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\HolidayReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function holidayReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        ?bool $accruals = false,
        ?bool $accrualsHrs = false,
        string $contentType = self::contentTypes['holidayReports'][0]
    ): array
    {
        $request = $this->holidayReportsRequest($employerId, $accept, $accruals, $accrualsHrs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\HolidayReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\HolidayReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\HolidayReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\HolidayReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\HolidayReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation holidayReportsAsync
     *
     * Holiday
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $accruals If set to true then you&#39;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false. (optional, default to false)
     * @param  bool|null $accrualsHrs If set to true then you&#39;ll receive a report for holiday pay accruals hours. Defaults to false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['holidayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function holidayReportsAsync(
        string $employerId,
        ?string $accept = null,
        ?bool $accruals = false,
        ?bool $accrualsHrs = false,
        string $contentType = self::contentTypes['holidayReports'][0]
    ): PromiseInterface
    {
        return $this->holidayReportsAsyncWithHttpInfo($employerId, $accept, $accruals, $accrualsHrs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation holidayReportsAsyncWithHttpInfo
     *
     * Holiday
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $accruals If set to true then you&#39;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false. (optional, default to false)
     * @param  bool|null $accrualsHrs If set to true then you&#39;ll receive a report for holiday pay accruals hours. Defaults to false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['holidayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function holidayReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        ?bool $accruals = false,
        ?bool $accrualsHrs = false,
        string $contentType = self::contentTypes['holidayReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\HolidayReportReportResponse';
        $request = $this->holidayReportsRequest($employerId, $accept, $accruals, $accrualsHrs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'holidayReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $accruals If set to true then you&#39;ll receive a report for holiday pay accruals instead of holiday allowances. Defaults to false. (optional, default to false)
     * @param  bool|null $accrualsHrs If set to true then you&#39;ll receive a report for holiday pay accruals hours. Defaults to false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['holidayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function holidayReportsRequest(
        string $employerId,
        ?string $accept = null,
        ?bool $accruals = false,
        ?bool $accrualsHrs = false,
        string $contentType = self::contentTypes['holidayReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling holidayReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/holiday';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accruals,
            'accruals', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accrualsHrs,
            'accrualsHrs', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hourlyPayReports
     *
     * Hourly Pay
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hourlyPayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\HourlyPayReportReportResponse
     */
    public function hourlyPayReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['hourlyPayReports'][0]
    ): \SynergiTech\Staffology\Model\HourlyPayReportReportResponse
    {
        list($response) = $this->hourlyPayReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation hourlyPayReportsWithHttpInfo
     *
     * Hourly Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hourlyPayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\HourlyPayReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hourlyPayReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['hourlyPayReports'][0]
    ): array
    {
        $request = $this->hourlyPayReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\HourlyPayReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\HourlyPayReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\HourlyPayReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\HourlyPayReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\HourlyPayReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hourlyPayReportsAsync
     *
     * Hourly Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hourlyPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function hourlyPayReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['hourlyPayReports'][0]
    ): PromiseInterface
    {
        return $this->hourlyPayReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hourlyPayReportsAsyncWithHttpInfo
     *
     * Hourly Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hourlyPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function hourlyPayReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['hourlyPayReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\HourlyPayReportReportResponse';
        $request = $this->hourlyPayReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hourlyPayReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['hourlyPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function hourlyPayReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['hourlyPayReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling hourlyPayReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling hourlyPayReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling hourlyPayReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/hourly-pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loanBalancesReports
     *
     * Loan Balances
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loanBalancesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\LoanBalancesReportReportResponse
     */
    public function loanBalancesReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['loanBalancesReports'][0]
    ): \SynergiTech\Staffology\Model\LoanBalancesReportReportResponse
    {
        list($response) = $this->loanBalancesReportsWithHttpInfo($employerId, $payPeriod, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation loanBalancesReportsWithHttpInfo
     *
     * Loan Balances
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loanBalancesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\LoanBalancesReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loanBalancesReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['loanBalancesReports'][0]
    ): array
    {
        $request = $this->loanBalancesReportsRequest($employerId, $payPeriod, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\LoanBalancesReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\LoanBalancesReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\LoanBalancesReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\LoanBalancesReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\LoanBalancesReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loanBalancesReportsAsync
     *
     * Loan Balances
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loanBalancesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loanBalancesReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['loanBalancesReports'][0]
    ): PromiseInterface
    {
        return $this->loanBalancesReportsAsyncWithHttpInfo($employerId, $payPeriod, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loanBalancesReportsAsyncWithHttpInfo
     *
     * Loan Balances
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loanBalancesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function loanBalancesReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['loanBalancesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\LoanBalancesReportReportResponse';
        $request = $this->loanBalancesReportsRequest($employerId, $payPeriod, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loanBalancesReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loanBalancesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loanBalancesReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['loanBalancesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling loanBalancesReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling loanBalancesReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{payPeriod}/loanbalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation niLetterValidationReportEmployeesReports
     *
     * NI Letter Validation (Employees)
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $accept accept (optional)
     * @param  \DateTime|null $payDate payDate (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportEmployeesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse
     */
    public function niLetterValidationReportEmployeesReports(
        string $employerId,
        ?string $accept = null,
        ?\DateTime $payDate = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['niLetterValidationReportEmployeesReports'][0]
    ): \SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse
    {
        list($response) = $this->niLetterValidationReportEmployeesReportsWithHttpInfo($employerId, $accept, $payDate, $payPeriod, $contentType);
        return $response;
    }

    /**
     * Operation niLetterValidationReportEmployeesReportsWithHttpInfo
     *
     * NI Letter Validation (Employees)
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $payDate (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportEmployeesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function niLetterValidationReportEmployeesReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        ?\DateTime $payDate = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['niLetterValidationReportEmployeesReports'][0]
    ): array
    {
        $request = $this->niLetterValidationReportEmployeesReportsRequest($employerId, $accept, $payDate, $payPeriod, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation niLetterValidationReportEmployeesReportsAsync
     *
     * NI Letter Validation (Employees)
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $payDate (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportEmployeesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function niLetterValidationReportEmployeesReportsAsync(
        string $employerId,
        ?string $accept = null,
        ?\DateTime $payDate = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['niLetterValidationReportEmployeesReports'][0]
    ): PromiseInterface
    {
        return $this->niLetterValidationReportEmployeesReportsAsyncWithHttpInfo($employerId, $accept, $payDate, $payPeriod, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation niLetterValidationReportEmployeesReportsAsyncWithHttpInfo
     *
     * NI Letter Validation (Employees)
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $payDate (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportEmployeesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function niLetterValidationReportEmployeesReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        ?\DateTime $payDate = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['niLetterValidationReportEmployeesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse';
        $request = $this->niLetterValidationReportEmployeesReportsRequest($employerId, $accept, $payDate, $payPeriod, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'niLetterValidationReportEmployeesReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  \DateTime|null $payDate (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportEmployeesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function niLetterValidationReportEmployeesReportsRequest(
        string $employerId,
        ?string $accept = null,
        ?\DateTime $payDate = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['niLetterValidationReportEmployeesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling niLetterValidationReportEmployeesReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/NiLetterValidationReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payDate,
            'payDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation niLetterValidationReportReports
     *
     * NI Letter Validation (Payrun)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse
     */
    public function niLetterValidationReportReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['niLetterValidationReportReports'][0]
    ): \SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse
    {
        list($response) = $this->niLetterValidationReportReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation niLetterValidationReportReportsWithHttpInfo
     *
     * NI Letter Validation (Payrun)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function niLetterValidationReportReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['niLetterValidationReportReports'][0]
    ): array
    {
        $request = $this->niLetterValidationReportReportsRequest($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation niLetterValidationReportReportsAsync
     *
     * NI Letter Validation (Payrun)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function niLetterValidationReportReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['niLetterValidationReportReports'][0]
    ): PromiseInterface
    {
        return $this->niLetterValidationReportReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation niLetterValidationReportReportsAsyncWithHttpInfo
     *
     * NI Letter Validation (Payrun)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function niLetterValidationReportReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['niLetterValidationReportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NiLetterValidationReportReportResponse';
        $request = $this->niLetterValidationReportReportsRequest($employerId, $payPeriod, $taxYear, $periodNumber, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'niLetterValidationReportReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niLetterValidationReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function niLetterValidationReportReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['niLetterValidationReportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling niLetterValidationReportReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling niLetterValidationReportReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling niLetterValidationReportReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling niLetterValidationReportReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/NiLetterValidationReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation niYtdReports
     *
     * NI Year To Date Values
     *
     * @param  string|null $employerId employerId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niYtdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function niYtdReports(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['niYtdReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->niYtdReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation niYtdReportsWithHttpInfo
     *
     * NI Year To Date Values
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niYtdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function niYtdReportsWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['niYtdReports'][0]
    ): array
    {
        $request = $this->niYtdReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation niYtdReportsAsync
     *
     * NI Year To Date Values
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function niYtdReportsAsync(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['niYtdReports'][0]
    ): PromiseInterface
    {
        return $this->niYtdReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation niYtdReportsAsyncWithHttpInfo
     *
     * NI Year To Date Values
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function niYtdReportsAsyncWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['niYtdReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->niYtdReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'niYtdReports'
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['niYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function niYtdReportsRequest(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['niYtdReports'][0]
    ): Request
    {




        $resourcePath = '/niytd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employerId,
            'employerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p11DMultipleReports
     *
     * All P11Ds For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P11Ds for. (required)
     * @param  string|null $accept accept (optional)
     * @param  bool|null $excludeEmployeesWithP11dEmailSent Exclude Employees with Already Sent P11Ds Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DMultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p11DMultipleReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP11dEmailSent = false,
        string $contentType = self::contentTypes['p11DMultipleReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p11DMultipleReportsWithHttpInfo($employerId, $taxYear, $accept, $excludeEmployeesWithP11dEmailSent, $contentType);
        return $response;
    }

    /**
     * Operation p11DMultipleReportsWithHttpInfo
     *
     * All P11Ds For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P11Ds for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP11dEmailSent Exclude Employees with Already Sent P11Ds Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DMultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p11DMultipleReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP11dEmailSent = false,
        string $contentType = self::contentTypes['p11DMultipleReports'][0]
    ): array
    {
        $request = $this->p11DMultipleReportsRequest($employerId, $taxYear, $accept, $excludeEmployeesWithP11dEmailSent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p11DMultipleReportsAsync
     *
     * All P11Ds For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P11Ds for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP11dEmailSent Exclude Employees with Already Sent P11Ds Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DMultipleReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP11dEmailSent = false,
        string $contentType = self::contentTypes['p11DMultipleReports'][0]
    ): PromiseInterface
    {
        return $this->p11DMultipleReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $excludeEmployeesWithP11dEmailSent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p11DMultipleReportsAsyncWithHttpInfo
     *
     * All P11Ds For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P11Ds for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP11dEmailSent Exclude Employees with Already Sent P11Ds Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DMultipleReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP11dEmailSent = false,
        string $contentType = self::contentTypes['p11DMultipleReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p11DMultipleReportsRequest($employerId, $taxYear, $accept, $excludeEmployeesWithP11dEmailSent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p11DMultipleReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P11Ds for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP11dEmailSent Exclude Employees with Already Sent P11Ds Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p11DMultipleReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP11dEmailSent = false,
        string $contentType = self::contentTypes['p11DMultipleReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p11DMultipleReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p11DMultipleReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p11d';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeEmployeesWithP11dEmailSent,
            'excludeEmployeesWithP11dEmailSent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p11DReports
     *
     * P11D For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p11DReports(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p11DReportsWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p11DReportsWithHttpInfo
     *
     * P11D For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p11DReportsWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DReports'][0]
    ): array
    {
        $request = $this->p11DReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p11DReportsAsync
     *
     * P11D For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DReportsAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DReports'][0]
    ): PromiseInterface
    {
        return $this->p11DReportsAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p11DReportsAsyncWithHttpInfo
     *
     * P11D For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DReportsAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p11DReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p11DReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p11DReportsRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p11DReports'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling p11DReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p11DReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p11d/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p11DetailedMultipleReports
     *
     * All Detailed P11s For TaxYear
     *
     * @param  string $employerId The Id of the employer you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedMultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p11DetailedMultipleReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedMultipleReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p11DetailedMultipleReportsWithHttpInfo($employerId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p11DetailedMultipleReportsWithHttpInfo
     *
     * All Detailed P11s For TaxYear
     *
     * @param  string $employerId The Id of the employer you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedMultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p11DetailedMultipleReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedMultipleReports'][0]
    ): array
    {
        $request = $this->p11DetailedMultipleReportsRequest($employerId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p11DetailedMultipleReportsAsync
     *
     * All Detailed P11s For TaxYear
     *
     * @param  string $employerId The Id of the employer you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DetailedMultipleReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedMultipleReports'][0]
    ): PromiseInterface
    {
        return $this->p11DetailedMultipleReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p11DetailedMultipleReportsAsyncWithHttpInfo
     *
     * All Detailed P11s For TaxYear
     *
     * @param  string $employerId The Id of the employer you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DetailedMultipleReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedMultipleReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p11DetailedMultipleReportsRequest($employerId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p11DetailedMultipleReports'
     *
     * @param  string $employerId The Id of the employer you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedMultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p11DetailedMultipleReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedMultipleReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p11DetailedMultipleReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p11DetailedMultipleReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p11detailed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p11DetailedReports
     *
     * P11 (Detailed)
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\P11DetailedReportResponse
     */
    public function p11DetailedReports(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedReports'][0]
    ): \SynergiTech\Staffology\Model\P11DetailedReportResponse
    {
        list($response) = $this->p11DetailedReportsWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p11DetailedReportsWithHttpInfo
     *
     * P11 (Detailed)
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\P11DetailedReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p11DetailedReportsWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedReports'][0]
    ): array
    {
        $request = $this->p11DetailedReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\P11DetailedReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\P11DetailedReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\P11DetailedReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\P11DetailedReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\P11DetailedReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p11DetailedReportsAsync
     *
     * P11 (Detailed)
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DetailedReportsAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedReports'][0]
    ): PromiseInterface
    {
        return $this->p11DetailedReportsAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p11DetailedReportsAsyncWithHttpInfo
     *
     * P11 (Detailed)
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11DetailedReportsAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\P11DetailedReportResponse';
        $request = $this->p11DetailedReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p11DetailedReports'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11DetailedReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p11DetailedReportsRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11DetailedReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p11DetailedReports'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling p11DetailedReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p11DetailedReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{employeeId}/p11detailed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p11Reports
     *
     * P11
     *
     * @param  string $employerId employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\P11ReportResponse
     */
    public function p11Reports(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11Reports'][0]
    ): \SynergiTech\Staffology\Model\P11ReportResponse
    {
        list($response) = $this->p11ReportsWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p11ReportsWithHttpInfo
     *
     * P11
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\P11ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p11ReportsWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11Reports'][0]
    ): array
    {
        $request = $this->p11ReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\P11ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\P11ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\P11ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\P11ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\P11ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p11ReportsAsync
     *
     * P11
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11ReportsAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11Reports'][0]
    ): PromiseInterface
    {
        return $this->p11ReportsAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p11ReportsAsyncWithHttpInfo
     *
     * P11
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p11ReportsAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11Reports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\P11ReportResponse';
        $request = $this->p11ReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p11Reports'
     *
     * @param  string $employerId (required)
     * @param  string $employeeId The employee Id of the employee you want to report on (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year you want to report on. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p11Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p11ReportsRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p11Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p11Reports'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling p11Reports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p11Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{employeeId}/p11';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p30Reports
     *
     * P30
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  \DateTime $periodEnding periodEnding (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p30Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p30Reports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \DateTime $periodEnding,
        ?string $accept = null,
        string $contentType = self::contentTypes['p30Reports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p30ReportsWithHttpInfo($employerId, $taxYear, $periodEnding, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p30ReportsWithHttpInfo
     *
     * P30
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \DateTime $periodEnding (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p30Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p30ReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \DateTime $periodEnding,
        ?string $accept = null,
        string $contentType = self::contentTypes['p30Reports'][0]
    ): array
    {
        $request = $this->p30ReportsRequest($employerId, $taxYear, $periodEnding, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p30ReportsAsync
     *
     * P30
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \DateTime $periodEnding (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p30Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p30ReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \DateTime $periodEnding,
        ?string $accept = null,
        string $contentType = self::contentTypes['p30Reports'][0]
    ): PromiseInterface
    {
        return $this->p30ReportsAsyncWithHttpInfo($employerId, $taxYear, $periodEnding, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p30ReportsAsyncWithHttpInfo
     *
     * P30
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \DateTime $periodEnding (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p30Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p30ReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \DateTime $periodEnding,
        ?string $accept = null,
        string $contentType = self::contentTypes['p30Reports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p30ReportsRequest($employerId, $taxYear, $periodEnding, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p30Reports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \DateTime $periodEnding (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p30Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p30ReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \DateTime $periodEnding,
        ?string $accept = null,
        string $contentType = self::contentTypes['p30Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p30Reports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p30Reports'
            );
        }

        // verify the required parameter 'periodEnding' is set
        if ($periodEnding === null || (is_array($periodEnding) && count($periodEnding) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodEnding when calling p30Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p30/{periodEnding}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($periodEnding !== null) {
            $resourcePath = str_replace(
                '{' . 'periodEnding' . '}',
                ObjectSerializer::toPathValue($periodEnding),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p32Reports
     *
     * P32
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p32Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\P32ReportResponse
     */
    public function p32Reports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p32Reports'][0]
    ): \SynergiTech\Staffology\Model\P32ReportResponse
    {
        list($response) = $this->p32ReportsWithHttpInfo($employerId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p32ReportsWithHttpInfo
     *
     * P32
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p32Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\P32ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p32ReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p32Reports'][0]
    ): array
    {
        $request = $this->p32ReportsRequest($employerId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\P32ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\P32ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\P32ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\P32ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\P32ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p32ReportsAsync
     *
     * P32
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p32Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p32ReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p32Reports'][0]
    ): PromiseInterface
    {
        return $this->p32ReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p32ReportsAsyncWithHttpInfo
     *
     * P32
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p32Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p32ReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p32Reports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\P32ReportResponse';
        $request = $this->p32ReportsRequest($employerId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p32Reports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p32Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p32ReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p32Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p32Reports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p32Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p32';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', 'application/pdf', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p45Reports
     *
     * P45 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want a P45 for. (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p45Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p45Reports(
        string $employerId,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['p45Reports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p45ReportsWithHttpInfo($employerId, $employeeId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p45ReportsWithHttpInfo
     *
     * P45 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want a P45 for. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p45Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p45ReportsWithHttpInfo(
        string $employerId,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['p45Reports'][0]
    ): array
    {
        $request = $this->p45ReportsRequest($employerId, $employeeId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p45ReportsAsync
     *
     * P45 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want a P45 for. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p45Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p45ReportsAsync(
        string $employerId,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['p45Reports'][0]
    ): PromiseInterface
    {
        return $this->p45ReportsAsyncWithHttpInfo($employerId, $employeeId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p45ReportsAsyncWithHttpInfo
     *
     * P45 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want a P45 for. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p45Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p45ReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['p45Reports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p45ReportsRequest($employerId, $employeeId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p45Reports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $employeeId The Id of the Employee you want a P45 for. (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p45Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p45ReportsRequest(
        string $employerId,
        ?string $employeeId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['p45Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p45Reports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/p45';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p60MultipleReports
     *
     * All P60s For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P60s for. (required)
     * @param  string|null $accept accept (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60MultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p60MultipleReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['p60MultipleReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p60MultipleReportsWithHttpInfo($employerId, $taxYear, $accept, $excludeEmployeesWithP60EmailSent, $contentType);
        return $response;
    }

    /**
     * Operation p60MultipleReportsWithHttpInfo
     *
     * All P60s For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P60s for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60MultipleReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p60MultipleReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['p60MultipleReports'][0]
    ): array
    {
        $request = $this->p60MultipleReportsRequest($employerId, $taxYear, $accept, $excludeEmployeesWithP60EmailSent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p60MultipleReportsAsync
     *
     * All P60s For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P60s for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60MultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p60MultipleReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['p60MultipleReports'][0]
    ): PromiseInterface
    {
        return $this->p60MultipleReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $excludeEmployeesWithP60EmailSent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p60MultipleReportsAsyncWithHttpInfo
     *
     * All P60s For TaxYear
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P60s for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60MultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p60MultipleReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['p60MultipleReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p60MultipleReportsRequest($employerId, $taxYear, $accept, $excludeEmployeesWithP60EmailSent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p60MultipleReports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear you want P60s for. (required)
     * @param  string|null $accept (optional)
     * @param  bool|null $excludeEmployeesWithP60EmailSent Exclude Employees with Already Sent P60 Emails. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60MultipleReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p60MultipleReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?bool $excludeEmployeesWithP60EmailSent = false,
        string $contentType = self::contentTypes['p60MultipleReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p60MultipleReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p60MultipleReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p60';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeEmployeesWithP60EmailSent,
            'excludeEmployeesWithP60EmailSent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation p60Reports
     *
     * P60 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function p60Reports(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p60Reports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->p60ReportsWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation p60ReportsWithHttpInfo
     *
     * P60 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60Reports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function p60ReportsWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p60Reports'][0]
    ): array
    {
        $request = $this->p60ReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation p60ReportsAsync
     *
     * P60 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p60ReportsAsync(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p60Reports'][0]
    ): PromiseInterface
    {
        return $this->p60ReportsAsyncWithHttpInfo($employerId, $employeeId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation p60ReportsAsyncWithHttpInfo
     *
     * P60 For Employee
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function p60ReportsAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p60Reports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->p60ReportsRequest($employerId, $employeeId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'p60Reports'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear the P60 is for. (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['p60Reports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function p60ReportsRequest(
        string $employerId,
        string $employeeId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['p60Reports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling p60Reports'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling p60Reports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling p60Reports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/p60/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation papdisFileReports
     *
     * PAPDIS File
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PensionCsvFormat|null $csvFormat csvFormat (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['papdisFileReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PapdisDocumentReportResponse
     */
    public function papdisFileReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PensionCsvFormat $csvFormat = null,
        string $contentType = self::contentTypes['papdisFileReports'][0]
    ): \SynergiTech\Staffology\Model\PapdisDocumentReportResponse
    {
        list($response) = $this->papdisFileReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $accept, $ordinal, $csvFormat, $contentType);
        return $response;
    }

    /**
     * Operation papdisFileReportsWithHttpInfo
     *
     * PAPDIS File
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PensionCsvFormat|null $csvFormat (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['papdisFileReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PapdisDocumentReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function papdisFileReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PensionCsvFormat $csvFormat = null,
        string $contentType = self::contentTypes['papdisFileReports'][0]
    ): array
    {
        $request = $this->papdisFileReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $accept, $ordinal, $csvFormat, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PapdisDocumentReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PapdisDocumentReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PapdisDocumentReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PapdisDocumentReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PapdisDocumentReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation papdisFileReportsAsync
     *
     * PAPDIS File
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PensionCsvFormat|null $csvFormat (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['papdisFileReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function papdisFileReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PensionCsvFormat $csvFormat = null,
        string $contentType = self::contentTypes['papdisFileReports'][0]
    ): PromiseInterface
    {
        return $this->papdisFileReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $accept, $ordinal, $csvFormat, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation papdisFileReportsAsyncWithHttpInfo
     *
     * PAPDIS File
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PensionCsvFormat|null $csvFormat (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['papdisFileReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function papdisFileReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PensionCsvFormat $csvFormat = null,
        string $contentType = self::contentTypes['papdisFileReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PapdisDocumentReportResponse';
        $request = $this->papdisFileReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $accept, $ordinal, $csvFormat, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'papdisFileReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\PensionCsvFormat|null $csvFormat (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['papdisFileReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function papdisFileReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\PensionCsvFormat $csvFormat = null,
        string $contentType = self::contentTypes['papdisFileReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling papdisFileReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling papdisFileReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling papdisFileReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling papdisFileReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/papdis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schemeId,
            'schemeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $csvFormat?->value,
            'csvFormat', // param base name
            'PensionCsvFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', 'text/csv', 'text/xml', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCodeExportReports
     *
     * Pay Code Export Details
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payCodeExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function payCodeExportReports(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['payCodeExportReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->payCodeExportReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation payCodeExportReportsWithHttpInfo
     *
     * Pay Code Export Details
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payCodeExportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCodeExportReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['payCodeExportReports'][0]
    ): array
    {
        $request = $this->payCodeExportReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCodeExportReportsAsync
     *
     * Pay Code Export Details
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payCodeExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payCodeExportReportsAsync(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['payCodeExportReports'][0]
    ): PromiseInterface
    {
        return $this->payCodeExportReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCodeExportReportsAsyncWithHttpInfo
     *
     * Pay Code Export Details
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payCodeExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payCodeExportReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['payCodeExportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->payCodeExportReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCodeExportReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payCodeExportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payCodeExportReportsRequest(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['payCodeExportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payCodeExportReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/paycodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payElementReports
     *
     * Pay Element
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $payCodes Comma separated values of pay codes, e.g., (BASIC,BASICANNUAL,BASICDAILY) (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payElementReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayElementReportReportResponse
     */
    public function payElementReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $payCodes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payElementReports'][0]
    ): \SynergiTech\Staffology\Model\PayElementReportReportResponse
    {
        list($response) = $this->payElementReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $payCodes, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation payElementReportsWithHttpInfo
     *
     * Pay Element
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $payCodes Comma separated values of pay codes, e.g., (BASIC,BASICANNUAL,BASICDAILY) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payElementReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayElementReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payElementReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $payCodes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payElementReports'][0]
    ): array
    {
        $request = $this->payElementReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $payCodes, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayElementReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayElementReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayElementReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayElementReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayElementReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payElementReportsAsync
     *
     * Pay Element
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $payCodes Comma separated values of pay codes, e.g., (BASIC,BASICANNUAL,BASICDAILY) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payElementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payElementReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $payCodes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payElementReports'][0]
    ): PromiseInterface
    {
        return $this->payElementReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $payCodes, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payElementReportsAsyncWithHttpInfo
     *
     * Pay Element
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $payCodes Comma separated values of pay codes, e.g., (BASIC,BASICANNUAL,BASICDAILY) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payElementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payElementReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $payCodes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payElementReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayElementReportReportResponse';
        $request = $this->payElementReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $payCodes, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payElementReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $payCodes Comma separated values of pay codes, e.g., (BASIC,BASICANNUAL,BASICDAILY) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payElementReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payElementReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $payCodes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payElementReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payElementReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payElementReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payElementReports'
            );
        }







        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/pay-element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payCodes,
            'payCodes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payGradesReports
     *
     * Pay Grade
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $effectiveDateFrom effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo effectiveDateTo (optional)
     * @param  string|null $paySpineId paySpineId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payGradesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayGradesReportReportResponse
     */
    public function payGradesReports(
        string $employerId,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payGradesReports'][0]
    ): \SynergiTech\Staffology\Model\PayGradesReportReportResponse
    {
        list($response) = $this->payGradesReportsWithHttpInfo($employerId, $effectiveDateFrom, $effectiveDateTo, $paySpineId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation payGradesReportsWithHttpInfo
     *
     * Pay Grade
     *
     * @param  string $employerId (required)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payGradesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayGradesReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payGradesReportsWithHttpInfo(
        string $employerId,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payGradesReports'][0]
    ): array
    {
        $request = $this->payGradesReportsRequest($employerId, $effectiveDateFrom, $effectiveDateTo, $paySpineId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayGradesReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayGradesReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayGradesReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayGradesReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayGradesReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payGradesReportsAsync
     *
     * Pay Grade
     *
     * @param  string $employerId (required)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payGradesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payGradesReportsAsync(
        string $employerId,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payGradesReports'][0]
    ): PromiseInterface
    {
        return $this->payGradesReportsAsyncWithHttpInfo($employerId, $effectiveDateFrom, $effectiveDateTo, $paySpineId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payGradesReportsAsyncWithHttpInfo
     *
     * Pay Grade
     *
     * @param  string $employerId (required)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payGradesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payGradesReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payGradesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayGradesReportReportResponse';
        $request = $this->payGradesReportsRequest($employerId, $effectiveDateFrom, $effectiveDateTo, $paySpineId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payGradesReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payGradesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payGradesReportsRequest(
        string $employerId,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payGradesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payGradesReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/payGrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectiveDateFrom,
            'effectiveDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectiveDateTo,
            'effectiveDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paySpineId,
            'paySpineId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunCsvReports
     *
     * PayRun CSV (deprecated)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $summary If set to true then instead of a line-by-line CSV, you&#39;ll receive a summary for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunCsvReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function payRunCsvReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $summary = false,
        string $contentType = self::contentTypes['payRunCsvReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->payRunCsvReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $summary, $contentType);
        return $response;
    }

    /**
     * Operation payRunCsvReportsWithHttpInfo
     *
     * PayRun CSV (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $summary If set to true then instead of a line-by-line CSV, you&#39;ll receive a summary for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunCsvReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunCsvReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $summary = false,
        string $contentType = self::contentTypes['payRunCsvReports'][0]
    ): array
    {
        $request = $this->payRunCsvReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $summary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunCsvReportsAsync
     *
     * PayRun CSV (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $summary If set to true then instead of a line-by-line CSV, you&#39;ll receive a summary for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunCsvReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunCsvReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $summary = false,
        string $contentType = self::contentTypes['payRunCsvReports'][0]
    ): PromiseInterface
    {
        return $this->payRunCsvReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $summary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunCsvReportsAsyncWithHttpInfo
     *
     * PayRun CSV (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $summary If set to true then instead of a line-by-line CSV, you&#39;ll receive a summary for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunCsvReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunCsvReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $summary = false,
        string $contentType = self::contentTypes['payRunCsvReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->payRunCsvReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $summary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunCsvReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $summary If set to true then instead of a line-by-line CSV, you&#39;ll receive a summary for each employee (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunCsvReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunCsvReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $summary = false,
        string $contentType = self::contentTypes['payRunCsvReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payRunCsvReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payRunCsvReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payRunCsvReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payRunCsvReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payrun-csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $summary,
            'summary', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunPaymentsReports
     *
     * PayRun Payments
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $includeNonEmployeePayments If set to true then we&#39;ll also include payments that need to be made to HMRC and PensionProviders (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunPaymentsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse
     */
    public function payRunPaymentsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $includeNonEmployeePayments = false,
        string $contentType = self::contentTypes['payRunPaymentsReports'][0]
    ): \SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse
    {
        list($response) = $this->payRunPaymentsReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $bankHoliday, $ordinal, $includeNonEmployeePayments, $contentType);
        return $response;
    }

    /**
     * Operation payRunPaymentsReportsWithHttpInfo
     *
     * PayRun Payments
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $includeNonEmployeePayments If set to true then we&#39;ll also include payments that need to be made to HMRC and PensionProviders (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunPaymentsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunPaymentsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $includeNonEmployeePayments = false,
        string $contentType = self::contentTypes['payRunPaymentsReports'][0]
    ): array
    {
        $request = $this->payRunPaymentsReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $bankHoliday, $ordinal, $includeNonEmployeePayments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunPaymentsReportsAsync
     *
     * PayRun Payments
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $includeNonEmployeePayments If set to true then we&#39;ll also include payments that need to be made to HMRC and PensionProviders (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunPaymentsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunPaymentsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $includeNonEmployeePayments = false,
        string $contentType = self::contentTypes['payRunPaymentsReports'][0]
    ): PromiseInterface
    {
        return $this->payRunPaymentsReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $bankHoliday, $ordinal, $includeNonEmployeePayments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunPaymentsReportsAsyncWithHttpInfo
     *
     * PayRun Payments
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $includeNonEmployeePayments If set to true then we&#39;ll also include payments that need to be made to HMRC and PensionProviders (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunPaymentsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunPaymentsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $includeNonEmployeePayments = false,
        string $contentType = self::contentTypes['payRunPaymentsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayrunPaymentsReportReportResponse';
        $request = $this->payRunPaymentsReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $bankHoliday, $ordinal, $includeNonEmployeePayments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunPaymentsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  \SynergiTech\Staffology\Model\BankHolidayCollection|null $bankHoliday Specifies the region whose bank holidays are to be considered in the operation. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $includeNonEmployeePayments If set to true then we&#39;ll also include payments that need to be made to HMRC and PensionProviders (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunPaymentsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunPaymentsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?\SynergiTech\Staffology\Model\BankHolidayCollection $bankHoliday = null,
        ?int $ordinal = 1,
        ?bool $includeNonEmployeePayments = false,
        string $contentType = self::contentTypes['payRunPaymentsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payRunPaymentsReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payRunPaymentsReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payRunPaymentsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payRunPaymentsReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payments/employee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bankHoliday?->value,
            'bankHoliday', // param base name
            'BankHolidayCollection', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeNonEmployeePayments,
            'includeNonEmployeePayments', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunSummaryReports
     *
     * PayRunSummary
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $includeQty If set to true and acceptType is text/csv, then where a PayCode on a PayLine is a multiplier code we&#39;ll include a Qty value for the number of days/hours (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSummaryReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse
     */
    public function payRunSummaryReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $includeQty = false,
        string $contentType = self::contentTypes['payRunSummaryReports'][0]
    ): \SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse
    {
        list($response) = $this->payRunSummaryReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $includeQty, $contentType);
        return $response;
    }

    /**
     * Operation payRunSummaryReportsWithHttpInfo
     *
     * PayRunSummary
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $includeQty If set to true and acceptType is text/csv, then where a PayCode on a PayLine is a multiplier code we&#39;ll include a Qty value for the number of days/hours (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSummaryReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunSummaryReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $includeQty = false,
        string $contentType = self::contentTypes['payRunSummaryReports'][0]
    ): array
    {
        $request = $this->payRunSummaryReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $includeQty, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunSummaryReportsAsync
     *
     * PayRunSummary
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $includeQty If set to true and acceptType is text/csv, then where a PayCode on a PayLine is a multiplier code we&#39;ll include a Qty value for the number of days/hours (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSummaryReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunSummaryReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $includeQty = false,
        string $contentType = self::contentTypes['payRunSummaryReports'][0]
    ): PromiseInterface
    {
        return $this->payRunSummaryReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $includeQty, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunSummaryReportsAsyncWithHttpInfo
     *
     * PayRunSummary
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $includeQty If set to true and acceptType is text/csv, then where a PayCode on a PayLine is a multiplier code we&#39;ll include a Qty value for the number of days/hours (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSummaryReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunSummaryReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $includeQty = false,
        string $contentType = self::contentTypes['payRunSummaryReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunSummaryLineIEnumerableReportResponse';
        $request = $this->payRunSummaryReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $includeQty, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunSummaryReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  bool|null $includeQty If set to true and acceptType is text/csv, then where a PayCode on a PayLine is a multiplier code we&#39;ll include a Qty value for the number of days/hours (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSummaryReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunSummaryReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        ?bool $includeQty = false,
        string $contentType = self::contentTypes['payRunSummaryReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payRunSummaryReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payRunSummaryReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payRunSummaryReports'
            );
        }








        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/payrunsummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptCode,
            'deptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeQty,
            'includeQty', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paySpineReports
     *
     * Pay Spine
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $paySpineId paySpineId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paySpineReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySpineReportReportResponse
     */
    public function paySpineReports(
        string $employerId,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['paySpineReports'][0]
    ): \SynergiTech\Staffology\Model\PaySpineReportReportResponse
    {
        list($response) = $this->paySpineReportsWithHttpInfo($employerId, $paySpineId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation paySpineReportsWithHttpInfo
     *
     * Pay Spine
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paySpineReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySpineReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paySpineReportsWithHttpInfo(
        string $employerId,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['paySpineReports'][0]
    ): array
    {
        $request = $this->paySpineReportsRequest($employerId, $paySpineId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySpineReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySpineReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySpineReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySpineReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySpineReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paySpineReportsAsync
     *
     * Pay Spine
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paySpineReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function paySpineReportsAsync(
        string $employerId,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['paySpineReports'][0]
    ): PromiseInterface
    {
        return $this->paySpineReportsAsyncWithHttpInfo($employerId, $paySpineId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paySpineReportsAsyncWithHttpInfo
     *
     * Pay Spine
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paySpineReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function paySpineReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['paySpineReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySpineReportReportResponse';
        $request = $this->paySpineReportsRequest($employerId, $paySpineId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paySpineReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paySpineReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paySpineReportsRequest(
        string $employerId,
        ?string $paySpineId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['paySpineReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling paySpineReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/payspines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paySpineId,
            'paySpineId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrollAnalysisCostBreakdownReports
     *
     * Analysis Cost Breakdown
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisCostBreakdownReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse
     */
    public function payrollAnalysisCostBreakdownReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisCostBreakdownReports'][0]
    ): \SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse
    {
        list($response) = $this->payrollAnalysisCostBreakdownReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType);
        return $response;
    }

    /**
     * Operation payrollAnalysisCostBreakdownReportsWithHttpInfo
     *
     * Analysis Cost Breakdown
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisCostBreakdownReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollAnalysisCostBreakdownReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisCostBreakdownReports'][0]
    ): array
    {
        $request = $this->payrollAnalysisCostBreakdownReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrollAnalysisCostBreakdownReportsAsync
     *
     * Analysis Cost Breakdown
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisCostBreakdownReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollAnalysisCostBreakdownReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisCostBreakdownReports'][0]
    ): PromiseInterface
    {
        return $this->payrollAnalysisCostBreakdownReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrollAnalysisCostBreakdownReportsAsyncWithHttpInfo
     *
     * Analysis Cost Breakdown
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisCostBreakdownReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollAnalysisCostBreakdownReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisCostBreakdownReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayrollAnalysisCostBreakdownReportReportResponse';
        $request = $this->payrollAnalysisCostBreakdownReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrollAnalysisCostBreakdownReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode If specified then only employees assigned to this department code at the time of the payrun will be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisCostBreakdownReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrollAnalysisCostBreakdownReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisCostBreakdownReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payrollAnalysisCostBreakdownReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payrollAnalysisCostBreakdownReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payrollAnalysisCostBreakdownReports'
            );
        }







        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/analysiscostbreakdown';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptCode,
            'deptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrollAnalysisEmployeeRoleBreakdownReports
     *
     * Payroll Analysis with Employee Role Breakdown
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string|null $deptCode Optional. Filters employees by department code. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse
     */
    public function payrollAnalysisEmployeeRoleBreakdownReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'][0]
    ): \SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse
    {
        list($response) = $this->payrollAnalysisEmployeeRoleBreakdownReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType);
        return $response;
    }

    /**
     * Operation payrollAnalysisEmployeeRoleBreakdownReportsWithHttpInfo
     *
     * Payroll Analysis with Employee Role Breakdown
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode Optional. Filters employees by department code. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollAnalysisEmployeeRoleBreakdownReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'][0]
    ): array
    {
        $request = $this->payrollAnalysisEmployeeRoleBreakdownReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrollAnalysisEmployeeRoleBreakdownReportsAsync
     *
     * Payroll Analysis with Employee Role Breakdown
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode Optional. Filters employees by department code. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollAnalysisEmployeeRoleBreakdownReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'][0]
    ): PromiseInterface
    {
        return $this->payrollAnalysisEmployeeRoleBreakdownReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrollAnalysisEmployeeRoleBreakdownReportsAsyncWithHttpInfo
     *
     * Payroll Analysis with Employee Role Breakdown
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode Optional. Filters employees by department code. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollAnalysisEmployeeRoleBreakdownReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayrollAnalysisEmployeeRoleBreakdownReportReportResponse';
        $request = $this->payrollAnalysisEmployeeRoleBreakdownReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $deptCode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrollAnalysisEmployeeRoleBreakdownReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $deptCode Optional. Filters employees by department code. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrollAnalysisEmployeeRoleBreakdownReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $deptCode = null,
        string $contentType = self::contentTypes['payrollAnalysisEmployeeRoleBreakdownReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payrollAnalysisEmployeeRoleBreakdownReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payrollAnalysisEmployeeRoleBreakdownReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payrollAnalysisEmployeeRoleBreakdownReports'
            );
        }







        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/analysisemployeerolebreakdown';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptCode,
            'deptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrollJournalCsvReportReports
     *
     * Payroll Journal CSV
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollJournalCsvReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function payrollJournalCsvReportReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['payrollJournalCsvReportReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->payrollJournalCsvReportReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $deptBreakdown, $contentType);
        return $response;
    }

    /**
     * Operation payrollJournalCsvReportReportsWithHttpInfo
     *
     * Payroll Journal CSV
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollJournalCsvReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollJournalCsvReportReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['payrollJournalCsvReportReports'][0]
    ): array
    {
        $request = $this->payrollJournalCsvReportReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $deptBreakdown, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrollJournalCsvReportReportsAsync
     *
     * Payroll Journal CSV
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollJournalCsvReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollJournalCsvReportReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['payrollJournalCsvReportReports'][0]
    ): PromiseInterface
    {
        return $this->payrollJournalCsvReportReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $deptBreakdown, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrollJournalCsvReportReportsAsyncWithHttpInfo
     *
     * Payroll Journal CSV
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollJournalCsvReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollJournalCsvReportReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['payrollJournalCsvReportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->payrollJournalCsvReportReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $deptBreakdown, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrollJournalCsvReportReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollJournalCsvReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrollJournalCsvReportReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['payrollJournalCsvReportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payrollJournalCsvReportReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payrollJournalCsvReportReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payrollJournalCsvReportReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payrollJournalCsvReportReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payrolljournalcsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptBreakdown,
            'deptBreakdown', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrunNiYtdReports
     *
     * NI Year To Date Values
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunNiYtdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NiYtdReportReportResponse
     */
    public function payrunNiYtdReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunNiYtdReports'][0]
    ): \SynergiTech\Staffology\Model\NiYtdReportReportResponse
    {
        list($response) = $this->payrunNiYtdReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType);
        return $response;
    }

    /**
     * Operation payrunNiYtdReportsWithHttpInfo
     *
     * NI Year To Date Values
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunNiYtdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NiYtdReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrunNiYtdReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunNiYtdReports'][0]
    ): array
    {
        $request = $this->payrunNiYtdReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NiYtdReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NiYtdReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NiYtdReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NiYtdReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NiYtdReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrunNiYtdReportsAsync
     *
     * NI Year To Date Values
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunNiYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrunNiYtdReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunNiYtdReports'][0]
    ): PromiseInterface
    {
        return $this->payrunNiYtdReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrunNiYtdReportsAsyncWithHttpInfo
     *
     * NI Year To Date Values
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunNiYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrunNiYtdReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunNiYtdReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NiYtdReportReportResponse';
        $request = $this->payrunNiYtdReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrunNiYtdReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunNiYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrunNiYtdReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunNiYtdReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payrunNiYtdReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payrunNiYtdReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payrunNiYtdReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payrunNiYtdReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/niytd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrunYtdReports
     *
     * Year To Date Values
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunYtdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\YtdReportReportResponse
     */
    public function payrunYtdReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunYtdReports'][0]
    ): \SynergiTech\Staffology\Model\YtdReportReportResponse
    {
        list($response) = $this->payrunYtdReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType);
        return $response;
    }

    /**
     * Operation payrunYtdReportsWithHttpInfo
     *
     * Year To Date Values
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunYtdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\YtdReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrunYtdReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunYtdReports'][0]
    ): array
    {
        $request = $this->payrunYtdReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\YtdReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\YtdReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\YtdReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\YtdReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\YtdReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrunYtdReportsAsync
     *
     * Year To Date Values
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrunYtdReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunYtdReports'][0]
    ): PromiseInterface
    {
        return $this->payrunYtdReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrunYtdReportsAsyncWithHttpInfo
     *
     * Year To Date Values
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrunYtdReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunYtdReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\YtdReportReportResponse';
        $request = $this->payrunYtdReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrunYtdReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrunYtdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrunYtdReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['payrunYtdReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payrunYtdReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payrunYtdReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payrunYtdReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payrunYtdReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/ytd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payslipReports
     *
     * Payslip
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id The Id of the PayRunEntry. (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayslipReportResponse
     */
    public function payslipReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payslipReports'][0]
    ): \SynergiTech\Staffology\Model\PayslipReportResponse
    {
        list($response) = $this->payslipReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation payslipReportsWithHttpInfo
     *
     * Payslip
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of the PayRunEntry. (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayslipReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payslipReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payslipReports'][0]
    ): array
    {
        $request = $this->payslipReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayslipReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayslipReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayslipReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayslipReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayslipReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payslipReportsAsync
     *
     * Payslip
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of the PayRunEntry. (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payslipReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payslipReports'][0]
    ): PromiseInterface
    {
        return $this->payslipReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payslipReportsAsyncWithHttpInfo
     *
     * Payslip
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of the PayRunEntry. (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payslipReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payslipReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayslipReportResponse';
        $request = $this->payslipReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payslipReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id The Id of the PayRunEntry. (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payslipReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['payslipReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payslipReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payslipReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payslipReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payslipReports'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling payslipReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/{id}/payslip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payslipsReports
     *
     * Payslips
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $unemailed Set this to True if you only want the Payslips that haven&#39;t been sent by email (optional, default to false)
     * @param  string|null $deptCode Set if you want to filter by department (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeaversFilter startersLeaversFilter (optional)
     * @param  int|null $pageNum pageNum (optional)
     * @param  int|null $pageSize pageSize (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy sortBy (optional)
     * @param  bool|null $sortDescending sortDescending (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function payslipsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $unemailed = false,
        ?string $deptCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeaversFilter = null,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['payslipsReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->payslipsReportsWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $unemailed, $deptCode, $startersLeaversFilter, $pageNum, $pageSize, $sortBy, $sortDescending, $contentType);
        return $response;
    }

    /**
     * Operation payslipsReportsWithHttpInfo
     *
     * Payslips
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $unemailed Set this to True if you only want the Payslips that haven&#39;t been sent by email (optional, default to false)
     * @param  string|null $deptCode Set if you want to filter by department (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeaversFilter (optional)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy (optional)
     * @param  bool|null $sortDescending (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payslipsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $unemailed = false,
        ?string $deptCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeaversFilter = null,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['payslipsReports'][0]
    ): array
    {
        $request = $this->payslipsReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $unemailed, $deptCode, $startersLeaversFilter, $pageNum, $pageSize, $sortBy, $sortDescending, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payslipsReportsAsync
     *
     * Payslips
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $unemailed Set this to True if you only want the Payslips that haven&#39;t been sent by email (optional, default to false)
     * @param  string|null $deptCode Set if you want to filter by department (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeaversFilter (optional)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy (optional)
     * @param  bool|null $sortDescending (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payslipsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $unemailed = false,
        ?string $deptCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeaversFilter = null,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['payslipsReports'][0]
    ): PromiseInterface
    {
        return $this->payslipsReportsAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $unemailed, $deptCode, $startersLeaversFilter, $pageNum, $pageSize, $sortBy, $sortDescending, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payslipsReportsAsyncWithHttpInfo
     *
     * Payslips
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $unemailed Set this to True if you only want the Payslips that haven&#39;t been sent by email (optional, default to false)
     * @param  string|null $deptCode Set if you want to filter by department (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeaversFilter (optional)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy (optional)
     * @param  bool|null $sortDescending (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payslipsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $unemailed = false,
        ?string $deptCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeaversFilter = null,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['payslipsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->payslipsReportsRequest($employerId, $payPeriod, $periodNumber, $taxYear, $accept, $ordinal, $unemailed, $deptCode, $startersLeaversFilter, $pageNum, $pageSize, $sortBy, $sortDescending, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payslipsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $unemailed Set this to True if you only want the Payslips that haven&#39;t been sent by email (optional, default to false)
     * @param  string|null $deptCode Set if you want to filter by department (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeaversFilter (optional)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy (optional)
     * @param  bool|null $sortDescending (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payslipsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payslipsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?bool $unemailed = false,
        ?string $deptCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeaversFilter = null,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['payslipsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payslipsReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payslipsReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payslipsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payslipsReports'
            );
        }











        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/payslips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unemailed,
            'unemailed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptCode,
            'deptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startersLeaversFilter?->value,
            'startersLeaversFilter', // param base name
            'StartersLeaversFilter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageNum,
            'pageNum', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortBy?->value,
            'sortBy', // param base name
            'PayRunEntrySortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortDescending,
            'sortDescending', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pensionMembershipsReports
     *
     * Export Multiple Pension Memberships Report
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionMembershipsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse
     */
    public function pensionMembershipsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionMembershipsReports'][0]
    ): \SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse
    {
        list($response) = $this->pensionMembershipsReportsWithHttpInfo($employerId, $taxYear, $payPeriod, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation pensionMembershipsReportsWithHttpInfo
     *
     * Export Multiple Pension Memberships Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionMembershipsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pensionMembershipsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionMembershipsReports'][0]
    ): array
    {
        $request = $this->pensionMembershipsReportsRequest($employerId, $taxYear, $payPeriod, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pensionMembershipsReportsAsync
     *
     * Export Multiple Pension Memberships Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionMembershipsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pensionMembershipsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionMembershipsReports'][0]
    ): PromiseInterface
    {
        return $this->pensionMembershipsReportsAsyncWithHttpInfo($employerId, $taxYear, $payPeriod, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pensionMembershipsReportsAsyncWithHttpInfo
     *
     * Export Multiple Pension Memberships Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionMembershipsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pensionMembershipsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionMembershipsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PensionMembershipsReportReportResponse';
        $request = $this->pensionMembershipsReportsRequest($employerId, $taxYear, $payPeriod, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pensionMembershipsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionMembershipsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pensionMembershipsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionMembershipsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pensionMembershipsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling pensionMembershipsReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/{taxYear}/pensionmemberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rightToWorkReports
     *
     * RightToWork
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rightToWorkReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\RightToWorkReportReportResponse
     */
    public function rightToWorkReports(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['rightToWorkReports'][0]
    ): \SynergiTech\Staffology\Model\RightToWorkReportReportResponse
    {
        list($response) = $this->rightToWorkReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation rightToWorkReportsWithHttpInfo
     *
     * RightToWork
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rightToWorkReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\RightToWorkReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function rightToWorkReportsWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['rightToWorkReports'][0]
    ): array
    {
        $request = $this->rightToWorkReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\RightToWorkReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\RightToWorkReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\RightToWorkReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\RightToWorkReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\RightToWorkReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rightToWorkReportsAsync
     *
     * RightToWork
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rightToWorkReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function rightToWorkReportsAsync(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['rightToWorkReports'][0]
    ): PromiseInterface
    {
        return $this->rightToWorkReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rightToWorkReportsAsyncWithHttpInfo
     *
     * RightToWork
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rightToWorkReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function rightToWorkReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['rightToWorkReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\RightToWorkReportReportResponse';
        $request = $this->rightToWorkReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rightToWorkReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rightToWorkReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rightToWorkReportsRequest(
        string $employerId,
        ?string $accept = null,
        string $contentType = self::contentTypes['rightToWorkReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling rightToWorkReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/right-to-work';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation spinePointReports
     *
     * Spine Point
     *
     * @param  string $employerId employerId (required)
     * @param  string|null $paySpineId paySpineId (optional)
     * @param  string|null $effectiveDateFrom effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo effectiveDateTo (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['spinePointReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\SpinePointReportReportResponse
     */
    public function spinePointReports(
        string $employerId,
        ?string $paySpineId = null,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['spinePointReports'][0]
    ): \SynergiTech\Staffology\Model\SpinePointReportReportResponse
    {
        list($response) = $this->spinePointReportsWithHttpInfo($employerId, $paySpineId, $effectiveDateFrom, $effectiveDateTo, $accept, $contentType);
        return $response;
    }

    /**
     * Operation spinePointReportsWithHttpInfo
     *
     * Spine Point
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['spinePointReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\SpinePointReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spinePointReportsWithHttpInfo(
        string $employerId,
        ?string $paySpineId = null,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['spinePointReports'][0]
    ): array
    {
        $request = $this->spinePointReportsRequest($employerId, $paySpineId, $effectiveDateFrom, $effectiveDateTo, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\SpinePointReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\SpinePointReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\SpinePointReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\SpinePointReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\SpinePointReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation spinePointReportsAsync
     *
     * Spine Point
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['spinePointReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function spinePointReportsAsync(
        string $employerId,
        ?string $paySpineId = null,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['spinePointReports'][0]
    ): PromiseInterface
    {
        return $this->spinePointReportsAsyncWithHttpInfo($employerId, $paySpineId, $effectiveDateFrom, $effectiveDateTo, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation spinePointReportsAsyncWithHttpInfo
     *
     * Spine Point
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['spinePointReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function spinePointReportsAsyncWithHttpInfo(
        string $employerId,
        ?string $paySpineId = null,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['spinePointReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\SpinePointReportReportResponse';
        $request = $this->spinePointReportsRequest($employerId, $paySpineId, $effectiveDateFrom, $effectiveDateTo, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'spinePointReports'
     *
     * @param  string $employerId (required)
     * @param  string|null $paySpineId (optional)
     * @param  string|null $effectiveDateFrom (optional)
     * @param  string|null $effectiveDateTo (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['spinePointReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function spinePointReportsRequest(
        string $employerId,
        ?string $paySpineId = null,
        ?string $effectiveDateFrom = null,
        ?string $effectiveDateTo = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['spinePointReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling spinePointReports'
            );
        }






        $resourcePath = '/employers/{employerId}/reports/spinepoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paySpineId,
            'paySpineId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectiveDateFrom,
            'effectiveDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectiveDateTo,
            'effectiveDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation statutoryPayReports
     *
     * Statutory Pay
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $statutoryPayTypes Comma separated values from (SAP, SHPP, SMP, SPBP, SPP) (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['statutoryPayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\StatutoryPayReportReportResponse
     */
    public function statutoryPayReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $statutoryPayTypes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['statutoryPayReports'][0]
    ): \SynergiTech\Staffology\Model\StatutoryPayReportReportResponse
    {
        list($response) = $this->statutoryPayReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $statutoryPayTypes, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation statutoryPayReportsWithHttpInfo
     *
     * Statutory Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $statutoryPayTypes Comma separated values from (SAP, SHPP, SMP, SPBP, SPP) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['statutoryPayReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\StatutoryPayReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function statutoryPayReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $statutoryPayTypes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['statutoryPayReports'][0]
    ): array
    {
        $request = $this->statutoryPayReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $statutoryPayTypes, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\StatutoryPayReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\StatutoryPayReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\StatutoryPayReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\StatutoryPayReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\StatutoryPayReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation statutoryPayReportsAsync
     *
     * Statutory Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $statutoryPayTypes Comma separated values from (SAP, SHPP, SMP, SPBP, SPP) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['statutoryPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function statutoryPayReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $statutoryPayTypes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['statutoryPayReports'][0]
    ): PromiseInterface
    {
        return $this->statutoryPayReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $statutoryPayTypes, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation statutoryPayReportsAsyncWithHttpInfo
     *
     * Statutory Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $statutoryPayTypes Comma separated values from (SAP, SHPP, SMP, SPBP, SPP) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['statutoryPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function statutoryPayReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $statutoryPayTypes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['statutoryPayReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\StatutoryPayReportReportResponse';
        $request = $this->statutoryPayReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $statutoryPayTypes, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'statutoryPayReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $statutoryPayTypes Comma separated values from (SAP, SHPP, SMP, SPBP, SPP) (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['statutoryPayReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function statutoryPayReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $statutoryPayTypes = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['statutoryPayReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling statutoryPayReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling statutoryPayReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling statutoryPayReports'
            );
        }







        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/statutory-pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statutoryPayTypes,
            'statutoryPayTypes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taxCodeChangesReports
     *
     * Taxcode Change
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['taxCodeChangesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse
     */
    public function taxCodeChangesReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['taxCodeChangesReports'][0]
    ): \SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse
    {
        list($response) = $this->taxCodeChangesReportsWithHttpInfo($employerId, $taxYear, $accept, $contentType);
        return $response;
    }

    /**
     * Operation taxCodeChangesReportsWithHttpInfo
     *
     * Taxcode Change
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['taxCodeChangesReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function taxCodeChangesReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['taxCodeChangesReports'][0]
    ): array
    {
        $request = $this->taxCodeChangesReportsRequest($employerId, $taxYear, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxCodeChangesReportsAsync
     *
     * Taxcode Change
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['taxCodeChangesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function taxCodeChangesReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['taxCodeChangesReports'][0]
    ): PromiseInterface
    {
        return $this->taxCodeChangesReportsAsyncWithHttpInfo($employerId, $taxYear, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxCodeChangesReportsAsyncWithHttpInfo
     *
     * Taxcode Change
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['taxCodeChangesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function taxCodeChangesReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['taxCodeChangesReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\TaxCodeChangeReportReportResponse';
        $request = $this->taxCodeChangesReportsRequest($employerId, $taxYear, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxCodeChangesReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['taxCodeChangesReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function taxCodeChangesReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $accept = null,
        string $contentType = self::contentTypes['taxCodeChangesReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling taxCodeChangesReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling taxCodeChangesReports'
            );
        }



        $resourcePath = '/employers/{employerId}/reports/{taxYear}/taxcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teachersPensionEoyReports
     *
     * Teachers Pension Eoy Report
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $localAuthorityNumber localAuthorityNumber (optional)
     * @param  string|null $schoolEmployerType schoolEmployerType (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teachersPensionEoyReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse
     */
    public function teachersPensionEoyReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $localAuthorityNumber = null,
        ?string $schoolEmployerType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['teachersPensionEoyReports'][0]
    ): \SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse
    {
        list($response) = $this->teachersPensionEoyReportsWithHttpInfo($employerId, $taxYear, $localAuthorityNumber, $schoolEmployerType, $accept, $contentType);
        return $response;
    }

    /**
     * Operation teachersPensionEoyReportsWithHttpInfo
     *
     * Teachers Pension Eoy Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $localAuthorityNumber (optional)
     * @param  string|null $schoolEmployerType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teachersPensionEoyReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teachersPensionEoyReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $localAuthorityNumber = null,
        ?string $schoolEmployerType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['teachersPensionEoyReports'][0]
    ): array
    {
        $request = $this->teachersPensionEoyReportsRequest($employerId, $taxYear, $localAuthorityNumber, $schoolEmployerType, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teachersPensionEoyReportsAsync
     *
     * Teachers Pension Eoy Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $localAuthorityNumber (optional)
     * @param  string|null $schoolEmployerType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teachersPensionEoyReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function teachersPensionEoyReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $localAuthorityNumber = null,
        ?string $schoolEmployerType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['teachersPensionEoyReports'][0]
    ): PromiseInterface
    {
        return $this->teachersPensionEoyReportsAsyncWithHttpInfo($employerId, $taxYear, $localAuthorityNumber, $schoolEmployerType, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teachersPensionEoyReportsAsyncWithHttpInfo
     *
     * Teachers Pension Eoy Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $localAuthorityNumber (optional)
     * @param  string|null $schoolEmployerType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teachersPensionEoyReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function teachersPensionEoyReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $localAuthorityNumber = null,
        ?string $schoolEmployerType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['teachersPensionEoyReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\TeachersPensionEoyReportReportResponse';
        $request = $this->teachersPensionEoyReportsRequest($employerId, $taxYear, $localAuthorityNumber, $schoolEmployerType, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teachersPensionEoyReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $localAuthorityNumber (optional)
     * @param  string|null $schoolEmployerType (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['teachersPensionEoyReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function teachersPensionEoyReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $localAuthorityNumber = null,
        ?string $schoolEmployerType = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['teachersPensionEoyReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling teachersPensionEoyReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling teachersPensionEoyReports'
            );
        }





        $resourcePath = '/employers/{employerId}/reports/{taxYear}/teachersPensionEoy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $localAuthorityNumber,
            'localAuthorityNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schoolEmployerType,
            'schoolEmployerType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation umbrellaReconciliationReports
     *
     * Umbrella Reconciliation
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string|null $employeeId Specify an employee id to report on just that employee, otherwise all employees will be included. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['umbrellaReconciliationReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse
     */
    public function umbrellaReconciliationReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['umbrellaReconciliationReports'][0]
    ): \SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse
    {
        list($response) = $this->umbrellaReconciliationReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation umbrellaReconciliationReportsWithHttpInfo
     *
     * Umbrella Reconciliation
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId Specify an employee id to report on just that employee, otherwise all employees will be included. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['umbrellaReconciliationReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function umbrellaReconciliationReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['umbrellaReconciliationReports'][0]
    ): array
    {
        $request = $this->umbrellaReconciliationReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation umbrellaReconciliationReportsAsync
     *
     * Umbrella Reconciliation
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId Specify an employee id to report on just that employee, otherwise all employees will be included. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['umbrellaReconciliationReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function umbrellaReconciliationReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['umbrellaReconciliationReports'][0]
    ): PromiseInterface
    {
        return $this->umbrellaReconciliationReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation umbrellaReconciliationReportsAsyncWithHttpInfo
     *
     * Umbrella Reconciliation
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId Specify an employee id to report on just that employee, otherwise all employees will be included. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['umbrellaReconciliationReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function umbrellaReconciliationReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['umbrellaReconciliationReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\UmbrellaReconciliationReportReportResponse';
        $request = $this->umbrellaReconciliationReportsRequest($employerId, $payPeriod, $taxYear, $fromPeriod, $toPeriod, $accept, $ordinal, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'umbrellaReconciliationReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId Specify an employee id to report on just that employee, otherwise all employees will be included. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['umbrellaReconciliationReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function umbrellaReconciliationReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?string $accept = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['umbrellaReconciliationReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling umbrellaReconciliationReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling umbrellaReconciliationReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling umbrellaReconciliationReports'
            );
        }







        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/umbrella-reconciliation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation varianceReportReports
     *
     * Variance Report
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  int|null $fromPeriod fromPeriod (optional)
     * @param  int|null $toPeriod toPeriod (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriodCompare payPeriodCompare (optional)
     * @param  int|null $ordinalCompare ordinalCompare (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare taxYearCompare (optional)
     * @param  int|null $fromPeriodCompare fromPeriodCompare (optional)
     * @param  int|null $toPeriodCompare toPeriodCompare (optional)
     * @param  bool|null $showPercentage If true then any variations will be shown as a percentage. (optional)
     * @param  float|null $minChange Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['varianceReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\VarianceReportReportResponse
     */
    public function varianceReportReports(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriodCompare = null,
        ?int $ordinalCompare = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $fromPeriodCompare = null,
        ?int $toPeriodCompare = null,
        ?bool $showPercentage = null,
        ?float $minChange = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['varianceReportReports'][0]
    ): \SynergiTech\Staffology\Model\VarianceReportReportResponse
    {
        list($response) = $this->varianceReportReportsWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $fromPeriod, $toPeriod, $payPeriodCompare, $ordinalCompare, $taxYearCompare, $fromPeriodCompare, $toPeriodCompare, $showPercentage, $minChange, $accept, $contentType);
        return $response;
    }

    /**
     * Operation varianceReportReportsWithHttpInfo
     *
     * Variance Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriodCompare (optional)
     * @param  int|null $ordinalCompare (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $fromPeriodCompare (optional)
     * @param  int|null $toPeriodCompare (optional)
     * @param  bool|null $showPercentage If true then any variations will be shown as a percentage. (optional)
     * @param  float|null $minChange Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['varianceReportReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\VarianceReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function varianceReportReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriodCompare = null,
        ?int $ordinalCompare = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $fromPeriodCompare = null,
        ?int $toPeriodCompare = null,
        ?bool $showPercentage = null,
        ?float $minChange = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['varianceReportReports'][0]
    ): array
    {
        $request = $this->varianceReportReportsRequest($employerId, $payPeriod, $taxYear, $ordinal, $fromPeriod, $toPeriod, $payPeriodCompare, $ordinalCompare, $taxYearCompare, $fromPeriodCompare, $toPeriodCompare, $showPercentage, $minChange, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\VarianceReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\VarianceReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\VarianceReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\VarianceReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\VarianceReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation varianceReportReportsAsync
     *
     * Variance Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriodCompare (optional)
     * @param  int|null $ordinalCompare (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $fromPeriodCompare (optional)
     * @param  int|null $toPeriodCompare (optional)
     * @param  bool|null $showPercentage If true then any variations will be shown as a percentage. (optional)
     * @param  float|null $minChange Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['varianceReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function varianceReportReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriodCompare = null,
        ?int $ordinalCompare = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $fromPeriodCompare = null,
        ?int $toPeriodCompare = null,
        ?bool $showPercentage = null,
        ?float $minChange = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['varianceReportReports'][0]
    ): PromiseInterface
    {
        return $this->varianceReportReportsAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $fromPeriod, $toPeriod, $payPeriodCompare, $ordinalCompare, $taxYearCompare, $fromPeriodCompare, $toPeriodCompare, $showPercentage, $minChange, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation varianceReportReportsAsyncWithHttpInfo
     *
     * Variance Report
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriodCompare (optional)
     * @param  int|null $ordinalCompare (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $fromPeriodCompare (optional)
     * @param  int|null $toPeriodCompare (optional)
     * @param  bool|null $showPercentage If true then any variations will be shown as a percentage. (optional)
     * @param  float|null $minChange Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['varianceReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function varianceReportReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriodCompare = null,
        ?int $ordinalCompare = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $fromPeriodCompare = null,
        ?int $toPeriodCompare = null,
        ?bool $showPercentage = null,
        ?float $minChange = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['varianceReportReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\VarianceReportReportResponse';
        $request = $this->varianceReportReportsRequest($employerId, $payPeriod, $taxYear, $ordinal, $fromPeriod, $toPeriod, $payPeriodCompare, $ordinalCompare, $taxYearCompare, $fromPeriodCompare, $toPeriodCompare, $showPercentage, $minChange, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'varianceReportReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  int|null $fromPeriod (optional)
     * @param  int|null $toPeriod (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriodCompare (optional)
     * @param  int|null $ordinalCompare (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYearCompare (optional)
     * @param  int|null $fromPeriodCompare (optional)
     * @param  int|null $toPeriodCompare (optional)
     * @param  bool|null $showPercentage If true then any variations will be shown as a percentage. (optional)
     * @param  float|null $minChange Set a threshold for reporting variance. Ie, provide 0.10 and any variance below 10% will be ignored (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['varianceReportReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function varianceReportReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?int $fromPeriod = null,
        ?int $toPeriod = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriodCompare = null,
        ?int $ordinalCompare = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYearCompare = null,
        ?int $fromPeriodCompare = null,
        ?int $toPeriodCompare = null,
        ?bool $showPercentage = null,
        ?float $minChange = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['varianceReportReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling varianceReportReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling varianceReportReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling varianceReportReports'
            );
        }













        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/variance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriod,
            'fromPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriod,
            'toPeriod', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriodCompare?->value,
            'payPeriodCompare', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinalCompare,
            'ordinalCompare', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYearCompare?->value,
            'taxYearCompare', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromPeriodCompare,
            'fromPeriodCompare', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toPeriodCompare,
            'toPeriodCompare', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $showPercentage,
            'showPercentage', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minChange,
            'minChange', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'text/html', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warningsReports
     *
     * Export Payroll Run Warnings
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  string|null $accept accept (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warningsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\WarningsReportReportResponse
     */
    public function warningsReports(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['warningsReports'][0]
    ): \SynergiTech\Staffology\Model\WarningsReportReportResponse
    {
        list($response) = $this->warningsReportsWithHttpInfo($employerId, $taxYear, $payPeriod, $periodNumber, $accept, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation warningsReportsWithHttpInfo
     *
     * Export Payroll Run Warnings
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warningsReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\WarningsReportReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function warningsReportsWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['warningsReports'][0]
    ): array
    {
        $request = $this->warningsReportsRequest($employerId, $taxYear, $payPeriod, $periodNumber, $accept, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\WarningsReportReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\WarningsReportReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\WarningsReportReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\WarningsReportReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\WarningsReportReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warningsReportsAsync
     *
     * Export Payroll Run Warnings
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warningsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function warningsReportsAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['warningsReports'][0]
    ): PromiseInterface
    {
        return $this->warningsReportsAsyncWithHttpInfo($employerId, $taxYear, $payPeriod, $periodNumber, $accept, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warningsReportsAsyncWithHttpInfo
     *
     * Export Payroll Run Warnings
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warningsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function warningsReportsAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['warningsReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\WarningsReportReportResponse';
        $request = $this->warningsReportsRequest($employerId, $taxYear, $payPeriod, $periodNumber, $accept, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warningsReports'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  string|null $accept (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warningsReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warningsReportsRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?string $accept = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['warningsReports'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling warningsReports'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling warningsReports'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling warningsReports'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling warningsReports'
            );
        }




        $resourcePath = '/employers/{employerId}/reports/{taxYear}/{payPeriod}/{periodNumber}/PayrollRunWarnings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', 'application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ytdReports
     *
     * Year To Date Values
     *
     * @param  string|null $employerId employerId (optional)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function ytdReports(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['ytdReports'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->ytdReportsWithHttpInfo($employerId, $accept, $contentType);
        return $response;
    }

    /**
     * Operation ytdReportsWithHttpInfo
     *
     * Year To Date Values
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdReports'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ytdReportsWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['ytdReports'][0]
    ): array
    {
        $request = $this->ytdReportsRequest($employerId, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ytdReportsAsync
     *
     * Year To Date Values
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function ytdReportsAsync(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['ytdReports'][0]
    ): PromiseInterface
    {
        return $this->ytdReportsAsyncWithHttpInfo($employerId, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ytdReportsAsyncWithHttpInfo
     *
     * Year To Date Values
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function ytdReportsAsyncWithHttpInfo(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['ytdReports'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->ytdReportsRequest($employerId, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ytdReports'
     *
     * @param  string|null $employerId (optional)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdReports'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ytdReportsRequest(
        ?string $employerId = null,
        ?string $accept = null,
        string $contentType = self::contentTypes['ytdReports'][0]
    ): Request
    {




        $resourcePath = '/ytd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employerId,
            'employerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
