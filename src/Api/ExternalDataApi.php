<?php
/**
 * ExternalDataApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * ExternalDataApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExternalDataApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'authorizeExternalData' => [
            'application/json',
        ],
        'companiesExternalData' => [
            'application/json',
        ],
        'disconnectExternalData' => [
            'application/json',
        ],
        'employeeExternalData' => [
            'application/json',
        ],
        'employeeLogsExternalData' => [
            'application/json',
        ],
        'employeesExternalData' => [
            'application/json',
        ],
        'getConfigDataExternalData' => [
            'application/json',
        ],
        'importEmployeesExternalData' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'listExternalData' => [
            'application/json',
        ],
        'nominalCodesExternalData' => [
            'application/json',
        ],
        'pensionContributionsCsvExternalData' => [
            'application/json',
        ],
        'postJournalExternalData' => [
            'application/json',
        ],
        'postPaymentsExternalData' => [
            'application/json',
        ],
        'pushEmployeesExternalData' => [
            'application/json',
        ],
        'pushP11DExternalData' => [
            'application/json',
        ],
        'pushP11DsExternalData' => [
            'application/json',
        ],
        'pushP45ExternalData' => [
            'application/json',
        ],
        'pushP45sExternalData' => [
            'application/json',
        ],
        'pushP60ExternalData' => [
            'application/json',
        ],
        'pushP60sExternalData' => [
            'application/json',
        ],
        'pushPayslipsExternalData' => [
            'application/json',
        ],
        'pushPensionLetterExternalData' => [
            'application/json',
        ],
        'pushPensionLettersExternalData' => [
            'application/json',
        ],
        'respondExternalData' => [
            'application/json',
        ],
        'setConfigDataExternalData' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setCredentialsExternalData' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'syncAllEmployeesExternalData' => [
            'application/json',
        ],
        'syncEmployeeExternalData' => [
            'application/json',
        ],
        'syncLeaveExternalData' => [
            'application/json',
        ],
        'timeAndAttendanceExternalData' => [
            'application/json',
        ],
        'updateEmployeeExternalData' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation authorizeExternalData
     *
     * Get Authorization Url
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $returnUrl The URL to send the user to once the process is complete. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function authorizeExternalData(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $returnUrl = null,
        string $contentType = self::contentTypes['authorizeExternalData'][0]
    ): string
    {
        list($response) = $this->authorizeExternalDataWithHttpInfo($employerId, $id, $returnUrl, $contentType);
        return $response;
    }

    /**
     * Operation authorizeExternalDataWithHttpInfo
     *
     * Get Authorization Url
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $returnUrl The URL to send the user to once the process is complete. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeExternalDataWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $returnUrl = null,
        string $contentType = self::contentTypes['authorizeExternalData'][0]
    ): array
    {
        $request = $this->authorizeExternalDataRequest($employerId, $id, $returnUrl, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizeExternalDataAsync
     *
     * Get Authorization Url
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $returnUrl The URL to send the user to once the process is complete. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function authorizeExternalDataAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $returnUrl = null,
        string $contentType = self::contentTypes['authorizeExternalData'][0]
    ): PromiseInterface
    {
        return $this->authorizeExternalDataAsyncWithHttpInfo($employerId, $id, $returnUrl, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeExternalDataAsyncWithHttpInfo
     *
     * Get Authorization Url
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $returnUrl The URL to send the user to once the process is complete. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function authorizeExternalDataAsyncWithHttpInfo(
        $employerId,
        $id,
        $returnUrl = null,
        string $contentType = self::contentTypes['authorizeExternalData'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->authorizeExternalDataRequest($employerId, $id, $returnUrl, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorizeExternalData'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $returnUrl The URL to send the user to once the process is complete. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authorizeExternalDataRequest(
        $employerId,
        $id,
        $returnUrl = null,
        string $contentType = self::contentTypes['authorizeExternalData'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling authorizeExternalData'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling authorizeExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $returnUrl,
            'returnUrl', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companiesExternalData
     *
     * List Companies
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ExternalDataCompany[]
     */
    public function companiesExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['companiesExternalData'][0]
    ): array
    {
        list($response) = $this->companiesExternalDataWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation companiesExternalDataWithHttpInfo
     *
     * List Companies
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ExternalDataCompany[], HTTP status code, HTTP response headers (array of strings)
     */
    public function companiesExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['companiesExternalData'][0]
    ): array
    {
        $request = $this->companiesExternalDataRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ExternalDataCompany[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ExternalDataCompany[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ExternalDataCompany[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ExternalDataCompany[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ExternalDataCompany[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companiesExternalDataAsync
     *
     * List Companies
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function companiesExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['companiesExternalData'][0]
    ): PromiseInterface
    {
        return $this->companiesExternalDataAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companiesExternalDataAsyncWithHttpInfo
     *
     * List Companies
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function companiesExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['companiesExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ExternalDataCompany[]';
        $request = $this->companiesExternalDataRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companiesExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companiesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companiesExternalDataRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['companiesExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling companiesExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling companiesExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disconnectExternalData
     *
     * Disconnect
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to disconnect from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disconnectExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function disconnectExternalData(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $contentType = self::contentTypes['disconnectExternalData'][0]
    ): void
    {
        $this->disconnectExternalDataWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation disconnectExternalDataWithHttpInfo
     *
     * Disconnect
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to disconnect from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disconnectExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disconnectExternalDataWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $contentType = self::contentTypes['disconnectExternalData'][0]
    ): array
    {
        $request = $this->disconnectExternalDataRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation disconnectExternalDataAsync
     *
     * Disconnect
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to disconnect from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disconnectExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function disconnectExternalDataAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $contentType = self::contentTypes['disconnectExternalData'][0]
    ): PromiseInterface
    {
        return $this->disconnectExternalDataAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disconnectExternalDataAsyncWithHttpInfo
     *
     * Disconnect
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to disconnect from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disconnectExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function disconnectExternalDataAsyncWithHttpInfo(
        $employerId,
        $id,
        string $contentType = self::contentTypes['disconnectExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->disconnectExternalDataRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disconnectExternalData'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to disconnect from. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disconnectExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disconnectExternalDataRequest(
        $employerId,
        $id,
        string $contentType = self::contentTypes['disconnectExternalData'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling disconnectExternalData'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling disconnectExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/disconnect';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeExternalData
     *
     * Get Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ExternalEmployeeMapping
     */
    public function employeeExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['employeeExternalData'][0]
    ): \SynergiTech\Staffology\Model\ExternalEmployeeMapping
    {
        list($response) = $this->employeeExternalDataWithHttpInfo($id, $employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation employeeExternalDataWithHttpInfo
     *
     * Get Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ExternalEmployeeMapping, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['employeeExternalData'][0]
    ): array
    {
        $request = $this->employeeExternalDataRequest($id, $employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ExternalEmployeeMapping', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ExternalEmployeeMapping' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ExternalEmployeeMapping', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ExternalEmployeeMapping';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ExternalEmployeeMapping',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeExternalDataAsync
     *
     * Get Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['employeeExternalData'][0]
    ): PromiseInterface
    {
        return $this->employeeExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeExternalDataAsyncWithHttpInfo
     *
     * Get Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['employeeExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ExternalEmployeeMapping';
        $request = $this->employeeExternalDataRequest($id, $employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeExternalDataRequest(
        $id,
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['employeeExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling employeeExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employeeExternalData'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling employeeExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/employees/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeLogsExternalData
     *
     * Get Employee Logs
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLogsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\LogEntry[]
     */
    public function employeeLogsExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['employeeLogsExternalData'][0]
    ): array
    {
        list($response) = $this->employeeLogsExternalDataWithHttpInfo($id, $employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation employeeLogsExternalDataWithHttpInfo
     *
     * Get Employee Logs
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLogsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\LogEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeLogsExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['employeeLogsExternalData'][0]
    ): array
    {
        $request = $this->employeeLogsExternalDataRequest($id, $employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\LogEntry[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\LogEntry[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\LogEntry[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\LogEntry[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\LogEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeLogsExternalDataAsync
     *
     * Get Employee Logs
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLogsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeLogsExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['employeeLogsExternalData'][0]
    ): PromiseInterface
    {
        return $this->employeeLogsExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeLogsExternalDataAsyncWithHttpInfo
     *
     * Get Employee Logs
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLogsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeeLogsExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['employeeLogsExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\LogEntry[]';
        $request = $this->employeeLogsExternalDataRequest($id, $employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeLogsExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeLogsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeLogsExternalDataRequest(
        $id,
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['employeeLogsExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling employeeLogsExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employeeLogsExternalData'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling employeeLogsExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/employees/{employeeId}/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeesExternalData
     *
     * List Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function employeesExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['employeesExternalData'][0]
    ): array
    {
        list($response) = $this->employeesExternalDataWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation employeesExternalDataWithHttpInfo
     *
     * List Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeesExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['employeesExternalData'][0]
    ): array
    {
        $request = $this->employeesExternalDataRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeesExternalDataAsync
     *
     * List Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeesExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['employeesExternalData'][0]
    ): PromiseInterface
    {
        return $this->employeesExternalDataAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeesExternalDataAsyncWithHttpInfo
     *
     * List Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employeesExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['employeesExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->employeesExternalDataRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeesExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeesExternalDataRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['employeesExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling employeesExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employeesExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConfigDataExternalData
     *
     * Get Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed
     */
    public function getConfigDataExternalData(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $contentType = self::contentTypes['getConfigDataExternalData'][0]
    ): mixed
    {
        list($response) = $this->getConfigDataExternalDataWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getConfigDataExternalDataWithHttpInfo
     *
     * Get Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigDataExternalDataWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $contentType = self::contentTypes['getConfigDataExternalData'][0]
    ): array
    {
        $request = $this->getConfigDataExternalDataRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConfigDataExternalDataAsync
     *
     * Get Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getConfigDataExternalDataAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $contentType = self::contentTypes['getConfigDataExternalData'][0]
    ): PromiseInterface
    {
        return $this->getConfigDataExternalDataAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConfigDataExternalDataAsyncWithHttpInfo
     *
     * Get Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getConfigDataExternalDataAsyncWithHttpInfo(
        $employerId,
        $id,
        string $contentType = self::contentTypes['getConfigDataExternalData'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->getConfigDataExternalDataRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConfigDataExternalData'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConfigDataExternalDataRequest(
        $employerId,
        $id,
        string $contentType = self::contentTypes['getConfigDataExternalData'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getConfigDataExternalData'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getConfigDataExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importEmployeesExternalData
     *
     * Import Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string[]|null $requestBody The externalIds to import (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function importEmployeesExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?array $requestBody = null,
        string $contentType = self::contentTypes['importEmployeesExternalData'][0]
    ): array
    {
        list($response) = $this->importEmployeesExternalDataWithHttpInfo($id, $employerId, $requestBody, $contentType);
        return $response;
    }

    /**
     * Operation importEmployeesExternalDataWithHttpInfo
     *
     * Import Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string[]|null $requestBody The externalIds to import (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importEmployeesExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?array $requestBody = null,
        string $contentType = self::contentTypes['importEmployeesExternalData'][0]
    ): array
    {
        $request = $this->importEmployeesExternalDataRequest($id, $employerId, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importEmployeesExternalDataAsync
     *
     * Import Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string[]|null $requestBody The externalIds to import (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importEmployeesExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?array $requestBody = null,
        string $contentType = self::contentTypes['importEmployeesExternalData'][0]
    ): PromiseInterface
    {
        return $this->importEmployeesExternalDataAsyncWithHttpInfo($id, $employerId, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importEmployeesExternalDataAsyncWithHttpInfo
     *
     * Import Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string[]|null $requestBody The externalIds to import (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importEmployeesExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $requestBody = null,
        string $contentType = self::contentTypes['importEmployeesExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->importEmployeesExternalDataRequest($id, $employerId, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importEmployeesExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string[]|null $requestBody The externalIds to import (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importEmployeesExternalDataRequest(
        $id,
        $employerId,
        $requestBody = null,
        string $contentType = self::contentTypes['importEmployeesExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling importEmployeesExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importEmployeesExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listExternalData
     *
     * List Providers
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ExternalDataProvider[]
     */
    public function listExternalData(
        string $employerId,
        string $contentType = self::contentTypes['listExternalData'][0]
    ): array
    {
        list($response) = $this->listExternalDataWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation listExternalDataWithHttpInfo
     *
     * List Providers
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ExternalDataProvider[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listExternalDataWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['listExternalData'][0]
    ): array
    {
        $request = $this->listExternalDataRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ExternalDataProvider[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ExternalDataProvider[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ExternalDataProvider[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ExternalDataProvider[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ExternalDataProvider[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listExternalDataAsync
     *
     * List Providers
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listExternalDataAsync(
        string $employerId,
        string $contentType = self::contentTypes['listExternalData'][0]
    ): PromiseInterface
    {
        return $this->listExternalDataAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listExternalDataAsyncWithHttpInfo
     *
     * List Providers
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listExternalDataAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['listExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ExternalDataProvider[]';
        $request = $this->listExternalDataRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listExternalData'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listExternalDataRequest(
        $employerId,
        string $contentType = self::contentTypes['listExternalData'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling listExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation nominalCodesExternalData
     *
     * List Nominal Codes
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nominalCodesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function nominalCodesExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['nominalCodesExternalData'][0]
    ): array
    {
        list($response) = $this->nominalCodesExternalDataWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation nominalCodesExternalDataWithHttpInfo
     *
     * List Nominal Codes
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nominalCodesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function nominalCodesExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['nominalCodesExternalData'][0]
    ): array
    {
        $request = $this->nominalCodesExternalDataRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation nominalCodesExternalDataAsync
     *
     * List Nominal Codes
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nominalCodesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function nominalCodesExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['nominalCodesExternalData'][0]
    ): PromiseInterface
    {
        return $this->nominalCodesExternalDataAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation nominalCodesExternalDataAsyncWithHttpInfo
     *
     * List Nominal Codes
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nominalCodesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function nominalCodesExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['nominalCodesExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->nominalCodesExternalDataRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'nominalCodesExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['nominalCodesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function nominalCodesExternalDataRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['nominalCodesExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling nominalCodesExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling nominalCodesExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/nominals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pensionContributionsCsvExternalData
     *
     * Contributions CSV File
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionContributionsCsvExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function pensionContributionsCsvExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionContributionsCsvExternalData'][0]
    ): string
    {
        list($response) = $this->pensionContributionsCsvExternalDataWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation pensionContributionsCsvExternalDataWithHttpInfo
     *
     * Contributions CSV File
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionContributionsCsvExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function pensionContributionsCsvExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionContributionsCsvExternalData'][0]
    ): array
    {
        $request = $this->pensionContributionsCsvExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pensionContributionsCsvExternalDataAsync
     *
     * Contributions CSV File
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionContributionsCsvExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pensionContributionsCsvExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?string $schemeId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pensionContributionsCsvExternalData'][0]
    ): PromiseInterface
    {
        return $this->pensionContributionsCsvExternalDataAsyncWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pensionContributionsCsvExternalDataAsyncWithHttpInfo
     *
     * Contributions CSV File
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionContributionsCsvExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pensionContributionsCsvExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $schemeId = null,
        $ordinal = 1,
        string $contentType = self::contentTypes['pensionContributionsCsvExternalData'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->pensionContributionsCsvExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $schemeId, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pensionContributionsCsvExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string|null $schemeId The Id of the Pension Scheme you want a file for. (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pensionContributionsCsvExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pensionContributionsCsvExternalDataRequest(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $schemeId = null,
        $ordinal = 1,
        string $contentType = self::contentTypes['pensionContributionsCsvExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pensionContributionsCsvExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pensionContributionsCsvExternalData'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling pensionContributionsCsvExternalData'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling pensionContributionsCsvExternalData'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling pensionContributionsCsvExternalData'
            );
        }




        $resourcePath = '/employers/{employerId}/external-data/{id}/contributions/{taxYear}/{payPeriod}/{periodNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schemeId,
            'schemeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postJournalExternalData
     *
     * Post Journal
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $force Set to true if you want to force the journal to be posted even if it already has been (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postJournalExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunJournal
     */
    public function postJournalExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $force = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['postJournalExternalData'][0]
    ): \SynergiTech\Staffology\Model\PayRunJournal
    {
        list($response) = $this->postJournalExternalDataWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation postJournalExternalDataWithHttpInfo
     *
     * Post Journal
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $force Set to true if you want to force the journal to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postJournalExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunJournal, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJournalExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $force = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['postJournalExternalData'][0]
    ): array
    {
        $request = $this->postJournalExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunJournal', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunJournal' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunJournal', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunJournal';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunJournal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postJournalExternalDataAsync
     *
     * Post Journal
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $force Set to true if you want to force the journal to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postJournalExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postJournalExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $force = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['postJournalExternalData'][0]
    ): PromiseInterface
    {
        return $this->postJournalExternalDataAsyncWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postJournalExternalDataAsyncWithHttpInfo
     *
     * Post Journal
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $force Set to true if you want to force the journal to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postJournalExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postJournalExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $force = null,
        $ordinal = 1,
        string $contentType = self::contentTypes['postJournalExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunJournal';
        $request = $this->postJournalExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postJournalExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $force Set to true if you want to force the journal to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postJournalExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postJournalExternalDataRequest(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $force = null,
        $ordinal = 1,
        string $contentType = self::contentTypes['postJournalExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling postJournalExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling postJournalExternalData'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling postJournalExternalData'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling postJournalExternalData'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling postJournalExternalData'
            );
        }




        $resourcePath = '/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/journal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPaymentsExternalData
     *
     * Post Payments
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $incEmployees Include payments for employees (optional)
     * @param  bool|null $incHmrc Include payments for HMRC (if any) (optional)
     * @param  bool|null $incPensions Include payments for Pension Providers (if any) (optional)
     * @param  bool|null $incAeos Include any payment due as a result of AttachmentOrders (if any) (optional)
     * @param  bool|null $incDeductions Include any payment due to Deductions that are set to be paid to a Payee (if any) (optional)
     * @param  bool|null $force Set to true if you want to force the payments to be posted even if it already has been (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  \DateTime|null $paymentDate Optional. If a value is provided then it&#39;ll be used in place of the payment date for the payment. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\BankPaymentInstruction
     */
    public function postPaymentsExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $incEmployees = null,
        ?bool $incHmrc = null,
        ?bool $incPensions = null,
        ?bool $incAeos = null,
        ?bool $incDeductions = null,
        ?bool $force = null,
        ?int $ordinal = 1,
        ?\DateTime $paymentDate = null,
        string $contentType = self::contentTypes['postPaymentsExternalData'][0]
    ): \SynergiTech\Staffology\Model\BankPaymentInstruction
    {
        list($response) = $this->postPaymentsExternalDataWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $incEmployees, $incHmrc, $incPensions, $incAeos, $incDeductions, $force, $ordinal, $paymentDate, $contentType);
        return $response;
    }

    /**
     * Operation postPaymentsExternalDataWithHttpInfo
     *
     * Post Payments
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $incEmployees Include payments for employees (optional)
     * @param  bool|null $incHmrc Include payments for HMRC (if any) (optional)
     * @param  bool|null $incPensions Include payments for Pension Providers (if any) (optional)
     * @param  bool|null $incAeos Include any payment due as a result of AttachmentOrders (if any) (optional)
     * @param  bool|null $incDeductions Include any payment due to Deductions that are set to be paid to a Payee (if any) (optional)
     * @param  bool|null $force Set to true if you want to force the payments to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $paymentDate Optional. If a value is provided then it&#39;ll be used in place of the payment date for the payment. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\BankPaymentInstruction, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPaymentsExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $incEmployees = null,
        ?bool $incHmrc = null,
        ?bool $incPensions = null,
        ?bool $incAeos = null,
        ?bool $incDeductions = null,
        ?bool $force = null,
        ?int $ordinal = 1,
        ?\DateTime $paymentDate = null,
        string $contentType = self::contentTypes['postPaymentsExternalData'][0]
    ): array
    {
        $request = $this->postPaymentsExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $incEmployees, $incHmrc, $incPensions, $incAeos, $incDeductions, $force, $ordinal, $paymentDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\BankPaymentInstruction', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\BankPaymentInstruction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\BankPaymentInstruction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\BankPaymentInstruction';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\BankPaymentInstruction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPaymentsExternalDataAsync
     *
     * Post Payments
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $incEmployees Include payments for employees (optional)
     * @param  bool|null $incHmrc Include payments for HMRC (if any) (optional)
     * @param  bool|null $incPensions Include payments for Pension Providers (if any) (optional)
     * @param  bool|null $incAeos Include any payment due as a result of AttachmentOrders (if any) (optional)
     * @param  bool|null $incDeductions Include any payment due to Deductions that are set to be paid to a Payee (if any) (optional)
     * @param  bool|null $force Set to true if you want to force the payments to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $paymentDate Optional. If a value is provided then it&#39;ll be used in place of the payment date for the payment. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postPaymentsExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?bool $incEmployees = null,
        ?bool $incHmrc = null,
        ?bool $incPensions = null,
        ?bool $incAeos = null,
        ?bool $incDeductions = null,
        ?bool $force = null,
        ?int $ordinal = 1,
        ?\DateTime $paymentDate = null,
        string $contentType = self::contentTypes['postPaymentsExternalData'][0]
    ): PromiseInterface
    {
        return $this->postPaymentsExternalDataAsyncWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $incEmployees, $incHmrc, $incPensions, $incAeos, $incDeductions, $force, $ordinal, $paymentDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPaymentsExternalDataAsyncWithHttpInfo
     *
     * Post Payments
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $incEmployees Include payments for employees (optional)
     * @param  bool|null $incHmrc Include payments for HMRC (if any) (optional)
     * @param  bool|null $incPensions Include payments for Pension Providers (if any) (optional)
     * @param  bool|null $incAeos Include any payment due as a result of AttachmentOrders (if any) (optional)
     * @param  bool|null $incDeductions Include any payment due to Deductions that are set to be paid to a Payee (if any) (optional)
     * @param  bool|null $force Set to true if you want to force the payments to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $paymentDate Optional. If a value is provided then it&#39;ll be used in place of the payment date for the payment. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postPaymentsExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $incEmployees = null,
        $incHmrc = null,
        $incPensions = null,
        $incAeos = null,
        $incDeductions = null,
        $force = null,
        $ordinal = 1,
        $paymentDate = null,
        string $contentType = self::contentTypes['postPaymentsExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\BankPaymentInstruction';
        $request = $this->postPaymentsExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $incEmployees, $incHmrc, $incPensions, $incAeos, $incDeductions, $force, $ordinal, $paymentDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPaymentsExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod To identify the PayRun (required)
     * @param  int $periodNumber To identify the PayRun (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear To identify the PayRun (required)
     * @param  bool|null $incEmployees Include payments for employees (optional)
     * @param  bool|null $incHmrc Include payments for HMRC (if any) (optional)
     * @param  bool|null $incPensions Include payments for Pension Providers (if any) (optional)
     * @param  bool|null $incAeos Include any payment due as a result of AttachmentOrders (if any) (optional)
     * @param  bool|null $incDeductions Include any payment due to Deductions that are set to be paid to a Payee (if any) (optional)
     * @param  bool|null $force Set to true if you want to force the payments to be posted even if it already has been (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $paymentDate Optional. If a value is provided then it&#39;ll be used in place of the payment date for the payment. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPaymentsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPaymentsExternalDataRequest(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $incEmployees = null,
        $incHmrc = null,
        $incPensions = null,
        $incAeos = null,
        $incDeductions = null,
        $force = null,
        $ordinal = 1,
        $paymentDate = null,
        string $contentType = self::contentTypes['postPaymentsExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling postPaymentsExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling postPaymentsExternalData'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling postPaymentsExternalData'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling postPaymentsExternalData'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling postPaymentsExternalData'
            );
        }










        $resourcePath = '/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incEmployees,
            'incEmployees', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incHmrc,
            'incHmrc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incPensions,
            'incPensions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incAeos,
            'incAeos', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $incDeductions,
            'incDeductions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentDate,
            'paymentDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushEmployeesExternalData
     *
     * Push Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function pushEmployeesExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['pushEmployeesExternalData'][0]
    ): array
    {
        list($response) = $this->pushEmployeesExternalDataWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation pushEmployeesExternalDataWithHttpInfo
     *
     * Push Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pushEmployeesExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['pushEmployeesExternalData'][0]
    ): array
    {
        $request = $this->pushEmployeesExternalDataRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pushEmployeesExternalDataAsync
     *
     * Push Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushEmployeesExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['pushEmployeesExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushEmployeesExternalDataAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushEmployeesExternalDataAsyncWithHttpInfo
     *
     * Push Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushEmployeesExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['pushEmployeesExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->pushEmployeesExternalDataRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushEmployeesExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushEmployeesExternalDataRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['pushEmployeesExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushEmployeesExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushEmployeesExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/employees/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushP11DExternalData
     *
     * Push P11D
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string|null $employeeId employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushP11DExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP11DExternalData'][0]
    ): void
    {
        $this->pushP11DExternalDataWithHttpInfo($id, $employerId, $employeeId, $taxYear, $contentType);
    }

    /**
     * Operation pushP11DExternalDataWithHttpInfo
     *
     * Push P11D
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushP11DExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP11DExternalData'][0]
    ): array
    {
        $request = $this->pushP11DExternalDataRequest($id, $employerId, $employeeId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushP11DExternalDataAsync
     *
     * Push P11D
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP11DExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP11DExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushP11DExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushP11DExternalDataAsyncWithHttpInfo
     *
     * Push P11D
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP11DExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId = null,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP11DExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushP11DExternalDataRequest($id, $employerId, $employeeId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushP11DExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushP11DExternalDataRequest(
        $id,
        $employerId,
        $employeeId = null,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP11DExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushP11DExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushP11DExternalData'
            );
        }




        $resourcePath = '/employers/{employerId}/external-data/{id}/p11d';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushP11DsExternalData
     *
     * Push P11Ds
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushP11DsExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP11DsExternalData'][0]
    ): void
    {
        $this->pushP11DsExternalDataWithHttpInfo($id, $employerId, $taxYear, $contentType);
    }

    /**
     * Operation pushP11DsExternalDataWithHttpInfo
     *
     * Push P11Ds
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushP11DsExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP11DsExternalData'][0]
    ): array
    {
        $request = $this->pushP11DsExternalDataRequest($id, $employerId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushP11DsExternalDataAsync
     *
     * Push P11Ds
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP11DsExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP11DsExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushP11DsExternalDataAsyncWithHttpInfo($id, $employerId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushP11DsExternalDataAsyncWithHttpInfo
     *
     * Push P11Ds
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP11DsExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP11DsExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushP11DsExternalDataRequest($id, $employerId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushP11DsExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP11DsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushP11DsExternalDataRequest(
        $id,
        $employerId,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP11DsExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushP11DsExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushP11DsExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/p11ds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushP45ExternalData
     *
     * Push P45
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string|null $employeeId employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45ExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushP45ExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['pushP45ExternalData'][0]
    ): void
    {
        $this->pushP45ExternalDataWithHttpInfo($id, $employerId, $employeeId, $contentType);
    }

    /**
     * Operation pushP45ExternalDataWithHttpInfo
     *
     * Push P45
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45ExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushP45ExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['pushP45ExternalData'][0]
    ): array
    {
        $request = $this->pushP45ExternalDataRequest($id, $employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushP45ExternalDataAsync
     *
     * Push P45
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45ExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP45ExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['pushP45ExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushP45ExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushP45ExternalDataAsyncWithHttpInfo
     *
     * Push P45
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45ExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP45ExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId = null,
        string $contentType = self::contentTypes['pushP45ExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushP45ExternalDataRequest($id, $employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushP45ExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45ExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushP45ExternalDataRequest(
        $id,
        $employerId,
        $employeeId = null,
        string $contentType = self::contentTypes['pushP45ExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushP45ExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushP45ExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/p45';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushP45sExternalData
     *
     * Push P45s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the External Provider to which you want to send P45s (required)
     * @param  string $employerId The Id of the Employer for which you want to send P45s (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to send P45s (optional)
     * @param  int|null $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to send P45s (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The Tax Year for which you want to send P45s (optional)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod for which you want to send P45s (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45sExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushP45sExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $periodNumber = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pushP45sExternalData'][0]
    ): void
    {
        $this->pushP45sExternalDataWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation pushP45sExternalDataWithHttpInfo
     *
     * Push P45s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the External Provider to which you want to send P45s (required)
     * @param  string $employerId The Id of the Employer for which you want to send P45s (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to send P45s (optional)
     * @param  int|null $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to send P45s (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The Tax Year for which you want to send P45s (optional)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod for which you want to send P45s (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45sExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushP45sExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $periodNumber = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pushP45sExternalData'][0]
    ): array
    {
        $request = $this->pushP45sExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushP45sExternalDataAsync
     *
     * Push P45s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the External Provider to which you want to send P45s (required)
     * @param  string $employerId The Id of the Employer for which you want to send P45s (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to send P45s (optional)
     * @param  int|null $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to send P45s (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The Tax Year for which you want to send P45s (optional)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod for which you want to send P45s (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45sExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP45sExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $periodNumber = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['pushP45sExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushP45sExternalDataAsyncWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushP45sExternalDataAsyncWithHttpInfo
     *
     * Push P45s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the External Provider to which you want to send P45s (required)
     * @param  string $employerId The Id of the Employer for which you want to send P45s (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to send P45s (optional)
     * @param  int|null $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to send P45s (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The Tax Year for which you want to send P45s (optional)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod for which you want to send P45s (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45sExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP45sExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $payPeriod = null,
        $periodNumber = null,
        $taxYear = null,
        $ordinal = 1,
        string $contentType = self::contentTypes['pushP45sExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushP45sExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushP45sExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the External Provider to which you want to send P45s (required)
     * @param  string $employerId The Id of the Employer for which you want to send P45s (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to send P45s (optional)
     * @param  int|null $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to send P45s (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The Tax Year for which you want to send P45s (optional)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod for which you want to send P45s (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP45sExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushP45sExternalDataRequest(
        $id,
        $employerId,
        $payPeriod = null,
        $periodNumber = null,
        $taxYear = null,
        $ordinal = 1,
        string $contentType = self::contentTypes['pushP45sExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushP45sExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushP45sExternalData'
            );
        }






        $resourcePath = '/employers/{employerId}/external-data/{id}/p45s';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodNumber,
            'periodNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushP60ExternalData
     *
     * Push P60
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string|null $employeeId employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60ExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushP60ExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP60ExternalData'][0]
    ): void
    {
        $this->pushP60ExternalDataWithHttpInfo($id, $employerId, $employeeId, $taxYear, $contentType);
    }

    /**
     * Operation pushP60ExternalDataWithHttpInfo
     *
     * Push P60
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60ExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushP60ExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP60ExternalData'][0]
    ): array
    {
        $request = $this->pushP60ExternalDataRequest($id, $employerId, $employeeId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushP60ExternalDataAsync
     *
     * Push P60
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60ExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP60ExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP60ExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushP60ExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushP60ExternalDataAsyncWithHttpInfo
     *
     * Push P60
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60ExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP60ExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId = null,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP60ExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushP60ExternalDataRequest($id, $employerId, $employeeId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushP60ExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60ExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushP60ExternalDataRequest(
        $id,
        $employerId,
        $employeeId = null,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP60ExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushP60ExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushP60ExternalData'
            );
        }




        $resourcePath = '/employers/{employerId}/external-data/{id}/p60';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushP60sExternalData
     *
     * Push P60s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60sExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushP60sExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP60sExternalData'][0]
    ): void
    {
        $this->pushP60sExternalDataWithHttpInfo($id, $employerId, $taxYear, $contentType);
    }

    /**
     * Operation pushP60sExternalDataWithHttpInfo
     *
     * Push P60s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60sExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushP60sExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP60sExternalData'][0]
    ): array
    {
        $request = $this->pushP60sExternalDataRequest($id, $employerId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushP60sExternalDataAsync
     *
     * Push P60s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60sExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP60sExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['pushP60sExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushP60sExternalDataAsyncWithHttpInfo($id, $employerId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushP60sExternalDataAsyncWithHttpInfo
     *
     * Push P60s
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60sExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushP60sExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP60sExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushP60sExternalDataRequest($id, $employerId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushP60sExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushP60sExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushP60sExternalDataRequest(
        $id,
        $employerId,
        $taxYear = null,
        string $contentType = self::contentTypes['pushP60sExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushP60sExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushP60sExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/p60s';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushPayslipsExternalData
     *
     * Push Payslips
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod payPeriod (optional)
     * @param  int|null $periodNumber periodNumber (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear taxYear (optional)
     * @param  bool|null $force force (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string|null $employeeId employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPayslipsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushPayslipsExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $periodNumber = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $force = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['pushPayslipsExternalData'][0]
    ): void
    {
        $this->pushPayslipsExternalDataWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $employeeId, $contentType);
    }

    /**
     * Operation pushPayslipsExternalDataWithHttpInfo
     *
     * Push Payslips
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $periodNumber (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $force (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPayslipsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushPayslipsExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $periodNumber = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $force = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['pushPayslipsExternalData'][0]
    ): array
    {
        $request = $this->pushPayslipsExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushPayslipsExternalDataAsync
     *
     * Push Payslips
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $periodNumber (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $force (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPayslipsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushPayslipsExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $periodNumber = null,
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?bool $force = null,
        ?int $ordinal = 1,
        ?string $employeeId = null,
        string $contentType = self::contentTypes['pushPayslipsExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushPayslipsExternalDataAsyncWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushPayslipsExternalDataAsyncWithHttpInfo
     *
     * Push Payslips
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $periodNumber (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $force (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPayslipsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushPayslipsExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $payPeriod = null,
        $periodNumber = null,
        $taxYear = null,
        $force = null,
        $ordinal = 1,
        $employeeId = null,
        string $contentType = self::contentTypes['pushPayslipsExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushPayslipsExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $force, $ordinal, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushPayslipsExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod (optional)
     * @param  int|null $periodNumber (optional)
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear (optional)
     * @param  bool|null $force (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string|null $employeeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPayslipsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushPayslipsExternalDataRequest(
        $id,
        $employerId,
        $payPeriod = null,
        $periodNumber = null,
        $taxYear = null,
        $force = null,
        $ordinal = 1,
        $employeeId = null,
        string $contentType = self::contentTypes['pushPayslipsExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushPayslipsExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushPayslipsExternalData'
            );
        }








        $resourcePath = '/employers/{employerId}/external-data/{id}/payslips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodNumber,
            'periodNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushPensionLetterExternalData
     *
     * Push Pension Letter
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string|null $employeeId employeeId (optional)
     * @param  string|null $assessmentId assessmentId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLetterExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushPensionLetterExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?string $assessmentId = null,
        string $contentType = self::contentTypes['pushPensionLetterExternalData'][0]
    ): void
    {
        $this->pushPensionLetterExternalDataWithHttpInfo($id, $employerId, $employeeId, $assessmentId, $contentType);
    }

    /**
     * Operation pushPensionLetterExternalDataWithHttpInfo
     *
     * Push Pension Letter
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $assessmentId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLetterExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushPensionLetterExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?string $assessmentId = null,
        string $contentType = self::contentTypes['pushPensionLetterExternalData'][0]
    ): array
    {
        $request = $this->pushPensionLetterExternalDataRequest($id, $employerId, $employeeId, $assessmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushPensionLetterExternalDataAsync
     *
     * Push Pension Letter
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $assessmentId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLetterExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushPensionLetterExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?string $employeeId = null,
        ?string $assessmentId = null,
        string $contentType = self::contentTypes['pushPensionLetterExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushPensionLetterExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $assessmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushPensionLetterExternalDataAsyncWithHttpInfo
     *
     * Push Pension Letter
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $assessmentId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLetterExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushPensionLetterExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId = null,
        $assessmentId = null,
        string $contentType = self::contentTypes['pushPensionLetterExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushPensionLetterExternalDataRequest($id, $employerId, $employeeId, $assessmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushPensionLetterExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string|null $employeeId (optional)
     * @param  string|null $assessmentId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLetterExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushPensionLetterExternalDataRequest(
        $id,
        $employerId,
        $employeeId = null,
        $assessmentId = null,
        string $contentType = self::contentTypes['pushPensionLetterExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushPensionLetterExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushPensionLetterExternalData'
            );
        }




        $resourcePath = '/employers/{employerId}/external-data/{id}/pension-letter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $assessmentId,
            'assessmentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pushPensionLettersExternalData
     *
     * Push Pension Letters
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLettersExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function pushPensionLettersExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['pushPensionLettersExternalData'][0]
    ): void
    {
        $this->pushPensionLettersExternalDataWithHttpInfo($id, $employerId, $contentType);
    }

    /**
     * Operation pushPensionLettersExternalDataWithHttpInfo
     *
     * Push Pension Letters
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLettersExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pushPensionLettersExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['pushPensionLettersExternalData'][0]
    ): array
    {
        $request = $this->pushPensionLettersExternalDataRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pushPensionLettersExternalDataAsync
     *
     * Push Pension Letters
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLettersExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushPensionLettersExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['pushPensionLettersExternalData'][0]
    ): PromiseInterface
    {
        return $this->pushPensionLettersExternalDataAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pushPensionLettersExternalDataAsyncWithHttpInfo
     *
     * Push Pension Letters
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLettersExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pushPensionLettersExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['pushPensionLettersExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->pushPensionLettersExternalDataRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pushPensionLettersExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pushPensionLettersExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pushPensionLettersExternalDataRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['pushPensionLettersExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling pushPensionLettersExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pushPensionLettersExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/pension-letters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation respondExternalData
     *
     * 3rd Party Response
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string|null $error error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['respondExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function respondExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $error = null,
        string $contentType = self::contentTypes['respondExternalData'][0]
    ): void
    {
        $this->respondExternalDataWithHttpInfo($id, $error, $contentType);
    }

    /**
     * Operation respondExternalDataWithHttpInfo
     *
     * 3rd Party Response
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string|null $error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['respondExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function respondExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $error = null,
        string $contentType = self::contentTypes['respondExternalData'][0]
    ): array
    {
        $request = $this->respondExternalDataRequest($id, $error, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation respondExternalDataAsync
     *
     * 3rd Party Response
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string|null $error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['respondExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function respondExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $error = null,
        string $contentType = self::contentTypes['respondExternalData'][0]
    ): PromiseInterface
    {
        return $this->respondExternalDataAsyncWithHttpInfo($id, $error, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation respondExternalDataAsyncWithHttpInfo
     *
     * 3rd Party Response
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string|null $error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['respondExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function respondExternalDataAsyncWithHttpInfo(
        $id,
        $error = null,
        string $contentType = self::contentTypes['respondExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->respondExternalDataRequest($id, $error, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'respondExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string|null $error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['respondExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function respondExternalDataRequest(
        $id,
        $error = null,
        string $contentType = self::contentTypes['respondExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling respondExternalData'
            );
        }



        $resourcePath = '/external-data/{id}/respond';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $error,
            'error', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setConfigDataExternalData
     *
     * Set Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  mixed|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return mixed
     */
    public function setConfigDataExternalData(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?mixed $body = null,
        string $contentType = self::contentTypes['setConfigDataExternalData'][0]
    ): mixed
    {
        list($response) = $this->setConfigDataExternalDataWithHttpInfo($employerId, $id, $body, $contentType);
        return $response;
    }

    /**
     * Operation setConfigDataExternalDataWithHttpInfo
     *
     * Set Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  mixed|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function setConfigDataExternalDataWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?mixed $body = null,
        string $contentType = self::contentTypes['setConfigDataExternalData'][0]
    ): array
    {
        $request = $this->setConfigDataExternalDataRequest($employerId, $id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('mixed', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'mixed';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setConfigDataExternalDataAsync
     *
     * Set Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  mixed|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setConfigDataExternalDataAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?mixed $body = null,
        string $contentType = self::contentTypes['setConfigDataExternalData'][0]
    ): PromiseInterface
    {
        return $this->setConfigDataExternalDataAsyncWithHttpInfo($employerId, $id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setConfigDataExternalDataAsyncWithHttpInfo
     *
     * Set Config Data
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  mixed|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setConfigDataExternalDataAsyncWithHttpInfo(
        $employerId,
        $id,
        $body = null,
        string $contentType = self::contentTypes['setConfigDataExternalData'][0]
    ): PromiseInterface
    {
        $returnType = 'mixed';
        $request = $this->setConfigDataExternalDataRequest($employerId, $id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setConfigDataExternalData'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want configuration data for. (required)
     * @param  mixed|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigDataExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setConfigDataExternalDataRequest(
        $employerId,
        $id,
        $body = null,
        string $contentType = self::contentTypes['setConfigDataExternalData'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setConfigDataExternalData'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setConfigDataExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCredentialsExternalData
     *
     * Set Credentials
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $username The username for the ExternalDataProvider. (optional)
     * @param  string|null $password The password for the ExternalDataProvider. (optional)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair Any additional data that is needed (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCredentialsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setCredentialsExternalData(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $username = null,
        ?string $password = null,
        ?array $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['setCredentialsExternalData'][0]
    ): void
    {
        $this->setCredentialsExternalDataWithHttpInfo($employerId, $id, $username, $password, $stringStringKeyValuePair, $contentType);
    }

    /**
     * Operation setCredentialsExternalDataWithHttpInfo
     *
     * Set Credentials
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $username The username for the ExternalDataProvider. (optional)
     * @param  string|null $password The password for the ExternalDataProvider. (optional)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair Any additional data that is needed (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCredentialsExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCredentialsExternalDataWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $username = null,
        ?string $password = null,
        ?array $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['setCredentialsExternalData'][0]
    ): array
    {
        $request = $this->setCredentialsExternalDataRequest($employerId, $id, $username, $password, $stringStringKeyValuePair, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setCredentialsExternalDataAsync
     *
     * Set Credentials
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $username The username for the ExternalDataProvider. (optional)
     * @param  string|null $password The password for the ExternalDataProvider. (optional)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair Any additional data that is needed (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCredentialsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setCredentialsExternalDataAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        ?string $username = null,
        ?string $password = null,
        ?array $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['setCredentialsExternalData'][0]
    ): PromiseInterface
    {
        return $this->setCredentialsExternalDataAsyncWithHttpInfo($employerId, $id, $username, $password, $stringStringKeyValuePair, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCredentialsExternalDataAsyncWithHttpInfo
     *
     * Set Credentials
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $username The username for the ExternalDataProvider. (optional)
     * @param  string|null $password The password for the ExternalDataProvider. (optional)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair Any additional data that is needed (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCredentialsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setCredentialsExternalDataAsyncWithHttpInfo(
        $employerId,
        $id,
        $username = null,
        $password = null,
        $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['setCredentialsExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setCredentialsExternalDataRequest($employerId, $id, $username, $password, $stringStringKeyValuePair, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCredentialsExternalData'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id The Id of the ExternalDataProvider you want to authorize with. (required)
     * @param  string|null $username The username for the ExternalDataProvider. (optional)
     * @param  string|null $password The password for the ExternalDataProvider. (optional)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair Any additional data that is needed (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCredentialsExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCredentialsExternalDataRequest(
        $employerId,
        $id,
        $username = null,
        $password = null,
        $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['setCredentialsExternalData'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setCredentialsExternalData'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setCredentialsExternalData'
            );
        }





        $resourcePath = '/employers/{employerId}/external-data/{id}/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $username,
            'username', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $password,
            'password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($stringStringKeyValuePair)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($stringStringKeyValuePair));
            } else {
                $httpBody = $stringStringKeyValuePair;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncAllEmployeesExternalData
     *
     * Sync Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncAllEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function syncAllEmployeesExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['syncAllEmployeesExternalData'][0]
    ): array
    {
        list($response) = $this->syncAllEmployeesExternalDataWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation syncAllEmployeesExternalDataWithHttpInfo
     *
     * Sync Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncAllEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function syncAllEmployeesExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['syncAllEmployeesExternalData'][0]
    ): array
    {
        $request = $this->syncAllEmployeesExternalDataRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncAllEmployeesExternalDataAsync
     *
     * Sync Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncAllEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function syncAllEmployeesExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $contentType = self::contentTypes['syncAllEmployeesExternalData'][0]
    ): PromiseInterface
    {
        return $this->syncAllEmployeesExternalDataAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncAllEmployeesExternalDataAsyncWithHttpInfo
     *
     * Sync Employees
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncAllEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function syncAllEmployeesExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['syncAllEmployeesExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->syncAllEmployeesExternalDataRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncAllEmployeesExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncAllEmployeesExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncAllEmployeesExternalDataRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['syncAllEmployeesExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling syncAllEmployeesExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling syncAllEmployeesExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/employees/i/sync-all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncEmployeeExternalData
     *
     * Sync Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item
     */
    public function syncEmployeeExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['syncEmployeeExternalData'][0]
    ): \SynergiTech\Staffology\Model\Item
    {
        list($response) = $this->syncEmployeeExternalDataWithHttpInfo($id, $employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation syncEmployeeExternalDataWithHttpInfo
     *
     * Sync Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncEmployeeExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['syncEmployeeExternalData'][0]
    ): array
    {
        $request = $this->syncEmployeeExternalDataRequest($id, $employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncEmployeeExternalDataAsync
     *
     * Sync Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function syncEmployeeExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['syncEmployeeExternalData'][0]
    ): PromiseInterface
    {
        return $this->syncEmployeeExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncEmployeeExternalDataAsyncWithHttpInfo
     *
     * Sync Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function syncEmployeeExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['syncEmployeeExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item';
        $request = $this->syncEmployeeExternalDataRequest($id, $employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncEmployeeExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncEmployeeExternalDataRequest(
        $id,
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['syncEmployeeExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling syncEmployeeExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling syncEmployeeExternalData'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling syncEmployeeExternalData'
            );
        }


        $resourcePath = '/employers/{employerId}/external-data/{id}/employees/{employeeId}/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncLeaveExternalData
     *
     * Sync Leave
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncLeaveExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function syncLeaveExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['syncLeaveExternalData'][0]
    ): void
    {
        $this->syncLeaveExternalDataWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation syncLeaveExternalDataWithHttpInfo
     *
     * Sync Leave
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncLeaveExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncLeaveExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['syncLeaveExternalData'][0]
    ): array
    {
        $request = $this->syncLeaveExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation syncLeaveExternalDataAsync
     *
     * Sync Leave
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncLeaveExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function syncLeaveExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['syncLeaveExternalData'][0]
    ): PromiseInterface
    {
        return $this->syncLeaveExternalDataAsyncWithHttpInfo($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncLeaveExternalDataAsyncWithHttpInfo
     *
     * Sync Leave
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncLeaveExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function syncLeaveExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $ordinal = 1,
        string $contentType = self::contentTypes['syncLeaveExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->syncLeaveExternalDataRequest($id, $employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncLeaveExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncLeaveExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncLeaveExternalDataRequest(
        $id,
        $employerId,
        $payPeriod,
        $periodNumber,
        $taxYear,
        $ordinal = 1,
        string $contentType = self::contentTypes['syncLeaveExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling syncLeaveExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling syncLeaveExternalData'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling syncLeaveExternalData'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling syncLeaveExternalData'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling syncLeaveExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/{taxYear}/{payPeriod}/{periodNumber}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeAndAttendanceExternalData
     *
     * Get Time And Attendance Data
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  \DateTime|null $from from (optional)
     * @param  \DateTime|null $to to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeAndAttendanceExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayOptionsImport[]
     */
    public function timeAndAttendanceExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\DateTime $from = null,
        ?\DateTime $to = null,
        string $contentType = self::contentTypes['timeAndAttendanceExternalData'][0]
    ): array
    {
        list($response) = $this->timeAndAttendanceExternalDataWithHttpInfo($id, $employerId, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation timeAndAttendanceExternalDataWithHttpInfo
     *
     * Get Time And Attendance Data
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \DateTime|null $from (optional)
     * @param  \DateTime|null $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeAndAttendanceExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayOptionsImport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function timeAndAttendanceExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\DateTime $from = null,
        ?\DateTime $to = null,
        string $contentType = self::contentTypes['timeAndAttendanceExternalData'][0]
    ): array
    {
        $request = $this->timeAndAttendanceExternalDataRequest($id, $employerId, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayOptionsImport[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayOptionsImport[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayOptionsImport[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayOptionsImport[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayOptionsImport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeAndAttendanceExternalDataAsync
     *
     * Get Time And Attendance Data
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \DateTime|null $from (optional)
     * @param  \DateTime|null $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeAndAttendanceExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function timeAndAttendanceExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        ?\DateTime $from = null,
        ?\DateTime $to = null,
        string $contentType = self::contentTypes['timeAndAttendanceExternalData'][0]
    ): PromiseInterface
    {
        return $this->timeAndAttendanceExternalDataAsyncWithHttpInfo($id, $employerId, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeAndAttendanceExternalDataAsyncWithHttpInfo
     *
     * Get Time And Attendance Data
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \DateTime|null $from (optional)
     * @param  \DateTime|null $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeAndAttendanceExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function timeAndAttendanceExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $from = null,
        $to = null,
        string $contentType = self::contentTypes['timeAndAttendanceExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayOptionsImport[]';
        $request = $this->timeAndAttendanceExternalDataRequest($id, $employerId, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeAndAttendanceExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  \DateTime|null $from (optional)
     * @param  \DateTime|null $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeAndAttendanceExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeAndAttendanceExternalDataRequest(
        $id,
        $employerId,
        $from = null,
        $to = null,
        string $contentType = self::contentTypes['timeAndAttendanceExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling timeAndAttendanceExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling timeAndAttendanceExternalData'
            );
        }




        $resourcePath = '/employers/{employerId}/external-data/{id}/time-and-attendance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeExternalData
     *
     * Update Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id id (required)
     * @param  string $employerId employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  \SynergiTech\Staffology\Model\ExternalEmployeeMapping|null $externalEmployeeMapping externalEmployeeMapping (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ExternalEmployeeMapping
     */
    public function updateEmployeeExternalData(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\ExternalEmployeeMapping $externalEmployeeMapping = null,
        string $contentType = self::contentTypes['updateEmployeeExternalData'][0]
    ): \SynergiTech\Staffology\Model\ExternalEmployeeMapping
    {
        list($response) = $this->updateEmployeeExternalDataWithHttpInfo($id, $employerId, $employeeId, $externalEmployeeMapping, $contentType);
        return $response;
    }

    /**
     * Operation updateEmployeeExternalDataWithHttpInfo
     *
     * Update Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  \SynergiTech\Staffology\Model\ExternalEmployeeMapping|null $externalEmployeeMapping (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ExternalEmployeeMapping, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeExternalDataWithHttpInfo(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\ExternalEmployeeMapping $externalEmployeeMapping = null,
        string $contentType = self::contentTypes['updateEmployeeExternalData'][0]
    ): array
    {
        $request = $this->updateEmployeeExternalDataRequest($id, $employerId, $employeeId, $externalEmployeeMapping, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ExternalEmployeeMapping', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ExternalEmployeeMapping' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ExternalEmployeeMapping', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ExternalEmployeeMapping';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ExternalEmployeeMapping',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmployeeExternalDataAsync
     *
     * Update Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  \SynergiTech\Staffology\Model\ExternalEmployeeMapping|null $externalEmployeeMapping (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEmployeeExternalDataAsync(
        \SynergiTech\Staffology\Model\ExternalDataProviderId $id,
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\ExternalEmployeeMapping $externalEmployeeMapping = null,
        string $contentType = self::contentTypes['updateEmployeeExternalData'][0]
    ): PromiseInterface
    {
        return $this->updateEmployeeExternalDataAsyncWithHttpInfo($id, $employerId, $employeeId, $externalEmployeeMapping, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeExternalDataAsyncWithHttpInfo
     *
     * Update Employee
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  \SynergiTech\Staffology\Model\ExternalEmployeeMapping|null $externalEmployeeMapping (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEmployeeExternalDataAsyncWithHttpInfo(
        $id,
        $employerId,
        $employeeId,
        $externalEmployeeMapping = null,
        string $contentType = self::contentTypes['updateEmployeeExternalData'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ExternalEmployeeMapping';
        $request = $this->updateEmployeeExternalDataRequest($id, $employerId, $employeeId, $externalEmployeeMapping, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeExternalData'
     *
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId $id (required)
     * @param  string $employerId (required)
     * @param  string $employeeId The Id of the employee in the external data provider (required)
     * @param  \SynergiTech\Staffology\Model\ExternalEmployeeMapping|null $externalEmployeeMapping (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeExternalData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeExternalDataRequest(
        $id,
        $employerId,
        $employeeId,
        $externalEmployeeMapping = null,
        string $contentType = self::contentTypes['updateEmployeeExternalData'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployeeExternalData'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateEmployeeExternalData'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateEmployeeExternalData'
            );
        }



        $resourcePath = '/employers/{employerId}/external-data/{id}/employees/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($externalEmployeeMapping)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($externalEmployeeMapping));
            } else {
                $httpBody = $externalEmployeeMapping;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
