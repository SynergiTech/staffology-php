<?php
/**
 * TenantApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * TenantApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TenantApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addAdminUserTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'adminUsersTenant' => [
            'application/json',
        ],
        'billTenant' => [
            'application/json',
        ],
        'billsTenant' => [
            'application/json',
        ],
        'createBillsTenant' => [
            'application/json',
        ],
        'createPayrollSquadTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createPricingTableTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deletePayrollSquadMemberTenant' => [
            'application/json',
        ],
        'deletePayrollSquadTenant' => [
            'application/json',
        ],
        'deletePricingTableTenant' => [
            'application/json',
        ],
        'disabledTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'employerCreationTenant' => [
            'application/json',
        ],
        'employerUsageTenant' => [
            'application/json',
        ],
        'employerUsersTenant' => [
            'application/json',
        ],
        'getApiMailingListReportByIdTenant' => [
            'application/json',
        ],
        'getApiMailingListReportTenant' => [
            'application/json',
        ],
        'getEmployersTenant' => [
            'application/json',
        ],
        'getPayrollSquadTenant' => [
            'application/json',
        ],
        'getPayrollSquadsTenant' => [
            'application/json',
        ],
        'getPricingTableTenant' => [
            'application/json',
        ],
        'getPricingTablesTenant' => [
            'application/json',
        ],
        'getRtiSubmissionSettingsTenant' => [
            'application/json',
        ],
        'getTenant' => [
            'application/json',
        ],
        'getUsersWithNoBillableActivityTenant' => [
            'application/json',
        ],
        'netSuiteBillingTenant' => [
            'application/json',
        ],
        'payrollSquadAddMemberTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'payrollSquadUpdateEmployersTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'removeAdminUserTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setAccountingIdTenant' => [
            'application/json',
        ],
        'setAddressTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setBureauRedirectEmailAddressTenant' => [
            'application/json',
        ],
        'setBusinessNameTenant' => [
            'application/json',
        ],
        'setCountryTenant' => [
            'application/json',
        ],
        'setEmployeeCountTenant' => [
            'application/json',
        ],
        'setEvcTenant' => [
            'application/json',
        ],
        'setIndustryTenant' => [
            'application/json',
        ],
        'setMonthlyMinimumTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setPricingTableIdTenant' => [
            'application/json',
        ],
        'setTenantTenant' => [
            'application/json',
        ],
        'updateBillTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateCssColorsTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateCssTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateFavIconTenant' => [
            'multipart/form-data',
        ],
        'updateLogoTenant' => [
            'multipart/form-data',
        ],
        'updatePricingTableTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateRtiSubmissionSettingsTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateUserTenant' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'usageTenant' => [
            'application/json',
        ],
        'userBillsTenant' => [
            'application/json',
        ],
        'userEmployersTenant' => [
            'application/json',
        ],
        'userTenant' => [
            'application/json',
        ],
        'usersSearchTenant' => [
            'application/json',
        ],
        'usersTenant' => [
            'application/json',
        ],
        'weeklyActivityTenant' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addAdminUserTenant
     *
     * Add Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdminUserTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function addAdminUserTenant(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['addAdminUserTenant'][0]
    ): void
    {
        $this->addAdminUserTenantWithHttpInfo($id, $body, $contentType);
    }

    /**
     * Operation addAdminUserTenantWithHttpInfo
     *
     * Add Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdminUserTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAdminUserTenantWithHttpInfo(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['addAdminUserTenant'][0]
    ): array
    {
        $request = $this->addAdminUserTenantRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addAdminUserTenantAsync
     *
     * Add Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdminUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addAdminUserTenantAsync(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['addAdminUserTenant'][0]
    ): PromiseInterface
    {
        return $this->addAdminUserTenantAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAdminUserTenantAsyncWithHttpInfo
     *
     * Add Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdminUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addAdminUserTenantAsyncWithHttpInfo(
        $id,
        $body = null,
        string $contentType = self::contentTypes['addAdminUserTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->addAdminUserTenantRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAdminUserTenant'
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdminUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAdminUserTenantRequest(
        $id,
        $body = null,
        string $contentType = self::contentTypes['addAdminUserTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling addAdminUserTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/admins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersTenant
     *
     * List Admin Users
     *
     * @param  string $id The Id of the Tenant you want to list admin Users for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function adminUsersTenant(
        string $id,
        string $contentType = self::contentTypes['adminUsersTenant'][0]
    ): array
    {
        list($response) = $this->adminUsersTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersTenantWithHttpInfo
     *
     * List Admin Users
     *
     * @param  string $id The Id of the Tenant you want to list admin Users for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersTenantWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['adminUsersTenant'][0]
    ): array
    {
        $request = $this->adminUsersTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersTenantAsync
     *
     * List Admin Users
     *
     * @param  string $id The Id of the Tenant you want to list admin Users for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function adminUsersTenantAsync(
        string $id,
        string $contentType = self::contentTypes['adminUsersTenant'][0]
    ): PromiseInterface
    {
        return $this->adminUsersTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersTenantAsyncWithHttpInfo
     *
     * List Admin Users
     *
     * @param  string $id The Id of the Tenant you want to list admin Users for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function adminUsersTenantAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['adminUsersTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->adminUsersTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersTenant'
     *
     * @param  string $id The Id of the Tenant you want to list admin Users for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersTenantRequest(
        $id,
        string $contentType = self::contentTypes['adminUsersTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling adminUsersTenant'
            );
        }


        $resourcePath = '/tenants/{id}/users/admins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billTenant
     *
     * Get Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year year (required)
     * @param  int $month month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\UsageBill
     */
    public function billTenant(
        string $id,
        int $year,
        int $month,
        string $billId,
        string $contentType = self::contentTypes['billTenant'][0]
    ): \SynergiTech\Staffology\Model\UsageBill
    {
        list($response) = $this->billTenantWithHttpInfo($id, $year, $month, $billId, $contentType);
        return $response;
    }

    /**
     * Operation billTenantWithHttpInfo
     *
     * Get Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\UsageBill, HTTP status code, HTTP response headers (array of strings)
     */
    public function billTenantWithHttpInfo(
        string $id,
        int $year,
        int $month,
        string $billId,
        string $contentType = self::contentTypes['billTenant'][0]
    ): array
    {
        $request = $this->billTenantRequest($id, $year, $month, $billId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\UsageBill', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\UsageBill' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\UsageBill', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\UsageBill';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\UsageBill',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation billTenantAsync
     *
     * Get Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function billTenantAsync(
        string $id,
        int $year,
        int $month,
        string $billId,
        string $contentType = self::contentTypes['billTenant'][0]
    ): PromiseInterface
    {
        return $this->billTenantAsyncWithHttpInfo($id, $year, $month, $billId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billTenantAsyncWithHttpInfo
     *
     * Get Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function billTenantAsyncWithHttpInfo(
        $id,
        $year,
        $month,
        $billId,
        string $contentType = self::contentTypes['billTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\UsageBill';
        $request = $this->billTenantRequest($id, $year, $month, $billId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billTenant'
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billTenantRequest(
        $id,
        $year,
        $month,
        $billId,
        string $contentType = self::contentTypes['billTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling billTenant'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $year when calling billTenant'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $month when calling billTenant'
            );
        }

        // verify the required parameter 'billId' is set
        if ($billId === null || (is_array($billId) && count($billId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $billId when calling billTenant'
            );
        }


        $resourcePath = '/tenants/{id}/bills/{year}/{month}/{billId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }
        // path params
        if ($billId !== null) {
            $resourcePath = str_replace(
                '{' . 'billId' . '}',
                ObjectSerializer::toPathValue($billId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billsTenant
     *
     * Get Bills
     *
     * @param  string $id The Id of the Tenant you want to list bills for. (required)
     * @param  int $year year (required)
     * @param  int $month month (required)
     * @param  bool|null $includeNetSuiteBills includeNetSuiteBills (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function billsTenant(
        string $id,
        int $year,
        int $month,
        ?bool $includeNetSuiteBills = false,
        string $contentType = self::contentTypes['billsTenant'][0]
    ): array
    {
        list($response) = $this->billsTenantWithHttpInfo($id, $year, $month, $includeNetSuiteBills, $contentType);
        return $response;
    }

    /**
     * Operation billsTenantWithHttpInfo
     *
     * Get Bills
     *
     * @param  string $id The Id of the Tenant you want to list bills for. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  bool|null $includeNetSuiteBills (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function billsTenantWithHttpInfo(
        string $id,
        int $year,
        int $month,
        ?bool $includeNetSuiteBills = false,
        string $contentType = self::contentTypes['billsTenant'][0]
    ): array
    {
        $request = $this->billsTenantRequest($id, $year, $month, $includeNetSuiteBills, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation billsTenantAsync
     *
     * Get Bills
     *
     * @param  string $id The Id of the Tenant you want to list bills for. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  bool|null $includeNetSuiteBills (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function billsTenantAsync(
        string $id,
        int $year,
        int $month,
        ?bool $includeNetSuiteBills = false,
        string $contentType = self::contentTypes['billsTenant'][0]
    ): PromiseInterface
    {
        return $this->billsTenantAsyncWithHttpInfo($id, $year, $month, $includeNetSuiteBills, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billsTenantAsyncWithHttpInfo
     *
     * Get Bills
     *
     * @param  string $id The Id of the Tenant you want to list bills for. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  bool|null $includeNetSuiteBills (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function billsTenantAsyncWithHttpInfo(
        $id,
        $year,
        $month,
        $includeNetSuiteBills = false,
        string $contentType = self::contentTypes['billsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->billsTenantRequest($id, $year, $month, $includeNetSuiteBills, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billsTenant'
     *
     * @param  string $id The Id of the Tenant you want to list bills for. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  bool|null $includeNetSuiteBills (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billsTenantRequest(
        $id,
        $year,
        $month,
        $includeNetSuiteBills = false,
        string $contentType = self::contentTypes['billsTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling billsTenant'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $year when calling billsTenant'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $month when calling billsTenant'
            );
        }



        $resourcePath = '/tenants/{id}/bills/{year}/{month}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeNetSuiteBills,
            'includeNetSuiteBills', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBillsTenant
     *
     * Create Bills for Period
     *
     * @param  int|null $month month (optional)
     * @param  int|null $year year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBillsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function createBillsTenant(
        ?int $month = null,
        ?int $year = null,
        string $contentType = self::contentTypes['createBillsTenant'][0]
    ): void
    {
        $this->createBillsTenantWithHttpInfo($month, $year, $contentType);
    }

    /**
     * Operation createBillsTenantWithHttpInfo
     *
     * Create Bills for Period
     *
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBillsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBillsTenantWithHttpInfo(
        ?int $month = null,
        ?int $year = null,
        string $contentType = self::contentTypes['createBillsTenant'][0]
    ): array
    {
        $request = $this->createBillsTenantRequest($month, $year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createBillsTenantAsync
     *
     * Create Bills for Period
     *
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBillsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createBillsTenantAsync(
        ?int $month = null,
        ?int $year = null,
        string $contentType = self::contentTypes['createBillsTenant'][0]
    ): PromiseInterface
    {
        return $this->createBillsTenantAsyncWithHttpInfo($month, $year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBillsTenantAsyncWithHttpInfo
     *
     * Create Bills for Period
     *
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBillsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createBillsTenantAsyncWithHttpInfo(
        $month = null,
        $year = null,
        string $contentType = self::contentTypes['createBillsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->createBillsTenantRequest($month, $year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBillsTenant'
     *
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBillsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBillsTenantRequest(
        $month = null,
        $year = null,
        string $contentType = self::contentTypes['createBillsTenant'][0]
    ): Request
    {




        $resourcePath = '/tenants/bills';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $month,
            'month', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $year,
            'year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayrollSquadTenant
     *
     * Create Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadRequest|null $contractPayrollSquadRequest contractPayrollSquadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPayrollSquadResponse
     */
    public function createPayrollSquadTenant(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadRequest $contractPayrollSquadRequest = null,
        string $contentType = self::contentTypes['createPayrollSquadTenant'][0]
    ): \SynergiTech\Staffology\Model\ContractPayrollSquadResponse
    {
        list($response) = $this->createPayrollSquadTenantWithHttpInfo($id, $contractPayrollSquadRequest, $contentType);
        return $response;
    }

    /**
     * Operation createPayrollSquadTenantWithHttpInfo
     *
     * Create Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadRequest|null $contractPayrollSquadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPayrollSquadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayrollSquadTenantWithHttpInfo(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadRequest $contractPayrollSquadRequest = null,
        string $contentType = self::contentTypes['createPayrollSquadTenant'][0]
    ): array
    {
        $request = $this->createPayrollSquadTenantRequest($id, $contractPayrollSquadRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayrollSquadResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayrollSquadResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPayrollSquadTenantAsync
     *
     * Create Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadRequest|null $contractPayrollSquadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPayrollSquadTenantAsync(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadRequest $contractPayrollSquadRequest = null,
        string $contentType = self::contentTypes['createPayrollSquadTenant'][0]
    ): PromiseInterface
    {
        return $this->createPayrollSquadTenantAsyncWithHttpInfo($id, $contractPayrollSquadRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPayrollSquadTenantAsyncWithHttpInfo
     *
     * Create Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadRequest|null $contractPayrollSquadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPayrollSquadTenantAsyncWithHttpInfo(
        $id,
        $contractPayrollSquadRequest = null,
        string $contentType = self::contentTypes['createPayrollSquadTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse';
        $request = $this->createPayrollSquadTenantRequest($id, $contractPayrollSquadRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayrollSquadTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadRequest|null $contractPayrollSquadRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPayrollSquadTenantRequest(
        $id,
        $contractPayrollSquadRequest = null,
        string $contentType = self::contentTypes['createPayrollSquadTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createPayrollSquadTenant'
            );
        }



        $resourcePath = '/tenants/{id}/payrollsquad';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPayrollSquadRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPayrollSquadRequest));
            } else {
                $httpBody = $contractPayrollSquadRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPricingTableTenant
     *
     * Create PricingTable
     *
     * @param  string $id id (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PricingTable
     */
    public function createPricingTableTenant(
        string $id,
        ?\SynergiTech\Staffology\Model\PricingTable $pricingTable = null,
        string $contentType = self::contentTypes['createPricingTableTenant'][0]
    ): \SynergiTech\Staffology\Model\PricingTable
    {
        list($response) = $this->createPricingTableTenantWithHttpInfo($id, $pricingTable, $contentType);
        return $response;
    }

    /**
     * Operation createPricingTableTenantWithHttpInfo
     *
     * Create PricingTable
     *
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PricingTable, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPricingTableTenantWithHttpInfo(
        string $id,
        ?\SynergiTech\Staffology\Model\PricingTable $pricingTable = null,
        string $contentType = self::contentTypes['createPricingTableTenant'][0]
    ): array
    {
        $request = $this->createPricingTableTenantRequest($id, $pricingTable, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\PricingTable', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PricingTable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PricingTable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PricingTable';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PricingTable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPricingTableTenantAsync
     *
     * Create PricingTable
     *
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPricingTableTenantAsync(
        string $id,
        ?\SynergiTech\Staffology\Model\PricingTable $pricingTable = null,
        string $contentType = self::contentTypes['createPricingTableTenant'][0]
    ): PromiseInterface
    {
        return $this->createPricingTableTenantAsyncWithHttpInfo($id, $pricingTable, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPricingTableTenantAsyncWithHttpInfo
     *
     * Create PricingTable
     *
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPricingTableTenantAsyncWithHttpInfo(
        $id,
        $pricingTable = null,
        string $contentType = self::contentTypes['createPricingTableTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PricingTable';
        $request = $this->createPricingTableTenantRequest($id, $pricingTable, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPricingTableTenant'
     *
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPricingTableTenantRequest(
        $id,
        $pricingTable = null,
        string $contentType = self::contentTypes['createPricingTableTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createPricingTableTenant'
            );
        }



        $resourcePath = '/tenants/{id}/pricingtables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pricingTable)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pricingTable));
            } else {
                $httpBody = $pricingTable;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTenant
     *
     * Create a Tenant
     *
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Tenant
     */
    public function createTenant(
        ?\SynergiTech\Staffology\Model\Tenant $tenant = null,
        string $contentType = self::contentTypes['createTenant'][0]
    ): \SynergiTech\Staffology\Model\Tenant
    {
        list($response) = $this->createTenantWithHttpInfo($tenant, $contentType);
        return $response;
    }

    /**
     * Operation createTenantWithHttpInfo
     *
     * Create a Tenant
     *
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Tenant, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTenantWithHttpInfo(
        ?\SynergiTech\Staffology\Model\Tenant $tenant = null,
        string $contentType = self::contentTypes['createTenant'][0]
    ): array
    {
        $request = $this->createTenantRequest($tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\Tenant', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Tenant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Tenant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Tenant';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Tenant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTenantAsync
     *
     * Create a Tenant
     *
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTenantAsync(
        ?\SynergiTech\Staffology\Model\Tenant $tenant = null,
        string $contentType = self::contentTypes['createTenant'][0]
    ): PromiseInterface
    {
        return $this->createTenantAsyncWithHttpInfo($tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTenantAsyncWithHttpInfo
     *
     * Create a Tenant
     *
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createTenantAsyncWithHttpInfo(
        $tenant = null,
        string $contentType = self::contentTypes['createTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Tenant';
        $request = $this->createTenantRequest($tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTenant'
     *
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTenantRequest(
        $tenant = null,
        string $contentType = self::contentTypes['createTenant'][0]
    ): Request
    {



        $resourcePath = '/tenants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tenant)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tenant));
            } else {
                $httpBody = $tenant;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayrollSquadMemberTenant
     *
     * Delete Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $payrollSquadMemberId The id of payroll squad member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadMemberTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePayrollSquadMemberTenant(
        string $id,
        string $payrollSquadId,
        string $payrollSquadMemberId,
        string $contentType = self::contentTypes['deletePayrollSquadMemberTenant'][0]
    ): void
    {
        $this->deletePayrollSquadMemberTenantWithHttpInfo($id, $payrollSquadId, $payrollSquadMemberId, $contentType);
    }

    /**
     * Operation deletePayrollSquadMemberTenantWithHttpInfo
     *
     * Delete Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $payrollSquadMemberId The id of payroll squad member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadMemberTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayrollSquadMemberTenantWithHttpInfo(
        string $id,
        string $payrollSquadId,
        string $payrollSquadMemberId,
        string $contentType = self::contentTypes['deletePayrollSquadMemberTenant'][0]
    ): array
    {
        $request = $this->deletePayrollSquadMemberTenantRequest($id, $payrollSquadId, $payrollSquadMemberId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayrollSquadMemberTenantAsync
     *
     * Delete Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $payrollSquadMemberId The id of payroll squad member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadMemberTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayrollSquadMemberTenantAsync(
        string $id,
        string $payrollSquadId,
        string $payrollSquadMemberId,
        string $contentType = self::contentTypes['deletePayrollSquadMemberTenant'][0]
    ): PromiseInterface
    {
        return $this->deletePayrollSquadMemberTenantAsyncWithHttpInfo($id, $payrollSquadId, $payrollSquadMemberId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayrollSquadMemberTenantAsyncWithHttpInfo
     *
     * Delete Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $payrollSquadMemberId The id of payroll squad member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadMemberTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayrollSquadMemberTenantAsyncWithHttpInfo(
        $id,
        $payrollSquadId,
        $payrollSquadMemberId,
        string $contentType = self::contentTypes['deletePayrollSquadMemberTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePayrollSquadMemberTenantRequest($id, $payrollSquadId, $payrollSquadMemberId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayrollSquadMemberTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $payrollSquadMemberId The id of payroll squad member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadMemberTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayrollSquadMemberTenantRequest(
        $id,
        $payrollSquadId,
        $payrollSquadMemberId,
        string $contentType = self::contentTypes['deletePayrollSquadMemberTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePayrollSquadMemberTenant'
            );
        }

        // verify the required parameter 'payrollSquadId' is set
        if ($payrollSquadId === null || (is_array($payrollSquadId) && count($payrollSquadId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payrollSquadId when calling deletePayrollSquadMemberTenant'
            );
        }

        // verify the required parameter 'payrollSquadMemberId' is set
        if ($payrollSquadMemberId === null || (is_array($payrollSquadMemberId) && count($payrollSquadMemberId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payrollSquadMemberId when calling deletePayrollSquadMemberTenant'
            );
        }


        $resourcePath = '/tenants/{id}/payrollsquad/{payrollSquadId}/member/{payrollSquadMemberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payrollSquadId !== null) {
            $resourcePath = str_replace(
                '{' . 'payrollSquadId' . '}',
                ObjectSerializer::toPathValue($payrollSquadId),
                $resourcePath
            );
        }
        // path params
        if ($payrollSquadMemberId !== null) {
            $resourcePath = str_replace(
                '{' . 'payrollSquadMemberId' . '}',
                ObjectSerializer::toPathValue($payrollSquadMemberId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayrollSquadTenant
     *
     * Delete Payroll Squad and it&#39;s Members and Employers.
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePayrollSquadTenant(
        string $id,
        string $payrollSquadId,
        string $contentType = self::contentTypes['deletePayrollSquadTenant'][0]
    ): void
    {
        $this->deletePayrollSquadTenantWithHttpInfo($id, $payrollSquadId, $contentType);
    }

    /**
     * Operation deletePayrollSquadTenantWithHttpInfo
     *
     * Delete Payroll Squad and it&#39;s Members and Employers.
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayrollSquadTenantWithHttpInfo(
        string $id,
        string $payrollSquadId,
        string $contentType = self::contentTypes['deletePayrollSquadTenant'][0]
    ): array
    {
        $request = $this->deletePayrollSquadTenantRequest($id, $payrollSquadId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayrollSquadTenantAsync
     *
     * Delete Payroll Squad and it&#39;s Members and Employers.
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayrollSquadTenantAsync(
        string $id,
        string $payrollSquadId,
        string $contentType = self::contentTypes['deletePayrollSquadTenant'][0]
    ): PromiseInterface
    {
        return $this->deletePayrollSquadTenantAsyncWithHttpInfo($id, $payrollSquadId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayrollSquadTenantAsyncWithHttpInfo
     *
     * Delete Payroll Squad and it&#39;s Members and Employers.
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayrollSquadTenantAsyncWithHttpInfo(
        $id,
        $payrollSquadId,
        string $contentType = self::contentTypes['deletePayrollSquadTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePayrollSquadTenantRequest($id, $payrollSquadId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayrollSquadTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayrollSquadTenantRequest(
        $id,
        $payrollSquadId,
        string $contentType = self::contentTypes['deletePayrollSquadTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePayrollSquadTenant'
            );
        }

        // verify the required parameter 'payrollSquadId' is set
        if ($payrollSquadId === null || (is_array($payrollSquadId) && count($payrollSquadId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payrollSquadId when calling deletePayrollSquadTenant'
            );
        }


        $resourcePath = '/tenants/{id}/payrollsquad/{payrollSquadId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payrollSquadId !== null) {
            $resourcePath = str_replace(
                '{' . 'payrollSquadId' . '}',
                ObjectSerializer::toPathValue($payrollSquadId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePricingTableTenant
     *
     * Delete PricingTable
     *
     * @param  string $id id (required)
     * @param  string $pricingTableId pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePricingTableTenant(
        string $id,
        string $pricingTableId,
        string $contentType = self::contentTypes['deletePricingTableTenant'][0]
    ): void
    {
        $this->deletePricingTableTenantWithHttpInfo($id, $pricingTableId, $contentType);
    }

    /**
     * Operation deletePricingTableTenantWithHttpInfo
     *
     * Delete PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePricingTableTenantWithHttpInfo(
        string $id,
        string $pricingTableId,
        string $contentType = self::contentTypes['deletePricingTableTenant'][0]
    ): array
    {
        $request = $this->deletePricingTableTenantRequest($id, $pricingTableId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePricingTableTenantAsync
     *
     * Delete PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePricingTableTenantAsync(
        string $id,
        string $pricingTableId,
        string $contentType = self::contentTypes['deletePricingTableTenant'][0]
    ): PromiseInterface
    {
        return $this->deletePricingTableTenantAsyncWithHttpInfo($id, $pricingTableId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePricingTableTenantAsyncWithHttpInfo
     *
     * Delete PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePricingTableTenantAsyncWithHttpInfo(
        $id,
        $pricingTableId,
        string $contentType = self::contentTypes['deletePricingTableTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePricingTableTenantRequest($id, $pricingTableId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePricingTableTenant'
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePricingTableTenantRequest(
        $id,
        $pricingTableId,
        string $contentType = self::contentTypes['deletePricingTableTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePricingTableTenant'
            );
        }

        // verify the required parameter 'pricingTableId' is set
        if ($pricingTableId === null || (is_array($pricingTableId) && count($pricingTableId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pricingTableId when calling deletePricingTableTenant'
            );
        }


        $resourcePath = '/tenants/{id}/pricingtables/{pricingTableId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($pricingTableId !== null) {
            $resourcePath = str_replace(
                '{' . 'pricingTableId' . '}',
                ObjectSerializer::toPathValue($pricingTableId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disabledTenant
     *
     * Disable User Account
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId userId (required)
     * @param  bool|null $disabled Whether or not the account should be disabled. (optional)
     * @param  bool|null $loginDisabled Whether or not the account should have log in permissions. (optional)
     * @param  string|null $body A message to show the user explaining why the account is disabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disabledTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function disabledTenant(
        string $id,
        string $userId,
        ?bool $disabled = null,
        ?bool $loginDisabled = null,
        ?string $body = null,
        string $contentType = self::contentTypes['disabledTenant'][0]
    ): void
    {
        $this->disabledTenantWithHttpInfo($id, $userId, $disabled, $loginDisabled, $body, $contentType);
    }

    /**
     * Operation disabledTenantWithHttpInfo
     *
     * Disable User Account
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $disabled Whether or not the account should be disabled. (optional)
     * @param  bool|null $loginDisabled Whether or not the account should have log in permissions. (optional)
     * @param  string|null $body A message to show the user explaining why the account is disabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disabledTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disabledTenantWithHttpInfo(
        string $id,
        string $userId,
        ?bool $disabled = null,
        ?bool $loginDisabled = null,
        ?string $body = null,
        string $contentType = self::contentTypes['disabledTenant'][0]
    ): array
    {
        $request = $this->disabledTenantRequest($id, $userId, $disabled, $loginDisabled, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation disabledTenantAsync
     *
     * Disable User Account
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $disabled Whether or not the account should be disabled. (optional)
     * @param  bool|null $loginDisabled Whether or not the account should have log in permissions. (optional)
     * @param  string|null $body A message to show the user explaining why the account is disabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disabledTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function disabledTenantAsync(
        string $id,
        string $userId,
        ?bool $disabled = null,
        ?bool $loginDisabled = null,
        ?string $body = null,
        string $contentType = self::contentTypes['disabledTenant'][0]
    ): PromiseInterface
    {
        return $this->disabledTenantAsyncWithHttpInfo($id, $userId, $disabled, $loginDisabled, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disabledTenantAsyncWithHttpInfo
     *
     * Disable User Account
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $disabled Whether or not the account should be disabled. (optional)
     * @param  bool|null $loginDisabled Whether or not the account should have log in permissions. (optional)
     * @param  string|null $body A message to show the user explaining why the account is disabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disabledTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function disabledTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $disabled = null,
        $loginDisabled = null,
        $body = null,
        string $contentType = self::contentTypes['disabledTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->disabledTenantRequest($id, $userId, $disabled, $loginDisabled, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disabledTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $disabled Whether or not the account should be disabled. (optional)
     * @param  bool|null $loginDisabled Whether or not the account should have log in permissions. (optional)
     * @param  string|null $body A message to show the user explaining why the account is disabled. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disabledTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disabledTenantRequest(
        $id,
        $userId,
        $disabled = null,
        $loginDisabled = null,
        $body = null,
        string $contentType = self::contentTypes['disabledTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling disabledTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling disabledTenant'
            );
        }





        $resourcePath = '/tenants/{id}/users/{userId}/disabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disabled,
            'disabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $loginDisabled,
            'loginDisabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employerCreationTenant
     *
     * Enable Employer Creation
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId userId (required)
     * @param  bool|null $enabled Whether or not the account can create employers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerCreationTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function employerCreationTenant(
        string $id,
        string $userId,
        ?bool $enabled = null,
        string $contentType = self::contentTypes['employerCreationTenant'][0]
    ): void
    {
        $this->employerCreationTenantWithHttpInfo($id, $userId, $enabled, $contentType);
    }

    /**
     * Operation employerCreationTenantWithHttpInfo
     *
     * Enable Employer Creation
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $enabled Whether or not the account can create employers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerCreationTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function employerCreationTenantWithHttpInfo(
        string $id,
        string $userId,
        ?bool $enabled = null,
        string $contentType = self::contentTypes['employerCreationTenant'][0]
    ): array
    {
        $request = $this->employerCreationTenantRequest($id, $userId, $enabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation employerCreationTenantAsync
     *
     * Enable Employer Creation
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $enabled Whether or not the account can create employers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerCreationTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerCreationTenantAsync(
        string $id,
        string $userId,
        ?bool $enabled = null,
        string $contentType = self::contentTypes['employerCreationTenant'][0]
    ): PromiseInterface
    {
        return $this->employerCreationTenantAsyncWithHttpInfo($id, $userId, $enabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employerCreationTenantAsyncWithHttpInfo
     *
     * Enable Employer Creation
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $enabled Whether or not the account can create employers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerCreationTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerCreationTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $enabled = null,
        string $contentType = self::contentTypes['employerCreationTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->employerCreationTenantRequest($id, $userId, $enabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employerCreationTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  bool|null $enabled Whether or not the account can create employers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerCreationTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employerCreationTenantRequest(
        $id,
        $userId,
        $enabled = null,
        string $contentType = self::contentTypes['employerCreationTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling employerCreationTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling employerCreationTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/employercreation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enabled,
            'enabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employerUsageTenant
     *
     * Get Employer Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsageTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function employerUsageTenant(
        string $id,
        string $employerId,
        string $contentType = self::contentTypes['employerUsageTenant'][0]
    ): array
    {
        list($response) = $this->employerUsageTenantWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation employerUsageTenantWithHttpInfo
     *
     * Get Employer Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsageTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employerUsageTenantWithHttpInfo(
        string $id,
        string $employerId,
        string $contentType = self::contentTypes['employerUsageTenant'][0]
    ): array
    {
        $request = $this->employerUsageTenantRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employerUsageTenantAsync
     *
     * Get Employer Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsageTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerUsageTenantAsync(
        string $id,
        string $employerId,
        string $contentType = self::contentTypes['employerUsageTenant'][0]
    ): PromiseInterface
    {
        return $this->employerUsageTenantAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employerUsageTenantAsyncWithHttpInfo
     *
     * Get Employer Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsageTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerUsageTenantAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['employerUsageTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->employerUsageTenantRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employerUsageTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsageTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employerUsageTenantRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['employerUsageTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling employerUsageTenant'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employerUsageTenant'
            );
        }


        $resourcePath = '/tenants/{id}/employers/{employerId}/usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employerUsersTenant
     *
     * Get Employer Users
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function employerUsersTenant(
        string $id,
        string $employerId,
        string $contentType = self::contentTypes['employerUsersTenant'][0]
    ): array
    {
        list($response) = $this->employerUsersTenantWithHttpInfo($id, $employerId, $contentType);
        return $response;
    }

    /**
     * Operation employerUsersTenantWithHttpInfo
     *
     * Get Employer Users
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employerUsersTenantWithHttpInfo(
        string $id,
        string $employerId,
        string $contentType = self::contentTypes['employerUsersTenant'][0]
    ): array
    {
        $request = $this->employerUsersTenantRequest($id, $employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employerUsersTenantAsync
     *
     * Get Employer Users
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerUsersTenantAsync(
        string $id,
        string $employerId,
        string $contentType = self::contentTypes['employerUsersTenant'][0]
    ): PromiseInterface
    {
        return $this->employerUsersTenantAsyncWithHttpInfo($id, $employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employerUsersTenantAsyncWithHttpInfo
     *
     * Get Employer Users
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function employerUsersTenantAsyncWithHttpInfo(
        $id,
        $employerId,
        string $contentType = self::contentTypes['employerUsersTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->employerUsersTenantRequest($id, $employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employerUsersTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employerUsersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employerUsersTenantRequest(
        $id,
        $employerId,
        string $contentType = self::contentTypes['employerUsersTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling employerUsersTenant'
            );
        }

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling employerUsersTenant'
            );
        }


        $resourcePath = '/tenants/{id}/employers/{employerId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiMailingListReportByIdTenant
     *
     * Api Mailing List Report
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportByIdTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function getApiMailingListReportByIdTenant(
        string $id,
        string $contentType = self::contentTypes['getApiMailingListReportByIdTenant'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->getApiMailingListReportByIdTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getApiMailingListReportByIdTenantWithHttpInfo
     *
     * Api Mailing List Report
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportByIdTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiMailingListReportByIdTenantWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['getApiMailingListReportByIdTenant'][0]
    ): array
    {
        $request = $this->getApiMailingListReportByIdTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiMailingListReportByIdTenantAsync
     *
     * Api Mailing List Report
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportByIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getApiMailingListReportByIdTenantAsync(
        string $id,
        string $contentType = self::contentTypes['getApiMailingListReportByIdTenant'][0]
    ): PromiseInterface
    {
        return $this->getApiMailingListReportByIdTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiMailingListReportByIdTenantAsyncWithHttpInfo
     *
     * Api Mailing List Report
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportByIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getApiMailingListReportByIdTenantAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['getApiMailingListReportByIdTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->getApiMailingListReportByIdTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiMailingListReportByIdTenant'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportByIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiMailingListReportByIdTenantRequest(
        $id,
        string $contentType = self::contentTypes['getApiMailingListReportByIdTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getApiMailingListReportByIdTenant'
            );
        }


        $resourcePath = '/tenants/{id}/reports/apimailinglist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiMailingListReportTenant
     *
     * Api Mailing List Report
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function getApiMailingListReportTenant(
        string $contentType = self::contentTypes['getApiMailingListReportTenant'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->getApiMailingListReportTenantWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getApiMailingListReportTenantWithHttpInfo
     *
     * Api Mailing List Report
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiMailingListReportTenantWithHttpInfo(
        string $contentType = self::contentTypes['getApiMailingListReportTenant'][0]
    ): array
    {
        $request = $this->getApiMailingListReportTenantRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiMailingListReportTenantAsync
     *
     * Api Mailing List Report
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getApiMailingListReportTenantAsync(
        string $contentType = self::contentTypes['getApiMailingListReportTenant'][0]
    ): PromiseInterface
    {
        return $this->getApiMailingListReportTenantAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiMailingListReportTenantAsyncWithHttpInfo
     *
     * Api Mailing List Report
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getApiMailingListReportTenantAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getApiMailingListReportTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->getApiMailingListReportTenantRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiMailingListReportTenant'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiMailingListReportTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiMailingListReportTenantRequest(
        string $contentType = self::contentTypes['getApiMailingListReportTenant'][0]
    ): Request
    {


        $resourcePath = '/tenants/reports/apimailinglist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployersTenant
     *
     * Get Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getEmployersTenant(
        string $id,
        string $contentType = self::contentTypes['getEmployersTenant'][0]
    ): array
    {
        list($response) = $this->getEmployersTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getEmployersTenantWithHttpInfo
     *
     * Get Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployersTenantWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['getEmployersTenant'][0]
    ): array
    {
        $request = $this->getEmployersTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmployersTenantAsync
     *
     * Get Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployersTenantAsync(
        string $id,
        string $contentType = self::contentTypes['getEmployersTenant'][0]
    ): PromiseInterface
    {
        return $this->getEmployersTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployersTenantAsyncWithHttpInfo
     *
     * Get Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployersTenantAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['getEmployersTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getEmployersTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployersTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployersTenantRequest(
        $id,
        string $contentType = self::contentTypes['getEmployersTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployersTenant'
            );
        }


        $resourcePath = '/tenants/{id}/users/employers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayrollSquadTenant
     *
     * Get Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPayrollSquadResponse|\SynergiTech\Staffology\Model\ContractPayrollSquadResponse
     */
    public function getPayrollSquadTenant(
        string $id,
        string $payrollSquadId,
        string $contentType = self::contentTypes['getPayrollSquadTenant'][0]
    ): \SynergiTech\Staffology\Model\ContractPayrollSquadResponse
    {
        list($response) = $this->getPayrollSquadTenantWithHttpInfo($id, $payrollSquadId, $contentType);
        return $response;
    }

    /**
     * Operation getPayrollSquadTenantWithHttpInfo
     *
     * Get Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPayrollSquadResponse|\SynergiTech\Staffology\Model\ContractPayrollSquadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrollSquadTenantWithHttpInfo(
        string $id,
        string $payrollSquadId,
        string $contentType = self::contentTypes['getPayrollSquadTenant'][0]
    ): array
    {
        $request = $this->getPayrollSquadTenantRequest($id, $payrollSquadId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayrollSquadResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayrollSquadResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayrollSquadResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayrollSquadResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayrollSquadTenantAsync
     *
     * Get Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayrollSquadTenantAsync(
        string $id,
        string $payrollSquadId,
        string $contentType = self::contentTypes['getPayrollSquadTenant'][0]
    ): PromiseInterface
    {
        return $this->getPayrollSquadTenantAsyncWithHttpInfo($id, $payrollSquadId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayrollSquadTenantAsyncWithHttpInfo
     *
     * Get Payroll Squad
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayrollSquadTenantAsyncWithHttpInfo(
        $id,
        $payrollSquadId,
        string $contentType = self::contentTypes['getPayrollSquadTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadResponse';
        $request = $this->getPayrollSquadTenantRequest($id, $payrollSquadId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayrollSquadTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  string $payrollSquadId The id of payroll squad (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayrollSquadTenantRequest(
        $id,
        $payrollSquadId,
        string $contentType = self::contentTypes['getPayrollSquadTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPayrollSquadTenant'
            );
        }

        // verify the required parameter 'payrollSquadId' is set
        if ($payrollSquadId === null || (is_array($payrollSquadId) && count($payrollSquadId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payrollSquadId when calling getPayrollSquadTenant'
            );
        }


        $resourcePath = '/tenants/{id}/payrollsquad/{payrollSquadId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payrollSquadId !== null) {
            $resourcePath = str_replace(
                '{' . 'payrollSquadId' . '}',
                ObjectSerializer::toPathValue($payrollSquadId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayrollSquadsTenant
     *
     * Get Payroll Squads
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getPayrollSquadsTenant(
        string $id,
        string $contentType = self::contentTypes['getPayrollSquadsTenant'][0]
    ): array
    {
        list($response) = $this->getPayrollSquadsTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPayrollSquadsTenantWithHttpInfo
     *
     * Get Payroll Squads
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayrollSquadsTenantWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['getPayrollSquadsTenant'][0]
    ): array
    {
        $request = $this->getPayrollSquadsTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayrollSquadsTenantAsync
     *
     * Get Payroll Squads
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayrollSquadsTenantAsync(
        string $id,
        string $contentType = self::contentTypes['getPayrollSquadsTenant'][0]
    ): PromiseInterface
    {
        return $this->getPayrollSquadsTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayrollSquadsTenantAsyncWithHttpInfo
     *
     * Get Payroll Squads
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayrollSquadsTenantAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['getPayrollSquadsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getPayrollSquadsTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayrollSquadsTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayrollSquadsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayrollSquadsTenantRequest(
        $id,
        string $contentType = self::contentTypes['getPayrollSquadsTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPayrollSquadsTenant'
            );
        }


        $resourcePath = '/tenants/{id}/payrollsquad';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPricingTableTenant
     *
     * Get PricingTable
     *
     * @param  string $id id (required)
     * @param  string $pricingTableId pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PricingTable|\SynergiTech\Staffology\Model\PricingTable
     */
    public function getPricingTableTenant(
        string $id,
        string $pricingTableId,
        string $contentType = self::contentTypes['getPricingTableTenant'][0]
    ): \SynergiTech\Staffology\Model\PricingTable
    {
        list($response) = $this->getPricingTableTenantWithHttpInfo($id, $pricingTableId, $contentType);
        return $response;
    }

    /**
     * Operation getPricingTableTenantWithHttpInfo
     *
     * Get PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PricingTable|\SynergiTech\Staffology\Model\PricingTable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPricingTableTenantWithHttpInfo(
        string $id,
        string $pricingTableId,
        string $contentType = self::contentTypes['getPricingTableTenant'][0]
    ): array
    {
        $request = $this->getPricingTableTenantRequest($id, $pricingTableId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PricingTable', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PricingTable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PricingTable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\SynergiTech\Staffology\Model\PricingTable', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PricingTable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PricingTable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PricingTable';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PricingTable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PricingTable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPricingTableTenantAsync
     *
     * Get PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPricingTableTenantAsync(
        string $id,
        string $pricingTableId,
        string $contentType = self::contentTypes['getPricingTableTenant'][0]
    ): PromiseInterface
    {
        return $this->getPricingTableTenantAsyncWithHttpInfo($id, $pricingTableId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPricingTableTenantAsyncWithHttpInfo
     *
     * Get PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPricingTableTenantAsyncWithHttpInfo(
        $id,
        $pricingTableId,
        string $contentType = self::contentTypes['getPricingTableTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PricingTable';
        $request = $this->getPricingTableTenantRequest($id, $pricingTableId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPricingTableTenant'
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPricingTableTenantRequest(
        $id,
        $pricingTableId,
        string $contentType = self::contentTypes['getPricingTableTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPricingTableTenant'
            );
        }

        // verify the required parameter 'pricingTableId' is set
        if ($pricingTableId === null || (is_array($pricingTableId) && count($pricingTableId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pricingTableId when calling getPricingTableTenant'
            );
        }


        $resourcePath = '/tenants/{id}/pricingtables/{pricingTableId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($pricingTableId !== null) {
            $resourcePath = str_replace(
                '{' . 'pricingTableId' . '}',
                ObjectSerializer::toPathValue($pricingTableId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPricingTablesTenant
     *
     * Get PricingTables
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTablesTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getPricingTablesTenant(
        string $id,
        string $contentType = self::contentTypes['getPricingTablesTenant'][0]
    ): array
    {
        list($response) = $this->getPricingTablesTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPricingTablesTenantWithHttpInfo
     *
     * Get PricingTables
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTablesTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPricingTablesTenantWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['getPricingTablesTenant'][0]
    ): array
    {
        $request = $this->getPricingTablesTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPricingTablesTenantAsync
     *
     * Get PricingTables
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTablesTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPricingTablesTenantAsync(
        string $id,
        string $contentType = self::contentTypes['getPricingTablesTenant'][0]
    ): PromiseInterface
    {
        return $this->getPricingTablesTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPricingTablesTenantAsyncWithHttpInfo
     *
     * Get PricingTables
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTablesTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPricingTablesTenantAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['getPricingTablesTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getPricingTablesTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPricingTablesTenant'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPricingTablesTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPricingTablesTenantRequest(
        $id,
        string $contentType = self::contentTypes['getPricingTablesTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPricingTablesTenant'
            );
        }


        $resourcePath = '/tenants/{id}/pricingtables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRtiSubmissionSettingsTenant
     *
     * Get RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\RtiSubmissionSettings
     */
    public function getRtiSubmissionSettingsTenant(
        ?string $id = null,
        string $contentType = self::contentTypes['getRtiSubmissionSettingsTenant'][0]
    ): \SynergiTech\Staffology\Model\RtiSubmissionSettings
    {
        list($response) = $this->getRtiSubmissionSettingsTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRtiSubmissionSettingsTenantWithHttpInfo
     *
     * Get RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\RtiSubmissionSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRtiSubmissionSettingsTenantWithHttpInfo(
        ?string $id = null,
        string $contentType = self::contentTypes['getRtiSubmissionSettingsTenant'][0]
    ): array
    {
        $request = $this->getRtiSubmissionSettingsTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\RtiSubmissionSettings', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\RtiSubmissionSettings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\RtiSubmissionSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\RtiSubmissionSettings';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\RtiSubmissionSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRtiSubmissionSettingsTenantAsync
     *
     * Get RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRtiSubmissionSettingsTenantAsync(
        ?string $id = null,
        string $contentType = self::contentTypes['getRtiSubmissionSettingsTenant'][0]
    ): PromiseInterface
    {
        return $this->getRtiSubmissionSettingsTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRtiSubmissionSettingsTenantAsyncWithHttpInfo
     *
     * Get RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRtiSubmissionSettingsTenantAsyncWithHttpInfo(
        $id = null,
        string $contentType = self::contentTypes['getRtiSubmissionSettingsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\RtiSubmissionSettings';
        $request = $this->getRtiSubmissionSettingsTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRtiSubmissionSettingsTenant'
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRtiSubmissionSettingsTenantRequest(
        $id = null,
        string $contentType = self::contentTypes['getRtiSubmissionSettingsTenant'][0]
    ): Request
    {



        $resourcePath = '/tenants/ritsubmissionsettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTenant
     *
     * Get a Tenant
     *
     * @param  string $id The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Tenant
     */
    public function getTenant(
        string $id,
        string $contentType = self::contentTypes['getTenant'][0]
    ): \SynergiTech\Staffology\Model\Tenant
    {
        list($response) = $this->getTenantWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getTenantWithHttpInfo
     *
     * Get a Tenant
     *
     * @param  string $id The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Tenant, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTenantWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['getTenant'][0]
    ): array
    {
        $request = $this->getTenantRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Tenant', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Tenant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Tenant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Tenant';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Tenant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTenantAsync
     *
     * Get a Tenant
     *
     * @param  string $id The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTenantAsync(
        string $id,
        string $contentType = self::contentTypes['getTenant'][0]
    ): PromiseInterface
    {
        return $this->getTenantAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTenantAsyncWithHttpInfo
     *
     * Get a Tenant
     *
     * @param  string $id The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTenantAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['getTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Tenant';
        $request = $this->getTenantRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTenant'
     *
     * @param  string $id The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTenantRequest(
        $id,
        string $contentType = self::contentTypes['getTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getTenant'
            );
        }


        $resourcePath = '/tenants/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersWithNoBillableActivityTenant
     *
     * Get Users with no Billable Activity.
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $month month (optional)
     * @param  int|null $year year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersWithNoBillableActivityTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function getUsersWithNoBillableActivityTenant(
        string $id,
        ?int $month = null,
        ?int $year = null,
        string $contentType = self::contentTypes['getUsersWithNoBillableActivityTenant'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->getUsersWithNoBillableActivityTenantWithHttpInfo($id, $month, $year, $contentType);
        return $response;
    }

    /**
     * Operation getUsersWithNoBillableActivityTenantWithHttpInfo
     *
     * Get Users with no Billable Activity.
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersWithNoBillableActivityTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersWithNoBillableActivityTenantWithHttpInfo(
        string $id,
        ?int $month = null,
        ?int $year = null,
        string $contentType = self::contentTypes['getUsersWithNoBillableActivityTenant'][0]
    ): array
    {
        $request = $this->getUsersWithNoBillableActivityTenantRequest($id, $month, $year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersWithNoBillableActivityTenantAsync
     *
     * Get Users with no Billable Activity.
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersWithNoBillableActivityTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getUsersWithNoBillableActivityTenantAsync(
        string $id,
        ?int $month = null,
        ?int $year = null,
        string $contentType = self::contentTypes['getUsersWithNoBillableActivityTenant'][0]
    ): PromiseInterface
    {
        return $this->getUsersWithNoBillableActivityTenantAsyncWithHttpInfo($id, $month, $year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersWithNoBillableActivityTenantAsyncWithHttpInfo
     *
     * Get Users with no Billable Activity.
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersWithNoBillableActivityTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getUsersWithNoBillableActivityTenantAsyncWithHttpInfo(
        $id,
        $month = null,
        $year = null,
        string $contentType = self::contentTypes['getUsersWithNoBillableActivityTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->getUsersWithNoBillableActivityTenantRequest($id, $month, $year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersWithNoBillableActivityTenant'
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $month (optional)
     * @param  int|null $year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersWithNoBillableActivityTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUsersWithNoBillableActivityTenantRequest(
        $id,
        $month = null,
        $year = null,
        string $contentType = self::contentTypes['getUsersWithNoBillableActivityTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getUsersWithNoBillableActivityTenant'
            );
        }




        $resourcePath = '/tenants/{id}/reports/users/nobillableactivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $month,
            'month', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $year,
            'year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation netSuiteBillingTenant
     *
     * NetSuite Billing Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $year The year of the billing period (optional)
     * @param  int|null $month The month of the billing period (optional)
     * @param  string|null $accept accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['netSuiteBillingTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function netSuiteBillingTenant(
        string $id,
        ?int $year = null,
        ?int $month = null,
        ?string $accept = null,
        ?bool $allTenants = false,
        string $contentType = self::contentTypes['netSuiteBillingTenant'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->netSuiteBillingTenantWithHttpInfo($id, $year, $month, $accept, $allTenants, $contentType);
        return $response;
    }

    /**
     * Operation netSuiteBillingTenantWithHttpInfo
     *
     * NetSuite Billing Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $year The year of the billing period (optional)
     * @param  int|null $month The month of the billing period (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['netSuiteBillingTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function netSuiteBillingTenantWithHttpInfo(
        string $id,
        ?int $year = null,
        ?int $month = null,
        ?string $accept = null,
        ?bool $allTenants = false,
        string $contentType = self::contentTypes['netSuiteBillingTenant'][0]
    ): array
    {
        $request = $this->netSuiteBillingTenantRequest($id, $year, $month, $accept, $allTenants, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation netSuiteBillingTenantAsync
     *
     * NetSuite Billing Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $year The year of the billing period (optional)
     * @param  int|null $month The month of the billing period (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['netSuiteBillingTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function netSuiteBillingTenantAsync(
        string $id,
        ?int $year = null,
        ?int $month = null,
        ?string $accept = null,
        ?bool $allTenants = false,
        string $contentType = self::contentTypes['netSuiteBillingTenant'][0]
    ): PromiseInterface
    {
        return $this->netSuiteBillingTenantAsyncWithHttpInfo($id, $year, $month, $accept, $allTenants, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation netSuiteBillingTenantAsyncWithHttpInfo
     *
     * NetSuite Billing Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $year The year of the billing period (optional)
     * @param  int|null $month The month of the billing period (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['netSuiteBillingTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function netSuiteBillingTenantAsyncWithHttpInfo(
        $id,
        $year = null,
        $month = null,
        $accept = null,
        $allTenants = false,
        string $contentType = self::contentTypes['netSuiteBillingTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->netSuiteBillingTenantRequest($id, $year, $month, $accept, $allTenants, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'netSuiteBillingTenant'
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  int|null $year The year of the billing period (optional)
     * @param  int|null $month The month of the billing period (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['netSuiteBillingTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function netSuiteBillingTenantRequest(
        $id,
        $year = null,
        $month = null,
        $accept = null,
        $allTenants = false,
        string $contentType = self::contentTypes['netSuiteBillingTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling netSuiteBillingTenant'
            );
        }






        $resourcePath = '/tenants/{id}/reports/netsuitebills';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $year,
            'year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $month,
            'month', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allTenants,
            'allTenants', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrollSquadAddMemberTenant
     *
     * Add Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest|null $contractPayrollSquadMemberRequest contractPayrollSquadMemberRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadAddMemberTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse
     */
    public function payrollSquadAddMemberTenant(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest $contractPayrollSquadMemberRequest = null,
        string $contentType = self::contentTypes['payrollSquadAddMemberTenant'][0]
    ): \SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse
    {
        list($response) = $this->payrollSquadAddMemberTenantWithHttpInfo($id, $contractPayrollSquadMemberRequest, $contentType);
        return $response;
    }

    /**
     * Operation payrollSquadAddMemberTenantWithHttpInfo
     *
     * Add Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest|null $contractPayrollSquadMemberRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadAddMemberTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollSquadAddMemberTenantWithHttpInfo(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest $contractPayrollSquadMemberRequest = null,
        string $contentType = self::contentTypes['payrollSquadAddMemberTenant'][0]
    ): array
    {
        $request = $this->payrollSquadAddMemberTenantRequest($id, $contractPayrollSquadMemberRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrollSquadAddMemberTenantAsync
     *
     * Add Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest|null $contractPayrollSquadMemberRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadAddMemberTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollSquadAddMemberTenantAsync(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest $contractPayrollSquadMemberRequest = null,
        string $contentType = self::contentTypes['payrollSquadAddMemberTenant'][0]
    ): PromiseInterface
    {
        return $this->payrollSquadAddMemberTenantAsyncWithHttpInfo($id, $contractPayrollSquadMemberRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrollSquadAddMemberTenantAsyncWithHttpInfo
     *
     * Add Payroll Squad Member
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest|null $contractPayrollSquadMemberRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadAddMemberTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollSquadAddMemberTenantAsyncWithHttpInfo(
        $id,
        $contractPayrollSquadMemberRequest = null,
        string $contentType = self::contentTypes['payrollSquadAddMemberTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadMemberResponse';
        $request = $this->payrollSquadAddMemberTenantRequest($id, $contractPayrollSquadMemberRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrollSquadAddMemberTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadMemberRequest|null $contractPayrollSquadMemberRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadAddMemberTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrollSquadAddMemberTenantRequest(
        $id,
        $contractPayrollSquadMemberRequest = null,
        string $contentType = self::contentTypes['payrollSquadAddMemberTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling payrollSquadAddMemberTenant'
            );
        }



        $resourcePath = '/tenants/{id}/payrollsquad/member';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPayrollSquadMemberRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPayrollSquadMemberRequest));
            } else {
                $httpBody = $contractPayrollSquadMemberRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payrollSquadUpdateEmployersTenant
     *
     * Update Payroll Squad Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest|null $contractPayrollSquadEmployerRequest contractPayrollSquadEmployerRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadUpdateEmployersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]
     */
    public function payrollSquadUpdateEmployersTenant(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest $contractPayrollSquadEmployerRequest = null,
        string $contentType = self::contentTypes['payrollSquadUpdateEmployersTenant'][0]
    ): array
    {
        list($response) = $this->payrollSquadUpdateEmployersTenantWithHttpInfo($id, $contractPayrollSquadEmployerRequest, $contentType);
        return $response;
    }

    /**
     * Operation payrollSquadUpdateEmployersTenantWithHttpInfo
     *
     * Update Payroll Squad Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest|null $contractPayrollSquadEmployerRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadUpdateEmployersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payrollSquadUpdateEmployersTenantWithHttpInfo(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest $contractPayrollSquadEmployerRequest = null,
        string $contentType = self::contentTypes['payrollSquadUpdateEmployersTenant'][0]
    ): array
    {
        $request = $this->payrollSquadUpdateEmployersTenantRequest($id, $contractPayrollSquadEmployerRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payrollSquadUpdateEmployersTenantAsync
     *
     * Update Payroll Squad Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest|null $contractPayrollSquadEmployerRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadUpdateEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollSquadUpdateEmployersTenantAsync(
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest $contractPayrollSquadEmployerRequest = null,
        string $contentType = self::contentTypes['payrollSquadUpdateEmployersTenant'][0]
    ): PromiseInterface
    {
        return $this->payrollSquadUpdateEmployersTenantAsyncWithHttpInfo($id, $contractPayrollSquadEmployerRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payrollSquadUpdateEmployersTenantAsyncWithHttpInfo
     *
     * Update Payroll Squad Employers
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest|null $contractPayrollSquadEmployerRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadUpdateEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payrollSquadUpdateEmployersTenantAsyncWithHttpInfo(
        $id,
        $contractPayrollSquadEmployerRequest = null,
        string $contentType = self::contentTypes['payrollSquadUpdateEmployersTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPayrollSquadEmployerResponse[]';
        $request = $this->payrollSquadUpdateEmployersTenantRequest($id, $contractPayrollSquadEmployerRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payrollSquadUpdateEmployersTenant'
     *
     * @param  string $id Current tenant id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPayrollSquadEmployerRequest|null $contractPayrollSquadEmployerRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payrollSquadUpdateEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payrollSquadUpdateEmployersTenantRequest(
        $id,
        $contractPayrollSquadEmployerRequest = null,
        string $contentType = self::contentTypes['payrollSquadUpdateEmployersTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling payrollSquadUpdateEmployersTenant'
            );
        }



        $resourcePath = '/tenants/{id}/payrollsquad/employers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPayrollSquadEmployerRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPayrollSquadEmployerRequest));
            } else {
                $httpBody = $contractPayrollSquadEmployerRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeAdminUserTenant
     *
     * Remove Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAdminUserTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function removeAdminUserTenant(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['removeAdminUserTenant'][0]
    ): void
    {
        $this->removeAdminUserTenantWithHttpInfo($id, $body, $contentType);
    }

    /**
     * Operation removeAdminUserTenantWithHttpInfo
     *
     * Remove Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAdminUserTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAdminUserTenantWithHttpInfo(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['removeAdminUserTenant'][0]
    ): array
    {
        $request = $this->removeAdminUserTenantRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeAdminUserTenantAsync
     *
     * Remove Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAdminUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function removeAdminUserTenantAsync(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['removeAdminUserTenant'][0]
    ): PromiseInterface
    {
        return $this->removeAdminUserTenantAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeAdminUserTenantAsyncWithHttpInfo
     *
     * Remove Admin User
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAdminUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function removeAdminUserTenantAsyncWithHttpInfo(
        $id,
        $body = null,
        string $contentType = self::contentTypes['removeAdminUserTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->removeAdminUserTenantRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeAdminUserTenant'
     *
     * @param  string $id The Id of the Tenant you want to remove the  admin User from. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAdminUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeAdminUserTenantRequest(
        $id,
        $body = null,
        string $contentType = self::contentTypes['removeAdminUserTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling removeAdminUserTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/admins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAccountingIdTenant
     *
     * Set User Accounting Id
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId userId (required)
     * @param  string|null $accountingId The CustomerAccountingId for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountingIdTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setAccountingIdTenant(
        string $id,
        string $userId,
        ?string $accountingId = null,
        string $contentType = self::contentTypes['setAccountingIdTenant'][0]
    ): void
    {
        $this->setAccountingIdTenantWithHttpInfo($id, $userId, $accountingId, $contentType);
    }

    /**
     * Operation setAccountingIdTenantWithHttpInfo
     *
     * Set User Accounting Id
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $accountingId The CustomerAccountingId for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountingIdTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAccountingIdTenantWithHttpInfo(
        string $id,
        string $userId,
        ?string $accountingId = null,
        string $contentType = self::contentTypes['setAccountingIdTenant'][0]
    ): array
    {
        $request = $this->setAccountingIdTenantRequest($id, $userId, $accountingId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setAccountingIdTenantAsync
     *
     * Set User Accounting Id
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $accountingId The CustomerAccountingId for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountingIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setAccountingIdTenantAsync(
        string $id,
        string $userId,
        ?string $accountingId = null,
        string $contentType = self::contentTypes['setAccountingIdTenant'][0]
    ): PromiseInterface
    {
        return $this->setAccountingIdTenantAsyncWithHttpInfo($id, $userId, $accountingId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAccountingIdTenantAsyncWithHttpInfo
     *
     * Set User Accounting Id
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $accountingId The CustomerAccountingId for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountingIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setAccountingIdTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $accountingId = null,
        string $contentType = self::contentTypes['setAccountingIdTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setAccountingIdTenantRequest($id, $userId, $accountingId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAccountingIdTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $accountingId The CustomerAccountingId for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountingIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAccountingIdTenantRequest(
        $id,
        $userId,
        $accountingId = null,
        string $contentType = self::contentTypes['setAccountingIdTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setAccountingIdTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setAccountingIdTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/accounting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingId,
            'accountingId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAddressTenant
     *
     * Set Address
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAddressTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setAddressTenant(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\User $user = null,
        string $contentType = self::contentTypes['setAddressTenant'][0]
    ): void
    {
        $this->setAddressTenantWithHttpInfo($id, $userId, $user, $contentType);
    }

    /**
     * Operation setAddressTenantWithHttpInfo
     *
     * Set Address
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAddressTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAddressTenantWithHttpInfo(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\User $user = null,
        string $contentType = self::contentTypes['setAddressTenant'][0]
    ): array
    {
        $request = $this->setAddressTenantRequest($id, $userId, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setAddressTenantAsync
     *
     * Set Address
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAddressTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setAddressTenantAsync(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\User $user = null,
        string $contentType = self::contentTypes['setAddressTenant'][0]
    ): PromiseInterface
    {
        return $this->setAddressTenantAsyncWithHttpInfo($id, $userId, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAddressTenantAsyncWithHttpInfo
     *
     * Set Address
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAddressTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setAddressTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $user = null,
        string $contentType = self::contentTypes['setAddressTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setAddressTenantRequest($id, $userId, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAddressTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAddressTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAddressTenantRequest(
        $id,
        $userId,
        $user = null,
        string $contentType = self::contentTypes['setAddressTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setAddressTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setAddressTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setBureauRedirectEmailAddressTenant
     *
     * Set Bureau Redirect
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId userId (required)
     * @param  string|null $emailAddress The email address to redirect to, or an empty string to remove the redirect. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBureauRedirectEmailAddressTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setBureauRedirectEmailAddressTenant(
        string $id,
        string $userId,
        ?string $emailAddress = null,
        string $contentType = self::contentTypes['setBureauRedirectEmailAddressTenant'][0]
    ): void
    {
        $this->setBureauRedirectEmailAddressTenantWithHttpInfo($id, $userId, $emailAddress, $contentType);
    }

    /**
     * Operation setBureauRedirectEmailAddressTenantWithHttpInfo
     *
     * Set Bureau Redirect
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $emailAddress The email address to redirect to, or an empty string to remove the redirect. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBureauRedirectEmailAddressTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setBureauRedirectEmailAddressTenantWithHttpInfo(
        string $id,
        string $userId,
        ?string $emailAddress = null,
        string $contentType = self::contentTypes['setBureauRedirectEmailAddressTenant'][0]
    ): array
    {
        $request = $this->setBureauRedirectEmailAddressTenantRequest($id, $userId, $emailAddress, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setBureauRedirectEmailAddressTenantAsync
     *
     * Set Bureau Redirect
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $emailAddress The email address to redirect to, or an empty string to remove the redirect. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBureauRedirectEmailAddressTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setBureauRedirectEmailAddressTenantAsync(
        string $id,
        string $userId,
        ?string $emailAddress = null,
        string $contentType = self::contentTypes['setBureauRedirectEmailAddressTenant'][0]
    ): PromiseInterface
    {
        return $this->setBureauRedirectEmailAddressTenantAsyncWithHttpInfo($id, $userId, $emailAddress, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setBureauRedirectEmailAddressTenantAsyncWithHttpInfo
     *
     * Set Bureau Redirect
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $emailAddress The email address to redirect to, or an empty string to remove the redirect. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBureauRedirectEmailAddressTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setBureauRedirectEmailAddressTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $emailAddress = null,
        string $contentType = self::contentTypes['setBureauRedirectEmailAddressTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setBureauRedirectEmailAddressTenantRequest($id, $userId, $emailAddress, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setBureauRedirectEmailAddressTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $emailAddress The email address to redirect to, or an empty string to remove the redirect. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBureauRedirectEmailAddressTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setBureauRedirectEmailAddressTenantRequest(
        $id,
        $userId,
        $emailAddress = null,
        string $contentType = self::contentTypes['setBureauRedirectEmailAddressTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setBureauRedirectEmailAddressTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setBureauRedirectEmailAddressTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/bureauredir';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $emailAddress,
            'emailAddress', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setBusinessNameTenant
     *
     * Set User Business Name
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  string|null $businessName The Business Name for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBusinessNameTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setBusinessNameTenant(
        string $id,
        string $userId,
        ?string $businessName = null,
        string $contentType = self::contentTypes['setBusinessNameTenant'][0]
    ): void
    {
        $this->setBusinessNameTenantWithHttpInfo($id, $userId, $businessName, $contentType);
    }

    /**
     * Operation setBusinessNameTenantWithHttpInfo
     *
     * Set User Business Name
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  string|null $businessName The Business Name for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBusinessNameTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setBusinessNameTenantWithHttpInfo(
        string $id,
        string $userId,
        ?string $businessName = null,
        string $contentType = self::contentTypes['setBusinessNameTenant'][0]
    ): array
    {
        $request = $this->setBusinessNameTenantRequest($id, $userId, $businessName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setBusinessNameTenantAsync
     *
     * Set User Business Name
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  string|null $businessName The Business Name for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBusinessNameTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setBusinessNameTenantAsync(
        string $id,
        string $userId,
        ?string $businessName = null,
        string $contentType = self::contentTypes['setBusinessNameTenant'][0]
    ): PromiseInterface
    {
        return $this->setBusinessNameTenantAsyncWithHttpInfo($id, $userId, $businessName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setBusinessNameTenantAsyncWithHttpInfo
     *
     * Set User Business Name
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  string|null $businessName The Business Name for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBusinessNameTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setBusinessNameTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $businessName = null,
        string $contentType = self::contentTypes['setBusinessNameTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setBusinessNameTenantRequest($id, $userId, $businessName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setBusinessNameTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  string|null $businessName The Business Name for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setBusinessNameTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setBusinessNameTenantRequest(
        $id,
        $userId,
        $businessName = null,
        string $contentType = self::contentTypes['setBusinessNameTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setBusinessNameTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setBusinessNameTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/businessname';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $businessName,
            'businessName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCountryTenant
     *
     * Set Country
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\Country|null $country The Country for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCountryTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setCountryTenant(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\Country $country = null,
        string $contentType = self::contentTypes['setCountryTenant'][0]
    ): void
    {
        $this->setCountryTenantWithHttpInfo($id, $userId, $country, $contentType);
    }

    /**
     * Operation setCountryTenantWithHttpInfo
     *
     * Set Country
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\Country|null $country The Country for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCountryTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCountryTenantWithHttpInfo(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\Country $country = null,
        string $contentType = self::contentTypes['setCountryTenant'][0]
    ): array
    {
        $request = $this->setCountryTenantRequest($id, $userId, $country, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setCountryTenantAsync
     *
     * Set Country
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\Country|null $country The Country for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCountryTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setCountryTenantAsync(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\Country $country = null,
        string $contentType = self::contentTypes['setCountryTenant'][0]
    ): PromiseInterface
    {
        return $this->setCountryTenantAsyncWithHttpInfo($id, $userId, $country, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCountryTenantAsyncWithHttpInfo
     *
     * Set Country
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\Country|null $country The Country for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCountryTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setCountryTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $country = null,
        string $contentType = self::contentTypes['setCountryTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setCountryTenantRequest($id, $userId, $country, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCountryTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\Country|null $country The Country for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCountryTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCountryTenantRequest(
        $id,
        $userId,
        $country = null,
        string $contentType = self::contentTypes['setCountryTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setCountryTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setCountryTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/country';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'Country', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setEmployeeCountTenant
     *
     * Set Employee Count
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  int|null $employeeCount The Employee Count for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCountTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setEmployeeCountTenant(
        string $id,
        string $userId,
        ?int $employeeCount = null,
        string $contentType = self::contentTypes['setEmployeeCountTenant'][0]
    ): void
    {
        $this->setEmployeeCountTenantWithHttpInfo($id, $userId, $employeeCount, $contentType);
    }

    /**
     * Operation setEmployeeCountTenantWithHttpInfo
     *
     * Set Employee Count
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  int|null $employeeCount The Employee Count for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCountTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setEmployeeCountTenantWithHttpInfo(
        string $id,
        string $userId,
        ?int $employeeCount = null,
        string $contentType = self::contentTypes['setEmployeeCountTenant'][0]
    ): array
    {
        $request = $this->setEmployeeCountTenantRequest($id, $userId, $employeeCount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setEmployeeCountTenantAsync
     *
     * Set Employee Count
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  int|null $employeeCount The Employee Count for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCountTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEmployeeCountTenantAsync(
        string $id,
        string $userId,
        ?int $employeeCount = null,
        string $contentType = self::contentTypes['setEmployeeCountTenant'][0]
    ): PromiseInterface
    {
        return $this->setEmployeeCountTenantAsyncWithHttpInfo($id, $userId, $employeeCount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setEmployeeCountTenantAsyncWithHttpInfo
     *
     * Set Employee Count
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  int|null $employeeCount The Employee Count for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCountTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEmployeeCountTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $employeeCount = null,
        string $contentType = self::contentTypes['setEmployeeCountTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setEmployeeCountTenantRequest($id, $userId, $employeeCount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setEmployeeCountTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  int|null $employeeCount The Employee Count for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCountTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setEmployeeCountTenantRequest(
        $id,
        $userId,
        $employeeCount = null,
        string $contentType = self::contentTypes['setEmployeeCountTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setEmployeeCountTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setEmployeeCountTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/employeecount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeCount,
            'employeeCount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setEvcTenant
     *
     * Set Evc
     *
     * @param  string $id The Id of the tenant (required)
     * @param  bool|null $disableEvc A boolean value indicating whether to disable or enable EVC at tenant level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEvcTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setEvcTenant(
        string $id,
        ?bool $disableEvc = null,
        string $contentType = self::contentTypes['setEvcTenant'][0]
    ): void
    {
        $this->setEvcTenantWithHttpInfo($id, $disableEvc, $contentType);
    }

    /**
     * Operation setEvcTenantWithHttpInfo
     *
     * Set Evc
     *
     * @param  string $id The Id of the tenant (required)
     * @param  bool|null $disableEvc A boolean value indicating whether to disable or enable EVC at tenant level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEvcTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setEvcTenantWithHttpInfo(
        string $id,
        ?bool $disableEvc = null,
        string $contentType = self::contentTypes['setEvcTenant'][0]
    ): array
    {
        $request = $this->setEvcTenantRequest($id, $disableEvc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setEvcTenantAsync
     *
     * Set Evc
     *
     * @param  string $id The Id of the tenant (required)
     * @param  bool|null $disableEvc A boolean value indicating whether to disable or enable EVC at tenant level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEvcTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEvcTenantAsync(
        string $id,
        ?bool $disableEvc = null,
        string $contentType = self::contentTypes['setEvcTenant'][0]
    ): PromiseInterface
    {
        return $this->setEvcTenantAsyncWithHttpInfo($id, $disableEvc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setEvcTenantAsyncWithHttpInfo
     *
     * Set Evc
     *
     * @param  string $id The Id of the tenant (required)
     * @param  bool|null $disableEvc A boolean value indicating whether to disable or enable EVC at tenant level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEvcTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEvcTenantAsyncWithHttpInfo(
        $id,
        $disableEvc = null,
        string $contentType = self::contentTypes['setEvcTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setEvcTenantRequest($id, $disableEvc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setEvcTenant'
     *
     * @param  string $id The Id of the tenant (required)
     * @param  bool|null $disableEvc A boolean value indicating whether to disable or enable EVC at tenant level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEvcTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setEvcTenantRequest(
        $id,
        $disableEvc = null,
        string $contentType = self::contentTypes['setEvcTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setEvcTenant'
            );
        }



        $resourcePath = '/tenants/{id}/admin/evc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disableEvc,
            'disableEvc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setIndustryTenant
     *
     * Set Industry
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\UserIndustry|null $industry The Industry for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setIndustryTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setIndustryTenant(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\UserIndustry $industry = null,
        string $contentType = self::contentTypes['setIndustryTenant'][0]
    ): void
    {
        $this->setIndustryTenantWithHttpInfo($id, $userId, $industry, $contentType);
    }

    /**
     * Operation setIndustryTenantWithHttpInfo
     *
     * Set Industry
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\UserIndustry|null $industry The Industry for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setIndustryTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setIndustryTenantWithHttpInfo(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\UserIndustry $industry = null,
        string $contentType = self::contentTypes['setIndustryTenant'][0]
    ): array
    {
        $request = $this->setIndustryTenantRequest($id, $userId, $industry, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setIndustryTenantAsync
     *
     * Set Industry
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\UserIndustry|null $industry The Industry for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setIndustryTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setIndustryTenantAsync(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\UserIndustry $industry = null,
        string $contentType = self::contentTypes['setIndustryTenant'][0]
    ): PromiseInterface
    {
        return $this->setIndustryTenantAsyncWithHttpInfo($id, $userId, $industry, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setIndustryTenantAsyncWithHttpInfo
     *
     * Set Industry
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\UserIndustry|null $industry The Industry for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setIndustryTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setIndustryTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $industry = null,
        string $contentType = self::contentTypes['setIndustryTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setIndustryTenantRequest($id, $userId, $industry, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setIndustryTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\UserIndustry|null $industry The Industry for the User. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setIndustryTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setIndustryTenantRequest(
        $id,
        $userId,
        $industry = null,
        string $contentType = self::contentTypes['setIndustryTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setIndustryTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setIndustryTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/industry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $industry,
            'industry', // param base name
            'UserIndustry', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMonthlyMinimumTenant
     *
     * Set Monthly Minimum
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId userId (required)
     * @param  \SynergiTech\Staffology\Model\MonthlyMinimum|null $monthlyMinimum monthlyMinimum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonthlyMinimumTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setMonthlyMinimumTenant(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\MonthlyMinimum $monthlyMinimum = null,
        string $contentType = self::contentTypes['setMonthlyMinimumTenant'][0]
    ): void
    {
        $this->setMonthlyMinimumTenantWithHttpInfo($id, $userId, $monthlyMinimum, $contentType);
    }

    /**
     * Operation setMonthlyMinimumTenantWithHttpInfo
     *
     * Set Monthly Minimum
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  \SynergiTech\Staffology\Model\MonthlyMinimum|null $monthlyMinimum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonthlyMinimumTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMonthlyMinimumTenantWithHttpInfo(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\MonthlyMinimum $monthlyMinimum = null,
        string $contentType = self::contentTypes['setMonthlyMinimumTenant'][0]
    ): array
    {
        $request = $this->setMonthlyMinimumTenantRequest($id, $userId, $monthlyMinimum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setMonthlyMinimumTenantAsync
     *
     * Set Monthly Minimum
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  \SynergiTech\Staffology\Model\MonthlyMinimum|null $monthlyMinimum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonthlyMinimumTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setMonthlyMinimumTenantAsync(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\MonthlyMinimum $monthlyMinimum = null,
        string $contentType = self::contentTypes['setMonthlyMinimumTenant'][0]
    ): PromiseInterface
    {
        return $this->setMonthlyMinimumTenantAsyncWithHttpInfo($id, $userId, $monthlyMinimum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMonthlyMinimumTenantAsyncWithHttpInfo
     *
     * Set Monthly Minimum
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  \SynergiTech\Staffology\Model\MonthlyMinimum|null $monthlyMinimum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonthlyMinimumTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setMonthlyMinimumTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $monthlyMinimum = null,
        string $contentType = self::contentTypes['setMonthlyMinimumTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setMonthlyMinimumTenantRequest($id, $userId, $monthlyMinimum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMonthlyMinimumTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  \SynergiTech\Staffology\Model\MonthlyMinimum|null $monthlyMinimum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonthlyMinimumTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setMonthlyMinimumTenantRequest(
        $id,
        $userId,
        $monthlyMinimum = null,
        string $contentType = self::contentTypes['setMonthlyMinimumTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setMonthlyMinimumTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setMonthlyMinimumTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/monthlyminimum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($monthlyMinimum)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($monthlyMinimum));
            } else {
                $httpBody = $monthlyMinimum;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPricingTableIdTenant
     *
     * Set User PricingTableId
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId userId (required)
     * @param  string|null $pricingTableId The PricingTable Id for the user. Provide null and the user will use the Tenant default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPricingTableIdTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setPricingTableIdTenant(
        string $id,
        string $userId,
        ?string $pricingTableId = null,
        string $contentType = self::contentTypes['setPricingTableIdTenant'][0]
    ): void
    {
        $this->setPricingTableIdTenantWithHttpInfo($id, $userId, $pricingTableId, $contentType);
    }

    /**
     * Operation setPricingTableIdTenantWithHttpInfo
     *
     * Set User PricingTableId
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $pricingTableId The PricingTable Id for the user. Provide null and the user will use the Tenant default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPricingTableIdTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPricingTableIdTenantWithHttpInfo(
        string $id,
        string $userId,
        ?string $pricingTableId = null,
        string $contentType = self::contentTypes['setPricingTableIdTenant'][0]
    ): array
    {
        $request = $this->setPricingTableIdTenantRequest($id, $userId, $pricingTableId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setPricingTableIdTenantAsync
     *
     * Set User PricingTableId
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $pricingTableId The PricingTable Id for the user. Provide null and the user will use the Tenant default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPricingTableIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setPricingTableIdTenantAsync(
        string $id,
        string $userId,
        ?string $pricingTableId = null,
        string $contentType = self::contentTypes['setPricingTableIdTenant'][0]
    ): PromiseInterface
    {
        return $this->setPricingTableIdTenantAsyncWithHttpInfo($id, $userId, $pricingTableId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPricingTableIdTenantAsyncWithHttpInfo
     *
     * Set User PricingTableId
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $pricingTableId The PricingTable Id for the user. Provide null and the user will use the Tenant default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPricingTableIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setPricingTableIdTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $pricingTableId = null,
        string $contentType = self::contentTypes['setPricingTableIdTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setPricingTableIdTenantRequest($id, $userId, $pricingTableId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPricingTableIdTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  string $userId (required)
     * @param  string|null $pricingTableId The PricingTable Id for the user. Provide null and the user will use the Tenant default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPricingTableIdTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPricingTableIdTenantRequest(
        $id,
        $userId,
        $pricingTableId = null,
        string $contentType = self::contentTypes['setPricingTableIdTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setPricingTableIdTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setPricingTableIdTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/pricingtable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingTableId,
            'pricingTableId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setTenantTenant
     *
     * Set User Tenant
     *
     * @param  string $id The Id of the Tenant the user is currently assigned to. (required)
     * @param  string $userId userId (required)
     * @param  string|null $newTenantId The Id of the Tenant the user is to be assigned to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTenantTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setTenantTenant(
        string $id,
        string $userId,
        ?string $newTenantId = null,
        string $contentType = self::contentTypes['setTenantTenant'][0]
    ): void
    {
        $this->setTenantTenantWithHttpInfo($id, $userId, $newTenantId, $contentType);
    }

    /**
     * Operation setTenantTenantWithHttpInfo
     *
     * Set User Tenant
     *
     * @param  string $id The Id of the Tenant the user is currently assigned to. (required)
     * @param  string $userId (required)
     * @param  string|null $newTenantId The Id of the Tenant the user is to be assigned to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTenantTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setTenantTenantWithHttpInfo(
        string $id,
        string $userId,
        ?string $newTenantId = null,
        string $contentType = self::contentTypes['setTenantTenant'][0]
    ): array
    {
        $request = $this->setTenantTenantRequest($id, $userId, $newTenantId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setTenantTenantAsync
     *
     * Set User Tenant
     *
     * @param  string $id The Id of the Tenant the user is currently assigned to. (required)
     * @param  string $userId (required)
     * @param  string|null $newTenantId The Id of the Tenant the user is to be assigned to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTenantTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setTenantTenantAsync(
        string $id,
        string $userId,
        ?string $newTenantId = null,
        string $contentType = self::contentTypes['setTenantTenant'][0]
    ): PromiseInterface
    {
        return $this->setTenantTenantAsyncWithHttpInfo($id, $userId, $newTenantId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setTenantTenantAsyncWithHttpInfo
     *
     * Set User Tenant
     *
     * @param  string $id The Id of the Tenant the user is currently assigned to. (required)
     * @param  string $userId (required)
     * @param  string|null $newTenantId The Id of the Tenant the user is to be assigned to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTenantTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setTenantTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $newTenantId = null,
        string $contentType = self::contentTypes['setTenantTenant'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setTenantTenantRequest($id, $userId, $newTenantId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setTenantTenant'
     *
     * @param  string $id The Id of the Tenant the user is currently assigned to. (required)
     * @param  string $userId (required)
     * @param  string|null $newTenantId The Id of the Tenant the user is to be assigned to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTenantTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setTenantTenantRequest(
        $id,
        $userId,
        $newTenantId = null,
        string $contentType = self::contentTypes['setTenantTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setTenantTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling setTenantTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}/tenant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $newTenantId,
            'newTenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBillTenant
     *
     * Update Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year year (required)
     * @param  int $month month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  \SynergiTech\Staffology\Model\UsageBill|null $usageBill usageBill (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBillTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\UsageBill
     */
    public function updateBillTenant(
        string $id,
        int $year,
        int $month,
        string $billId,
        ?\SynergiTech\Staffology\Model\UsageBill $usageBill = null,
        string $contentType = self::contentTypes['updateBillTenant'][0]
    ): \SynergiTech\Staffology\Model\UsageBill
    {
        list($response) = $this->updateBillTenantWithHttpInfo($id, $year, $month, $billId, $usageBill, $contentType);
        return $response;
    }

    /**
     * Operation updateBillTenantWithHttpInfo
     *
     * Update Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  \SynergiTech\Staffology\Model\UsageBill|null $usageBill (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBillTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\UsageBill, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBillTenantWithHttpInfo(
        string $id,
        int $year,
        int $month,
        string $billId,
        ?\SynergiTech\Staffology\Model\UsageBill $usageBill = null,
        string $contentType = self::contentTypes['updateBillTenant'][0]
    ): array
    {
        $request = $this->updateBillTenantRequest($id, $year, $month, $billId, $usageBill, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\UsageBill', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\UsageBill' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\UsageBill', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\UsageBill';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\UsageBill',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBillTenantAsync
     *
     * Update Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  \SynergiTech\Staffology\Model\UsageBill|null $usageBill (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBillTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateBillTenantAsync(
        string $id,
        int $year,
        int $month,
        string $billId,
        ?\SynergiTech\Staffology\Model\UsageBill $usageBill = null,
        string $contentType = self::contentTypes['updateBillTenant'][0]
    ): PromiseInterface
    {
        return $this->updateBillTenantAsyncWithHttpInfo($id, $year, $month, $billId, $usageBill, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBillTenantAsyncWithHttpInfo
     *
     * Update Bill
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  \SynergiTech\Staffology\Model\UsageBill|null $usageBill (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBillTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateBillTenantAsyncWithHttpInfo(
        $id,
        $year,
        $month,
        $billId,
        $usageBill = null,
        string $contentType = self::contentTypes['updateBillTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\UsageBill';
        $request = $this->updateBillTenantRequest($id, $year, $month, $billId, $usageBill, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBillTenant'
     *
     * @param  string $id The Id of the Tenant the bill belongs to. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $billId The Id of the UsageBill. (required)
     * @param  \SynergiTech\Staffology\Model\UsageBill|null $usageBill (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBillTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBillTenantRequest(
        $id,
        $year,
        $month,
        $billId,
        $usageBill = null,
        string $contentType = self::contentTypes['updateBillTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateBillTenant'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $year when calling updateBillTenant'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $month when calling updateBillTenant'
            );
        }

        // verify the required parameter 'billId' is set
        if ($billId === null || (is_array($billId) && count($billId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $billId when calling updateBillTenant'
            );
        }



        $resourcePath = '/tenants/{id}/bills/{year}/{month}/{billId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }
        // path params
        if ($billId !== null) {
            $resourcePath = str_replace(
                '{' . 'billId' . '}',
                ObjectSerializer::toPathValue($billId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usageBill)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usageBill));
            } else {
                $httpBody = $usageBill;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCssColorsTenant
     *
     * Update CSS Colors
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair stringStringKeyValuePair (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssColorsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\StringStringKeyValuePair[]
     */
    public function updateCssColorsTenant(
        string $id,
        ?array $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['updateCssColorsTenant'][0]
    ): array
    {
        list($response) = $this->updateCssColorsTenantWithHttpInfo($id, $stringStringKeyValuePair, $contentType);
        return $response;
    }

    /**
     * Operation updateCssColorsTenantWithHttpInfo
     *
     * Update CSS Colors
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssColorsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\StringStringKeyValuePair[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCssColorsTenantWithHttpInfo(
        string $id,
        ?array $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['updateCssColorsTenant'][0]
    ): array
    {
        $request = $this->updateCssColorsTenantRequest($id, $stringStringKeyValuePair, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\StringStringKeyValuePair[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\StringStringKeyValuePair[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\StringStringKeyValuePair[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\StringStringKeyValuePair[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\StringStringKeyValuePair[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCssColorsTenantAsync
     *
     * Update CSS Colors
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssColorsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCssColorsTenantAsync(
        string $id,
        ?array $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['updateCssColorsTenant'][0]
    ): PromiseInterface
    {
        return $this->updateCssColorsTenantAsyncWithHttpInfo($id, $stringStringKeyValuePair, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCssColorsTenantAsyncWithHttpInfo
     *
     * Update CSS Colors
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssColorsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCssColorsTenantAsyncWithHttpInfo(
        $id,
        $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['updateCssColorsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\StringStringKeyValuePair[]';
        $request = $this->updateCssColorsTenantRequest($id, $stringStringKeyValuePair, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCssColorsTenant'
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\StringStringKeyValuePair[]|null $stringStringKeyValuePair (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssColorsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCssColorsTenantRequest(
        $id,
        $stringStringKeyValuePair = null,
        string $contentType = self::contentTypes['updateCssColorsTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateCssColorsTenant'
            );
        }



        $resourcePath = '/tenants/{id}/css/colors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($stringStringKeyValuePair)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($stringStringKeyValuePair));
            } else {
                $httpBody = $stringStringKeyValuePair;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCssTenant
     *
     * Update CSS
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  string|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function updateCssTenant(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['updateCssTenant'][0]
    ): string
    {
        list($response) = $this->updateCssTenantWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation updateCssTenantWithHttpInfo
     *
     * Update CSS
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCssTenantWithHttpInfo(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['updateCssTenant'][0]
    ): array
    {
        $request = $this->updateCssTenantRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('string', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCssTenantAsync
     *
     * Update CSS
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCssTenantAsync(
        string $id,
        ?string $body = null,
        string $contentType = self::contentTypes['updateCssTenant'][0]
    ): PromiseInterface
    {
        return $this->updateCssTenantAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCssTenantAsyncWithHttpInfo
     *
     * Update CSS
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCssTenantAsyncWithHttpInfo(
        $id,
        $body = null,
        string $contentType = self::contentTypes['updateCssTenant'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->updateCssTenantRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCssTenant'
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  string|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCssTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCssTenantRequest(
        $id,
        $body = null,
        string $contentType = self::contentTypes['updateCssTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateCssTenant'
            );
        }



        $resourcePath = '/tenants/{id}/css';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFavIconTenant
     *
     * Upload Favicon
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavIconTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Tenant
     */
    public function updateFavIconTenant(
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updateFavIconTenant'][0]
    ): \SynergiTech\Staffology\Model\Tenant
    {
        list($response) = $this->updateFavIconTenantWithHttpInfo($id, $file, $contentType);
        return $response;
    }

    /**
     * Operation updateFavIconTenantWithHttpInfo
     *
     * Upload Favicon
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavIconTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Tenant, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFavIconTenantWithHttpInfo(
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updateFavIconTenant'][0]
    ): array
    {
        $request = $this->updateFavIconTenantRequest($id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Tenant', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Tenant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Tenant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Tenant';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Tenant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFavIconTenantAsync
     *
     * Upload Favicon
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavIconTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateFavIconTenantAsync(
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updateFavIconTenant'][0]
    ): PromiseInterface
    {
        return $this->updateFavIconTenantAsyncWithHttpInfo($id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFavIconTenantAsyncWithHttpInfo
     *
     * Upload Favicon
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavIconTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateFavIconTenantAsyncWithHttpInfo(
        $id,
        $file = null,
        string $contentType = self::contentTypes['updateFavIconTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Tenant';
        $request = $this->updateFavIconTenantRequest($id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFavIconTenant'
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavIconTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFavIconTenantRequest(
        $id,
        $file = null,
        string $contentType = self::contentTypes['updateFavIconTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateFavIconTenant'
            );
        }



        $resourcePath = '/tenants/{id}/favicon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLogoTenant
     *
     * Upload Logo
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogoTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Tenant
     */
    public function updateLogoTenant(
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updateLogoTenant'][0]
    ): \SynergiTech\Staffology\Model\Tenant
    {
        list($response) = $this->updateLogoTenantWithHttpInfo($id, $file, $contentType);
        return $response;
    }

    /**
     * Operation updateLogoTenantWithHttpInfo
     *
     * Upload Logo
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogoTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Tenant, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLogoTenantWithHttpInfo(
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updateLogoTenant'][0]
    ): array
    {
        $request = $this->updateLogoTenantRequest($id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Tenant', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Tenant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Tenant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Tenant';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Tenant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLogoTenantAsync
     *
     * Upload Logo
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogoTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLogoTenantAsync(
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updateLogoTenant'][0]
    ): PromiseInterface
    {
        return $this->updateLogoTenantAsyncWithHttpInfo($id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLogoTenantAsyncWithHttpInfo
     *
     * Upload Logo
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogoTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLogoTenantAsyncWithHttpInfo(
        $id,
        $file = null,
        string $contentType = self::contentTypes['updateLogoTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Tenant';
        $request = $this->updateLogoTenantRequest($id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLogoTenant'
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogoTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLogoTenantRequest(
        $id,
        $file = null,
        string $contentType = self::contentTypes['updateLogoTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateLogoTenant'
            );
        }



        $resourcePath = '/tenants/{id}/logo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePricingTableTenant
     *
     * Update PricingTable
     *
     * @param  string $id id (required)
     * @param  string $pricingTableId pricingTableId (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PricingTable
     */
    public function updatePricingTableTenant(
        string $id,
        string $pricingTableId,
        ?\SynergiTech\Staffology\Model\PricingTable $pricingTable = null,
        string $contentType = self::contentTypes['updatePricingTableTenant'][0]
    ): \SynergiTech\Staffology\Model\PricingTable
    {
        list($response) = $this->updatePricingTableTenantWithHttpInfo($id, $pricingTableId, $pricingTable, $contentType);
        return $response;
    }

    /**
     * Operation updatePricingTableTenantWithHttpInfo
     *
     * Update PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricingTableTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PricingTable, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePricingTableTenantWithHttpInfo(
        string $id,
        string $pricingTableId,
        ?\SynergiTech\Staffology\Model\PricingTable $pricingTable = null,
        string $contentType = self::contentTypes['updatePricingTableTenant'][0]
    ): array
    {
        $request = $this->updatePricingTableTenantRequest($id, $pricingTableId, $pricingTable, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PricingTable', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PricingTable' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PricingTable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PricingTable';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PricingTable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePricingTableTenantAsync
     *
     * Update PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePricingTableTenantAsync(
        string $id,
        string $pricingTableId,
        ?\SynergiTech\Staffology\Model\PricingTable $pricingTable = null,
        string $contentType = self::contentTypes['updatePricingTableTenant'][0]
    ): PromiseInterface
    {
        return $this->updatePricingTableTenantAsyncWithHttpInfo($id, $pricingTableId, $pricingTable, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePricingTableTenantAsyncWithHttpInfo
     *
     * Update PricingTable
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePricingTableTenantAsyncWithHttpInfo(
        $id,
        $pricingTableId,
        $pricingTable = null,
        string $contentType = self::contentTypes['updatePricingTableTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PricingTable';
        $request = $this->updatePricingTableTenantRequest($id, $pricingTableId, $pricingTable, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePricingTableTenant'
     *
     * @param  string $id (required)
     * @param  string $pricingTableId (required)
     * @param  \SynergiTech\Staffology\Model\PricingTable|null $pricingTable (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePricingTableTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePricingTableTenantRequest(
        $id,
        $pricingTableId,
        $pricingTable = null,
        string $contentType = self::contentTypes['updatePricingTableTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updatePricingTableTenant'
            );
        }

        // verify the required parameter 'pricingTableId' is set
        if ($pricingTableId === null || (is_array($pricingTableId) && count($pricingTableId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pricingTableId when calling updatePricingTableTenant'
            );
        }



        $resourcePath = '/tenants/{id}/pricingtables/{pricingTableId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($pricingTableId !== null) {
            $resourcePath = str_replace(
                '{' . 'pricingTableId' . '}',
                ObjectSerializer::toPathValue($pricingTableId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pricingTable)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pricingTable));
            } else {
                $httpBody = $pricingTable;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRtiSubmissionSettingsTenant
     *
     * Update RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  \SynergiTech\Staffology\Model\RtiSubmissionSettings|null $rtiSubmissionSettings rtiSubmissionSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\RtiSubmissionSettings
     */
    public function updateRtiSubmissionSettingsTenant(
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\RtiSubmissionSettings $rtiSubmissionSettings = null,
        string $contentType = self::contentTypes['updateRtiSubmissionSettingsTenant'][0]
    ): \SynergiTech\Staffology\Model\RtiSubmissionSettings
    {
        list($response) = $this->updateRtiSubmissionSettingsTenantWithHttpInfo($id, $rtiSubmissionSettings, $contentType);
        return $response;
    }

    /**
     * Operation updateRtiSubmissionSettingsTenantWithHttpInfo
     *
     * Update RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  \SynergiTech\Staffology\Model\RtiSubmissionSettings|null $rtiSubmissionSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\RtiSubmissionSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRtiSubmissionSettingsTenantWithHttpInfo(
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\RtiSubmissionSettings $rtiSubmissionSettings = null,
        string $contentType = self::contentTypes['updateRtiSubmissionSettingsTenant'][0]
    ): array
    {
        $request = $this->updateRtiSubmissionSettingsTenantRequest($id, $rtiSubmissionSettings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\RtiSubmissionSettings', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\RtiSubmissionSettings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\RtiSubmissionSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\RtiSubmissionSettings';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\RtiSubmissionSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRtiSubmissionSettingsTenantAsync
     *
     * Update RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  \SynergiTech\Staffology\Model\RtiSubmissionSettings|null $rtiSubmissionSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateRtiSubmissionSettingsTenantAsync(
        ?string $id = null,
        ?\SynergiTech\Staffology\Model\RtiSubmissionSettings $rtiSubmissionSettings = null,
        string $contentType = self::contentTypes['updateRtiSubmissionSettingsTenant'][0]
    ): PromiseInterface
    {
        return $this->updateRtiSubmissionSettingsTenantAsyncWithHttpInfo($id, $rtiSubmissionSettings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRtiSubmissionSettingsTenantAsyncWithHttpInfo
     *
     * Update RtiSubmissionSettings
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  \SynergiTech\Staffology\Model\RtiSubmissionSettings|null $rtiSubmissionSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateRtiSubmissionSettingsTenantAsyncWithHttpInfo(
        $id = null,
        $rtiSubmissionSettings = null,
        string $contentType = self::contentTypes['updateRtiSubmissionSettingsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\RtiSubmissionSettings';
        $request = $this->updateRtiSubmissionSettingsTenantRequest($id, $rtiSubmissionSettings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRtiSubmissionSettingsTenant'
     *
     * @param  string|null $id The Id of the Tenant. (optional)
     * @param  \SynergiTech\Staffology\Model\RtiSubmissionSettings|null $rtiSubmissionSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRtiSubmissionSettingsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRtiSubmissionSettingsTenantRequest(
        $id = null,
        $rtiSubmissionSettings = null,
        string $contentType = self::contentTypes['updateRtiSubmissionSettingsTenant'][0]
    ): Request
    {




        $resourcePath = '/tenants/ritsubmissionsettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rtiSubmissionSettings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rtiSubmissionSettings));
            } else {
                $httpBody = $rtiSubmissionSettings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTenant
     *
     * Update a Tenant
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Tenant
     */
    public function updateTenant(
        string $id,
        ?\SynergiTech\Staffology\Model\Tenant $tenant = null,
        string $contentType = self::contentTypes['updateTenant'][0]
    ): \SynergiTech\Staffology\Model\Tenant
    {
        list($response) = $this->updateTenantWithHttpInfo($id, $tenant, $contentType);
        return $response;
    }

    /**
     * Operation updateTenantWithHttpInfo
     *
     * Update a Tenant
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Tenant, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTenantWithHttpInfo(
        string $id,
        ?\SynergiTech\Staffology\Model\Tenant $tenant = null,
        string $contentType = self::contentTypes['updateTenant'][0]
    ): array
    {
        $request = $this->updateTenantRequest($id, $tenant, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Tenant', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Tenant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Tenant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Tenant';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Tenant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTenantAsync
     *
     * Update a Tenant
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTenantAsync(
        string $id,
        ?\SynergiTech\Staffology\Model\Tenant $tenant = null,
        string $contentType = self::contentTypes['updateTenant'][0]
    ): PromiseInterface
    {
        return $this->updateTenantAsyncWithHttpInfo($id, $tenant, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTenantAsyncWithHttpInfo
     *
     * Update a Tenant
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateTenantAsyncWithHttpInfo(
        $id,
        $tenant = null,
        string $contentType = self::contentTypes['updateTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Tenant';
        $request = $this->updateTenantRequest($id, $tenant, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTenant'
     *
     * @param  string $id The Id of the Tenant you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\Tenant|null $tenant (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTenantRequest(
        $id,
        $tenant = null,
        string $contentType = self::contentTypes['updateTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateTenant'
            );
        }



        $resourcePath = '/tenants/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tenant)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tenant));
            } else {
                $httpBody = $tenant;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUserTenant
     *
     * Update a User
     *
     * @param  string $id The Id of the Tenant you want to update a User for. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user The User details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\User
     */
    public function updateUserTenant(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\User $user = null,
        string $contentType = self::contentTypes['updateUserTenant'][0]
    ): \SynergiTech\Staffology\Model\User
    {
        list($response) = $this->updateUserTenantWithHttpInfo($id, $userId, $user, $contentType);
        return $response;
    }

    /**
     * Operation updateUserTenantWithHttpInfo
     *
     * Update a User
     *
     * @param  string $id The Id of the Tenant you want to update a User for. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user The User details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserTenantWithHttpInfo(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\User $user = null,
        string $contentType = self::contentTypes['updateUserTenant'][0]
    ): array
    {
        $request = $this->updateUserTenantRequest($id, $userId, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\User', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\User' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\User';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserTenantAsync
     *
     * Update a User
     *
     * @param  string $id The Id of the Tenant you want to update a User for. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user The User details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateUserTenantAsync(
        string $id,
        string $userId,
        ?\SynergiTech\Staffology\Model\User $user = null,
        string $contentType = self::contentTypes['updateUserTenant'][0]
    ): PromiseInterface
    {
        return $this->updateUserTenantAsyncWithHttpInfo($id, $userId, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserTenantAsyncWithHttpInfo
     *
     * Update a User
     *
     * @param  string $id The Id of the Tenant you want to update a User for. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user The User details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateUserTenantAsyncWithHttpInfo(
        $id,
        $userId,
        $user = null,
        string $contentType = self::contentTypes['updateUserTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\User';
        $request = $this->updateUserTenantRequest($id, $userId, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUserTenant'
     *
     * @param  string $id The Id of the Tenant you want to update a User for. (required)
     * @param  string $userId The Id of the User. (required)
     * @param  \SynergiTech\Staffology\Model\User|null $user The User details. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserTenantRequest(
        $id,
        $userId,
        $user = null,
        string $contentType = self::contentTypes['updateUserTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateUserTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling updateUserTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageTenant
     *
     * Get Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  int $year year (required)
     * @param  int $month month (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function usageTenant(
        string $id,
        int $year,
        int $month,
        string $contentType = self::contentTypes['usageTenant'][0]
    ): array
    {
        list($response) = $this->usageTenantWithHttpInfo($id, $year, $month, $contentType);
        return $response;
    }

    /**
     * Operation usageTenantWithHttpInfo
     *
     * Get Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function usageTenantWithHttpInfo(
        string $id,
        int $year,
        int $month,
        string $contentType = self::contentTypes['usageTenant'][0]
    ): array
    {
        $request = $this->usageTenantRequest($id, $year, $month, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usageTenantAsync
     *
     * Get Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function usageTenantAsync(
        string $id,
        int $year,
        int $month,
        string $contentType = self::contentTypes['usageTenant'][0]
    ): PromiseInterface
    {
        return $this->usageTenantAsyncWithHttpInfo($id, $year, $month, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usageTenantAsyncWithHttpInfo
     *
     * Get Usage
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function usageTenantAsyncWithHttpInfo(
        $id,
        $year,
        $month,
        string $contentType = self::contentTypes['usageTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->usageTenantRequest($id, $year, $month, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usageTenant'
     *
     * @param  string $id The Id of the Tenant. (required)
     * @param  int $year (required)
     * @param  int $month (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageTenantRequest(
        $id,
        $year,
        $month,
        string $contentType = self::contentTypes['usageTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling usageTenant'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $year when calling usageTenant'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $month when calling usageTenant'
            );
        }


        $resourcePath = '/tenants/{id}/usage/{year}/{month}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userBillsTenant
     *
     * Get User Bills
     *
     * @param  string $id The Id of the Tenant you want to get a Users UsageBills for. (required)
     * @param  string $userId userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userBillsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function userBillsTenant(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userBillsTenant'][0]
    ): array
    {
        list($response) = $this->userBillsTenantWithHttpInfo($id, $userId, $contentType);
        return $response;
    }

    /**
     * Operation userBillsTenantWithHttpInfo
     *
     * Get User Bills
     *
     * @param  string $id The Id of the Tenant you want to get a Users UsageBills for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userBillsTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userBillsTenantWithHttpInfo(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userBillsTenant'][0]
    ): array
    {
        $request = $this->userBillsTenantRequest($id, $userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userBillsTenantAsync
     *
     * Get User Bills
     *
     * @param  string $id The Id of the Tenant you want to get a Users UsageBills for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userBillsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userBillsTenantAsync(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userBillsTenant'][0]
    ): PromiseInterface
    {
        return $this->userBillsTenantAsyncWithHttpInfo($id, $userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userBillsTenantAsyncWithHttpInfo
     *
     * Get User Bills
     *
     * @param  string $id The Id of the Tenant you want to get a Users UsageBills for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userBillsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userBillsTenantAsyncWithHttpInfo(
        $id,
        $userId,
        string $contentType = self::contentTypes['userBillsTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->userBillsTenantRequest($id, $userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userBillsTenant'
     *
     * @param  string $id The Id of the Tenant you want to get a Users UsageBills for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userBillsTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userBillsTenantRequest(
        $id,
        $userId,
        string $contentType = self::contentTypes['userBillsTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling userBillsTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling userBillsTenant'
            );
        }


        $resourcePath = '/tenants/{id}/users/{userId}/bills';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userEmployersTenant
     *
     * Get User Employers
     *
     * @param  string $id The Id of the Tenant you want to get User Employers for. (required)
     * @param  string $userId userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmployersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function userEmployersTenant(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userEmployersTenant'][0]
    ): array
    {
        list($response) = $this->userEmployersTenantWithHttpInfo($id, $userId, $contentType);
        return $response;
    }

    /**
     * Operation userEmployersTenantWithHttpInfo
     *
     * Get User Employers
     *
     * @param  string $id The Id of the Tenant you want to get User Employers for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmployersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userEmployersTenantWithHttpInfo(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userEmployersTenant'][0]
    ): array
    {
        $request = $this->userEmployersTenantRequest($id, $userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userEmployersTenantAsync
     *
     * Get User Employers
     *
     * @param  string $id The Id of the Tenant you want to get User Employers for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userEmployersTenantAsync(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userEmployersTenant'][0]
    ): PromiseInterface
    {
        return $this->userEmployersTenantAsyncWithHttpInfo($id, $userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userEmployersTenantAsyncWithHttpInfo
     *
     * Get User Employers
     *
     * @param  string $id The Id of the Tenant you want to get User Employers for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userEmployersTenantAsyncWithHttpInfo(
        $id,
        $userId,
        string $contentType = self::contentTypes['userEmployersTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->userEmployersTenantRequest($id, $userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userEmployersTenant'
     *
     * @param  string $id The Id of the Tenant you want to get User Employers for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmployersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userEmployersTenantRequest(
        $id,
        $userId,
        string $contentType = self::contentTypes['userEmployersTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling userEmployersTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling userEmployersTenant'
            );
        }


        $resourcePath = '/tenants/{id}/users/{userId}/employers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userTenant
     *
     * Get a User
     *
     * @param  string $id The Id of the Tenant you want to get a User for. (required)
     * @param  string $userId userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\User
     */
    public function userTenant(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userTenant'][0]
    ): \SynergiTech\Staffology\Model\User
    {
        list($response) = $this->userTenantWithHttpInfo($id, $userId, $contentType);
        return $response;
    }

    /**
     * Operation userTenantWithHttpInfo
     *
     * Get a User
     *
     * @param  string $id The Id of the Tenant you want to get a User for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function userTenantWithHttpInfo(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userTenant'][0]
    ): array
    {
        $request = $this->userTenantRequest($id, $userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\User', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\User' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\User';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userTenantAsync
     *
     * Get a User
     *
     * @param  string $id The Id of the Tenant you want to get a User for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userTenantAsync(
        string $id,
        string $userId,
        string $contentType = self::contentTypes['userTenant'][0]
    ): PromiseInterface
    {
        return $this->userTenantAsyncWithHttpInfo($id, $userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userTenantAsyncWithHttpInfo
     *
     * Get a User
     *
     * @param  string $id The Id of the Tenant you want to get a User for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userTenantAsyncWithHttpInfo(
        $id,
        $userId,
        string $contentType = self::contentTypes['userTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\User';
        $request = $this->userTenantRequest($id, $userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userTenant'
     *
     * @param  string $id The Id of the Tenant you want to get a User for. (required)
     * @param  string $userId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userTenantRequest(
        $id,
        $userId,
        string $contentType = self::contentTypes['userTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling userTenant'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userId when calling userTenant'
            );
        }


        $resourcePath = '/tenants/{id}/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersSearchTenant
     *
     * Search Users
     *
     * @param  string $id The Id of the Tenant you want to search Users for. (required)
     * @param  string|null $q q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersSearchTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function usersSearchTenant(
        string $id,
        ?string $q = null,
        string $contentType = self::contentTypes['usersSearchTenant'][0]
    ): array
    {
        list($response) = $this->usersSearchTenantWithHttpInfo($id, $q, $contentType);
        return $response;
    }

    /**
     * Operation usersSearchTenantWithHttpInfo
     *
     * Search Users
     *
     * @param  string $id The Id of the Tenant you want to search Users for. (required)
     * @param  string|null $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersSearchTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function usersSearchTenantWithHttpInfo(
        string $id,
        ?string $q = null,
        string $contentType = self::contentTypes['usersSearchTenant'][0]
    ): array
    {
        $request = $this->usersSearchTenantRequest($id, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersSearchTenantAsync
     *
     * Search Users
     *
     * @param  string $id The Id of the Tenant you want to search Users for. (required)
     * @param  string|null $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersSearchTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function usersSearchTenantAsync(
        string $id,
        ?string $q = null,
        string $contentType = self::contentTypes['usersSearchTenant'][0]
    ): PromiseInterface
    {
        return $this->usersSearchTenantAsyncWithHttpInfo($id, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersSearchTenantAsyncWithHttpInfo
     *
     * Search Users
     *
     * @param  string $id The Id of the Tenant you want to search Users for. (required)
     * @param  string|null $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersSearchTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function usersSearchTenantAsyncWithHttpInfo(
        $id,
        $q = null,
        string $contentType = self::contentTypes['usersSearchTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->usersSearchTenantRequest($id, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersSearchTenant'
     *
     * @param  string $id The Id of the Tenant you want to search Users for. (required)
     * @param  string|null $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersSearchTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersSearchTenantRequest(
        $id,
        $q = null,
        string $contentType = self::contentTypes['usersSearchTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling usersSearchTenant'
            );
        }



        $resourcePath = '/tenants/{id}/users/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersTenant
     *
     * List Users
     *
     * @param  string $id The Id of the Tenant you want to list Users for. (required)
     * @param  int|null $pageNum pageNum (optional)
     * @param  int|null $pageSize pageSize (optional)
     * @param  bool|null $sortByLastLogin sortByLastLogin (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\UserCategory|null $category category (optional)
     * @param  bool|null $isBureauMember isBureauMember (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function usersTenant(
        string $id,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?bool $sortByLastLogin = false,
        ?\SynergiTech\Staffology\Model\UserCategory $category = null,
        ?bool $isBureauMember = null,
        string $contentType = self::contentTypes['usersTenant'][0]
    ): array
    {
        list($response) = $this->usersTenantWithHttpInfo($id, $pageNum, $pageSize, $sortByLastLogin, $category, $isBureauMember, $contentType);
        return $response;
    }

    /**
     * Operation usersTenantWithHttpInfo
     *
     * List Users
     *
     * @param  string $id The Id of the Tenant you want to list Users for. (required)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  bool|null $sortByLastLogin (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\UserCategory|null $category (optional)
     * @param  bool|null $isBureauMember (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function usersTenantWithHttpInfo(
        string $id,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?bool $sortByLastLogin = false,
        ?\SynergiTech\Staffology\Model\UserCategory $category = null,
        ?bool $isBureauMember = null,
        string $contentType = self::contentTypes['usersTenant'][0]
    ): array
    {
        $request = $this->usersTenantRequest($id, $pageNum, $pageSize, $sortByLastLogin, $category, $isBureauMember, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersTenantAsync
     *
     * List Users
     *
     * @param  string $id The Id of the Tenant you want to list Users for. (required)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  bool|null $sortByLastLogin (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\UserCategory|null $category (optional)
     * @param  bool|null $isBureauMember (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function usersTenantAsync(
        string $id,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?bool $sortByLastLogin = false,
        ?\SynergiTech\Staffology\Model\UserCategory $category = null,
        ?bool $isBureauMember = null,
        string $contentType = self::contentTypes['usersTenant'][0]
    ): PromiseInterface
    {
        return $this->usersTenantAsyncWithHttpInfo($id, $pageNum, $pageSize, $sortByLastLogin, $category, $isBureauMember, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersTenantAsyncWithHttpInfo
     *
     * List Users
     *
     * @param  string $id The Id of the Tenant you want to list Users for. (required)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  bool|null $sortByLastLogin (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\UserCategory|null $category (optional)
     * @param  bool|null $isBureauMember (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function usersTenantAsyncWithHttpInfo(
        $id,
        $pageNum = null,
        $pageSize = null,
        $sortByLastLogin = false,
        $category = null,
        $isBureauMember = null,
        string $contentType = self::contentTypes['usersTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->usersTenantRequest($id, $pageNum, $pageSize, $sortByLastLogin, $category, $isBureauMember, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersTenant'
     *
     * @param  string $id The Id of the Tenant you want to list Users for. (required)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  bool|null $sortByLastLogin (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\UserCategory|null $category (optional)
     * @param  bool|null $isBureauMember (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersTenantRequest(
        $id,
        $pageNum = null,
        $pageSize = null,
        $sortByLastLogin = false,
        $category = null,
        $isBureauMember = null,
        string $contentType = self::contentTypes['usersTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling usersTenant'
            );
        }







        $resourcePath = '/tenants/{id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageNum,
            'pageNum', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortByLastLogin,
            'sortByLastLogin', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'UserCategory', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isBureauMember,
            'isBureauMember', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation weeklyActivityTenant
     *
     * Weekly Activity Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  \DateTime|null $fromDate fromDate (optional)
     * @param  \DateTime|null $toDate toDate (optional)
     * @param  string|null $accept accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['weeklyActivityTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function weeklyActivityTenant(
        string $id,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        ?bool $allTenants = false,
        string $contentType = self::contentTypes['weeklyActivityTenant'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->weeklyActivityTenantWithHttpInfo($id, $fromDate, $toDate, $accept, $allTenants, $contentType);
        return $response;
    }

    /**
     * Operation weeklyActivityTenantWithHttpInfo
     *
     * Weekly Activity Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['weeklyActivityTenant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function weeklyActivityTenantWithHttpInfo(
        string $id,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        ?bool $allTenants = false,
        string $contentType = self::contentTypes['weeklyActivityTenant'][0]
    ): array
    {
        $request = $this->weeklyActivityTenantRequest($id, $fromDate, $toDate, $accept, $allTenants, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation weeklyActivityTenantAsync
     *
     * Weekly Activity Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['weeklyActivityTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function weeklyActivityTenantAsync(
        string $id,
        ?\DateTime $fromDate = null,
        ?\DateTime $toDate = null,
        ?string $accept = null,
        ?bool $allTenants = false,
        string $contentType = self::contentTypes['weeklyActivityTenant'][0]
    ): PromiseInterface
    {
        return $this->weeklyActivityTenantAsyncWithHttpInfo($id, $fromDate, $toDate, $accept, $allTenants, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation weeklyActivityTenantAsyncWithHttpInfo
     *
     * Weekly Activity Report
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['weeklyActivityTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function weeklyActivityTenantAsyncWithHttpInfo(
        $id,
        $fromDate = null,
        $toDate = null,
        $accept = null,
        $allTenants = false,
        string $contentType = self::contentTypes['weeklyActivityTenant'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->weeklyActivityTenantRequest($id, $fromDate, $toDate, $accept, $allTenants, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'weeklyActivityTenant'
     *
     * @param  string $id The Id of the Tenant (required)
     * @param  \DateTime|null $fromDate (optional)
     * @param  \DateTime|null $toDate (optional)
     * @param  string|null $accept (optional)
     * @param  bool|null $allTenants If set to true then the report will include all Tenants to which you have access (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['weeklyActivityTenant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function weeklyActivityTenantRequest(
        $id,
        $fromDate = null,
        $toDate = null,
        $accept = null,
        $allTenants = false,
        string $contentType = self::contentTypes['weeklyActivityTenant'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling weeklyActivityTenant'
            );
        }






        $resourcePath = '/tenants/{id}/reports/weeklyactivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allTenants,
            'allTenants', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
