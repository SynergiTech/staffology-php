<?php
/**
 * EmployeeApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EmployeeApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmployeeApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'applyPayIncreaseEmployee' => [
            'application/json',
        ],
        'applyPayOptionsEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'averageWeeklyEarningsEmployee' => [
            'application/json',
        ],
        'baseDailyRateEmployee' => [
            'application/json',
        ],
        'baseHourlyRateEmployee' => [
            'application/json',
        ],
        'createEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteEmployee' => [
            'application/json',
        ],
        'deleteMultipleEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deletePhotoEmployee' => [
            'application/json',
        ],
        'expiringRtwEmployee' => [
            'application/json',
        ],
        'getDepartmentMembershipsEmployee' => [
            'application/json',
        ],
        'getEmployee' => [
            'application/json',
        ],
        'getEmployeeCostCentresEmployee' => [
            'application/json',
        ],
        'getEvcSettingsEmployee' => [
            'application/json',
        ],
        'importCsvEmployee' => [
            'multipart/form-data',
        ],
        'indexEmployee' => [
            'application/json',
        ],
        'leaversEmployee' => [
            'application/json',
        ],
        'markAsLeaversEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'minimumWageEmployee' => [
            'application/json',
        ],
        'payRunEntriesEmployee' => [
            'application/json',
        ],
        'reHireEmployee' => [
            'application/json',
        ],
        'searchByPayrollCodeEmployee' => [
            'application/json',
        ],
        'searchEmployee' => [
            'application/json',
        ],
        'setDepartmentMembershipsEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setEmployeeCostCentresEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setOnHoldEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateEvcSettingsEmployee' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updatePhotoEmployee' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation applyPayIncreaseEmployee
     *
     * Apply Pay Increase
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  float|null $percentage percentage (optional)
     * @param  bool|null $allEmployees Set this to true (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayIncreaseEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function applyPayIncreaseEmployee(
        string $employerId,
        ?float $percentage = null,
        ?bool $allEmployees = null,
        string $contentType = self::contentTypes['applyPayIncreaseEmployee'][0]
    ): void
    {
        $this->applyPayIncreaseEmployeeWithHttpInfo($employerId, $percentage, $allEmployees, $contentType);
    }

    /**
     * Operation applyPayIncreaseEmployeeWithHttpInfo
     *
     * Apply Pay Increase
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  float|null $percentage (optional)
     * @param  bool|null $allEmployees Set this to true (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayIncreaseEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyPayIncreaseEmployeeWithHttpInfo(
        string $employerId,
        ?float $percentage = null,
        ?bool $allEmployees = null,
        string $contentType = self::contentTypes['applyPayIncreaseEmployee'][0]
    ): array
    {
        $request = $this->applyPayIncreaseEmployeeRequest($employerId, $percentage, $allEmployees, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation applyPayIncreaseEmployeeAsync
     *
     * Apply Pay Increase
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  float|null $percentage (optional)
     * @param  bool|null $allEmployees Set this to true (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayIncreaseEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function applyPayIncreaseEmployeeAsync(
        string $employerId,
        ?float $percentage = null,
        ?bool $allEmployees = null,
        string $contentType = self::contentTypes['applyPayIncreaseEmployee'][0]
    ): PromiseInterface
    {
        return $this->applyPayIncreaseEmployeeAsyncWithHttpInfo($employerId, $percentage, $allEmployees, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyPayIncreaseEmployeeAsyncWithHttpInfo
     *
     * Apply Pay Increase
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  float|null $percentage (optional)
     * @param  bool|null $allEmployees Set this to true (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayIncreaseEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function applyPayIncreaseEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?float $percentage = null,
        ?bool $allEmployees = null,
        string $contentType = self::contentTypes['applyPayIncreaseEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->applyPayIncreaseEmployeeRequest($employerId, $percentage, $allEmployees, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyPayIncreaseEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  float|null $percentage (optional)
     * @param  bool|null $allEmployees Set this to true (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayIncreaseEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyPayIncreaseEmployeeRequest(
        string $employerId,
        ?float $percentage = null,
        ?bool $allEmployees = null,
        string $contentType = self::contentTypes['applyPayIncreaseEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling applyPayIncreaseEmployee'
            );
        }




        $resourcePath = '/employers/{employerId}/employees/payincrease';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $percentage,
            'percentage', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allEmployees,
            'allEmployees', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyPayOptionsEmployee
     *
     * Apply PayOptions
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  \SynergiTech\Staffology\Model\PayOptions|null $payOptions payOptions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayOptionsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function applyPayOptionsEmployee(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayOptions $payOptions = null,
        string $contentType = self::contentTypes['applyPayOptionsEmployee'][0]
    ): void
    {
        $this->applyPayOptionsEmployeeWithHttpInfo($employerId, $payOptions, $contentType);
    }

    /**
     * Operation applyPayOptionsEmployeeWithHttpInfo
     *
     * Apply PayOptions
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  \SynergiTech\Staffology\Model\PayOptions|null $payOptions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayOptionsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyPayOptionsEmployeeWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayOptions $payOptions = null,
        string $contentType = self::contentTypes['applyPayOptionsEmployee'][0]
    ): array
    {
        $request = $this->applyPayOptionsEmployeeRequest($employerId, $payOptions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation applyPayOptionsEmployeeAsync
     *
     * Apply PayOptions
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  \SynergiTech\Staffology\Model\PayOptions|null $payOptions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayOptionsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function applyPayOptionsEmployeeAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayOptions $payOptions = null,
        string $contentType = self::contentTypes['applyPayOptionsEmployee'][0]
    ): PromiseInterface
    {
        return $this->applyPayOptionsEmployeeAsyncWithHttpInfo($employerId, $payOptions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyPayOptionsEmployeeAsyncWithHttpInfo
     *
     * Apply PayOptions
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  \SynergiTech\Staffology\Model\PayOptions|null $payOptions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayOptionsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function applyPayOptionsEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayOptions $payOptions = null,
        string $contentType = self::contentTypes['applyPayOptionsEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->applyPayOptionsEmployeeRequest($employerId, $payOptions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyPayOptionsEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the employees belong. (required)
     * @param  \SynergiTech\Staffology\Model\PayOptions|null $payOptions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyPayOptionsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyPayOptionsEmployeeRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\PayOptions $payOptions = null,
        string $contentType = self::contentTypes['applyPayOptionsEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling applyPayOptionsEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/payoptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payOptions)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payOptions));
            } else {
                $httpBody = $payOptions;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation averageWeeklyEarningsEmployee
     *
     * Average Weekly Earnings
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \DateTime|null $date The date at which you want to calculate the earnings from. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageWeeklyEarningsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AverageWeeklyEarnings
     */
    public function averageWeeklyEarningsEmployee(
        string $employerId,
        string $id,
        ?\DateTime $date = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        string $contentType = self::contentTypes['averageWeeklyEarningsEmployee'][0]
    ): \SynergiTech\Staffology\Model\AverageWeeklyEarnings
    {
        list($response) = $this->averageWeeklyEarningsEmployeeWithHttpInfo($employerId, $id, $date, $leaveType, $contentType);
        return $response;
    }

    /**
     * Operation averageWeeklyEarningsEmployeeWithHttpInfo
     *
     * Average Weekly Earnings
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \DateTime|null $date The date at which you want to calculate the earnings from. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageWeeklyEarningsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AverageWeeklyEarnings, HTTP status code, HTTP response headers (array of strings)
     */
    public function averageWeeklyEarningsEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        ?\DateTime $date = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        string $contentType = self::contentTypes['averageWeeklyEarningsEmployee'][0]
    ): array
    {
        $request = $this->averageWeeklyEarningsEmployeeRequest($employerId, $id, $date, $leaveType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AverageWeeklyEarnings', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AverageWeeklyEarnings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AverageWeeklyEarnings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AverageWeeklyEarnings';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AverageWeeklyEarnings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation averageWeeklyEarningsEmployeeAsync
     *
     * Average Weekly Earnings
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \DateTime|null $date The date at which you want to calculate the earnings from. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageWeeklyEarningsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function averageWeeklyEarningsEmployeeAsync(
        string $employerId,
        string $id,
        ?\DateTime $date = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        string $contentType = self::contentTypes['averageWeeklyEarningsEmployee'][0]
    ): PromiseInterface
    {
        return $this->averageWeeklyEarningsEmployeeAsyncWithHttpInfo($employerId, $id, $date, $leaveType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation averageWeeklyEarningsEmployeeAsyncWithHttpInfo
     *
     * Average Weekly Earnings
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \DateTime|null $date The date at which you want to calculate the earnings from. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageWeeklyEarningsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function averageWeeklyEarningsEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\DateTime $date = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        string $contentType = self::contentTypes['averageWeeklyEarningsEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AverageWeeklyEarnings';
        $request = $this->averageWeeklyEarningsEmployeeRequest($employerId, $id, $date, $leaveType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'averageWeeklyEarningsEmployee'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \DateTime|null $date The date at which you want to calculate the earnings from. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['averageWeeklyEarningsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function averageWeeklyEarningsEmployeeRequest(
        string $employerId,
        string $id,
        ?\DateTime $date = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        string $contentType = self::contentTypes['averageWeeklyEarningsEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling averageWeeklyEarningsEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling averageWeeklyEarningsEmployee'
            );
        }




        $resourcePath = '/employers/{employerId}/employees/{id}/awe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leaveType?->value,
            'leaveType', // param base name
            'LeaveType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baseDailyRateEmployee
     *
     * Calculate Base Daily Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseDailyRateEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function baseDailyRateEmployee(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseDailyRateEmployee'][0]
    ): float
    {
        list($response) = $this->baseDailyRateEmployeeWithHttpInfo($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType);
        return $response;
    }

    /**
     * Operation baseDailyRateEmployeeWithHttpInfo
     *
     * Calculate Base Daily Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseDailyRateEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function baseDailyRateEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseDailyRateEmployee'][0]
    ): array
    {
        $request = $this->baseDailyRateEmployeeRequest($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baseDailyRateEmployeeAsync
     *
     * Calculate Base Daily Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseDailyRateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function baseDailyRateEmployeeAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseDailyRateEmployee'][0]
    ): PromiseInterface
    {
        return $this->baseDailyRateEmployeeAsyncWithHttpInfo($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baseDailyRateEmployeeAsyncWithHttpInfo
     *
     * Calculate Base Daily Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseDailyRateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function baseDailyRateEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseDailyRateEmployee'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->baseDailyRateEmployeeRequest($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baseDailyRateEmployee'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseDailyRateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baseDailyRateEmployeeRequest(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseDailyRateEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling baseDailyRateEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling baseDailyRateEmployee'
            );
        }





        $resourcePath = '/employers/{employerId}/employees/{id}/basedailyrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payBasis?->value,
            'payBasis', // param base name
            'PayBasis', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payAmount,
            'payAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baseHourlyRateEmployee
     *
     * Calculate Base Hourly Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseHourlyRateEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function baseHourlyRateEmployee(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseHourlyRateEmployee'][0]
    ): float
    {
        list($response) = $this->baseHourlyRateEmployeeWithHttpInfo($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType);
        return $response;
    }

    /**
     * Operation baseHourlyRateEmployeeWithHttpInfo
     *
     * Calculate Base Hourly Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseHourlyRateEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function baseHourlyRateEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseHourlyRateEmployee'][0]
    ): array
    {
        $request = $this->baseHourlyRateEmployeeRequest($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baseHourlyRateEmployeeAsync
     *
     * Calculate Base Hourly Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseHourlyRateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function baseHourlyRateEmployeeAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseHourlyRateEmployee'][0]
    ): PromiseInterface
    {
        return $this->baseHourlyRateEmployeeAsyncWithHttpInfo($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baseHourlyRateEmployeeAsyncWithHttpInfo
     *
     * Calculate Base Hourly Rate (deprecated)
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseHourlyRateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function baseHourlyRateEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseHourlyRateEmployee'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->baseHourlyRateEmployeeRequest($employerId, $id, $payPeriod, $payBasis, $payAmount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baseHourlyRateEmployee'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee is regularly paid each period. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baseHourlyRateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baseHourlyRateEmployeeRequest(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        string $contentType = self::contentTypes['baseHourlyRateEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling baseHourlyRateEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling baseHourlyRateEmployee'
            );
        }





        $resourcePath = '/employers/{employerId}/employees/{id}/basehourlyrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payBasis?->value,
            'payBasis', // param base name
            'PayBasis', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payAmount,
            'payAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEmployee
     *
     * Create a new Employee
     *
     * @param  string $employerId The Id of the Employer you are creating the Employee for (required)
     * @param  \SynergiTech\Staffology\Model\ContractCreateEmployeeRequest|null $contractCreateEmployeeRequest contractCreateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeResponse
     */
    public function createEmployee(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractCreateEmployeeRequest $contractCreateEmployeeRequest = null,
        string $contentType = self::contentTypes['createEmployee'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeResponse
    {
        list($response) = $this->createEmployeeWithHttpInfo($employerId, $contractCreateEmployeeRequest, $contentType);
        return $response;
    }

    /**
     * Operation createEmployeeWithHttpInfo
     *
     * Create a new Employee
     *
     * @param  string $employerId The Id of the Employer you are creating the Employee for (required)
     * @param  \SynergiTech\Staffology\Model\ContractCreateEmployeeRequest|null $contractCreateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmployeeWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractCreateEmployeeRequest $contractCreateEmployeeRequest = null,
        string $contentType = self::contentTypes['createEmployee'][0]
    ): array
    {
        $request = $this->createEmployeeRequest($employerId, $contractCreateEmployeeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmployeeAsync
     *
     * Create a new Employee
     *
     * @param  string $employerId The Id of the Employer you are creating the Employee for (required)
     * @param  \SynergiTech\Staffology\Model\ContractCreateEmployeeRequest|null $contractCreateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createEmployeeAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractCreateEmployeeRequest $contractCreateEmployeeRequest = null,
        string $contentType = self::contentTypes['createEmployee'][0]
    ): PromiseInterface
    {
        return $this->createEmployeeAsyncWithHttpInfo($employerId, $contractCreateEmployeeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmployeeAsyncWithHttpInfo
     *
     * Create a new Employee
     *
     * @param  string $employerId The Id of the Employer you are creating the Employee for (required)
     * @param  \SynergiTech\Staffology\Model\ContractCreateEmployeeRequest|null $contractCreateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractCreateEmployeeRequest $contractCreateEmployeeRequest = null,
        string $contentType = self::contentTypes['createEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
        $request = $this->createEmployeeRequest($employerId, $contractCreateEmployeeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmployee'
     *
     * @param  string $employerId The Id of the Employer you are creating the Employee for (required)
     * @param  \SynergiTech\Staffology\Model\ContractCreateEmployeeRequest|null $contractCreateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmployeeRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractCreateEmployeeRequest $contractCreateEmployeeRequest = null,
        string $contentType = self::contentTypes['createEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractCreateEmployeeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractCreateEmployeeRequest));
            } else {
                $httpBody = $contractCreateEmployeeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmployee
     *
     * Delete an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployee'][0]
    ): void
    {
        $this->deleteEmployeeWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation deleteEmployeeWithHttpInfo
     *
     * Delete an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployee'][0]
    ): array
    {
        $request = $this->deleteEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmployeeAsync
     *
     * Delete an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployee'][0]
    ): PromiseInterface
    {
        return $this->deleteEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmployeeAsyncWithHttpInfo
     *
     * Delete an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMultipleEmployee
     *
     * Delete Employees
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  string[]|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteMultipleEmployee(
        string $employerId,
        array $requestBody = null,
        string $contentType = self::contentTypes['deleteMultipleEmployee'][0]
    ): void
    {
        $this->deleteMultipleEmployeeWithHttpInfo($employerId, $requestBody, $contentType);
    }

    /**
     * Operation deleteMultipleEmployeeWithHttpInfo
     *
     * Delete Employees
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMultipleEmployeeWithHttpInfo(
        string $employerId,
        array $requestBody = null,
        string $contentType = self::contentTypes['deleteMultipleEmployee'][0]
    ): array
    {
        $request = $this->deleteMultipleEmployeeRequest($employerId, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMultipleEmployeeAsync
     *
     * Delete Employees
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteMultipleEmployeeAsync(
        string $employerId,
        array $requestBody = null,
        string $contentType = self::contentTypes['deleteMultipleEmployee'][0]
    ): PromiseInterface
    {
        return $this->deleteMultipleEmployeeAsyncWithHttpInfo($employerId, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMultipleEmployeeAsyncWithHttpInfo
     *
     * Delete Employees
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteMultipleEmployeeAsyncWithHttpInfo(
        string $employerId,
        array $requestBody = null,
        string $contentType = self::contentTypes['deleteMultipleEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteMultipleEmployeeRequest($employerId, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMultipleEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMultipleEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMultipleEmployeeRequest(
        string $employerId,
        array $requestBody = null,
        string $contentType = self::contentTypes['deleteMultipleEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteMultipleEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePhotoEmployee
     *
     * Delete Photo
     *
     * @param  string $employerId employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhotoEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePhotoEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePhotoEmployee'][0]
    ): void
    {
        $this->deletePhotoEmployeeWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation deletePhotoEmployeeWithHttpInfo
     *
     * Delete Photo
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhotoEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePhotoEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePhotoEmployee'][0]
    ): array
    {
        $request = $this->deletePhotoEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePhotoEmployeeAsync
     *
     * Delete Photo
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhotoEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePhotoEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePhotoEmployee'][0]
    ): PromiseInterface
    {
        return $this->deletePhotoEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePhotoEmployeeAsyncWithHttpInfo
     *
     * Delete Photo
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhotoEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePhotoEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePhotoEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePhotoEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePhotoEmployee'
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhotoEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePhotoEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePhotoEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deletePhotoEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePhotoEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}/photo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation expiringRtwEmployee
     *
     * Expiring RightToWork
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  int|null $numberOfDays The number of days in the future to look got expiry dates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expiringRtwEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function expiringRtwEmployee(
        string $employerId,
        ?int $numberOfDays = null,
        string $contentType = self::contentTypes['expiringRtwEmployee'][0]
    ): array
    {
        list($response) = $this->expiringRtwEmployeeWithHttpInfo($employerId, $numberOfDays, $contentType);
        return $response;
    }

    /**
     * Operation expiringRtwEmployeeWithHttpInfo
     *
     * Expiring RightToWork
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  int|null $numberOfDays The number of days in the future to look got expiry dates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expiringRtwEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function expiringRtwEmployeeWithHttpInfo(
        string $employerId,
        ?int $numberOfDays = null,
        string $contentType = self::contentTypes['expiringRtwEmployee'][0]
    ): array
    {
        $request = $this->expiringRtwEmployeeRequest($employerId, $numberOfDays, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expiringRtwEmployeeAsync
     *
     * Expiring RightToWork
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  int|null $numberOfDays The number of days in the future to look got expiry dates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expiringRtwEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function expiringRtwEmployeeAsync(
        string $employerId,
        ?int $numberOfDays = null,
        string $contentType = self::contentTypes['expiringRtwEmployee'][0]
    ): PromiseInterface
    {
        return $this->expiringRtwEmployeeAsyncWithHttpInfo($employerId, $numberOfDays, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expiringRtwEmployeeAsyncWithHttpInfo
     *
     * Expiring RightToWork
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  int|null $numberOfDays The number of days in the future to look got expiry dates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expiringRtwEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function expiringRtwEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?int $numberOfDays = null,
        string $contentType = self::contentTypes['expiringRtwEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->expiringRtwEmployeeRequest($employerId, $numberOfDays, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expiringRtwEmployee'
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  int|null $numberOfDays The number of days in the future to look got expiry dates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expiringRtwEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expiringRtwEmployeeRequest(
        string $employerId,
        ?int $numberOfDays = null,
        string $contentType = self::contentTypes['expiringRtwEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling expiringRtwEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/expiring-rtw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numberOfDays,
            'numberOfDays', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDepartmentMembershipsEmployee
     *
     * Get Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\DepartmentMembership[]
     */
    public function getDepartmentMembershipsEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployee'][0]
    ): array
    {
        list($response) = $this->getDepartmentMembershipsEmployeeWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getDepartmentMembershipsEmployeeWithHttpInfo
     *
     * Get Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\DepartmentMembership[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDepartmentMembershipsEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployee'][0]
    ): array
    {
        $request = $this->getDepartmentMembershipsEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\DepartmentMembership[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\DepartmentMembership[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\DepartmentMembership[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\DepartmentMembership[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDepartmentMembershipsEmployeeAsync
     *
     * Get Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDepartmentMembershipsEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployee'][0]
    ): PromiseInterface
    {
        return $this->getDepartmentMembershipsEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDepartmentMembershipsEmployeeAsyncWithHttpInfo
     *
     * Get Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDepartmentMembershipsEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
        $request = $this->getDepartmentMembershipsEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDepartmentMembershipsEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDepartmentMembershipsEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getDepartmentMembershipsEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getDepartmentMembershipsEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}/departments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployee
     *
     * Get an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeResponse
     */
    public function getEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployee'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeResponse
    {
        list($response) = $this->getEmployeeWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getEmployeeWithHttpInfo
     *
     * Get an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployee'][0]
    ): array
    {
        $request = $this->getEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmployeeAsync
     *
     * Get an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployee'][0]
    ): PromiseInterface
    {
        return $this->getEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeAsyncWithHttpInfo
     *
     * Get an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
        $request = $this->getEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeCostCentresEmployee
     *
     * Get Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve CostCenntres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeCostCentre[]
     */
    public function getEmployeeCostCentresEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeCostCentresEmployee'][0]
    ): array
    {
        list($response) = $this->getEmployeeCostCentresEmployeeWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getEmployeeCostCentresEmployeeWithHttpInfo
     *
     * Get Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve CostCenntres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeCostCentre[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeCostCentresEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeCostCentresEmployee'][0]
    ): array
    {
        $request = $this->getEmployeeCostCentresEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeCostCentre[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeCostCentre[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeCostCentre[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeCostCentre[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmployeeCostCentresEmployeeAsync
     *
     * Get Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve CostCenntres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeCostCentresEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeCostCentresEmployee'][0]
    ): PromiseInterface
    {
        return $this->getEmployeeCostCentresEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeCostCentresEmployeeAsyncWithHttpInfo
     *
     * Get Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve CostCenntres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeCostCentresEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeCostCentresEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
        $request = $this->getEmployeeCostCentresEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeCostCentresEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to retrieve CostCenntres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeCostCentresEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeCostCentresEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getEmployeeCostCentresEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployeeCostCentresEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}/costcentres';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvcSettingsEmployee
     *
     * Get EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for which you want to retrieve EvcSettings. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EvcSettings
     */
    public function getEvcSettingsEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEvcSettingsEmployee'][0]
    ): \SynergiTech\Staffology\Model\EvcSettings
    {
        list($response) = $this->getEvcSettingsEmployeeWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getEvcSettingsEmployeeWithHttpInfo
     *
     * Get EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for which you want to retrieve EvcSettings. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EvcSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEvcSettingsEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEvcSettingsEmployee'][0]
    ): array
    {
        $request = $this->getEvcSettingsEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EvcSettings', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EvcSettings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EvcSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EvcSettings';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EvcSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEvcSettingsEmployeeAsync
     *
     * Get EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for which you want to retrieve EvcSettings. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEvcSettingsEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEvcSettingsEmployee'][0]
    ): PromiseInterface
    {
        return $this->getEvcSettingsEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEvcSettingsEmployeeAsyncWithHttpInfo
     *
     * Get EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for which you want to retrieve EvcSettings. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEvcSettingsEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEvcSettingsEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EvcSettings';
        $request = $this->getEvcSettingsEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvcSettingsEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for which you want to retrieve EvcSettings. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEvcSettingsEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getEvcSettingsEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getEvcSettingsEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getEvcSettingsEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}/evcsettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importCsvEmployee
     *
     * Import CSV
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\CsvFileFormat|null $format The format of the CSV file. (optional)
     * @param  bool|null $previewOnly Set to true and nothing will be imported but you&#39;ll be shown a preview of the data. (optional, default to false)
     * @param  bool|null $allowUpdates Set to true and if the payroll code matches an existing employee then that employee will be updated. (optional, default to false)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function importCsvEmployee(
        string $employerId,
        ?\SynergiTech\Staffology\Model\CsvFileFormat $format = null,
        ?bool $previewOnly = false,
        ?bool $allowUpdates = false,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvEmployee'][0]
    ): array
    {
        list($response) = $this->importCsvEmployeeWithHttpInfo($employerId, $format, $previewOnly, $allowUpdates, $file, $contentType);
        return $response;
    }

    /**
     * Operation importCsvEmployeeWithHttpInfo
     *
     * Import CSV
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\CsvFileFormat|null $format The format of the CSV file. (optional)
     * @param  bool|null $previewOnly Set to true and nothing will be imported but you&#39;ll be shown a preview of the data. (optional, default to false)
     * @param  bool|null $allowUpdates Set to true and if the payroll code matches an existing employee then that employee will be updated. (optional, default to false)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importCsvEmployeeWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\CsvFileFormat $format = null,
        ?bool $previewOnly = false,
        ?bool $allowUpdates = false,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvEmployee'][0]
    ): array
    {
        $request = $this->importCsvEmployeeRequest($employerId, $format, $previewOnly, $allowUpdates, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importCsvEmployeeAsync
     *
     * Import CSV
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\CsvFileFormat|null $format The format of the CSV file. (optional)
     * @param  bool|null $previewOnly Set to true and nothing will be imported but you&#39;ll be shown a preview of the data. (optional, default to false)
     * @param  bool|null $allowUpdates Set to true and if the payroll code matches an existing employee then that employee will be updated. (optional, default to false)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importCsvEmployeeAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\CsvFileFormat $format = null,
        ?bool $previewOnly = false,
        ?bool $allowUpdates = false,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvEmployee'][0]
    ): PromiseInterface
    {
        return $this->importCsvEmployeeAsyncWithHttpInfo($employerId, $format, $previewOnly, $allowUpdates, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importCsvEmployeeAsyncWithHttpInfo
     *
     * Import CSV
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\CsvFileFormat|null $format The format of the CSV file. (optional)
     * @param  bool|null $previewOnly Set to true and nothing will be imported but you&#39;ll be shown a preview of the data. (optional, default to false)
     * @param  bool|null $allowUpdates Set to true and if the payroll code matches an existing employee then that employee will be updated. (optional, default to false)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importCsvEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\CsvFileFormat $format = null,
        ?bool $previewOnly = false,
        ?bool $allowUpdates = false,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->importCsvEmployeeRequest($employerId, $format, $previewOnly, $allowUpdates, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importCsvEmployee'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\CsvFileFormat|null $format The format of the CSV file. (optional)
     * @param  bool|null $previewOnly Set to true and nothing will be imported but you&#39;ll be shown a preview of the data. (optional, default to false)
     * @param  bool|null $allowUpdates Set to true and if the payroll code matches an existing employee then that employee will be updated. (optional, default to false)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importCsvEmployeeRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\CsvFileFormat $format = null,
        ?bool $previewOnly = false,
        ?bool $allowUpdates = false,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importCsvEmployee'
            );
        }






        $resourcePath = '/employers/{employerId}/employees/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format?->value,
            'format', // param base name
            'CsvFileFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $previewOnly,
            'previewOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allowUpdates,
            'allowUpdates', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexEmployee
     *
     * List Employees
     *
     * @param  string $employerId The Id of the Employer for which you want to see Employees (required)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeStatus|null $status Restrict the results to employees with the given status (optional)
     * @param  string|null $deptCode If specified then only employees assigned to this department code will be listed (optional)
     * @param  string|null $pensionSchemeId If specified then only employees enrolled into the given pension scheme will be listed.              If empty guid(00000000-0000-0000-0000-000000000000) is passed in all employees not enrolled into any pension scheme will be listed. (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeSortBy|null $sortBy Specifies the field by which to sort the employees. Default is EmployeeSortBy.None. (optional)
     * @param  bool|null $sortDescending Specifies whether the sorting should be in descending order. Default is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function indexEmployee(
        string $employerId,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\EmployeeStatus $status = null,
        ?string $deptCode = null,
        ?string $pensionSchemeId = null,
        ?\SynergiTech\Staffology\Model\EmployeeSortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['indexEmployee'][0]
    ): array
    {
        list($response) = $this->indexEmployeeWithHttpInfo($employerId, $pageNum, $pageSize, $status, $deptCode, $pensionSchemeId, $sortBy, $sortDescending, $contentType);
        return $response;
    }

    /**
     * Operation indexEmployeeWithHttpInfo
     *
     * List Employees
     *
     * @param  string $employerId The Id of the Employer for which you want to see Employees (required)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeStatus|null $status Restrict the results to employees with the given status (optional)
     * @param  string|null $deptCode If specified then only employees assigned to this department code will be listed (optional)
     * @param  string|null $pensionSchemeId If specified then only employees enrolled into the given pension scheme will be listed.              If empty guid(00000000-0000-0000-0000-000000000000) is passed in all employees not enrolled into any pension scheme will be listed. (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeSortBy|null $sortBy Specifies the field by which to sort the employees. Default is EmployeeSortBy.None. (optional)
     * @param  bool|null $sortDescending Specifies whether the sorting should be in descending order. Default is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function indexEmployeeWithHttpInfo(
        string $employerId,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\EmployeeStatus $status = null,
        ?string $deptCode = null,
        ?string $pensionSchemeId = null,
        ?\SynergiTech\Staffology\Model\EmployeeSortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['indexEmployee'][0]
    ): array
    {
        $request = $this->indexEmployeeRequest($employerId, $pageNum, $pageSize, $status, $deptCode, $pensionSchemeId, $sortBy, $sortDescending, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexEmployeeAsync
     *
     * List Employees
     *
     * @param  string $employerId The Id of the Employer for which you want to see Employees (required)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeStatus|null $status Restrict the results to employees with the given status (optional)
     * @param  string|null $deptCode If specified then only employees assigned to this department code will be listed (optional)
     * @param  string|null $pensionSchemeId If specified then only employees enrolled into the given pension scheme will be listed.              If empty guid(00000000-0000-0000-0000-000000000000) is passed in all employees not enrolled into any pension scheme will be listed. (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeSortBy|null $sortBy Specifies the field by which to sort the employees. Default is EmployeeSortBy.None. (optional)
     * @param  bool|null $sortDescending Specifies whether the sorting should be in descending order. Default is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexEmployeeAsync(
        string $employerId,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\EmployeeStatus $status = null,
        ?string $deptCode = null,
        ?string $pensionSchemeId = null,
        ?\SynergiTech\Staffology\Model\EmployeeSortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['indexEmployee'][0]
    ): PromiseInterface
    {
        return $this->indexEmployeeAsyncWithHttpInfo($employerId, $pageNum, $pageSize, $status, $deptCode, $pensionSchemeId, $sortBy, $sortDescending, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexEmployeeAsyncWithHttpInfo
     *
     * List Employees
     *
     * @param  string $employerId The Id of the Employer for which you want to see Employees (required)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeStatus|null $status Restrict the results to employees with the given status (optional)
     * @param  string|null $deptCode If specified then only employees assigned to this department code will be listed (optional)
     * @param  string|null $pensionSchemeId If specified then only employees enrolled into the given pension scheme will be listed.              If empty guid(00000000-0000-0000-0000-000000000000) is passed in all employees not enrolled into any pension scheme will be listed. (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeSortBy|null $sortBy Specifies the field by which to sort the employees. Default is EmployeeSortBy.None. (optional)
     * @param  bool|null $sortDescending Specifies whether the sorting should be in descending order. Default is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\EmployeeStatus $status = null,
        ?string $deptCode = null,
        ?string $pensionSchemeId = null,
        ?\SynergiTech\Staffology\Model\EmployeeSortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['indexEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->indexEmployeeRequest($employerId, $pageNum, $pageSize, $status, $deptCode, $pensionSchemeId, $sortBy, $sortDescending, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexEmployee'
     *
     * @param  string $employerId The Id of the Employer for which you want to see Employees (required)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeStatus|null $status Restrict the results to employees with the given status (optional)
     * @param  string|null $deptCode If specified then only employees assigned to this department code will be listed (optional)
     * @param  string|null $pensionSchemeId If specified then only employees enrolled into the given pension scheme will be listed.              If empty guid(00000000-0000-0000-0000-000000000000) is passed in all employees not enrolled into any pension scheme will be listed. (optional)
     * @param  \SynergiTech\Staffology\Model\EmployeeSortBy|null $sortBy Specifies the field by which to sort the employees. Default is EmployeeSortBy.None. (optional)
     * @param  bool|null $sortDescending Specifies whether the sorting should be in descending order. Default is false. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function indexEmployeeRequest(
        string $employerId,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?\SynergiTech\Staffology\Model\EmployeeStatus $status = null,
        ?string $deptCode = null,
        ?string $pensionSchemeId = null,
        ?\SynergiTech\Staffology\Model\EmployeeSortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['indexEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling indexEmployee'
            );
        }









        $resourcePath = '/employers/{employerId}/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageNum,
            'pageNum', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status?->value,
            'status', // param base name
            'EmployeeStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptCode,
            'deptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pensionSchemeId,
            'pensionSchemeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortBy?->value,
            'sortBy', // param base name
            'EmployeeSortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortDescending,
            'sortDescending', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaversEmployee
     *
     * List Leavers
     *
     * @param  string $employerId The Id of the Employer for which you want to see Leavers (required)
     * @param  bool|null $onlyUnsentP45s If set to true then only employees that don&#39;t have the P45Sent set to true will be returned (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaversEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function leaversEmployee(
        string $employerId,
        ?bool $onlyUnsentP45s = false,
        string $contentType = self::contentTypes['leaversEmployee'][0]
    ): array
    {
        list($response) = $this->leaversEmployeeWithHttpInfo($employerId, $onlyUnsentP45s, $contentType);
        return $response;
    }

    /**
     * Operation leaversEmployeeWithHttpInfo
     *
     * List Leavers
     *
     * @param  string $employerId The Id of the Employer for which you want to see Leavers (required)
     * @param  bool|null $onlyUnsentP45s If set to true then only employees that don&#39;t have the P45Sent set to true will be returned (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaversEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function leaversEmployeeWithHttpInfo(
        string $employerId,
        ?bool $onlyUnsentP45s = false,
        string $contentType = self::contentTypes['leaversEmployee'][0]
    ): array
    {
        $request = $this->leaversEmployeeRequest($employerId, $onlyUnsentP45s, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leaversEmployeeAsync
     *
     * List Leavers
     *
     * @param  string $employerId The Id of the Employer for which you want to see Leavers (required)
     * @param  bool|null $onlyUnsentP45s If set to true then only employees that don&#39;t have the P45Sent set to true will be returned (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaversEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function leaversEmployeeAsync(
        string $employerId,
        ?bool $onlyUnsentP45s = false,
        string $contentType = self::contentTypes['leaversEmployee'][0]
    ): PromiseInterface
    {
        return $this->leaversEmployeeAsyncWithHttpInfo($employerId, $onlyUnsentP45s, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leaversEmployeeAsyncWithHttpInfo
     *
     * List Leavers
     *
     * @param  string $employerId The Id of the Employer for which you want to see Leavers (required)
     * @param  bool|null $onlyUnsentP45s If set to true then only employees that don&#39;t have the P45Sent set to true will be returned (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaversEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function leaversEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?bool $onlyUnsentP45s = false,
        string $contentType = self::contentTypes['leaversEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->leaversEmployeeRequest($employerId, $onlyUnsentP45s, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaversEmployee'
     *
     * @param  string $employerId The Id of the Employer for which you want to see Leavers (required)
     * @param  bool|null $onlyUnsentP45s If set to true then only employees that don&#39;t have the P45Sent set to true will be returned (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaversEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaversEmployeeRequest(
        string $employerId,
        ?bool $onlyUnsentP45s = false,
        string $contentType = self::contentTypes['leaversEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling leaversEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/leavers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onlyUnsentP45s,
            'onlyUnsentP45s', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markAsLeaversEmployee
     *
     * Mark as Leavers
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  \DateTime|null $date The date the employees left or are leaving (optional)
     * @param  bool|null $emailP45 If set to true, the employee will be email a P45 if they have an email address (optional)
     * @param  string[]|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markAsLeaversEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function markAsLeaversEmployee(
        string $employerId,
        ?\DateTime $date = null,
        ?bool $emailP45 = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['markAsLeaversEmployee'][0]
    ): void
    {
        $this->markAsLeaversEmployeeWithHttpInfo($employerId, $date, $emailP45, $requestBody, $contentType);
    }

    /**
     * Operation markAsLeaversEmployeeWithHttpInfo
     *
     * Mark as Leavers
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  \DateTime|null $date The date the employees left or are leaving (optional)
     * @param  bool|null $emailP45 If set to true, the employee will be email a P45 if they have an email address (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markAsLeaversEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function markAsLeaversEmployeeWithHttpInfo(
        string $employerId,
        ?\DateTime $date = null,
        ?bool $emailP45 = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['markAsLeaversEmployee'][0]
    ): array
    {
        $request = $this->markAsLeaversEmployeeRequest($employerId, $date, $emailP45, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation markAsLeaversEmployeeAsync
     *
     * Mark as Leavers
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  \DateTime|null $date The date the employees left or are leaving (optional)
     * @param  bool|null $emailP45 If set to true, the employee will be email a P45 if they have an email address (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markAsLeaversEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function markAsLeaversEmployeeAsync(
        string $employerId,
        ?\DateTime $date = null,
        ?bool $emailP45 = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['markAsLeaversEmployee'][0]
    ): PromiseInterface
    {
        return $this->markAsLeaversEmployeeAsyncWithHttpInfo($employerId, $date, $emailP45, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markAsLeaversEmployeeAsyncWithHttpInfo
     *
     * Mark as Leavers
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  \DateTime|null $date The date the employees left or are leaving (optional)
     * @param  bool|null $emailP45 If set to true, the employee will be email a P45 if they have an email address (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markAsLeaversEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function markAsLeaversEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?\DateTime $date = null,
        ?bool $emailP45 = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['markAsLeaversEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->markAsLeaversEmployeeRequest($employerId, $date, $emailP45, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markAsLeaversEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  \DateTime|null $date The date the employees left or are leaving (optional)
     * @param  bool|null $emailP45 If set to true, the employee will be email a P45 if they have an email address (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markAsLeaversEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markAsLeaversEmployeeRequest(
        string $employerId,
        ?\DateTime $date = null,
        ?bool $emailP45 = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['markAsLeaversEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling markAsLeaversEmployee'
            );
        }





        $resourcePath = '/employers/{employerId}/employees/leavers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $emailP45,
            'emailP45', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation minimumWageEmployee
     *
     * Minimum Wage
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear (required)
     * @param  \DateTime|null $date The date for which we should calculate the employees age, for not provided we&#39;ll use today&#39;s date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minimumWageEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function minimumWageEmployee(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\DateTime $date = null,
        string $contentType = self::contentTypes['minimumWageEmployee'][0]
    ): float
    {
        list($response) = $this->minimumWageEmployeeWithHttpInfo($employerId, $id, $taxYear, $date, $contentType);
        return $response;
    }

    /**
     * Operation minimumWageEmployeeWithHttpInfo
     *
     * Minimum Wage
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear (required)
     * @param  \DateTime|null $date The date for which we should calculate the employees age, for not provided we&#39;ll use today&#39;s date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minimumWageEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function minimumWageEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\DateTime $date = null,
        string $contentType = self::contentTypes['minimumWageEmployee'][0]
    ): array
    {
        $request = $this->minimumWageEmployeeRequest($employerId, $id, $taxYear, $date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation minimumWageEmployeeAsync
     *
     * Minimum Wage
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear (required)
     * @param  \DateTime|null $date The date for which we should calculate the employees age, for not provided we&#39;ll use today&#39;s date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minimumWageEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function minimumWageEmployeeAsync(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\DateTime $date = null,
        string $contentType = self::contentTypes['minimumWageEmployee'][0]
    ): PromiseInterface
    {
        return $this->minimumWageEmployeeAsyncWithHttpInfo($employerId, $id, $taxYear, $date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation minimumWageEmployeeAsyncWithHttpInfo
     *
     * Minimum Wage
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear (required)
     * @param  \DateTime|null $date The date for which we should calculate the employees age, for not provided we&#39;ll use today&#39;s date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minimumWageEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function minimumWageEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\DateTime $date = null,
        string $contentType = self::contentTypes['minimumWageEmployee'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->minimumWageEmployeeRequest($employerId, $id, $taxYear, $date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'minimumWageEmployee'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear (required)
     * @param  \DateTime|null $date The date for which we should calculate the employees age, for not provided we&#39;ll use today&#39;s date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['minimumWageEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function minimumWageEmployeeRequest(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?\DateTime $date = null,
        string $contentType = self::contentTypes['minimumWageEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling minimumWageEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling minimumWageEmployee'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling minimumWageEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{id}/{taxYear}/minimum-wage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEntriesEmployee
     *
     * PayRunEntries for Employee
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to list PayRunEntries. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntriesEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function payRunEntriesEmployee(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['payRunEntriesEmployee'][0]
    ): array
    {
        list($response) = $this->payRunEntriesEmployeeWithHttpInfo($employerId, $id, $taxYear, $contentType);
        return $response;
    }

    /**
     * Operation payRunEntriesEmployeeWithHttpInfo
     *
     * PayRunEntries for Employee
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to list PayRunEntries. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntriesEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEntriesEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['payRunEntriesEmployee'][0]
    ): array
    {
        $request = $this->payRunEntriesEmployeeRequest($employerId, $id, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEntriesEmployeeAsync
     *
     * PayRunEntries for Employee
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to list PayRunEntries. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntriesEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunEntriesEmployeeAsync(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['payRunEntriesEmployee'][0]
    ): PromiseInterface
    {
        return $this->payRunEntriesEmployeeAsyncWithHttpInfo($employerId, $id, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEntriesEmployeeAsyncWithHttpInfo
     *
     * PayRunEntries for Employee
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to list PayRunEntries. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntriesEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunEntriesEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['payRunEntriesEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->payRunEntriesEmployeeRequest($employerId, $id, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEntriesEmployee'
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string $id The Employee Id. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The TaxYear for which you want to list PayRunEntries. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntriesEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEntriesEmployeeRequest(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['payRunEntriesEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payRunEntriesEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling payRunEntriesEmployee'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payRunEntriesEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}/payrunentries/{taxYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reHireEmployee
     *
     * Rehire an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to rehire. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reHireEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function reHireEmployee(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['reHireEmployee'][0]
    ): void
    {
        $this->reHireEmployeeWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation reHireEmployeeWithHttpInfo
     *
     * Rehire an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to rehire. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reHireEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reHireEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['reHireEmployee'][0]
    ): array
    {
        $request = $this->reHireEmployeeRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reHireEmployeeAsync
     *
     * Rehire an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to rehire. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reHireEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function reHireEmployeeAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['reHireEmployee'][0]
    ): PromiseInterface
    {
        return $this->reHireEmployeeAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reHireEmployeeAsyncWithHttpInfo
     *
     * Rehire an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to rehire. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reHireEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function reHireEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['reHireEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->reHireEmployeeRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reHireEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to rehire. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reHireEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reHireEmployeeRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['reHireEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling reHireEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling reHireEmployee'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{id}/rehire';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchByPayrollCodeEmployee
     *
     * Get Employee by Payroll Code
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $code The payroll code to look for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchByPayrollCodeEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item
     */
    public function searchByPayrollCodeEmployee(
        string $employerId,
        ?string $code = null,
        string $contentType = self::contentTypes['searchByPayrollCodeEmployee'][0]
    ): \SynergiTech\Staffology\Model\Item
    {
        list($response) = $this->searchByPayrollCodeEmployeeWithHttpInfo($employerId, $code, $contentType);
        return $response;
    }

    /**
     * Operation searchByPayrollCodeEmployeeWithHttpInfo
     *
     * Get Employee by Payroll Code
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $code The payroll code to look for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchByPayrollCodeEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByPayrollCodeEmployeeWithHttpInfo(
        string $employerId,
        ?string $code = null,
        string $contentType = self::contentTypes['searchByPayrollCodeEmployee'][0]
    ): array
    {
        $request = $this->searchByPayrollCodeEmployeeRequest($employerId, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchByPayrollCodeEmployeeAsync
     *
     * Get Employee by Payroll Code
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $code The payroll code to look for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchByPayrollCodeEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function searchByPayrollCodeEmployeeAsync(
        string $employerId,
        ?string $code = null,
        string $contentType = self::contentTypes['searchByPayrollCodeEmployee'][0]
    ): PromiseInterface
    {
        return $this->searchByPayrollCodeEmployeeAsyncWithHttpInfo($employerId, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchByPayrollCodeEmployeeAsyncWithHttpInfo
     *
     * Get Employee by Payroll Code
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $code The payroll code to look for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchByPayrollCodeEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function searchByPayrollCodeEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?string $code = null,
        string $contentType = self::contentTypes['searchByPayrollCodeEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item';
        $request = $this->searchByPayrollCodeEmployeeRequest($employerId, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchByPayrollCodeEmployee'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string|null $code The payroll code to look for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchByPayrollCodeEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchByPayrollCodeEmployeeRequest(
        string $employerId,
        ?string $code = null,
        string $contentType = self::contentTypes['searchByPayrollCodeEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling searchByPayrollCodeEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/search/payrollcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchEmployee
     *
     * Search Employer for Employees
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string|null $query The search string (at least 3 characters). (optional)
     * @param  bool|null $exludeCisSubContactors If set to true, then we&#39;ll only search employees that aren&#39;t labelled as CIS Subcontractors (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function searchEmployee(
        string $employerId,
        ?string $query = null,
        ?bool $exludeCisSubContactors = false,
        string $contentType = self::contentTypes['searchEmployee'][0]
    ): array
    {
        list($response) = $this->searchEmployeeWithHttpInfo($employerId, $query, $exludeCisSubContactors, $contentType);
        return $response;
    }

    /**
     * Operation searchEmployeeWithHttpInfo
     *
     * Search Employer for Employees
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string|null $query The search string (at least 3 characters). (optional)
     * @param  bool|null $exludeCisSubContactors If set to true, then we&#39;ll only search employees that aren&#39;t labelled as CIS Subcontractors (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchEmployeeWithHttpInfo(
        string $employerId,
        ?string $query = null,
        ?bool $exludeCisSubContactors = false,
        string $contentType = self::contentTypes['searchEmployee'][0]
    ): array
    {
        $request = $this->searchEmployeeRequest($employerId, $query, $exludeCisSubContactors, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchEmployeeAsync
     *
     * Search Employer for Employees
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string|null $query The search string (at least 3 characters). (optional)
     * @param  bool|null $exludeCisSubContactors If set to true, then we&#39;ll only search employees that aren&#39;t labelled as CIS Subcontractors (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function searchEmployeeAsync(
        string $employerId,
        ?string $query = null,
        ?bool $exludeCisSubContactors = false,
        string $contentType = self::contentTypes['searchEmployee'][0]
    ): PromiseInterface
    {
        return $this->searchEmployeeAsyncWithHttpInfo($employerId, $query, $exludeCisSubContactors, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchEmployeeAsyncWithHttpInfo
     *
     * Search Employer for Employees
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string|null $query The search string (at least 3 characters). (optional)
     * @param  bool|null $exludeCisSubContactors If set to true, then we&#39;ll only search employees that aren&#39;t labelled as CIS Subcontractors (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function searchEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?string $query = null,
        ?bool $exludeCisSubContactors = false,
        string $contentType = self::contentTypes['searchEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->searchEmployeeRequest($employerId, $query, $exludeCisSubContactors, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchEmployee'
     *
     * @param  string $employerId The Id of the Employer to search. (required)
     * @param  string|null $query The search string (at least 3 characters). (optional)
     * @param  bool|null $exludeCisSubContactors If set to true, then we&#39;ll only search employees that aren&#39;t labelled as CIS Subcontractors (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchEmployeeRequest(
        string $employerId,
        ?string $query = null,
        ?bool $exludeCisSubContactors = false,
        string $contentType = self::contentTypes['searchEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling searchEmployee'
            );
        }




        $resourcePath = '/employers/{employerId}/employees/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exludeCisSubContactors,
            'exludeCisSubContactors', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDepartmentMembershipsEmployee
     *
     * Set Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\DepartmentMembership[]
     */
    public function setDepartmentMembershipsEmployee(
        string $employerId,
        string $id,
        array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployee'][0]
    ): array
    {
        list($response) = $this->setDepartmentMembershipsEmployeeWithHttpInfo($employerId, $id, $departmentMembership, $contentType);
        return $response;
    }

    /**
     * Operation setDepartmentMembershipsEmployeeWithHttpInfo
     *
     * Set Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\DepartmentMembership[], HTTP status code, HTTP response headers (array of strings)
     */
    public function setDepartmentMembershipsEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployee'][0]
    ): array
    {
        $request = $this->setDepartmentMembershipsEmployeeRequest($employerId, $id, $departmentMembership, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\DepartmentMembership[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\DepartmentMembership[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\DepartmentMembership[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\DepartmentMembership[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setDepartmentMembershipsEmployeeAsync
     *
     * Set Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setDepartmentMembershipsEmployeeAsync(
        string $employerId,
        string $id,
        array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployee'][0]
    ): PromiseInterface
    {
        return $this->setDepartmentMembershipsEmployeeAsyncWithHttpInfo($employerId, $id, $departmentMembership, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDepartmentMembershipsEmployeeAsyncWithHttpInfo
     *
     * Set Employee Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setDepartmentMembershipsEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
        $request = $this->setDepartmentMembershipsEmployeeRequest($employerId, $id, $departmentMembership, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDepartmentMembershipsEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDepartmentMembershipsEmployeeRequest(
        string $employerId,
        string $id,
        array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setDepartmentMembershipsEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setDepartmentMembershipsEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{id}/departments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($departmentMembership)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($departmentMembership));
            } else {
                $httpBody = $departmentMembership;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setEmployeeCostCentresEmployee
     *
     * Set Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set CostCentres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeCostCentre[]
     */
    public function setEmployeeCostCentresEmployee(
        string $employerId,
        string $id,
        array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setEmployeeCostCentresEmployee'][0]
    ): array
    {
        list($response) = $this->setEmployeeCostCentresEmployeeWithHttpInfo($employerId, $id, $employeeCostCentre, $contentType);
        return $response;
    }

    /**
     * Operation setEmployeeCostCentresEmployeeWithHttpInfo
     *
     * Set Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set CostCentres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeCostCentre[], HTTP status code, HTTP response headers (array of strings)
     */
    public function setEmployeeCostCentresEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setEmployeeCostCentresEmployee'][0]
    ): array
    {
        $request = $this->setEmployeeCostCentresEmployeeRequest($employerId, $id, $employeeCostCentre, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeCostCentre[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeCostCentre[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeCostCentre[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeCostCentre[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setEmployeeCostCentresEmployeeAsync
     *
     * Set Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set CostCentres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEmployeeCostCentresEmployeeAsync(
        string $employerId,
        string $id,
        array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setEmployeeCostCentresEmployee'][0]
    ): PromiseInterface
    {
        return $this->setEmployeeCostCentresEmployeeAsyncWithHttpInfo($employerId, $id, $employeeCostCentre, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setEmployeeCostCentresEmployeeAsyncWithHttpInfo
     *
     * Set Employee Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set CostCentres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEmployeeCostCentresEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setEmployeeCostCentresEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
        $request = $this->setEmployeeCostCentresEmployeeRequest($employerId, $id, $employeeCostCentre, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setEmployeeCostCentresEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to set CostCentres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeCostCentresEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setEmployeeCostCentresEmployeeRequest(
        string $employerId,
        string $id,
        array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setEmployeeCostCentresEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setEmployeeCostCentresEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setEmployeeCostCentresEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{id}/costcentres';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employeeCostCentre)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employeeCostCentre));
            } else {
                $httpBody = $employeeCostCentre;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setOnHoldEmployee
     *
     * Mark as On Hold
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  bool|null $onHold The OnHold status to set (optional)
     * @param  string[]|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOnHoldEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function setOnHoldEmployee(
        string $employerId,
        ?bool $onHold = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['setOnHoldEmployee'][0]
    ): void
    {
        $this->setOnHoldEmployeeWithHttpInfo($employerId, $onHold, $requestBody, $contentType);
    }

    /**
     * Operation setOnHoldEmployeeWithHttpInfo
     *
     * Mark as On Hold
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  bool|null $onHold The OnHold status to set (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOnHoldEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setOnHoldEmployeeWithHttpInfo(
        string $employerId,
        ?bool $onHold = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['setOnHoldEmployee'][0]
    ): array
    {
        $request = $this->setOnHoldEmployeeRequest($employerId, $onHold, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setOnHoldEmployeeAsync
     *
     * Mark as On Hold
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  bool|null $onHold The OnHold status to set (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOnHoldEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setOnHoldEmployeeAsync(
        string $employerId,
        ?bool $onHold = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['setOnHoldEmployee'][0]
    ): PromiseInterface
    {
        return $this->setOnHoldEmployeeAsyncWithHttpInfo($employerId, $onHold, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setOnHoldEmployeeAsyncWithHttpInfo
     *
     * Mark as On Hold
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  bool|null $onHold The OnHold status to set (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOnHoldEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setOnHoldEmployeeAsyncWithHttpInfo(
        string $employerId,
        ?bool $onHold = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['setOnHoldEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->setOnHoldEmployeeRequest($employerId, $onHold, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setOnHoldEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employees belong (required)
     * @param  bool|null $onHold The OnHold status to set (optional)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOnHoldEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setOnHoldEmployeeRequest(
        string $employerId,
        ?bool $onHold = null,
        array $requestBody = null,
        string $contentType = self::contentTypes['setOnHoldEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setOnHoldEmployee'
            );
        }




        $resourcePath = '/employers/{employerId}/employees/onhold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onHold,
            'onHold', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployee
     *
     * Update an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest|null $contractUpdateEmployeeRequest contractUpdateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeResponse
     */
    public function updateEmployee(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest $contractUpdateEmployeeRequest = null,
        string $contentType = self::contentTypes['updateEmployee'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeResponse
    {
        list($response) = $this->updateEmployeeWithHttpInfo($employerId, $id, $contractUpdateEmployeeRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateEmployeeWithHttpInfo
     *
     * Update an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest|null $contractUpdateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest $contractUpdateEmployeeRequest = null,
        string $contentType = self::contentTypes['updateEmployee'][0]
    ): array
    {
        $request = $this->updateEmployeeRequest($employerId, $id, $contractUpdateEmployeeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmployeeAsync
     *
     * Update an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest|null $contractUpdateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEmployeeAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest $contractUpdateEmployeeRequest = null,
        string $contentType = self::contentTypes['updateEmployee'][0]
    ): PromiseInterface
    {
        return $this->updateEmployeeAsyncWithHttpInfo($employerId, $id, $contractUpdateEmployeeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeAsyncWithHttpInfo
     *
     * Update an Employee
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest|null $contractUpdateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest $contractUpdateEmployeeRequest = null,
        string $contentType = self::contentTypes['updateEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
        $request = $this->updateEmployeeRequest($employerId, $id, $contractUpdateEmployeeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest|null $contractUpdateEmployeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeRequest(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractUpdateEmployeeRequest $contractUpdateEmployeeRequest = null,
        string $contentType = self::contentTypes['updateEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractUpdateEmployeeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractUpdateEmployeeRequest));
            } else {
                $httpBody = $contractUpdateEmployeeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEvcSettingsEmployee
     *
     * Update EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for who you want to update EvcSettings. (required)
     * @param  \SynergiTech\Staffology\Model\EvcSettings|null $evcSettings evcSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EvcSettings
     */
    public function updateEvcSettingsEmployee(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\EvcSettings $evcSettings = null,
        string $contentType = self::contentTypes['updateEvcSettingsEmployee'][0]
    ): \SynergiTech\Staffology\Model\EvcSettings
    {
        list($response) = $this->updateEvcSettingsEmployeeWithHttpInfo($employerId, $id, $evcSettings, $contentType);
        return $response;
    }

    /**
     * Operation updateEvcSettingsEmployeeWithHttpInfo
     *
     * Update EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for who you want to update EvcSettings. (required)
     * @param  \SynergiTech\Staffology\Model\EvcSettings|null $evcSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EvcSettings, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEvcSettingsEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\EvcSettings $evcSettings = null,
        string $contentType = self::contentTypes['updateEvcSettingsEmployee'][0]
    ): array
    {
        $request = $this->updateEvcSettingsEmployeeRequest($employerId, $id, $evcSettings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EvcSettings', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EvcSettings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EvcSettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EvcSettings';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EvcSettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEvcSettingsEmployeeAsync
     *
     * Update EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for who you want to update EvcSettings. (required)
     * @param  \SynergiTech\Staffology\Model\EvcSettings|null $evcSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEvcSettingsEmployeeAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\EvcSettings $evcSettings = null,
        string $contentType = self::contentTypes['updateEvcSettingsEmployee'][0]
    ): PromiseInterface
    {
        return $this->updateEvcSettingsEmployeeAsyncWithHttpInfo($employerId, $id, $evcSettings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEvcSettingsEmployeeAsyncWithHttpInfo
     *
     * Update EvcSettings
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for who you want to update EvcSettings. (required)
     * @param  \SynergiTech\Staffology\Model\EvcSettings|null $evcSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEvcSettingsEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\EvcSettings $evcSettings = null,
        string $contentType = self::contentTypes['updateEvcSettingsEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EvcSettings';
        $request = $this->updateEvcSettingsEmployeeRequest($employerId, $id, $evcSettings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEvcSettingsEmployee'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $id The Id of the Employee for who you want to update EvcSettings. (required)
     * @param  \SynergiTech\Staffology\Model\EvcSettings|null $evcSettings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEvcSettingsEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEvcSettingsEmployeeRequest(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\EvcSettings $evcSettings = null,
        string $contentType = self::contentTypes['updateEvcSettingsEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateEvcSettingsEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateEvcSettingsEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{id}/evcsettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($evcSettings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($evcSettings));
            } else {
                $httpBody = $evcSettings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePhotoEmployee
     *
     * Update Photo
     *
     * @param  string $employerId employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhotoEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeResponse
     */
    public function updatePhotoEmployee(
        string $employerId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updatePhotoEmployee'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeResponse
    {
        list($response) = $this->updatePhotoEmployeeWithHttpInfo($employerId, $id, $file, $contentType);
        return $response;
    }

    /**
     * Operation updatePhotoEmployeeWithHttpInfo
     *
     * Update Photo
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhotoEmployee'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePhotoEmployeeWithHttpInfo(
        string $employerId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updatePhotoEmployee'][0]
    ): array
    {
        $request = $this->updatePhotoEmployeeRequest($employerId, $id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePhotoEmployeeAsync
     *
     * Update Photo
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhotoEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePhotoEmployeeAsync(
        string $employerId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updatePhotoEmployee'][0]
    ): PromiseInterface
    {
        return $this->updatePhotoEmployeeAsyncWithHttpInfo($employerId, $id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePhotoEmployeeAsyncWithHttpInfo
     *
     * Update Photo
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhotoEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePhotoEmployeeAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updatePhotoEmployee'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeResponse';
        $request = $this->updatePhotoEmployeeRequest($employerId, $id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePhotoEmployee'
     *
     * @param  string $employerId (required)
     * @param  string $id The Id of the Employee you want to update. (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhotoEmployee'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePhotoEmployeeRequest(
        string $employerId,
        string $id,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['updatePhotoEmployee'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePhotoEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updatePhotoEmployee'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{id}/photo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
