<?php
/**
 * AutoEnrolmentApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * AutoEnrolmentApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutoEnrolmentApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'assessAutoEnrolment' => [
            'application/json',
        ],
        'deleteAutoEnrolment' => [
            'application/json',
        ],
        'emailAllLettersAutoEnrolment' => [
            'application/json',
        ],
        'emailLetterAutoEnrolment' => [
            'application/json',
        ],
        'getAutoEnrolment' => [
            'application/json',
        ],
        'getLastAutoEnrolment' => [
            'application/json',
        ],
        'getLetterAutoEnrolment' => [
            'application/json',
        ],
        'listAutoEnrolment' => [
            'application/json',
        ],
        'markLetterAsSentAutoEnrolment' => [
            'application/json',
        ],
        'markLettersAsSentAutoEnrolment' => [
            'application/json',
        ],
        'pendingLettersAutoEnrolment' => [
            'application/json',
        ],
        'pendingLettersCountAutoEnrolment' => [
            'application/json',
        ],
        'pendingPostponementLettersAutoEnrolment' => [
            'application/json',
        ],
        'reenrolAutoEnrolment' => [
            'application/json',
        ],
        'setStateAutoEnrolment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation assessAutoEnrolment
     *
     * Assess Employee for AutoEnrolment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to assess (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assessAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AeAssessment
     */
    public function assessAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['assessAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\AeAssessment
    {
        list($response) = $this->assessAutoEnrolmentWithHttpInfo($employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation assessAutoEnrolmentWithHttpInfo
     *
     * Assess Employee for AutoEnrolment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to assess (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assessAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AeAssessment, HTTP status code, HTTP response headers (array of strings)
     */
    public function assessAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['assessAutoEnrolment'][0]
    ): array
    {
        $request = $this->assessAutoEnrolmentRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\AeAssessment', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AeAssessment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AeAssessment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AeAssessment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assessAutoEnrolmentAsync
     *
     * Assess Employee for AutoEnrolment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to assess (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assessAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function assessAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['assessAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->assessAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assessAutoEnrolmentAsyncWithHttpInfo
     *
     * Assess Employee for AutoEnrolment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to assess (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assessAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function assessAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['assessAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
        $request = $this->assessAutoEnrolmentRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assessAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to assess (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assessAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assessAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['assessAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling assessAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling assessAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAutoEnrolment
     *
     * Delete AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteAutoEnrolment'][0]
    ): void
    {
        $this->deleteAutoEnrolmentWithHttpInfo($employerId, $employeeId, $id, $contentType);
    }

    /**
     * Operation deleteAutoEnrolmentWithHttpInfo
     *
     * Delete AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteAutoEnrolment'][0]
    ): array
    {
        $request = $this->deleteAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAutoEnrolmentAsync
     *
     * Delete AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->deleteAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAutoEnrolmentAsyncWithHttpInfo
     *
     * Delete AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['deleteAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['deleteAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling deleteAutoEnrolment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailAllLettersAutoEnrolment
     *
     * Email All Letters
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailAllLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailAllLettersAutoEnrolment(
        string $employerId,
        string $contentType = self::contentTypes['emailAllLettersAutoEnrolment'][0]
    ): void
    {
        $this->emailAllLettersAutoEnrolmentWithHttpInfo($employerId, $contentType);
    }

    /**
     * Operation emailAllLettersAutoEnrolmentWithHttpInfo
     *
     * Email All Letters
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailAllLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailAllLettersAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['emailAllLettersAutoEnrolment'][0]
    ): array
    {
        $request = $this->emailAllLettersAutoEnrolmentRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailAllLettersAutoEnrolmentAsync
     *
     * Email All Letters
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailAllLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailAllLettersAutoEnrolmentAsync(
        string $employerId,
        string $contentType = self::contentTypes['emailAllLettersAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->emailAllLettersAutoEnrolmentAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailAllLettersAutoEnrolmentAsyncWithHttpInfo
     *
     * Email All Letters
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailAllLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailAllLettersAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['emailAllLettersAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailAllLettersAutoEnrolmentRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailAllLettersAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailAllLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailAllLettersAutoEnrolmentRequest(
        $employerId,
        string $contentType = self::contentTypes['emailAllLettersAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailAllLettersAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/autoenrolment/letters/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailLetterAutoEnrolment
     *
     * Email Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployerEmail
     */
    public function emailLetterAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['emailLetterAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\EmployerEmail
    {
        list($response) = $this->emailLetterAutoEnrolmentWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation emailLetterAutoEnrolmentWithHttpInfo
     *
     * Email Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployerEmail, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailLetterAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['emailLetterAutoEnrolment'][0]
    ): array
    {
        $request = $this->emailLetterAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployerEmail', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployerEmail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployerEmail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployerEmail';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployerEmail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailLetterAutoEnrolmentAsync
     *
     * Email Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailLetterAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['emailLetterAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->emailLetterAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailLetterAutoEnrolmentAsyncWithHttpInfo
     *
     * Email Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailLetterAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['emailLetterAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployerEmail';
        $request = $this->emailLetterAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailLetterAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailLetterAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['emailLetterAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailLetterAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling emailLetterAutoEnrolment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling emailLetterAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoEnrolment
     *
     * Get AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AeAssessment
     */
    public function getAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\AeAssessment
    {
        list($response) = $this->getAutoEnrolmentWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getAutoEnrolmentWithHttpInfo
     *
     * Get AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AeAssessment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getAutoEnrolment'][0]
    ): array
    {
        $request = $this->getAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AeAssessment', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AeAssessment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AeAssessment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AeAssessment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoEnrolmentAsync
     *
     * Get AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->getAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoEnrolmentAsyncWithHttpInfo
     *
     * Get AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
        $request = $this->getAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getAutoEnrolment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLastAutoEnrolment
     *
     * Get Last AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLastAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AeAssessment
     */
    public function getLastAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getLastAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\AeAssessment
    {
        list($response) = $this->getLastAutoEnrolmentWithHttpInfo($employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation getLastAutoEnrolmentWithHttpInfo
     *
     * Get Last AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLastAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AeAssessment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLastAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getLastAutoEnrolment'][0]
    ): array
    {
        $request = $this->getLastAutoEnrolmentRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\AeAssessment', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AeAssessment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AeAssessment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AeAssessment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLastAutoEnrolmentAsync
     *
     * Get Last AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLastAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLastAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['getLastAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->getLastAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLastAutoEnrolmentAsyncWithHttpInfo
     *
     * Get Last AE Assessment
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLastAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLastAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['getLastAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
        $request = $this->getLastAutoEnrolmentRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLastAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLastAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLastAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['getLastAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getLastAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getLastAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/last';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLetterAutoEnrolment
     *
     * Get Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string|null $accept accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ReportResponse
     */
    public function getLetterAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['getLetterAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\ReportResponse
    {
        list($response) = $this->getLetterAutoEnrolmentWithHttpInfo($employerId, $employeeId, $id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation getLetterAutoEnrolmentWithHttpInfo
     *
     * Get Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLetterAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['getLetterAutoEnrolment'][0]
    ): array
    {
        $request = $this->getLetterAutoEnrolmentRequest($employerId, $employeeId, $id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ReportResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLetterAutoEnrolmentAsync
     *
     * Get Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLetterAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?string $accept = null,
        string $contentType = self::contentTypes['getLetterAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->getLetterAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLetterAutoEnrolmentAsyncWithHttpInfo
     *
     * Get Letter
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLetterAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $accept = null,
        string $contentType = self::contentTypes['getLetterAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ReportResponse';
        $request = $this->getLetterAutoEnrolmentRequest($employerId, $employeeId, $id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLetterAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string|null $accept (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLetterAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLetterAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        $id,
        $accept = null,
        string $contentType = self::contentTypes['getLetterAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getLetterAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getLetterAutoEnrolment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getLetterAutoEnrolment'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/pdf', 'text/html', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAutoEnrolment
     *
     * Get AE Assessments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve AE Assessments (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function listAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['listAutoEnrolment'][0]
    ): array
    {
        list($response) = $this->listAutoEnrolmentWithHttpInfo($employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation listAutoEnrolmentWithHttpInfo
     *
     * Get AE Assessments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve AE Assessments (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['listAutoEnrolment'][0]
    ): array
    {
        $request = $this->listAutoEnrolmentRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAutoEnrolmentAsync
     *
     * Get AE Assessments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve AE Assessments (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['listAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->listAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAutoEnrolmentAsyncWithHttpInfo
     *
     * Get AE Assessments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve AE Assessments (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['listAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->listAutoEnrolmentRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee for which you want to retrieve AE Assessments (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['listAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling listAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling listAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markLetterAsSentAutoEnrolment
     *
     * Mark Letter as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLetterAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function markLetterAsSentAutoEnrolment(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['markLetterAsSentAutoEnrolment'][0]
    ): void
    {
        $this->markLetterAsSentAutoEnrolmentWithHttpInfo($employerId, $employeeId, $id, $contentType);
    }

    /**
     * Operation markLetterAsSentAutoEnrolmentWithHttpInfo
     *
     * Mark Letter as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLetterAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function markLetterAsSentAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['markLetterAsSentAutoEnrolment'][0]
    ): array
    {
        $request = $this->markLetterAsSentAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation markLetterAsSentAutoEnrolmentAsync
     *
     * Mark Letter as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLetterAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function markLetterAsSentAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['markLetterAsSentAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->markLetterAsSentAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markLetterAsSentAutoEnrolmentAsyncWithHttpInfo
     *
     * Mark Letter as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLetterAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function markLetterAsSentAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['markLetterAsSentAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->markLetterAsSentAutoEnrolmentRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markLetterAsSentAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee the assessment is for (required)
     * @param  string $id The Id of the Assessment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLetterAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markLetterAsSentAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['markLetterAsSentAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling markLetterAsSentAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling markLetterAsSentAutoEnrolment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling markLetterAsSentAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/assessments/{id}/letter/sent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markLettersAsSentAutoEnrolment
     *
     * Mark All Letters as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLettersAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function markLettersAsSentAutoEnrolment(
        string $employerId,
        string $contentType = self::contentTypes['markLettersAsSentAutoEnrolment'][0]
    ): void
    {
        $this->markLettersAsSentAutoEnrolmentWithHttpInfo($employerId, $contentType);
    }

    /**
     * Operation markLettersAsSentAutoEnrolmentWithHttpInfo
     *
     * Mark All Letters as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLettersAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function markLettersAsSentAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['markLettersAsSentAutoEnrolment'][0]
    ): array
    {
        $request = $this->markLettersAsSentAutoEnrolmentRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation markLettersAsSentAutoEnrolmentAsync
     *
     * Mark All Letters as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLettersAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function markLettersAsSentAutoEnrolmentAsync(
        string $employerId,
        string $contentType = self::contentTypes['markLettersAsSentAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->markLettersAsSentAutoEnrolmentAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markLettersAsSentAutoEnrolmentAsyncWithHttpInfo
     *
     * Mark All Letters as Sent
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLettersAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function markLettersAsSentAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['markLettersAsSentAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->markLettersAsSentAutoEnrolmentRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markLettersAsSentAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['markLettersAsSentAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markLettersAsSentAutoEnrolmentRequest(
        $employerId,
        string $contentType = self::contentTypes['markLettersAsSentAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling markLettersAsSentAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/autoenrolment/letters/sent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pendingLettersAutoEnrolment
     *
     * Pending Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function pendingLettersAutoEnrolment(
        string $employerId,
        string $contentType = self::contentTypes['pendingLettersAutoEnrolment'][0]
    ): array
    {
        list($response) = $this->pendingLettersAutoEnrolmentWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation pendingLettersAutoEnrolmentWithHttpInfo
     *
     * Pending Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pendingLettersAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['pendingLettersAutoEnrolment'][0]
    ): array
    {
        $request = $this->pendingLettersAutoEnrolmentRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pendingLettersAutoEnrolmentAsync
     *
     * Pending Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pendingLettersAutoEnrolmentAsync(
        string $employerId,
        string $contentType = self::contentTypes['pendingLettersAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->pendingLettersAutoEnrolmentAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pendingLettersAutoEnrolmentAsyncWithHttpInfo
     *
     * Pending Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pendingLettersAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['pendingLettersAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->pendingLettersAutoEnrolmentRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pendingLettersAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pendingLettersAutoEnrolmentRequest(
        $employerId,
        string $contentType = self::contentTypes['pendingLettersAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pendingLettersAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/autoenrolment/letters/pending';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pendingLettersCountAutoEnrolment
     *
     * Pending Letters Count
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersCountAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPendingLettersCountResponse
     */
    public function pendingLettersCountAutoEnrolment(
        string $employerId,
        string $contentType = self::contentTypes['pendingLettersCountAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\ContractPendingLettersCountResponse
    {
        list($response) = $this->pendingLettersCountAutoEnrolmentWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation pendingLettersCountAutoEnrolmentWithHttpInfo
     *
     * Pending Letters Count
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersCountAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPendingLettersCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pendingLettersCountAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['pendingLettersCountAutoEnrolment'][0]
    ): array
    {
        $request = $this->pendingLettersCountAutoEnrolmentRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPendingLettersCountResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPendingLettersCountResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPendingLettersCountResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPendingLettersCountResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPendingLettersCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pendingLettersCountAutoEnrolmentAsync
     *
     * Pending Letters Count
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersCountAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pendingLettersCountAutoEnrolmentAsync(
        string $employerId,
        string $contentType = self::contentTypes['pendingLettersCountAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->pendingLettersCountAutoEnrolmentAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pendingLettersCountAutoEnrolmentAsyncWithHttpInfo
     *
     * Pending Letters Count
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersCountAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pendingLettersCountAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['pendingLettersCountAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPendingLettersCountResponse';
        $request = $this->pendingLettersCountAutoEnrolmentRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pendingLettersCountAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingLettersCountAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pendingLettersCountAutoEnrolmentRequest(
        $employerId,
        string $contentType = self::contentTypes['pendingLettersCountAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pendingLettersCountAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/autoenrolment/letters/pending/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pendingPostponementLettersAutoEnrolment
     *
     * Pending Postponement Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingPostponementLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function pendingPostponementLettersAutoEnrolment(
        string $employerId,
        string $contentType = self::contentTypes['pendingPostponementLettersAutoEnrolment'][0]
    ): array
    {
        list($response) = $this->pendingPostponementLettersAutoEnrolmentWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation pendingPostponementLettersAutoEnrolmentWithHttpInfo
     *
     * Pending Postponement Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingPostponementLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pendingPostponementLettersAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['pendingPostponementLettersAutoEnrolment'][0]
    ): array
    {
        $request = $this->pendingPostponementLettersAutoEnrolmentRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pendingPostponementLettersAutoEnrolmentAsync
     *
     * Pending Postponement Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingPostponementLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pendingPostponementLettersAutoEnrolmentAsync(
        string $employerId,
        string $contentType = self::contentTypes['pendingPostponementLettersAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->pendingPostponementLettersAutoEnrolmentAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pendingPostponementLettersAutoEnrolmentAsyncWithHttpInfo
     *
     * Pending Postponement Letters
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingPostponementLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function pendingPostponementLettersAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['pendingPostponementLettersAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->pendingPostponementLettersAutoEnrolmentRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pendingPostponementLettersAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pendingPostponementLettersAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pendingPostponementLettersAutoEnrolmentRequest(
        $employerId,
        string $contentType = self::contentTypes['pendingPostponementLettersAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling pendingPostponementLettersAutoEnrolment'
            );
        }


        $resourcePath = '/employers/{employerId}/autoenrolment/letters/pending/postponement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reenrolAutoEnrolment
     *
     * Cyclical Re-enrolment
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \DateTime|null $cyclicalReenrolmentDate The new Cyclical Re-enrolment Date for the  Employer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reenrolAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function reenrolAutoEnrolment(
        string $employerId,
        ?\DateTime $cyclicalReenrolmentDate = null,
        string $contentType = self::contentTypes['reenrolAutoEnrolment'][0]
    ): array
    {
        list($response) = $this->reenrolAutoEnrolmentWithHttpInfo($employerId, $cyclicalReenrolmentDate, $contentType);
        return $response;
    }

    /**
     * Operation reenrolAutoEnrolmentWithHttpInfo
     *
     * Cyclical Re-enrolment
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \DateTime|null $cyclicalReenrolmentDate The new Cyclical Re-enrolment Date for the  Employer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reenrolAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reenrolAutoEnrolmentWithHttpInfo(
        string $employerId,
        ?\DateTime $cyclicalReenrolmentDate = null,
        string $contentType = self::contentTypes['reenrolAutoEnrolment'][0]
    ): array
    {
        $request = $this->reenrolAutoEnrolmentRequest($employerId, $cyclicalReenrolmentDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reenrolAutoEnrolmentAsync
     *
     * Cyclical Re-enrolment
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \DateTime|null $cyclicalReenrolmentDate The new Cyclical Re-enrolment Date for the  Employer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reenrolAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function reenrolAutoEnrolmentAsync(
        string $employerId,
        ?\DateTime $cyclicalReenrolmentDate = null,
        string $contentType = self::contentTypes['reenrolAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->reenrolAutoEnrolmentAsyncWithHttpInfo($employerId, $cyclicalReenrolmentDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reenrolAutoEnrolmentAsyncWithHttpInfo
     *
     * Cyclical Re-enrolment
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \DateTime|null $cyclicalReenrolmentDate The new Cyclical Re-enrolment Date for the  Employer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reenrolAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function reenrolAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $cyclicalReenrolmentDate = null,
        string $contentType = self::contentTypes['reenrolAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->reenrolAutoEnrolmentRequest($employerId, $cyclicalReenrolmentDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reenrolAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \DateTime|null $cyclicalReenrolmentDate The new Cyclical Re-enrolment Date for the  Employer (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reenrolAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reenrolAutoEnrolmentRequest(
        $employerId,
        $cyclicalReenrolmentDate = null,
        string $contentType = self::contentTypes['reenrolAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling reenrolAutoEnrolment'
            );
        }



        $resourcePath = '/employers/{employerId}/autoenrolment/renrol';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cyclicalReenrolmentDate,
            'cyclicalReenrolmentDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setStateAutoEnrolment
     *
     * Update State
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to set the status for (required)
     * @param  \SynergiTech\Staffology\Model\AeEmployeeState|null $state The AutoEnrolment State to set for the Employee (optional)
     * @param  \SynergiTech\Staffology\Model\AeStatus|null $status status (optional)
     * @param  \DateTime|null $stateDate Optional. Will default to the current date (optional)
     * @param  string|null $pensionId Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn (optional)
     * @param  string|null $workerGroupId Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided. (optional)
     * @param  bool|null $startActionAlreadyReported startActionAlreadyReported (optional, default to false)
     * @param  bool|null $endActionAlreadyReported endActionAlreadyReported (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setStateAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\AeAssessment
     */
    public function setStateAutoEnrolment(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\AeEmployeeState $state = null,
        ?\SynergiTech\Staffology\Model\AeStatus $status = null,
        ?\DateTime $stateDate = null,
        ?string $pensionId = null,
        ?string $workerGroupId = null,
        ?bool $startActionAlreadyReported = false,
        ?bool $endActionAlreadyReported = false,
        string $contentType = self::contentTypes['setStateAutoEnrolment'][0]
    ): \SynergiTech\Staffology\Model\AeAssessment
    {
        list($response) = $this->setStateAutoEnrolmentWithHttpInfo($employerId, $employeeId, $state, $status, $stateDate, $pensionId, $workerGroupId, $startActionAlreadyReported, $endActionAlreadyReported, $contentType);
        return $response;
    }

    /**
     * Operation setStateAutoEnrolmentWithHttpInfo
     *
     * Update State
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to set the status for (required)
     * @param  \SynergiTech\Staffology\Model\AeEmployeeState|null $state The AutoEnrolment State to set for the Employee (optional)
     * @param  \SynergiTech\Staffology\Model\AeStatus|null $status (optional)
     * @param  \DateTime|null $stateDate Optional. Will default to the current date (optional)
     * @param  string|null $pensionId Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn (optional)
     * @param  string|null $workerGroupId Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided. (optional)
     * @param  bool|null $startActionAlreadyReported (optional, default to false)
     * @param  bool|null $endActionAlreadyReported (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setStateAutoEnrolment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\AeAssessment, HTTP status code, HTTP response headers (array of strings)
     */
    public function setStateAutoEnrolmentWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\AeEmployeeState $state = null,
        ?\SynergiTech\Staffology\Model\AeStatus $status = null,
        ?\DateTime $stateDate = null,
        ?string $pensionId = null,
        ?string $workerGroupId = null,
        ?bool $startActionAlreadyReported = false,
        ?bool $endActionAlreadyReported = false,
        string $contentType = self::contentTypes['setStateAutoEnrolment'][0]
    ): array
    {
        $request = $this->setStateAutoEnrolmentRequest($employerId, $employeeId, $state, $status, $stateDate, $pensionId, $workerGroupId, $startActionAlreadyReported, $endActionAlreadyReported, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\AeAssessment', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\AeAssessment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\AeAssessment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\AeAssessment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setStateAutoEnrolmentAsync
     *
     * Update State
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to set the status for (required)
     * @param  \SynergiTech\Staffology\Model\AeEmployeeState|null $state The AutoEnrolment State to set for the Employee (optional)
     * @param  \SynergiTech\Staffology\Model\AeStatus|null $status (optional)
     * @param  \DateTime|null $stateDate Optional. Will default to the current date (optional)
     * @param  string|null $pensionId Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn (optional)
     * @param  string|null $workerGroupId Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided. (optional)
     * @param  bool|null $startActionAlreadyReported (optional, default to false)
     * @param  bool|null $endActionAlreadyReported (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setStateAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setStateAutoEnrolmentAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\AeEmployeeState $state = null,
        ?\SynergiTech\Staffology\Model\AeStatus $status = null,
        ?\DateTime $stateDate = null,
        ?string $pensionId = null,
        ?string $workerGroupId = null,
        ?bool $startActionAlreadyReported = false,
        ?bool $endActionAlreadyReported = false,
        string $contentType = self::contentTypes['setStateAutoEnrolment'][0]
    ): PromiseInterface
    {
        return $this->setStateAutoEnrolmentAsyncWithHttpInfo($employerId, $employeeId, $state, $status, $stateDate, $pensionId, $workerGroupId, $startActionAlreadyReported, $endActionAlreadyReported, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setStateAutoEnrolmentAsyncWithHttpInfo
     *
     * Update State
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to set the status for (required)
     * @param  \SynergiTech\Staffology\Model\AeEmployeeState|null $state The AutoEnrolment State to set for the Employee (optional)
     * @param  \SynergiTech\Staffology\Model\AeStatus|null $status (optional)
     * @param  \DateTime|null $stateDate Optional. Will default to the current date (optional)
     * @param  string|null $pensionId Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn (optional)
     * @param  string|null $workerGroupId Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided. (optional)
     * @param  bool|null $startActionAlreadyReported (optional, default to false)
     * @param  bool|null $endActionAlreadyReported (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setStateAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setStateAutoEnrolmentAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $state = null,
        $status = null,
        $stateDate = null,
        $pensionId = null,
        $workerGroupId = null,
        $startActionAlreadyReported = false,
        $endActionAlreadyReported = false,
        string $contentType = self::contentTypes['setStateAutoEnrolment'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\AeAssessment';
        $request = $this->setStateAutoEnrolmentRequest($employerId, $employeeId, $state, $status, $stateDate, $pensionId, $workerGroupId, $startActionAlreadyReported, $endActionAlreadyReported, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setStateAutoEnrolment'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee you want to set the status for (required)
     * @param  \SynergiTech\Staffology\Model\AeEmployeeState|null $state The AutoEnrolment State to set for the Employee (optional)
     * @param  \SynergiTech\Staffology\Model\AeStatus|null $status (optional)
     * @param  \DateTime|null $stateDate Optional. Will default to the current date (optional)
     * @param  string|null $pensionId Optional. Used to override the default AE Pension. Only valid with states of Enrol, VoluntaryJoiner or OptIn (optional)
     * @param  string|null $workerGroupId Optional. Used to override the default AE Pension Workergroup. Only valid with states of Enrol, Join or OptIn. Must be provided if a pensionId is being provided. (optional)
     * @param  bool|null $startActionAlreadyReported (optional, default to false)
     * @param  bool|null $endActionAlreadyReported (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setStateAutoEnrolment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setStateAutoEnrolmentRequest(
        $employerId,
        $employeeId,
        $state = null,
        $status = null,
        $stateDate = null,
        $pensionId = null,
        $workerGroupId = null,
        $startActionAlreadyReported = false,
        $endActionAlreadyReported = false,
        string $contentType = self::contentTypes['setStateAutoEnrolment'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setStateAutoEnrolment'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling setStateAutoEnrolment'
            );
        }









        $resourcePath = '/employers/{employerId}/employees/{employeeId}/autoenrolment/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'AeEmployeeState', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'AeStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stateDate,
            'stateDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pensionId,
            'pensionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workerGroupId,
            'workerGroupId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startActionAlreadyReported,
            'startActionAlreadyReported', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endActionAlreadyReported,
            'endActionAlreadyReported', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
