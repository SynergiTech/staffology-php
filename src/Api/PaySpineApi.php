<?php
/**
 * PaySpineApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PaySpineApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaySpineApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAllowanceGradesPaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createLondonAllowancePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createMultipleAllowanceGradesPaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createMultiplePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createMultipleSpineAllowancePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createPaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createPaySpineGradePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createSpinalPointPaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createSpineAllowancePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteAllAllowanceGradesPaySpine' => [
            'application/json',
        ],
        'deleteAllSpinalPointsPaySpine' => [
            'application/json',
        ],
        'deleteAllSpineAllowancesPaySpine' => [
            'application/json',
        ],
        'deleteAllowanceGradePaySpine' => [
            'application/json',
        ],
        'deleteLondonAllowancePaySpine' => [
            'application/json',
        ],
        'deletePaySpine' => [
            'application/json',
        ],
        'deletePaySpineGradePaySpine' => [
            'application/json',
        ],
        'deleteSpinalPointPaySpine' => [
            'application/json',
        ],
        'deleteSpineAllowancePaySpine' => [
            'application/json',
        ],
        'getAllowanceGradePaySpine' => [
            'application/json',
        ],
        'getAllowanceGradesPaySpine' => [
            'application/json',
        ],
        'getAnnualValueFromSalaryFormulaPaySpine' => [
            'application/json',
        ],
        'getLondonAllowanceListPaySpine' => [
            'application/json',
        ],
        'getLondonAllowancePaySpine' => [
            'application/json',
        ],
        'getPaySpine' => [
            'application/json',
        ],
        'getPaySpineGradeListPaySpine' => [
            'application/json',
        ],
        'getPaySpineGradePaySpine' => [
            'application/json',
        ],
        'getSpinalPointListPaySpine' => [
            'application/json',
        ],
        'getSpinalPointPaySpine' => [
            'application/json',
        ],
        'getSpineAllowanceListPaySpine' => [
            'application/json',
        ],
        'getSpineAllowancePaySpine' => [
            'application/json',
        ],
        'importCsvPaySpine' => [
            'multipart/form-data',
        ],
        'importCsvPaySpinePaySpine' => [
            'multipart/form-data',
        ],
        'importPayspineGradeCsvPaySpine' => [
            'multipart/form-data',
        ],
        'indexPaySpine' => [
            'application/json',
        ],
        'updateAllowanceGradePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateLondonAllowancePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateMultipleAllowanceGradesPaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateMultiplePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateMultipleSpineAllowancePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updatePayGradePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updatePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateSpinalPointPaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateSpineAllowancePaySpine' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createAllowanceGradesPaySpine
     *
     * Create AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to create Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse
     */
    public function createAllowanceGradesPaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?\SynergiTech\Staffology\Model\ContractAllowanceGradesRequest $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createAllowanceGradesPaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse
    {
        list($response) = $this->createAllowanceGradesPaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType);
        return $response;
    }

    /**
     * Operation createAllowanceGradesPaySpineWithHttpInfo
     *
     * Create AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to create Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAllowanceGradesPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?\SynergiTech\Staffology\Model\ContractAllowanceGradesRequest $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createAllowanceGradesPaySpine'][0]
    ): array
    {
        $request = $this->createAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAllowanceGradesPaySpineAsync
     *
     * Create AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to create Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAllowanceGradesPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?\SynergiTech\Staffology\Model\ContractAllowanceGradesRequest $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        return $this->createAllowanceGradesPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAllowanceGradesPaySpineAsyncWithHttpInfo
     *
     * Create AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to create Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAllowanceGradesPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse';
        $request = $this->createAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAllowanceGradesPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAllowanceGradesPaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createAllowanceGradesPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling createAllowanceGradesPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAllowanceGradesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAllowanceGradesRequest));
            } else {
                $httpBody = $contractAllowanceGradesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLondonAllowancePaySpine
     *
     * Create LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create London Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse
     */
    public function createLondonAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractLondonAllowanceRequest $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['createLondonAllowancePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse
    {
        list($response) = $this->createLondonAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $contractLondonAllowanceRequest, $contentType);
        return $response;
    }

    /**
     * Operation createLondonAllowancePaySpineWithHttpInfo
     *
     * Create LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create London Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLondonAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractLondonAllowanceRequest $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['createLondonAllowancePaySpine'][0]
    ): array
    {
        $request = $this->createLondonAllowancePaySpineRequest($employerId, $paySpineId, $contractLondonAllowanceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLondonAllowancePaySpineAsync
     *
     * Create LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create London Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLondonAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractLondonAllowanceRequest $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['createLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->createLondonAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractLondonAllowanceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLondonAllowancePaySpineAsyncWithHttpInfo
     *
     * Create LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create London Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLondonAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['createLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse';
        $request = $this->createLondonAllowancePaySpineRequest($employerId, $paySpineId, $contractLondonAllowanceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLondonAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create London Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLondonAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['createLondonAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createLondonAllowancePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/londonallowances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractLondonAllowanceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractLondonAllowanceRequest));
            } else {
                $httpBody = $contractLondonAllowanceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMultipleAllowanceGradesPaySpine
     *
     * Create Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest[]|null $contractAllowanceGradesRequest contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]
     */
    public function createMultipleAllowanceGradesPaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?array $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createMultipleAllowanceGradesPaySpine'][0]
    ): array
    {
        list($response) = $this->createMultipleAllowanceGradesPaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType);
        return $response;
    }

    /**
     * Operation createMultipleAllowanceGradesPaySpineWithHttpInfo
     *
     * Create Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest[]|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createMultipleAllowanceGradesPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?array $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createMultipleAllowanceGradesPaySpine'][0]
    ): array
    {
        $request = $this->createMultipleAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMultipleAllowanceGradesPaySpineAsync
     *
     * Create Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest[]|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMultipleAllowanceGradesPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?array $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createMultipleAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        return $this->createMultipleAllowanceGradesPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMultipleAllowanceGradesPaySpineAsyncWithHttpInfo
     *
     * Create Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest[]|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMultipleAllowanceGradesPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createMultipleAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]';
        $request = $this->createMultipleAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMultipleAllowanceGradesPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to create multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest[]|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMultipleAllowanceGradesPaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['createMultipleAllowanceGradesPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createMultipleAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createMultipleAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling createMultipleAllowanceGradesPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades/create/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAllowanceGradesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAllowanceGradesRequest));
            } else {
                $httpBody = $contractAllowanceGradesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMultiplePaySpine
     *
     * Create Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest[]|null $contractSpinalPointRequest contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpinalPointResponse[]
     */
    public function createMultiplePaySpine(
        string $employerId,
        string $paySpineId,
        ?array $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createMultiplePaySpine'][0]
    ): array
    {
        list($response) = $this->createMultiplePaySpineWithHttpInfo($employerId, $paySpineId, $contractSpinalPointRequest, $contentType);
        return $response;
    }

    /**
     * Operation createMultiplePaySpineWithHttpInfo
     *
     * Create Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest[]|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpinalPointResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createMultiplePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?array $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createMultiplePaySpine'][0]
    ): array
    {
        $request = $this->createMultiplePaySpineRequest($employerId, $paySpineId, $contractSpinalPointRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMultiplePaySpineAsync
     *
     * Create Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest[]|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMultiplePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?array $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createMultiplePaySpine'][0]
    ): PromiseInterface
    {
        return $this->createMultiplePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractSpinalPointRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMultiplePaySpineAsyncWithHttpInfo
     *
     * Create Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest[]|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMultiplePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createMultiplePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]';
        $request = $this->createMultiplePaySpineRequest($employerId, $paySpineId, $contractSpinalPointRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMultiplePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest[]|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMultiplePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createMultiplePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createMultiplePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createMultiplePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpinalPointRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpinalPointRequest));
            } else {
                $httpBody = $contractSpinalPointRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMultipleSpineAllowancePaySpine
     *
     * Create Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest[]|null $contractSpineAllowanceRequest contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]
     */
    public function createMultipleSpineAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        ?array $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createMultipleSpineAllowancePaySpine'][0]
    ): array
    {
        list($response) = $this->createMultipleSpineAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType);
        return $response;
    }

    /**
     * Operation createMultipleSpineAllowancePaySpineWithHttpInfo
     *
     * Create Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest[]|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createMultipleSpineAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?array $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createMultipleSpineAllowancePaySpine'][0]
    ): array
    {
        $request = $this->createMultipleSpineAllowancePaySpineRequest($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMultipleSpineAllowancePaySpineAsync
     *
     * Create Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest[]|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMultipleSpineAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?array $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createMultipleSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->createMultipleSpineAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMultipleSpineAllowancePaySpineAsyncWithHttpInfo
     *
     * Create Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest[]|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMultipleSpineAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createMultipleSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]';
        $request = $this->createMultipleSpineAllowancePaySpineRequest($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMultipleSpineAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to create multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest[]|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMultipleSpineAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createMultipleSpineAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createMultipleSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createMultipleSpineAllowancePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/create/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpineAllowanceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpineAllowanceRequest));
            } else {
                $httpBody = $contractSpineAllowanceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaySpine
     *
     * Create PaySpine
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineRequest|null $contractPaySpineRequest contractPaySpineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractPaySpineResponse
     */
    public function createPaySpine(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineRequest $contractPaySpineRequest = null,
        string $contentType = self::contentTypes['createPaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractPaySpineResponse
    {
        list($response) = $this->createPaySpineWithHttpInfo($employerId, $contractPaySpineRequest, $contentType);
        return $response;
    }

    /**
     * Operation createPaySpineWithHttpInfo
     *
     * Create PaySpine
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineRequest|null $contractPaySpineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractPaySpineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaySpineWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineRequest $contractPaySpineRequest = null,
        string $contentType = self::contentTypes['createPaySpine'][0]
    ): array
    {
        $request = $this->createPaySpineRequest($employerId, $contractPaySpineRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaySpineAsync
     *
     * Create PaySpine
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineRequest|null $contractPaySpineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPaySpineAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineRequest $contractPaySpineRequest = null,
        string $contentType = self::contentTypes['createPaySpine'][0]
    ): PromiseInterface
    {
        return $this->createPaySpineAsyncWithHttpInfo($employerId, $contractPaySpineRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaySpineAsyncWithHttpInfo
     *
     * Create PaySpine
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineRequest|null $contractPaySpineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPaySpineAsyncWithHttpInfo(
        $employerId,
        $contractPaySpineRequest = null,
        string $contentType = self::contentTypes['createPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineResponse';
        $request = $this->createPaySpineRequest($employerId, $contractPaySpineRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaySpine'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineRequest|null $contractPaySpineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaySpineRequest(
        $employerId,
        $contractPaySpineRequest = null,
        string $contentType = self::contentTypes['createPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPaySpineRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPaySpineRequest));
            } else {
                $httpBody = $contractPaySpineRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaySpineGradePaySpine
     *
     * Create PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to create PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse
     */
    public function createPaySpineGradePaySpine(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineGradeRequest $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['createPaySpineGradePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse
    {
        list($response) = $this->createPaySpineGradePaySpineWithHttpInfo($employerId, $paySpineId, $contractPaySpineGradeRequest, $contentType);
        return $response;
    }

    /**
     * Operation createPaySpineGradePaySpineWithHttpInfo
     *
     * Create PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to create PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaySpineGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineGradeRequest $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['createPaySpineGradePaySpine'][0]
    ): array
    {
        $request = $this->createPaySpineGradePaySpineRequest($employerId, $paySpineId, $contractPaySpineGradeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaySpineGradePaySpineAsync
     *
     * Create PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to create PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPaySpineGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineGradeRequest $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['createPaySpineGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->createPaySpineGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractPaySpineGradeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaySpineGradePaySpineAsyncWithHttpInfo
     *
     * Create PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to create PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPaySpineGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['createPaySpineGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse';
        $request = $this->createPaySpineGradePaySpineRequest($employerId, $paySpineId, $contractPaySpineGradeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaySpineGradePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaySpineGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['createPaySpineGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createPaySpineGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createPaySpineGradePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/paygrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPaySpineGradeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPaySpineGradeRequest));
            } else {
                $httpBody = $contractPaySpineGradeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSpinalPointPaySpine
     *
     * Create SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractSpinalPointResponse
     */
    public function createSpinalPointPaySpine(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractSpinalPointRequest $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createSpinalPointPaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractSpinalPointResponse
    {
        list($response) = $this->createSpinalPointPaySpineWithHttpInfo($employerId, $paySpineId, $contractSpinalPointRequest, $contentType);
        return $response;
    }

    /**
     * Operation createSpinalPointPaySpineWithHttpInfo
     *
     * Create SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractSpinalPointResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSpinalPointPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractSpinalPointRequest $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createSpinalPointPaySpine'][0]
    ): array
    {
        $request = $this->createSpinalPointPaySpineRequest($employerId, $paySpineId, $contractSpinalPointRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpinalPointResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpinalPointResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpinalPointResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpinalPointResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSpinalPointPaySpineAsync
     *
     * Create SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSpinalPointPaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractSpinalPointRequest $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        return $this->createSpinalPointPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractSpinalPointRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSpinalPointPaySpineAsyncWithHttpInfo
     *
     * Create SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSpinalPointPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse';
        $request = $this->createSpinalPointPaySpineRequest($employerId, $paySpineId, $contractSpinalPointRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpinalPointPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSpinalPointPaySpineRequest(
        $employerId,
        $paySpineId,
        $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['createSpinalPointPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createSpinalPointPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpinalPointRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpinalPointRequest));
            } else {
                $httpBody = $contractSpinalPointRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSpineAllowancePaySpine
     *
     * Create SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse
     */
    public function createSpineAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractSpineAllowanceRequest $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createSpineAllowancePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse
    {
        list($response) = $this->createSpineAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType);
        return $response;
    }

    /**
     * Operation createSpineAllowancePaySpineWithHttpInfo
     *
     * Create SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSpineAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractSpineAllowanceRequest $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createSpineAllowancePaySpine'][0]
    ): array
    {
        $request = $this->createSpineAllowancePaySpineRequest($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSpineAllowancePaySpineAsync
     *
     * Create SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSpineAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?\SynergiTech\Staffology\Model\ContractSpineAllowanceRequest $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->createSpineAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSpineAllowancePaySpineAsyncWithHttpInfo
     *
     * Create SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSpineAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse';
        $request = $this->createSpineAllowancePaySpineRequest($employerId, $paySpineId, $contractSpineAllowanceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpineAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to create Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay spine for which you want to create Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSpineAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['createSpineAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling createSpineAllowancePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpineAllowanceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpineAllowanceRequest));
            } else {
                $httpBody = $contractSpineAllowanceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllAllowanceGradesPaySpine
     *
     * Delete All AllowanceGrades Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAllAllowanceGradesPaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $contentType = self::contentTypes['deleteAllAllowanceGradesPaySpine'][0]
    ): void
    {
        $this->deleteAllAllowanceGradesPaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $contentType);
    }

    /**
     * Operation deleteAllAllowanceGradesPaySpineWithHttpInfo
     *
     * Delete All AllowanceGrades Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllAllowanceGradesPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $contentType = self::contentTypes['deleteAllAllowanceGradesPaySpine'][0]
    ): array
    {
        $request = $this->deleteAllAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllAllowanceGradesPaySpineAsync
     *
     * Delete All AllowanceGrades Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllAllowanceGradesPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $contentType = self::contentTypes['deleteAllAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteAllAllowanceGradesPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllAllowanceGradesPaySpineAsyncWithHttpInfo
     *
     * Delete All AllowanceGrades Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllAllowanceGradesPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        string $contentType = self::contentTypes['deleteAllAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAllAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllAllowanceGradesPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllAllowanceGradesPaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        string $contentType = self::contentTypes['deleteAllAllowanceGradesPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAllAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteAllAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling deleteAllAllowanceGradesPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllSpinalPointsPaySpine
     *
     * Delete All SpinalPoints Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpinalPointsPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAllSpinalPointsPaySpine(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpinalPointsPaySpine'][0]
    ): void
    {
        $this->deleteAllSpinalPointsPaySpineWithHttpInfo($employerId, $paySpineId, $contentType);
    }

    /**
     * Operation deleteAllSpinalPointsPaySpineWithHttpInfo
     *
     * Delete All SpinalPoints Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpinalPointsPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllSpinalPointsPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpinalPointsPaySpine'][0]
    ): array
    {
        $request = $this->deleteAllSpinalPointsPaySpineRequest($employerId, $paySpineId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllSpinalPointsPaySpineAsync
     *
     * Delete All SpinalPoints Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpinalPointsPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllSpinalPointsPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpinalPointsPaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteAllSpinalPointsPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllSpinalPointsPaySpineAsyncWithHttpInfo
     *
     * Delete All SpinalPoints Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpinalPointsPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllSpinalPointsPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpinalPointsPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAllSpinalPointsPaySpineRequest($employerId, $paySpineId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllSpinalPointsPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpinalPointsPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllSpinalPointsPaySpineRequest(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpinalPointsPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAllSpinalPointsPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteAllSpinalPointsPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllSpineAllowancesPaySpine
     *
     * Delete All SpineAllowances Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete SpineAllowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete SpineAllowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpineAllowancesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAllSpineAllowancesPaySpine(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpineAllowancesPaySpine'][0]
    ): void
    {
        $this->deleteAllSpineAllowancesPaySpineWithHttpInfo($employerId, $paySpineId, $contentType);
    }

    /**
     * Operation deleteAllSpineAllowancesPaySpineWithHttpInfo
     *
     * Delete All SpineAllowances Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete SpineAllowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete SpineAllowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpineAllowancesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllSpineAllowancesPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpineAllowancesPaySpine'][0]
    ): array
    {
        $request = $this->deleteAllSpineAllowancesPaySpineRequest($employerId, $paySpineId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllSpineAllowancesPaySpineAsync
     *
     * Delete All SpineAllowances Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete SpineAllowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete SpineAllowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpineAllowancesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllSpineAllowancesPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpineAllowancesPaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteAllSpineAllowancesPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllSpineAllowancesPaySpineAsyncWithHttpInfo
     *
     * Delete All SpineAllowances Associated with a PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to delete SpineAllowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete SpineAllowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpineAllowancesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllSpineAllowancesPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpineAllowancesPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAllSpineAllowancesPaySpineRequest($employerId, $paySpineId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllSpineAllowancesPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to delete SpineAllowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete SpineAllowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllSpineAllowancesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllSpineAllowancesPaySpineRequest(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['deleteAllSpineAllowancesPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAllSpineAllowancesPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteAllSpineAllowancesPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllowanceGradePaySpine
     *
     * Delete AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to delete Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAllowanceGradePaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        string $contentType = self::contentTypes['deleteAllowanceGradePaySpine'][0]
    ): void
    {
        $this->deleteAllowanceGradePaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType);
    }

    /**
     * Operation deleteAllowanceGradePaySpineWithHttpInfo
     *
     * Delete AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to delete Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllowanceGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        string $contentType = self::contentTypes['deleteAllowanceGradePaySpine'][0]
    ): array
    {
        $request = $this->deleteAllowanceGradePaySpineRequest($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllowanceGradePaySpineAsync
     *
     * Delete AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to delete Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllowanceGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        string $contentType = self::contentTypes['deleteAllowanceGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteAllowanceGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllowanceGradePaySpineAsyncWithHttpInfo
     *
     * Delete AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to delete Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAllowanceGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        $allowanceGradeId,
        string $contentType = self::contentTypes['deleteAllowanceGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAllowanceGradePaySpineRequest($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllowanceGradePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to delete Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to delete Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllowanceGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        $allowanceGradeId,
        string $contentType = self::contentTypes['deleteAllowanceGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling deleteAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'allowanceGradeId' is set
        if ($allowanceGradeId === null || (is_array($allowanceGradeId) && count($allowanceGradeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceGradeId when calling deleteAllowanceGradePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades/{allowanceGradeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceGradeId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceGradeId' . '}',
                ObjectSerializer::toPathValue($allowanceGradeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLondonAllowancePaySpine
     *
     * Delete LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete London Allowance (required)
     * @param  string $londonAllowanceId The Id of the Spinal Point for which you want to delete London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteLondonAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        string $contentType = self::contentTypes['deleteLondonAllowancePaySpine'][0]
    ): void
    {
        $this->deleteLondonAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $londonAllowanceId, $contentType);
    }

    /**
     * Operation deleteLondonAllowancePaySpineWithHttpInfo
     *
     * Delete LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete London Allowance (required)
     * @param  string $londonAllowanceId The Id of the Spinal Point for which you want to delete London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLondonAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        string $contentType = self::contentTypes['deleteLondonAllowancePaySpine'][0]
    ): array
    {
        $request = $this->deleteLondonAllowancePaySpineRequest($employerId, $paySpineId, $londonAllowanceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLondonAllowancePaySpineAsync
     *
     * Delete LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete London Allowance (required)
     * @param  string $londonAllowanceId The Id of the Spinal Point for which you want to delete London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLondonAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        string $contentType = self::contentTypes['deleteLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteLondonAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $londonAllowanceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLondonAllowancePaySpineAsyncWithHttpInfo
     *
     * Delete LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete London Allowance (required)
     * @param  string $londonAllowanceId The Id of the Spinal Point for which you want to delete London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLondonAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $londonAllowanceId,
        string $contentType = self::contentTypes['deleteLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteLondonAllowancePaySpineRequest($employerId, $paySpineId, $londonAllowanceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLondonAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to delete London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete London Allowance (required)
     * @param  string $londonAllowanceId The Id of the Spinal Point for which you want to delete London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLondonAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $londonAllowanceId,
        string $contentType = self::contentTypes['deleteLondonAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'londonAllowanceId' is set
        if ($londonAllowanceId === null || (is_array($londonAllowanceId) && count($londonAllowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $londonAllowanceId when calling deleteLondonAllowancePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/londonallowances/{londonAllowanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($londonAllowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'londonAllowanceId' . '}',
                ObjectSerializer::toPathValue($londonAllowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaySpine
     *
     * Delete PaySpine
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePaySpine(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePaySpine'][0]
    ): void
    {
        $this->deletePaySpineWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation deletePaySpineWithHttpInfo
     *
     * Delete PaySpine
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaySpineWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePaySpine'][0]
    ): array
    {
        $request = $this->deletePaySpineRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaySpineAsync
     *
     * Delete PaySpine
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePaySpineAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deletePaySpine'][0]
    ): PromiseInterface
    {
        return $this->deletePaySpineAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaySpineAsyncWithHttpInfo
     *
     * Delete PaySpine
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePaySpineAsyncWithHttpInfo(
        $employerId,
        $id,
        string $contentType = self::contentTypes['deletePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePaySpineRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaySpine'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePaySpineRequest(
        $employerId,
        $id,
        string $contentType = self::contentTypes['deletePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deletePaySpine'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaySpineGradePaySpine
     *
     * Delete PaySpine Grade
     *
     * @param  string $employerId employerId (required)
     * @param  string $paySpineId paySpineId (required)
     * @param  string $payGradeId payGradeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePaySpineGradePaySpine(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        string $contentType = self::contentTypes['deletePaySpineGradePaySpine'][0]
    ): void
    {
        $this->deletePaySpineGradePaySpineWithHttpInfo($employerId, $paySpineId, $payGradeId, $contentType);
    }

    /**
     * Operation deletePaySpineGradePaySpineWithHttpInfo
     *
     * Delete PaySpine Grade
     *
     * @param  string $employerId (required)
     * @param  string $paySpineId (required)
     * @param  string $payGradeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaySpineGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        string $contentType = self::contentTypes['deletePaySpineGradePaySpine'][0]
    ): array
    {
        $request = $this->deletePaySpineGradePaySpineRequest($employerId, $paySpineId, $payGradeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaySpineGradePaySpineAsync
     *
     * Delete PaySpine Grade
     *
     * @param  string $employerId (required)
     * @param  string $paySpineId (required)
     * @param  string $payGradeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePaySpineGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        string $contentType = self::contentTypes['deletePaySpineGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->deletePaySpineGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $payGradeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaySpineGradePaySpineAsyncWithHttpInfo
     *
     * Delete PaySpine Grade
     *
     * @param  string $employerId (required)
     * @param  string $paySpineId (required)
     * @param  string $payGradeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePaySpineGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $payGradeId,
        string $contentType = self::contentTypes['deletePaySpineGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePaySpineGradePaySpineRequest($employerId, $paySpineId, $payGradeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaySpineGradePaySpine'
     *
     * @param  string $employerId (required)
     * @param  string $paySpineId (required)
     * @param  string $payGradeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePaySpineGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $payGradeId,
        string $contentType = self::contentTypes['deletePaySpineGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deletePaySpineGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deletePaySpineGradePaySpine'
            );
        }

        // verify the required parameter 'payGradeId' is set
        if ($payGradeId === null || (is_array($payGradeId) && count($payGradeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payGradeId when calling deletePaySpineGradePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/paygrades/{payGradeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($payGradeId !== null) {
            $resourcePath = str_replace(
                '{' . 'payGradeId' . '}',
                ObjectSerializer::toPathValue($payGradeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpinalPointPaySpine
     *
     * Delete SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point List (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteSpinalPointPaySpine(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        string $contentType = self::contentTypes['deleteSpinalPointPaySpine'][0]
    ): void
    {
        $this->deleteSpinalPointPaySpineWithHttpInfo($employerId, $paySpineId, $spinalPointId, $contentType);
    }

    /**
     * Operation deleteSpinalPointPaySpineWithHttpInfo
     *
     * Delete SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point List (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpinalPointPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        string $contentType = self::contentTypes['deleteSpinalPointPaySpine'][0]
    ): array
    {
        $request = $this->deleteSpinalPointPaySpineRequest($employerId, $paySpineId, $spinalPointId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSpinalPointPaySpineAsync
     *
     * Delete SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point List (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSpinalPointPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        string $contentType = self::contentTypes['deleteSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteSpinalPointPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $spinalPointId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSpinalPointPaySpineAsyncWithHttpInfo
     *
     * Delete SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point List (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSpinalPointPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $spinalPointId,
        string $contentType = self::contentTypes['deleteSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteSpinalPointPaySpineRequest($employerId, $paySpineId, $spinalPointId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpinalPointPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point List (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point List (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpinalPointPaySpineRequest(
        $employerId,
        $paySpineId,
        $spinalPointId,
        string $contentType = self::contentTypes['deleteSpinalPointPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'spinalPointId' is set
        if ($spinalPointId === null || (is_array($spinalPointId) && count($spinalPointId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $spinalPointId when calling deleteSpinalPointPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints/{spinalPointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($spinalPointId !== null) {
            $resourcePath = str_replace(
                '{' . 'spinalPointId' . '}',
                ObjectSerializer::toPathValue($spinalPointId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpineAllowancePaySpine
     *
     * Delete SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to delete Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteSpineAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        string $contentType = self::contentTypes['deleteSpineAllowancePaySpine'][0]
    ): void
    {
        $this->deleteSpineAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $allowanceid, $contentType);
    }

    /**
     * Operation deleteSpineAllowancePaySpineWithHttpInfo
     *
     * Delete SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to delete Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpineAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        string $contentType = self::contentTypes['deleteSpineAllowancePaySpine'][0]
    ): array
    {
        $request = $this->deleteSpineAllowancePaySpineRequest($employerId, $paySpineId, $allowanceid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSpineAllowancePaySpineAsync
     *
     * Delete SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to delete Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSpineAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        string $contentType = self::contentTypes['deleteSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->deleteSpineAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSpineAllowancePaySpineAsyncWithHttpInfo
     *
     * Delete SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to delete Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteSpineAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceid,
        string $contentType = self::contentTypes['deleteSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteSpineAllowancePaySpineRequest($employerId, $paySpineId, $allowanceid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpineAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to delete Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to delete Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to delete Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpineAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceid,
        string $contentType = self::contentTypes['deleteSpineAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling deleteSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'allowanceid' is set
        if ($allowanceid === null || (is_array($allowanceid) && count($allowanceid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceid when calling deleteSpineAllowancePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceid !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceid' . '}',
                ObjectSerializer::toPathValue($allowanceid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllowanceGradePaySpine
     *
     * Get AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse
     */
    public function getAllowanceGradePaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        string $contentType = self::contentTypes['getAllowanceGradePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse
    {
        list($response) = $this->getAllowanceGradePaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType);
        return $response;
    }

    /**
     * Operation getAllowanceGradePaySpineWithHttpInfo
     *
     * Get AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllowanceGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        string $contentType = self::contentTypes['getAllowanceGradePaySpine'][0]
    ): array
    {
        $request = $this->getAllowanceGradePaySpineRequest($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllowanceGradePaySpineAsync
     *
     * Get AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllowanceGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        string $contentType = self::contentTypes['getAllowanceGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->getAllowanceGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllowanceGradePaySpineAsyncWithHttpInfo
     *
     * Get AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllowanceGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        $allowanceGradeId,
        string $contentType = self::contentTypes['getAllowanceGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse';
        $request = $this->getAllowanceGradePaySpineRequest($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllowanceGradePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want Allowance Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllowanceGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        $allowanceGradeId,
        string $contentType = self::contentTypes['getAllowanceGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling getAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'allowanceGradeId' is set
        if ($allowanceGradeId === null || (is_array($allowanceGradeId) && count($allowanceGradeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceGradeId when calling getAllowanceGradePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades/{allowanceGradeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceGradeId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceGradeId' . '}',
                ObjectSerializer::toPathValue($allowanceGradeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllowanceGradesPaySpine
     *
     * List AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want list of Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want list of Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]
     */
    public function getAllowanceGradesPaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $contentType = self::contentTypes['getAllowanceGradesPaySpine'][0]
    ): array
    {
        list($response) = $this->getAllowanceGradesPaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $contentType);
        return $response;
    }

    /**
     * Operation getAllowanceGradesPaySpineWithHttpInfo
     *
     * List AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want list of Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want list of Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllowanceGradesPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $contentType = self::contentTypes['getAllowanceGradesPaySpine'][0]
    ): array
    {
        $request = $this->getAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllowanceGradesPaySpineAsync
     *
     * List AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want list of Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want list of Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllowanceGradesPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $contentType = self::contentTypes['getAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getAllowanceGradesPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllowanceGradesPaySpineAsyncWithHttpInfo
     *
     * List AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want list of Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want list of Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllowanceGradesPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        string $contentType = self::contentTypes['getAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]';
        $request = $this->getAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllowanceGradesPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want list of Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want list of Allowance Grades (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllowanceGradesPaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        string $contentType = self::contentTypes['getAllowanceGradesPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling getAllowanceGradesPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnnualValueFromSalaryFormulaPaySpine
     *
     * Get Annual Value from pay spines formula
     *
     * @param  string $employerId The Employer id. (required)
     * @param  string $id The selected PaySpine Id. (required)
     * @param  string|null $employeeId The Employee id. (optional)
     * @param  string|null $paySpineGradeId The selected PaySpineGrade Id. (optional)
     * @param  string|null $spinalPointId The selected SpinalPoint Id. (optional)
     * @param  int|null $londonAllowanceType The London Allowance Id of PayLine. (optional)
     * @param  \DateTime|null $effectiveFrom The PayLine effective from. (optional)
     * @param  string|null $workingPatternId workingPatternId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaylineCalculationData
     */
    public function getAnnualValueFromSalaryFormulaPaySpine(
        string $employerId,
        string $id,
        ?string $employeeId = null,
        ?string $paySpineGradeId = null,
        ?string $spinalPointId = null,
        ?int $londonAllowanceType = null,
        ?\DateTime $effectiveFrom = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'][0]
    ): \SynergiTech\Staffology\Model\PaylineCalculationData
    {
        list($response) = $this->getAnnualValueFromSalaryFormulaPaySpineWithHttpInfo($employerId, $id, $employeeId, $paySpineGradeId, $spinalPointId, $londonAllowanceType, $effectiveFrom, $workingPatternId, $contentType);
        return $response;
    }

    /**
     * Operation getAnnualValueFromSalaryFormulaPaySpineWithHttpInfo
     *
     * Get Annual Value from pay spines formula
     *
     * @param  string $employerId The Employer id. (required)
     * @param  string $id The selected PaySpine Id. (required)
     * @param  string|null $employeeId The Employee id. (optional)
     * @param  string|null $paySpineGradeId The selected PaySpineGrade Id. (optional)
     * @param  string|null $spinalPointId The selected SpinalPoint Id. (optional)
     * @param  int|null $londonAllowanceType The London Allowance Id of PayLine. (optional)
     * @param  \DateTime|null $effectiveFrom The PayLine effective from. (optional)
     * @param  string|null $workingPatternId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaylineCalculationData, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnnualValueFromSalaryFormulaPaySpineWithHttpInfo(
        string $employerId,
        string $id,
        ?string $employeeId = null,
        ?string $paySpineGradeId = null,
        ?string $spinalPointId = null,
        ?int $londonAllowanceType = null,
        ?\DateTime $effectiveFrom = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'][0]
    ): array
    {
        $request = $this->getAnnualValueFromSalaryFormulaPaySpineRequest($employerId, $id, $employeeId, $paySpineGradeId, $spinalPointId, $londonAllowanceType, $effectiveFrom, $workingPatternId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaylineCalculationData', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaylineCalculationData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaylineCalculationData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaylineCalculationData';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaylineCalculationData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnnualValueFromSalaryFormulaPaySpineAsync
     *
     * Get Annual Value from pay spines formula
     *
     * @param  string $employerId The Employer id. (required)
     * @param  string $id The selected PaySpine Id. (required)
     * @param  string|null $employeeId The Employee id. (optional)
     * @param  string|null $paySpineGradeId The selected PaySpineGrade Id. (optional)
     * @param  string|null $spinalPointId The selected SpinalPoint Id. (optional)
     * @param  int|null $londonAllowanceType The London Allowance Id of PayLine. (optional)
     * @param  \DateTime|null $effectiveFrom The PayLine effective from. (optional)
     * @param  string|null $workingPatternId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAnnualValueFromSalaryFormulaPaySpineAsync(
        string $employerId,
        string $id,
        ?string $employeeId = null,
        ?string $paySpineGradeId = null,
        ?string $spinalPointId = null,
        ?int $londonAllowanceType = null,
        ?\DateTime $effectiveFrom = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getAnnualValueFromSalaryFormulaPaySpineAsyncWithHttpInfo($employerId, $id, $employeeId, $paySpineGradeId, $spinalPointId, $londonAllowanceType, $effectiveFrom, $workingPatternId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnnualValueFromSalaryFormulaPaySpineAsyncWithHttpInfo
     *
     * Get Annual Value from pay spines formula
     *
     * @param  string $employerId The Employer id. (required)
     * @param  string $id The selected PaySpine Id. (required)
     * @param  string|null $employeeId The Employee id. (optional)
     * @param  string|null $paySpineGradeId The selected PaySpineGrade Id. (optional)
     * @param  string|null $spinalPointId The selected SpinalPoint Id. (optional)
     * @param  int|null $londonAllowanceType The London Allowance Id of PayLine. (optional)
     * @param  \DateTime|null $effectiveFrom The PayLine effective from. (optional)
     * @param  string|null $workingPatternId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAnnualValueFromSalaryFormulaPaySpineAsyncWithHttpInfo(
        $employerId,
        $id,
        $employeeId = null,
        $paySpineGradeId = null,
        $spinalPointId = null,
        $londonAllowanceType = null,
        $effectiveFrom = null,
        $workingPatternId = null,
        string $contentType = self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaylineCalculationData';
        $request = $this->getAnnualValueFromSalaryFormulaPaySpineRequest($employerId, $id, $employeeId, $paySpineGradeId, $spinalPointId, $londonAllowanceType, $effectiveFrom, $workingPatternId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnnualValueFromSalaryFormulaPaySpine'
     *
     * @param  string $employerId The Employer id. (required)
     * @param  string $id The selected PaySpine Id. (required)
     * @param  string|null $employeeId The Employee id. (optional)
     * @param  string|null $paySpineGradeId The selected PaySpineGrade Id. (optional)
     * @param  string|null $spinalPointId The selected SpinalPoint Id. (optional)
     * @param  int|null $londonAllowanceType The London Allowance Id of PayLine. (optional)
     * @param  \DateTime|null $effectiveFrom The PayLine effective from. (optional)
     * @param  string|null $workingPatternId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnnualValueFromSalaryFormulaPaySpineRequest(
        $employerId,
        $id,
        $employeeId = null,
        $paySpineGradeId = null,
        $spinalPointId = null,
        $londonAllowanceType = null,
        $effectiveFrom = null,
        $workingPatternId = null,
        string $contentType = self::contentTypes['getAnnualValueFromSalaryFormulaPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAnnualValueFromSalaryFormulaPaySpine'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getAnnualValueFromSalaryFormulaPaySpine'
            );
        }








        $resourcePath = '/employers/{employerId}/payspines/{id}/annualsalarybypayspines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeId,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paySpineGradeId,
            'paySpineGradeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $spinalPointId,
            'spinalPointId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $londonAllowanceType,
            'londonAllowanceType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectiveFrom,
            'effectiveFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workingPatternId,
            'workingPatternId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLondonAllowanceListPaySpine
     *
     * List LondonAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of London Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of London Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\LondonAllowance[]
     */
    public function getLondonAllowanceListPaySpine(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getLondonAllowanceListPaySpine'][0]
    ): array
    {
        list($response) = $this->getLondonAllowanceListPaySpineWithHttpInfo($employerId, $paySpineId, $contentType);
        return $response;
    }

    /**
     * Operation getLondonAllowanceListPaySpineWithHttpInfo
     *
     * List LondonAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of London Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of London Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\LondonAllowance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLondonAllowanceListPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getLondonAllowanceListPaySpine'][0]
    ): array
    {
        $request = $this->getLondonAllowanceListPaySpineRequest($employerId, $paySpineId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\LondonAllowance[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\LondonAllowance[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\LondonAllowance[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\LondonAllowance[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\LondonAllowance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLondonAllowanceListPaySpineAsync
     *
     * List LondonAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of London Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of London Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLondonAllowanceListPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getLondonAllowanceListPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getLondonAllowanceListPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLondonAllowanceListPaySpineAsyncWithHttpInfo
     *
     * List LondonAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of London Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of London Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLondonAllowanceListPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getLondonAllowanceListPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\LondonAllowance[]';
        $request = $this->getLondonAllowanceListPaySpineRequest($employerId, $paySpineId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLondonAllowanceListPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want list of London Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of London Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLondonAllowanceListPaySpineRequest(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getLondonAllowanceListPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getLondonAllowanceListPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getLondonAllowanceListPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/londonallowances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLondonAllowancePaySpine
     *
     * Get LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to get London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse
     */
    public function getLondonAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        string $contentType = self::contentTypes['getLondonAllowancePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse
    {
        list($response) = $this->getLondonAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $londonAllowanceId, $contentType);
        return $response;
    }

    /**
     * Operation getLondonAllowancePaySpineWithHttpInfo
     *
     * Get LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to get London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLondonAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        string $contentType = self::contentTypes['getLondonAllowancePaySpine'][0]
    ): array
    {
        $request = $this->getLondonAllowancePaySpineRequest($employerId, $paySpineId, $londonAllowanceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLondonAllowancePaySpineAsync
     *
     * Get LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to get London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLondonAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        string $contentType = self::contentTypes['getLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->getLondonAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $londonAllowanceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLondonAllowancePaySpineAsyncWithHttpInfo
     *
     * Get LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to get London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLondonAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $londonAllowanceId,
        string $contentType = self::contentTypes['getLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse';
        $request = $this->getLondonAllowancePaySpineRequest($employerId, $paySpineId, $londonAllowanceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLondonAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to get London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to get London Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLondonAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $londonAllowanceId,
        string $contentType = self::contentTypes['getLondonAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'londonAllowanceId' is set
        if ($londonAllowanceId === null || (is_array($londonAllowanceId) && count($londonAllowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $londonAllowanceId when calling getLondonAllowancePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/londonallowances/{londonAllowanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($londonAllowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'londonAllowanceId' . '}',
                ObjectSerializer::toPathValue($londonAllowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaySpine
     *
     * Get PaySpine
     *
     * @param  string $employerId The Id of the Employer to which the PaySpine belongs. (required)
     * @param  string $id The Id of the PaySpine which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPaySpineResponse
     */
    public function getPaySpine(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getPaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractPaySpineResponse
    {
        list($response) = $this->getPaySpineWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getPaySpineWithHttpInfo
     *
     * Get PaySpine
     *
     * @param  string $employerId The Id of the Employer to which the PaySpine belongs. (required)
     * @param  string $id The Id of the PaySpine which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPaySpineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaySpineWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getPaySpine'][0]
    ): array
    {
        $request = $this->getPaySpineRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaySpineAsync
     *
     * Get PaySpine
     *
     * @param  string $employerId The Id of the Employer to which the PaySpine belongs. (required)
     * @param  string $id The Id of the PaySpine which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaySpineAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getPaySpineAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaySpineAsyncWithHttpInfo
     *
     * Get PaySpine
     *
     * @param  string $employerId The Id of the Employer to which the PaySpine belongs. (required)
     * @param  string $id The Id of the PaySpine which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaySpineAsyncWithHttpInfo(
        $employerId,
        $id,
        string $contentType = self::contentTypes['getPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineResponse';
        $request = $this->getPaySpineRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaySpine'
     *
     * @param  string $employerId The Id of the Employer to which the PaySpine belongs. (required)
     * @param  string $id The Id of the PaySpine which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaySpineRequest(
        $employerId,
        $id,
        string $contentType = self::contentTypes['getPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPaySpine'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaySpineGradeListPaySpine
     *
     * List PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade List (required)
     * @param  string $paySpineId The Id of the PaySpine Grade for which you want PaySpine Grade List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradeListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]
     */
    public function getPaySpineGradeListPaySpine(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getPaySpineGradeListPaySpine'][0]
    ): array
    {
        list($response) = $this->getPaySpineGradeListPaySpineWithHttpInfo($employerId, $paySpineId, $contentType);
        return $response;
    }

    /**
     * Operation getPaySpineGradeListPaySpineWithHttpInfo
     *
     * List PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade List (required)
     * @param  string $paySpineId The Id of the PaySpine Grade for which you want PaySpine Grade List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradeListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaySpineGradeListPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getPaySpineGradeListPaySpine'][0]
    ): array
    {
        $request = $this->getPaySpineGradeListPaySpineRequest($employerId, $paySpineId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaySpineGradeListPaySpineAsync
     *
     * List PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade List (required)
     * @param  string $paySpineId The Id of the PaySpine Grade for which you want PaySpine Grade List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradeListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaySpineGradeListPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getPaySpineGradeListPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getPaySpineGradeListPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaySpineGradeListPaySpineAsyncWithHttpInfo
     *
     * List PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade List (required)
     * @param  string $paySpineId The Id of the PaySpine Grade for which you want PaySpine Grade List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradeListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaySpineGradeListPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getPaySpineGradeListPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse[]';
        $request = $this->getPaySpineGradeListPaySpineRequest($employerId, $paySpineId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaySpineGradeListPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade List (required)
     * @param  string $paySpineId The Id of the PaySpine Grade for which you want PaySpine Grade List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradeListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaySpineGradeListPaySpineRequest(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getPaySpineGradeListPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPaySpineGradeListPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getPaySpineGradeListPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/paygrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaySpineGradePaySpine
     *
     * Get PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want PaySpine Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse
     */
    public function getPaySpineGradePaySpine(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        string $contentType = self::contentTypes['getPaySpineGradePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse
    {
        list($response) = $this->getPaySpineGradePaySpineWithHttpInfo($employerId, $paySpineId, $payGradeId, $contentType);
        return $response;
    }

    /**
     * Operation getPaySpineGradePaySpineWithHttpInfo
     *
     * Get PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want PaySpine Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaySpineGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        string $contentType = self::contentTypes['getPaySpineGradePaySpine'][0]
    ): array
    {
        $request = $this->getPaySpineGradePaySpineRequest($employerId, $paySpineId, $payGradeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaySpineGradePaySpineAsync
     *
     * Get PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want PaySpine Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaySpineGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        string $contentType = self::contentTypes['getPaySpineGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->getPaySpineGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $payGradeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaySpineGradePaySpineAsyncWithHttpInfo
     *
     * Get PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want PaySpine Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaySpineGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $payGradeId,
        string $contentType = self::contentTypes['getPaySpineGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse';
        $request = $this->getPaySpineGradePaySpineRequest($employerId, $paySpineId, $payGradeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaySpineGradePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want PaySpine Grade (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySpineGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaySpineGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $payGradeId,
        string $contentType = self::contentTypes['getPaySpineGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPaySpineGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getPaySpineGradePaySpine'
            );
        }

        // verify the required parameter 'payGradeId' is set
        if ($payGradeId === null || (is_array($payGradeId) && count($payGradeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payGradeId when calling getPaySpineGradePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/paygrades/{payGradeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($payGradeId !== null) {
            $resourcePath = str_replace(
                '{' . 'payGradeId' . '}',
                ObjectSerializer::toPathValue($payGradeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpinalPointListPaySpine
     *
     * List SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point List (required)
     * @param  string $paySpineId The Id of the Spinal Point for which you want Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpinalPointResponse[]
     */
    public function getSpinalPointListPaySpine(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getSpinalPointListPaySpine'][0]
    ): array
    {
        list($response) = $this->getSpinalPointListPaySpineWithHttpInfo($employerId, $paySpineId, $contentType);
        return $response;
    }

    /**
     * Operation getSpinalPointListPaySpineWithHttpInfo
     *
     * List SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point List (required)
     * @param  string $paySpineId The Id of the Spinal Point for which you want Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpinalPointResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpinalPointListPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getSpinalPointListPaySpine'][0]
    ): array
    {
        $request = $this->getSpinalPointListPaySpineRequest($employerId, $paySpineId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpinalPointListPaySpineAsync
     *
     * List SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point List (required)
     * @param  string $paySpineId The Id of the Spinal Point for which you want Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpinalPointListPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getSpinalPointListPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getSpinalPointListPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpinalPointListPaySpineAsyncWithHttpInfo
     *
     * List SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point List (required)
     * @param  string $paySpineId The Id of the Spinal Point for which you want Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpinalPointListPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getSpinalPointListPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]';
        $request = $this->getSpinalPointListPaySpineRequest($employerId, $paySpineId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpinalPointListPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point List (required)
     * @param  string $paySpineId The Id of the Spinal Point for which you want Spinal Point List (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpinalPointListPaySpineRequest(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getSpinalPointListPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getSpinalPointListPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getSpinalPointListPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpinalPointPaySpine
     *
     * Get SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want Spinal Point (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpinalPointResponse
     */
    public function getSpinalPointPaySpine(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        string $contentType = self::contentTypes['getSpinalPointPaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractSpinalPointResponse
    {
        list($response) = $this->getSpinalPointPaySpineWithHttpInfo($employerId, $paySpineId, $spinalPointId, $contentType);
        return $response;
    }

    /**
     * Operation getSpinalPointPaySpineWithHttpInfo
     *
     * Get SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want Spinal Point (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpinalPointResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpinalPointPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        string $contentType = self::contentTypes['getSpinalPointPaySpine'][0]
    ): array
    {
        $request = $this->getSpinalPointPaySpineRequest($employerId, $paySpineId, $spinalPointId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpinalPointResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpinalPointResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpinalPointResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpinalPointResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpinalPointPaySpineAsync
     *
     * Get SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want Spinal Point (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpinalPointPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        string $contentType = self::contentTypes['getSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getSpinalPointPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $spinalPointId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpinalPointPaySpineAsyncWithHttpInfo
     *
     * Get SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want Spinal Point (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpinalPointPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $spinalPointId,
        string $contentType = self::contentTypes['getSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse';
        $request = $this->getSpinalPointPaySpineRequest($employerId, $paySpineId, $spinalPointId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpinalPointPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want Spinal Point (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpinalPointPaySpineRequest(
        $employerId,
        $paySpineId,
        $spinalPointId,
        string $contentType = self::contentTypes['getSpinalPointPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'spinalPointId' is set
        if ($spinalPointId === null || (is_array($spinalPointId) && count($spinalPointId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $spinalPointId when calling getSpinalPointPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints/{spinalPointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($spinalPointId !== null) {
            $resourcePath = str_replace(
                '{' . 'spinalPointId' . '}',
                ObjectSerializer::toPathValue($spinalPointId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpineAllowanceListPaySpine
     *
     * List SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of Spine Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Spine Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]
     */
    public function getSpineAllowanceListPaySpine(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getSpineAllowanceListPaySpine'][0]
    ): array
    {
        list($response) = $this->getSpineAllowanceListPaySpineWithHttpInfo($employerId, $paySpineId, $contentType);
        return $response;
    }

    /**
     * Operation getSpineAllowanceListPaySpineWithHttpInfo
     *
     * List SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of Spine Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Spine Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpineAllowanceListPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getSpineAllowanceListPaySpine'][0]
    ): array
    {
        $request = $this->getSpineAllowanceListPaySpineRequest($employerId, $paySpineId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpineAllowanceListPaySpineAsync
     *
     * List SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of Spine Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Spine Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpineAllowanceListPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $contentType = self::contentTypes['getSpineAllowanceListPaySpine'][0]
    ): PromiseInterface
    {
        return $this->getSpineAllowanceListPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpineAllowanceListPaySpineAsyncWithHttpInfo
     *
     * List SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want list of Spine Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Spine Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpineAllowanceListPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getSpineAllowanceListPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]';
        $request = $this->getSpineAllowanceListPaySpineRequest($employerId, $paySpineId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpineAllowanceListPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want list of Spine Allowances (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want list of Spine Allowances (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowanceListPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpineAllowanceListPaySpineRequest(
        $employerId,
        $paySpineId,
        string $contentType = self::contentTypes['getSpineAllowanceListPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getSpineAllowanceListPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getSpineAllowanceListPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpineAllowancePaySpine
     *
     * Get SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to get Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse
     */
    public function getSpineAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        string $contentType = self::contentTypes['getSpineAllowancePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse
    {
        list($response) = $this->getSpineAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $allowanceid, $contentType);
        return $response;
    }

    /**
     * Operation getSpineAllowancePaySpineWithHttpInfo
     *
     * Get SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to get Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpineAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        string $contentType = self::contentTypes['getSpineAllowancePaySpine'][0]
    ): array
    {
        $request = $this->getSpineAllowancePaySpineRequest($employerId, $paySpineId, $allowanceid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpineAllowancePaySpineAsync
     *
     * Get SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to get Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpineAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        string $contentType = self::contentTypes['getSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->getSpineAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpineAllowancePaySpineAsyncWithHttpInfo
     *
     * Get SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to get Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to get Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSpineAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceid,
        string $contentType = self::contentTypes['getSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse';
        $request = $this->getSpineAllowancePaySpineRequest($employerId, $paySpineId, $allowanceid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpineAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to get Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to get Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to get Spine Allowance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpineAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceid,
        string $contentType = self::contentTypes['getSpineAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling getSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'allowanceid' is set
        if ($allowanceid === null || (is_array($allowanceid) && count($allowanceid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceid when calling getSpineAllowancePaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceid !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceid' . '}',
                ObjectSerializer::toPathValue($allowanceid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importCsvPaySpine
     *
     * Import SpinalPoints from csv file
     *
     * @param  string $employerId employerId (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function importCsvPaySpine(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvPaySpine'][0]
    ): array
    {
        list($response) = $this->importCsvPaySpineWithHttpInfo($employerId, $file, $contentType);
        return $response;
    }

    /**
     * Operation importCsvPaySpineWithHttpInfo
     *
     * Import SpinalPoints from csv file
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importCsvPaySpineWithHttpInfo(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvPaySpine'][0]
    ): array
    {
        $request = $this->importCsvPaySpineRequest($employerId, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importCsvPaySpineAsync
     *
     * Import SpinalPoints from csv file
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importCsvPaySpineAsync(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvPaySpine'][0]
    ): PromiseInterface
    {
        return $this->importCsvPaySpineAsyncWithHttpInfo($employerId, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importCsvPaySpineAsyncWithHttpInfo
     *
     * Import SpinalPoints from csv file
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importCsvPaySpineAsyncWithHttpInfo(
        $employerId,
        $file = null,
        string $contentType = self::contentTypes['importCsvPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->importCsvPaySpineRequest($employerId, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importCsvPaySpine'
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importCsvPaySpineRequest(
        $employerId,
        $file = null,
        string $contentType = self::contentTypes['importCsvPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importCsvPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/spinalpoints/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importCsvPaySpinePaySpine
     *
     * Import PaySpine from csv file
     *
     * @param  string $employerId employerId (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpinePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function importCsvPaySpinePaySpine(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvPaySpinePaySpine'][0]
    ): array
    {
        list($response) = $this->importCsvPaySpinePaySpineWithHttpInfo($employerId, $file, $contentType);
        return $response;
    }

    /**
     * Operation importCsvPaySpinePaySpineWithHttpInfo
     *
     * Import PaySpine from csv file
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpinePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importCsvPaySpinePaySpineWithHttpInfo(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvPaySpinePaySpine'][0]
    ): array
    {
        $request = $this->importCsvPaySpinePaySpineRequest($employerId, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importCsvPaySpinePaySpineAsync
     *
     * Import PaySpine from csv file
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpinePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importCsvPaySpinePaySpineAsync(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importCsvPaySpinePaySpine'][0]
    ): PromiseInterface
    {
        return $this->importCsvPaySpinePaySpineAsyncWithHttpInfo($employerId, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importCsvPaySpinePaySpineAsyncWithHttpInfo
     *
     * Import PaySpine from csv file
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpinePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importCsvPaySpinePaySpineAsyncWithHttpInfo(
        $employerId,
        $file = null,
        string $contentType = self::contentTypes['importCsvPaySpinePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->importCsvPaySpinePaySpineRequest($employerId, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importCsvPaySpinePaySpine'
     *
     * @param  string $employerId (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importCsvPaySpinePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importCsvPaySpinePaySpineRequest(
        $employerId,
        $file = null,
        string $contentType = self::contentTypes['importCsvPaySpinePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importCsvPaySpinePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importPayspineGradeCsvPaySpine
     *
     * Import SpineGrades from csv file
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayspineGradeCsvPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function importPayspineGradeCsvPaySpine(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importPayspineGradeCsvPaySpine'][0]
    ): array
    {
        list($response) = $this->importPayspineGradeCsvPaySpineWithHttpInfo($employerId, $file, $contentType);
        return $response;
    }

    /**
     * Operation importPayspineGradeCsvPaySpineWithHttpInfo
     *
     * Import SpineGrades from csv file
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayspineGradeCsvPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importPayspineGradeCsvPaySpineWithHttpInfo(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importPayspineGradeCsvPaySpine'][0]
    ): array
    {
        $request = $this->importPayspineGradeCsvPaySpineRequest($employerId, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importPayspineGradeCsvPaySpineAsync
     *
     * Import SpineGrades from csv file
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayspineGradeCsvPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importPayspineGradeCsvPaySpineAsync(
        string $employerId,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['importPayspineGradeCsvPaySpine'][0]
    ): PromiseInterface
    {
        return $this->importPayspineGradeCsvPaySpineAsyncWithHttpInfo($employerId, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importPayspineGradeCsvPaySpineAsyncWithHttpInfo
     *
     * Import SpineGrades from csv file
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayspineGradeCsvPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importPayspineGradeCsvPaySpineAsyncWithHttpInfo(
        $employerId,
        $file = null,
        string $contentType = self::contentTypes['importPayspineGradeCsvPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->importPayspineGradeCsvPaySpineRequest($employerId, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importPayspineGradeCsvPaySpine'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayspineGradeCsvPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importPayspineGradeCsvPaySpineRequest(
        $employerId,
        $file = null,
        string $contentType = self::contentTypes['importPayspineGradeCsvPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importPayspineGradeCsvPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/paygrades/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexPaySpine
     *
     * List PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to list PaySpine (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function indexPaySpine(
        string $employerId,
        string $contentType = self::contentTypes['indexPaySpine'][0]
    ): array
    {
        list($response) = $this->indexPaySpineWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation indexPaySpineWithHttpInfo
     *
     * List PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to list PaySpine (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function indexPaySpineWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['indexPaySpine'][0]
    ): array
    {
        $request = $this->indexPaySpineRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexPaySpineAsync
     *
     * List PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to list PaySpine (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexPaySpineAsync(
        string $employerId,
        string $contentType = self::contentTypes['indexPaySpine'][0]
    ): PromiseInterface
    {
        return $this->indexPaySpineAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexPaySpineAsyncWithHttpInfo
     *
     * List PaySpine
     *
     * @param  string $employerId The Id of the Employer for which you want to list PaySpine (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexPaySpineAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['indexPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->indexPaySpineRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to list PaySpine (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function indexPaySpineRequest(
        $employerId,
        string $contentType = self::contentTypes['indexPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling indexPaySpine'
            );
        }


        $resourcePath = '/employers/{employerId}/payspines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAllowanceGradePaySpine
     *
     * Update AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to update Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to update Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse
     */
    public function updateAllowanceGradePaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        ?\SynergiTech\Staffology\Model\ContractAllowanceGradesRequest $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['updateAllowanceGradePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse
    {
        list($response) = $this->updateAllowanceGradePaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contractAllowanceGradesRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAllowanceGradePaySpineWithHttpInfo
     *
     * Update AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to update Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to update Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAllowanceGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        ?\SynergiTech\Staffology\Model\ContractAllowanceGradesRequest $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['updateAllowanceGradePaySpine'][0]
    ): array
    {
        $request = $this->updateAllowanceGradePaySpineRequest($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contractAllowanceGradesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAllowanceGradePaySpineAsync
     *
     * Update AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to update Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to update Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAllowanceGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        string $allowanceGradeId,
        ?\SynergiTech\Staffology\Model\ContractAllowanceGradesRequest $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['updateAllowanceGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateAllowanceGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contractAllowanceGradesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAllowanceGradePaySpineAsyncWithHttpInfo
     *
     * Update AllowanceGrade
     *
     * @param  string $employerId The Id of the Employer for which you want to update Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to update Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAllowanceGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        $allowanceGradeId,
        $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['updateAllowanceGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse';
        $request = $this->updateAllowanceGradePaySpineRequest($employerId, $paySpineId, $allowanceId, $allowanceGradeId, $contractAllowanceGradesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAllowanceGradePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update Allowance Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Allowance Grade (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update Allowance Grade (required)
     * @param  string $allowanceGradeId The Id of the Allowance Grade for which you want to update Allowance Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesRequest|null $contractAllowanceGradesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAllowanceGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAllowanceGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        $allowanceGradeId,
        $contractAllowanceGradesRequest = null,
        string $contentType = self::contentTypes['updateAllowanceGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling updateAllowanceGradePaySpine'
            );
        }

        // verify the required parameter 'allowanceGradeId' is set
        if ($allowanceGradeId === null || (is_array($allowanceGradeId) && count($allowanceGradeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceGradeId when calling updateAllowanceGradePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades/{allowanceGradeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceGradeId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceGradeId' . '}',
                ObjectSerializer::toPathValue($allowanceGradeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAllowanceGradesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAllowanceGradesRequest));
            } else {
                $httpBody = $contractAllowanceGradesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLondonAllowancePaySpine
     *
     * Update LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to update London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse
     */
    public function updateLondonAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        ?\SynergiTech\Staffology\Model\ContractLondonAllowanceRequest $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['updateLondonAllowancePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse
    {
        list($response) = $this->updateLondonAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $londonAllowanceId, $contractLondonAllowanceRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateLondonAllowancePaySpineWithHttpInfo
     *
     * Update LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to update London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractLondonAllowanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLondonAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        ?\SynergiTech\Staffology\Model\ContractLondonAllowanceRequest $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['updateLondonAllowancePaySpine'][0]
    ): array
    {
        $request = $this->updateLondonAllowancePaySpineRequest($employerId, $paySpineId, $londonAllowanceId, $contractLondonAllowanceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLondonAllowancePaySpineAsync
     *
     * Update LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to update London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLondonAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $londonAllowanceId,
        ?\SynergiTech\Staffology\Model\ContractLondonAllowanceRequest $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['updateLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateLondonAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $londonAllowanceId, $contractLondonAllowanceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLondonAllowancePaySpineAsyncWithHttpInfo
     *
     * Update LondonAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to update London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLondonAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $londonAllowanceId,
        $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['updateLondonAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractLondonAllowanceResponse';
        $request = $this->updateLondonAllowancePaySpineRequest($employerId, $paySpineId, $londonAllowanceId, $contractLondonAllowanceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLondonAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update London Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update London Allowance (required)
     * @param  string $londonAllowanceId The Id of the London Allowance for which you want to update London Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractLondonAllowanceRequest|null $contractLondonAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLondonAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLondonAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $londonAllowanceId,
        $contractLondonAllowanceRequest = null,
        string $contentType = self::contentTypes['updateLondonAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateLondonAllowancePaySpine'
            );
        }

        // verify the required parameter 'londonAllowanceId' is set
        if ($londonAllowanceId === null || (is_array($londonAllowanceId) && count($londonAllowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $londonAllowanceId when calling updateLondonAllowancePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/londonallowances/{londonAllowanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($londonAllowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'londonAllowanceId' . '}',
                ObjectSerializer::toPathValue($londonAllowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractLondonAllowanceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractLondonAllowanceRequest));
            } else {
                $httpBody = $contractLondonAllowanceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMultipleAllowanceGradesPaySpine
     *
     * Update Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesUpdateRequest[]|null $contractAllowanceGradesUpdateRequest contractAllowanceGradesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]
     */
    public function updateMultipleAllowanceGradesPaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?array $contractAllowanceGradesUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleAllowanceGradesPaySpine'][0]
    ): array
    {
        list($response) = $this->updateMultipleAllowanceGradesPaySpineWithHttpInfo($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateMultipleAllowanceGradesPaySpineWithHttpInfo
     *
     * Update Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesUpdateRequest[]|null $contractAllowanceGradesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMultipleAllowanceGradesPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?array $contractAllowanceGradesUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleAllowanceGradesPaySpine'][0]
    ): array
    {
        $request = $this->updateMultipleAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMultipleAllowanceGradesPaySpineAsync
     *
     * Update Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesUpdateRequest[]|null $contractAllowanceGradesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateMultipleAllowanceGradesPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceId,
        ?array $contractAllowanceGradesUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateMultipleAllowanceGradesPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMultipleAllowanceGradesPaySpineAsyncWithHttpInfo
     *
     * Update Multiple AllowanceGrades
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesUpdateRequest[]|null $contractAllowanceGradesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateMultipleAllowanceGradesPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceId,
        $contractAllowanceGradesUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleAllowanceGradesPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAllowanceGradesResponse[]';
        $request = $this->updateMultipleAllowanceGradesPaySpineRequest($employerId, $paySpineId, $allowanceId, $contractAllowanceGradesUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMultipleAllowanceGradesPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Allowance Grades (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Allowance Grades (required)
     * @param  string $allowanceId The Id of the Spine Allowance for which you want to update multiple Allowance Grades (required)
     * @param  \SynergiTech\Staffology\Model\ContractAllowanceGradesUpdateRequest[]|null $contractAllowanceGradesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleAllowanceGradesPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMultipleAllowanceGradesPaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceId,
        $contractAllowanceGradesUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleAllowanceGradesPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateMultipleAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateMultipleAllowanceGradesPaySpine'
            );
        }

        // verify the required parameter 'allowanceId' is set
        if ($allowanceId === null || (is_array($allowanceId) && count($allowanceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceId when calling updateMultipleAllowanceGradesPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceId}/allowancegrades/update/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceId !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceId' . '}',
                ObjectSerializer::toPathValue($allowanceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAllowanceGradesUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAllowanceGradesUpdateRequest));
            } else {
                $httpBody = $contractAllowanceGradesUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMultiplePaySpine
     *
     * Update Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointUpdateRequest[]|null $contractSpinalPointUpdateRequest contractSpinalPointUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpinalPointResponse[]
     */
    public function updateMultiplePaySpine(
        string $employerId,
        string $paySpineId,
        ?array $contractSpinalPointUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultiplePaySpine'][0]
    ): array
    {
        list($response) = $this->updateMultiplePaySpineWithHttpInfo($employerId, $paySpineId, $contractSpinalPointUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateMultiplePaySpineWithHttpInfo
     *
     * Update Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointUpdateRequest[]|null $contractSpinalPointUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpinalPointResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMultiplePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?array $contractSpinalPointUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultiplePaySpine'][0]
    ): array
    {
        $request = $this->updateMultiplePaySpineRequest($employerId, $paySpineId, $contractSpinalPointUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMultiplePaySpineAsync
     *
     * Update Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointUpdateRequest[]|null $contractSpinalPointUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateMultiplePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?array $contractSpinalPointUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultiplePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateMultiplePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractSpinalPointUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMultiplePaySpineAsyncWithHttpInfo
     *
     * Update Multiple SpinalPoints
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointUpdateRequest[]|null $contractSpinalPointUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateMultiplePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractSpinalPointUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultiplePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse[]';
        $request = $this->updateMultiplePaySpineRequest($employerId, $paySpineId, $contractSpinalPointUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMultiplePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointUpdateRequest[]|null $contractSpinalPointUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultiplePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMultiplePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractSpinalPointUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultiplePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateMultiplePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateMultiplePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpinalPointUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpinalPointUpdateRequest));
            } else {
                $httpBody = $contractSpinalPointUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMultipleSpineAllowancePaySpine
     *
     * Update Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceUpdateRequest[]|null $contractSpineAllowanceUpdateRequest contractSpineAllowanceUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]
     */
    public function updateMultipleSpineAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        ?array $contractSpineAllowanceUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleSpineAllowancePaySpine'][0]
    ): array
    {
        list($response) = $this->updateMultipleSpineAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $contractSpineAllowanceUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateMultipleSpineAllowancePaySpineWithHttpInfo
     *
     * Update Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceUpdateRequest[]|null $contractSpineAllowanceUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMultipleSpineAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        ?array $contractSpineAllowanceUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleSpineAllowancePaySpine'][0]
    ): array
    {
        $request = $this->updateMultipleSpineAllowancePaySpineRequest($employerId, $paySpineId, $contractSpineAllowanceUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMultipleSpineAllowancePaySpineAsync
     *
     * Update Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceUpdateRequest[]|null $contractSpineAllowanceUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateMultipleSpineAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        ?array $contractSpineAllowanceUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateMultipleSpineAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $contractSpineAllowanceUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMultipleSpineAllowancePaySpineAsyncWithHttpInfo
     *
     * Update Multiple SpineAllowances
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceUpdateRequest[]|null $contractSpineAllowanceUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateMultipleSpineAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $contractSpineAllowanceUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse[]';
        $request = $this->updateMultipleSpineAllowancePaySpineRequest($employerId, $paySpineId, $contractSpineAllowanceUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMultipleSpineAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update multiple SpineAllowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update multiple SpineAllowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceUpdateRequest[]|null $contractSpineAllowanceUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMultipleSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMultipleSpineAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $contractSpineAllowanceUpdateRequest = null,
        string $contentType = self::contentTypes['updateMultipleSpineAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateMultipleSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateMultipleSpineAllowancePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/update/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpineAllowanceUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpineAllowanceUpdateRequest));
            } else {
                $httpBody = $contractSpineAllowanceUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayGradePaySpine
     *
     * Update PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to update PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want to update PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse
     */
    public function updatePayGradePaySpine(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineGradeRequest $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['updatePayGradePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse
    {
        list($response) = $this->updatePayGradePaySpineWithHttpInfo($employerId, $paySpineId, $payGradeId, $contractPaySpineGradeRequest, $contentType);
        return $response;
    }

    /**
     * Operation updatePayGradePaySpineWithHttpInfo
     *
     * Update PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to update PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want to update PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayGradePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPaySpineGradeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayGradePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineGradeRequest $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['updatePayGradePaySpine'][0]
    ): array
    {
        $request = $this->updatePayGradePaySpineRequest($employerId, $paySpineId, $payGradeId, $contractPaySpineGradeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePayGradePaySpineAsync
     *
     * Update PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to update PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want to update PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePayGradePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $payGradeId,
        ?\SynergiTech\Staffology\Model\ContractPaySpineGradeRequest $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['updatePayGradePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updatePayGradePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $payGradeId, $contractPaySpineGradeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePayGradePaySpineAsyncWithHttpInfo
     *
     * Update PaySpine Grade
     *
     * @param  string $employerId The Id of the Employer for which you want to update PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want to update PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePayGradePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $payGradeId,
        $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['updatePayGradePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineGradeResponse';
        $request = $this->updatePayGradePaySpineRequest($employerId, $paySpineId, $payGradeId, $contractPaySpineGradeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayGradePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update PaySpine Grade (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update PaySpine Grade (required)
     * @param  string $payGradeId The Id of the PaySpine Grade for which you want to update PaySpine Grade (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineGradeRequest|null $contractPaySpineGradeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayGradePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePayGradePaySpineRequest(
        $employerId,
        $paySpineId,
        $payGradeId,
        $contractPaySpineGradeRequest = null,
        string $contentType = self::contentTypes['updatePayGradePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePayGradePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updatePayGradePaySpine'
            );
        }

        // verify the required parameter 'payGradeId' is set
        if ($payGradeId === null || (is_array($payGradeId) && count($payGradeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payGradeId when calling updatePayGradePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/paygrades/{payGradeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($payGradeId !== null) {
            $resourcePath = str_replace(
                '{' . 'payGradeId' . '}',
                ObjectSerializer::toPathValue($payGradeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPaySpineGradeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPaySpineGradeRequest));
            } else {
                $httpBody = $contractPaySpineGradeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaySpine
     *
     * Update PaySpine
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest|null $contractPaySpineUpdateRequest contractPaySpineUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPaySpineResponse
     */
    public function updatePaySpine(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest $contractPaySpineUpdateRequest = null,
        string $contentType = self::contentTypes['updatePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractPaySpineResponse
    {
        list($response) = $this->updatePaySpineWithHttpInfo($employerId, $id, $contractPaySpineUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updatePaySpineWithHttpInfo
     *
     * Update PaySpine
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest|null $contractPaySpineUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPaySpineResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaySpineWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest $contractPaySpineUpdateRequest = null,
        string $contentType = self::contentTypes['updatePaySpine'][0]
    ): array
    {
        $request = $this->updatePaySpineRequest($employerId, $id, $contractPaySpineUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPaySpineResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPaySpineResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPaySpineResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPaySpineResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaySpineAsync
     *
     * Update PaySpine
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest|null $contractPaySpineUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaySpineAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest $contractPaySpineUpdateRequest = null,
        string $contentType = self::contentTypes['updatePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updatePaySpineAsyncWithHttpInfo($employerId, $id, $contractPaySpineUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaySpineAsyncWithHttpInfo
     *
     * Update PaySpine
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest|null $contractPaySpineUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaySpineAsyncWithHttpInfo(
        $employerId,
        $id,
        $contractPaySpineUpdateRequest = null,
        string $contentType = self::contentTypes['updatePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPaySpineResponse';
        $request = $this->updatePaySpineRequest($employerId, $id, $contractPaySpineUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaySpine'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractPaySpineUpdateRequest|null $contractPaySpineUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaySpineRequest(
        $employerId,
        $id,
        $contractPaySpineUpdateRequest = null,
        string $contentType = self::contentTypes['updatePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePaySpine'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updatePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractPaySpineUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractPaySpineUpdateRequest));
            } else {
                $httpBody = $contractPaySpineUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSpinalPointPaySpine
     *
     * Update SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpinalPointResponse
     */
    public function updateSpinalPointPaySpine(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        ?\SynergiTech\Staffology\Model\ContractSpinalPointRequest $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['updateSpinalPointPaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractSpinalPointResponse
    {
        list($response) = $this->updateSpinalPointPaySpineWithHttpInfo($employerId, $paySpineId, $spinalPointId, $contractSpinalPointRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateSpinalPointPaySpineWithHttpInfo
     *
     * Update SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpinalPointResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSpinalPointPaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        ?\SynergiTech\Staffology\Model\ContractSpinalPointRequest $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['updateSpinalPointPaySpine'][0]
    ): array
    {
        $request = $this->updateSpinalPointPaySpineRequest($employerId, $paySpineId, $spinalPointId, $contractSpinalPointRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpinalPointResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpinalPointResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpinalPointResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpinalPointResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSpinalPointPaySpineAsync
     *
     * Update SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateSpinalPointPaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $spinalPointId,
        ?\SynergiTech\Staffology\Model\ContractSpinalPointRequest $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['updateSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateSpinalPointPaySpineAsyncWithHttpInfo($employerId, $paySpineId, $spinalPointId, $contractSpinalPointRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSpinalPointPaySpineAsyncWithHttpInfo
     *
     * Update SpinalPoint
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateSpinalPointPaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $spinalPointId,
        $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['updateSpinalPointPaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpinalPointResponse';
        $request = $this->updateSpinalPointPaySpineRequest($employerId, $paySpineId, $spinalPointId, $contractSpinalPointRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSpinalPointPaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spinal Point (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spinal Point (required)
     * @param  string $spinalPointId The Id of the Spinal Point for which you want to update Spinal Point (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpinalPointRequest|null $contractSpinalPointRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpinalPointPaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSpinalPointPaySpineRequest(
        $employerId,
        $paySpineId,
        $spinalPointId,
        $contractSpinalPointRequest = null,
        string $contentType = self::contentTypes['updateSpinalPointPaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateSpinalPointPaySpine'
            );
        }

        // verify the required parameter 'spinalPointId' is set
        if ($spinalPointId === null || (is_array($spinalPointId) && count($spinalPointId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $spinalPointId when calling updateSpinalPointPaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/spinalpoints/{spinalPointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($spinalPointId !== null) {
            $resourcePath = str_replace(
                '{' . 'spinalPointId' . '}',
                ObjectSerializer::toPathValue($spinalPointId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpinalPointRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpinalPointRequest));
            } else {
                $httpBody = $contractSpinalPointRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSpineAllowancePaySpine
     *
     * Update SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to update Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse
     */
    public function updateSpineAllowancePaySpine(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        ?\SynergiTech\Staffology\Model\ContractSpineAllowanceRequest $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['updateSpineAllowancePaySpine'][0]
    ): \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse
    {
        list($response) = $this->updateSpineAllowancePaySpineWithHttpInfo($employerId, $paySpineId, $allowanceid, $contractSpineAllowanceRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateSpineAllowancePaySpineWithHttpInfo
     *
     * Update SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to update Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractSpineAllowanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSpineAllowancePaySpineWithHttpInfo(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        ?\SynergiTech\Staffology\Model\ContractSpineAllowanceRequest $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['updateSpineAllowancePaySpine'][0]
    ): array
    {
        $request = $this->updateSpineAllowancePaySpineRequest($employerId, $paySpineId, $allowanceid, $contractSpineAllowanceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSpineAllowancePaySpineAsync
     *
     * Update SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to update Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateSpineAllowancePaySpineAsync(
        string $employerId,
        string $paySpineId,
        string $allowanceid,
        ?\SynergiTech\Staffology\Model\ContractSpineAllowanceRequest $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['updateSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        return $this->updateSpineAllowancePaySpineAsyncWithHttpInfo($employerId, $paySpineId, $allowanceid, $contractSpineAllowanceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSpineAllowancePaySpineAsyncWithHttpInfo
     *
     * Update SpineAllowance
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to update Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateSpineAllowancePaySpineAsyncWithHttpInfo(
        $employerId,
        $paySpineId,
        $allowanceid,
        $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['updateSpineAllowancePaySpine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractSpineAllowanceResponse';
        $request = $this->updateSpineAllowancePaySpineRequest($employerId, $paySpineId, $allowanceid, $contractSpineAllowanceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSpineAllowancePaySpine'
     *
     * @param  string $employerId The Id of the Employer for which you want to update Spine Allowance (required)
     * @param  string $paySpineId The Id of the Pay Spine for which you want to update Spine Allowance (required)
     * @param  string $allowanceid The Id of the Spine Allowance for which you want to update Spine Allowance (required)
     * @param  \SynergiTech\Staffology\Model\ContractSpineAllowanceRequest|null $contractSpineAllowanceRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpineAllowancePaySpine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSpineAllowancePaySpineRequest(
        $employerId,
        $paySpineId,
        $allowanceid,
        $contractSpineAllowanceRequest = null,
        string $contentType = self::contentTypes['updateSpineAllowancePaySpine'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'paySpineId' is set
        if ($paySpineId === null || (is_array($paySpineId) && count($paySpineId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paySpineId when calling updateSpineAllowancePaySpine'
            );
        }

        // verify the required parameter 'allowanceid' is set
        if ($allowanceid === null || (is_array($allowanceid) && count($allowanceid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $allowanceid when calling updateSpineAllowancePaySpine'
            );
        }



        $resourcePath = '/employers/{employerId}/payspines/{paySpineId}/allowances/{allowanceid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($paySpineId !== null) {
            $resourcePath = str_replace(
                '{' . 'paySpineId' . '}',
                ObjectSerializer::toPathValue($paySpineId),
                $resourcePath
            );
        }
        // path params
        if ($allowanceid !== null) {
            $resourcePath = str_replace(
                '{' . 'allowanceid' . '}',
                ObjectSerializer::toPathValue($allowanceid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractSpineAllowanceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractSpineAllowanceRequest));
            } else {
                $httpBody = $contractSpineAllowanceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
