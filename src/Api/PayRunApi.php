<?php
/**
 * PayRunApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayRunApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayRunApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addPayRunEntriesPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'aeoPayRun' => [
            'application/json',
        ],
        'calculateAverageHolidayPayPayRun' => [
            'application/json',
        ],
        'changesForPayRunEntryPayRun' => [
            'application/json',
        ],
        'changesPayRun' => [
            'application/json',
        ],
        'createNextPayRunPayRun' => [
            'application/json',
        ],
        'deletePayRun' => [
            'application/json',
        ],
        'emailMultipleP45sPayRun' => [
            'application/json',
        ],
        'finalisePayRunPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'getPayRunEntryPayRun' => [
            'application/json',
        ],
        'getPayRunEventsPayRun' => [
            'application/json',
        ],
        'getPayRunJournalPayRun' => [
            'application/json',
        ],
        'getPayRunPayCodesPayRun' => [
            'application/json',
        ],
        'getPayRunPayRun' => [
            'application/json',
        ],
        'getPayRunStateHistoryPayRun' => [
            'application/json',
        ],
        'getPayRunWarningsPayRun' => [
            'application/json',
        ],
        'getPayRunsPayRun' => [
            'application/json',
        ],
        'importPayPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'importTimeAndAttendancePayRun' => [
            'application/json',
        ],
        'importUmbrellaPayPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'lastPayRunEntryForEmployeePayRun' => [
            'application/json',
        ],
        'lastPayRunEntryWithPensionYtdValuesForEmployeePayRun' => [
            'application/json',
        ],
        'leavePayRun' => [
            'application/json',
        ],
        'payRunEntryUmbrellaPaymentPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'reOpenPayRunPayRun' => [
            'application/json',
        ],
        'removePayRunEntriesPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'sendPayslipEmailsPayRun' => [
            'application/json',
        ],
        'startNextPayRunPayRun' => [
            'application/json',
        ],
        'updatePayRunEntryPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updatePayRunPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updatePaymentDatePayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'ytdPayRun' => [
            'multipart/form-data',
        ],
        'zeroisePayRunEntriesPayRun' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addPayRunEntriesPayRun
     *
     * Add PayRunEntries (deprecated)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string[]|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function addPayRunEntriesPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['addPayRunEntriesPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->addPayRunEntriesPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);
        return $response;
    }

    /**
     * Operation addPayRunEntriesPayRunWithHttpInfo
     *
     * Add PayRunEntries (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPayRunEntriesPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['addPayRunEntriesPayRun'][0]
    ): array
    {
        $request = $this->addPayRunEntriesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPayRunEntriesPayRunAsync
     *
     * Add PayRunEntries (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addPayRunEntriesPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['addPayRunEntriesPayRun'][0]
    ): PromiseInterface
    {
        return $this->addPayRunEntriesPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPayRunEntriesPayRunAsyncWithHttpInfo
     *
     * Add PayRunEntries (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addPayRunEntriesPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['addPayRunEntriesPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->addPayRunEntriesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPayRunEntriesPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPayRunEntriesPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['addPayRunEntriesPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling addPayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling addPayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling addPayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling addPayRunEntriesPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/addpayrunentries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aeoPayRun
     *
     * List AttachmentOrders related to a PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function aeoPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['aeoPayRun'][0]
    ): array
    {
        list($response) = $this->aeoPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation aeoPayRunWithHttpInfo
     *
     * List AttachmentOrders related to a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function aeoPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['aeoPayRun'][0]
    ): array
    {
        $request = $this->aeoPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aeoPayRunAsync
     *
     * List AttachmentOrders related to a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function aeoPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['aeoPayRun'][0]
    ): PromiseInterface
    {
        return $this->aeoPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aeoPayRunAsyncWithHttpInfo
     *
     * List AttachmentOrders related to a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function aeoPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['aeoPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->aeoPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aeoPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aeoPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aeoPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['aeoPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling aeoPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling aeoPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling aeoPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling aeoPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/aeo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation calculateAverageHolidayPayPayRun
     *
     * Calculate Average Holiday Pay Rate
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee (required)
     * @param  \DateTime $startDate The date we used to calculate average holiday pay from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateAverageHolidayPayPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function calculateAverageHolidayPayPayRun(
        string $employerId,
        string $employeeId,
        \DateTime $startDate,
        string $contentType = self::contentTypes['calculateAverageHolidayPayPayRun'][0]
    ): float
    {
        list($response) = $this->calculateAverageHolidayPayPayRunWithHttpInfo($employerId, $employeeId, $startDate, $contentType);
        return $response;
    }

    /**
     * Operation calculateAverageHolidayPayPayRunWithHttpInfo
     *
     * Calculate Average Holiday Pay Rate
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee (required)
     * @param  \DateTime $startDate The date we used to calculate average holiday pay from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateAverageHolidayPayPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculateAverageHolidayPayPayRunWithHttpInfo(
        string $employerId,
        string $employeeId,
        \DateTime $startDate,
        string $contentType = self::contentTypes['calculateAverageHolidayPayPayRun'][0]
    ): array
    {
        $request = $this->calculateAverageHolidayPayPayRunRequest($employerId, $employeeId, $startDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation calculateAverageHolidayPayPayRunAsync
     *
     * Calculate Average Holiday Pay Rate
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee (required)
     * @param  \DateTime $startDate The date we used to calculate average holiday pay from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateAverageHolidayPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function calculateAverageHolidayPayPayRunAsync(
        string $employerId,
        string $employeeId,
        \DateTime $startDate,
        string $contentType = self::contentTypes['calculateAverageHolidayPayPayRun'][0]
    ): PromiseInterface
    {
        return $this->calculateAverageHolidayPayPayRunAsyncWithHttpInfo($employerId, $employeeId, $startDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation calculateAverageHolidayPayPayRunAsyncWithHttpInfo
     *
     * Calculate Average Holiday Pay Rate
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee (required)
     * @param  \DateTime $startDate The date we used to calculate average holiday pay from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateAverageHolidayPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function calculateAverageHolidayPayPayRunAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        \DateTime $startDate,
        string $contentType = self::contentTypes['calculateAverageHolidayPayPayRun'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->calculateAverageHolidayPayPayRunRequest($employerId, $employeeId, $startDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'calculateAverageHolidayPayPayRun'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs (required)
     * @param  string $employeeId The Id of the Employee (required)
     * @param  \DateTime $startDate The date we used to calculate average holiday pay from (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateAverageHolidayPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function calculateAverageHolidayPayPayRunRequest(
        string $employerId,
        string $employeeId,
        \DateTime $startDate,
        string $contentType = self::contentTypes['calculateAverageHolidayPayPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling calculateAverageHolidayPayPayRun'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling calculateAverageHolidayPayPayRun'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $startDate when calling calculateAverageHolidayPayPayRun'
            );
        }


        $resourcePath = '/employers/{employerId}/payrun/employees/{employeeId}/averageholidaypayrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'startDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesForPayRunEntryPayRun
     *
     * List PayRun Changes for PayRunEntry
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $significantChangesOnly significantChangesOnly (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesForPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ChangeSummary[]
     */
    public function changesForPayRunEntryPayRun(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $significantChangesOnly = false,
        string $contentType = self::contentTypes['changesForPayRunEntryPayRun'][0]
    ): array
    {
        list($response) = $this->changesForPayRunEntryPayRunWithHttpInfo($employerId, $id, $payPeriod, $periodNumber, $taxYear, $ordinal, $significantChangesOnly, $contentType);
        return $response;
    }

    /**
     * Operation changesForPayRunEntryPayRunWithHttpInfo
     *
     * List PayRun Changes for PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $significantChangesOnly (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesForPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ChangeSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function changesForPayRunEntryPayRunWithHttpInfo(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $significantChangesOnly = false,
        string $contentType = self::contentTypes['changesForPayRunEntryPayRun'][0]
    ): array
    {
        $request = $this->changesForPayRunEntryPayRunRequest($employerId, $id, $payPeriod, $periodNumber, $taxYear, $ordinal, $significantChangesOnly, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ChangeSummary[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ChangeSummary[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ChangeSummary[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ChangeSummary[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ChangeSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesForPayRunEntryPayRunAsync
     *
     * List PayRun Changes for PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $significantChangesOnly (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesForPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function changesForPayRunEntryPayRunAsync(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $significantChangesOnly = false,
        string $contentType = self::contentTypes['changesForPayRunEntryPayRun'][0]
    ): PromiseInterface
    {
        return $this->changesForPayRunEntryPayRunAsyncWithHttpInfo($employerId, $id, $payPeriod, $periodNumber, $taxYear, $ordinal, $significantChangesOnly, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesForPayRunEntryPayRunAsyncWithHttpInfo
     *
     * List PayRun Changes for PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $significantChangesOnly (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesForPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function changesForPayRunEntryPayRunAsyncWithHttpInfo(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $significantChangesOnly = false,
        string $contentType = self::contentTypes['changesForPayRunEntryPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ChangeSummary[]';
        $request = $this->changesForPayRunEntryPayRunRequest($employerId, $id, $payPeriod, $periodNumber, $taxYear, $ordinal, $significantChangesOnly, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesForPayRunEntryPayRun'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $significantChangesOnly (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesForPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changesForPayRunEntryPayRunRequest(
        string $employerId,
        string $id,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $significantChangesOnly = false,
        string $contentType = self::contentTypes['changesForPayRunEntryPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling changesForPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling changesForPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling changesForPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling changesForPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling changesForPayRunEntryPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $significantChangesOnly,
            'significantChangesOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changesPayRun
     *
     * List PayRun Changes
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunChanges
     */
    public function changesPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['changesPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunChanges
    {
        list($response) = $this->changesPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation changesPayRunWithHttpInfo
     *
     * List PayRun Changes
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunChanges, HTTP status code, HTTP response headers (array of strings)
     */
    public function changesPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['changesPayRun'][0]
    ): array
    {
        $request = $this->changesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunChanges', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunChanges' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunChanges', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunChanges';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunChanges',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changesPayRunAsync
     *
     * List PayRun Changes
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function changesPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['changesPayRun'][0]
    ): PromiseInterface
    {
        return $this->changesPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changesPayRunAsyncWithHttpInfo
     *
     * List PayRun Changes
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function changesPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['changesPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunChanges';
        $request = $this->changesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changesPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changesPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['changesPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling changesPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling changesPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling changesPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling changesPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNextPayRunPayRun
     *
     * Starts the next PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function createNextPayRunPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['createNextPayRunPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->createNextPayRunPayRunWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation createNextPayRunPayRunWithHttpInfo
     *
     * Starts the next PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNextPayRunPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['createNextPayRunPayRun'][0]
    ): array
    {
        $request = $this->createNextPayRunPayRunRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNextPayRunPayRunAsync
     *
     * Starts the next PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createNextPayRunPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['createNextPayRunPayRun'][0]
    ): PromiseInterface
    {
        return $this->createNextPayRunPayRunAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNextPayRunPayRunAsyncWithHttpInfo
     *
     * Starts the next PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createNextPayRunPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['createNextPayRunPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->createNextPayRunPayRunRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNextPayRunPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNextPayRunPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['createNextPayRunPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createNextPayRunPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling createNextPayRunPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling createNextPayRunPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayRun
     *
     * Delete a PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['deletePayRun'][0]
    ): void
    {
        $this->deletePayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation deletePayRunWithHttpInfo
     *
     * Delete a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['deletePayRun'][0]
    ): array
    {
        $request = $this->deletePayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayRunAsync
     *
     * Delete a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['deletePayRun'][0]
    ): PromiseInterface
    {
        return $this->deletePayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayRunAsyncWithHttpInfo
     *
     * Delete a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['deletePayRun'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['deletePayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deletePayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling deletePayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling deletePayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling deletePayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailMultipleP45sPayRun
     *
     * (Re)send P45 Emails
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailMultipleP45sPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function emailMultipleP45sPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['emailMultipleP45sPayRun'][0]
    ): void
    {
        $this->emailMultipleP45sPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation emailMultipleP45sPayRunWithHttpInfo
     *
     * (Re)send P45 Emails
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailMultipleP45sPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailMultipleP45sPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['emailMultipleP45sPayRun'][0]
    ): array
    {
        $request = $this->emailMultipleP45sPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailMultipleP45sPayRunAsync
     *
     * (Re)send P45 Emails
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailMultipleP45sPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailMultipleP45sPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['emailMultipleP45sPayRun'][0]
    ): PromiseInterface
    {
        return $this->emailMultipleP45sPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailMultipleP45sPayRunAsyncWithHttpInfo
     *
     * (Re)send P45 Emails
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailMultipleP45sPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function emailMultipleP45sPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['emailMultipleP45sPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->emailMultipleP45sPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailMultipleP45sPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emailMultipleP45sPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emailMultipleP45sPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['emailMultipleP45sPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling emailMultipleP45sPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling emailMultipleP45sPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling emailMultipleP45sPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling emailMultipleP45sPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/p45/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation finalisePayRunPayRun
     *
     * Finalise a PayRun (deprecated)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  array<string,mixed>|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalisePayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return bool
     */
    public function finalisePayRunPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['finalisePayRunPayRun'][0]
    ): bool
    {
        list($response) = $this->finalisePayRunPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);
        return $response;
    }

    /**
     * Operation finalisePayRunPayRunWithHttpInfo
     *
     * Finalise a PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  array<string,mixed>|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalisePayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function finalisePayRunPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['finalisePayRunPayRun'][0]
    ): array
    {
        $request = $this->finalisePayRunPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('bool', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'bool';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation finalisePayRunPayRunAsync
     *
     * Finalise a PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  array<string,mixed>|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalisePayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function finalisePayRunPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['finalisePayRunPayRun'][0]
    ): PromiseInterface
    {
        return $this->finalisePayRunPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation finalisePayRunPayRunAsyncWithHttpInfo
     *
     * Finalise a PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  array<string,mixed>|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalisePayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function finalisePayRunPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['finalisePayRunPayRun'][0]
    ): PromiseInterface
    {
        $returnType = 'bool';
        $request = $this->finalisePayRunPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'finalisePayRunPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  array<string,mixed>|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalisePayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function finalisePayRunPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['finalisePayRunPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling finalisePayRunPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling finalisePayRunPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling finalisePayRunPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling finalisePayRunPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/finalise';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunEntryPayRun
     *
     * Get a PayRunEntry
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id id (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunEntry
     */
    public function getPayRunEntryPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEntryPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunEntry
    {
        list($response) = $this->getPayRunEntryPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunEntryPayRunWithHttpInfo
     *
     * Get a PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunEntryPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEntryPayRun'][0]
    ): array
    {
        $request = $this->getPayRunEntryPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunEntry', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunEntry' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunEntryPayRunAsync
     *
     * Get a PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunEntryPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEntryPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunEntryPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunEntryPayRunAsyncWithHttpInfo
     *
     * Get a PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunEntryPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEntryPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
        $request = $this->getPayRunEntryPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunEntryPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunEntryPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEntryPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunEntryPayRun'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPayRunEntryPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunEventsPayRun
     *
     * Get PayPeriodEvents
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEventsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]
     */
    public function getPayRunEventsPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEventsPayRun'][0]
    ): array
    {
        list($response) = $this->getPayRunEventsPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunEventsPayRunWithHttpInfo
     *
     * Get PayPeriodEvents
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEventsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedulePeriodEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunEventsPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEventsPayRun'][0]
    ): array
    {
        $request = $this->getPayRunEventsPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunEventsPayRunAsync
     *
     * Get PayPeriodEvents
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEventsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunEventsPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEventsPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunEventsPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunEventsPayRunAsyncWithHttpInfo
     *
     * Get PayPeriodEvents
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEventsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunEventsPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEventsPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedulePeriodEvent[]';
        $request = $this->getPayRunEventsPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunEventsPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunEventsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunEventsPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunEventsPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunEventsPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunEventsPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunEventsPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunEventsPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunJournalPayRun
     *
     * Get Journal for PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunJournalPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunJournal
     */
    public function getPayRunJournalPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['getPayRunJournalPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunJournal
    {
        list($response) = $this->getPayRunJournalPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $deptBreakdown, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunJournalPayRunWithHttpInfo
     *
     * Get Journal for PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunJournalPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunJournal, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunJournalPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['getPayRunJournalPayRun'][0]
    ): array
    {
        $request = $this->getPayRunJournalPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $deptBreakdown, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunJournal', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunJournal' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunJournal', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunJournal';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunJournal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunJournalPayRunAsync
     *
     * Get Journal for PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunJournalPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunJournalPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['getPayRunJournalPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunJournalPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $deptBreakdown, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunJournalPayRunAsyncWithHttpInfo
     *
     * Get Journal for PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunJournalPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunJournalPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['getPayRunJournalPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunJournal';
        $request = $this->getPayRunJournalPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $deptBreakdown, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunJournalPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $deptBreakdown Set to true and the journal will be split between any relevant Departments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunJournalPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunJournalPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?bool $deptBreakdown = false,
        string $contentType = self::contentTypes['getPayRunJournalPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunJournalPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunJournalPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunJournalPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunJournalPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/journal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deptBreakdown,
            'deptBreakdown', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunPayCodesPayRun
     *
     * Get PayCodes for a PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayCodesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayCode[]
     */
    public function getPayRunPayCodesPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunPayCodesPayRun'][0]
    ): array
    {
        list($response) = $this->getPayRunPayCodesPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunPayCodesPayRunWithHttpInfo
     *
     * Get PayCodes for a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayCodesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayCode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunPayCodesPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunPayCodesPayRun'][0]
    ): array
    {
        $request = $this->getPayRunPayCodesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayCode[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayCode[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayCode[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayCode[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayCode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunPayCodesPayRunAsync
     *
     * Get PayCodes for a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayCodesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunPayCodesPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunPayCodesPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunPayCodesPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunPayCodesPayRunAsyncWithHttpInfo
     *
     * Get PayCodes for a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayCodesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunPayCodesPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunPayCodesPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayCode[]';
        $request = $this->getPayRunPayCodesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunPayCodesPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayCodesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunPayCodesPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunPayCodesPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunPayCodesPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunPayCodesPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunPayCodesPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunPayCodesPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/paycodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunPayRun
     *
     * Get a PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  string|null $searchTerm The option to filter on a search term (optional)
     * @param  \SynergiTech\Staffology\Model\ZeroPaidFilter|null $zeroPaid The option to filter pay run entries by negative paid, zero paid and non-zero paid (optional)
     * @param  string|null $departmentCode The option to filter on department code (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeavers The option to filter on whether the employee is a starter or leaver (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy The option to sort by a certain field. Default is Payroll Code (optional)
     * @param  bool|null $sortDescending Whether to sort in ascending or descending order (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function getPayRunPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?string $searchTerm = null,
        ?\SynergiTech\Staffology\Model\ZeroPaidFilter $zeroPaid = null,
        ?string $departmentCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeavers = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['getPayRunPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->getPayRunPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $searchTerm, $zeroPaid, $departmentCode, $startersLeavers, $sortBy, $sortDescending, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunPayRunWithHttpInfo
     *
     * Get a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  string|null $searchTerm The option to filter on a search term (optional)
     * @param  \SynergiTech\Staffology\Model\ZeroPaidFilter|null $zeroPaid The option to filter pay run entries by negative paid, zero paid and non-zero paid (optional)
     * @param  string|null $departmentCode The option to filter on department code (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeavers The option to filter on whether the employee is a starter or leaver (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy The option to sort by a certain field. Default is Payroll Code (optional)
     * @param  bool|null $sortDescending Whether to sort in ascending or descending order (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?string $searchTerm = null,
        ?\SynergiTech\Staffology\Model\ZeroPaidFilter $zeroPaid = null,
        ?string $departmentCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeavers = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['getPayRunPayRun'][0]
    ): array
    {
        $request = $this->getPayRunPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $searchTerm, $zeroPaid, $departmentCode, $startersLeavers, $sortBy, $sortDescending, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunPayRunAsync
     *
     * Get a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  string|null $searchTerm The option to filter on a search term (optional)
     * @param  \SynergiTech\Staffology\Model\ZeroPaidFilter|null $zeroPaid The option to filter pay run entries by negative paid, zero paid and non-zero paid (optional)
     * @param  string|null $departmentCode The option to filter on department code (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeavers The option to filter on whether the employee is a starter or leaver (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy The option to sort by a certain field. Default is Payroll Code (optional)
     * @param  bool|null $sortDescending Whether to sort in ascending or descending order (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?string $searchTerm = null,
        ?\SynergiTech\Staffology\Model\ZeroPaidFilter $zeroPaid = null,
        ?string $departmentCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeavers = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['getPayRunPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $searchTerm, $zeroPaid, $departmentCode, $startersLeavers, $sortBy, $sortDescending, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunPayRunAsyncWithHttpInfo
     *
     * Get a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  string|null $searchTerm The option to filter on a search term (optional)
     * @param  \SynergiTech\Staffology\Model\ZeroPaidFilter|null $zeroPaid The option to filter pay run entries by negative paid, zero paid and non-zero paid (optional)
     * @param  string|null $departmentCode The option to filter on department code (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeavers The option to filter on whether the employee is a starter or leaver (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy The option to sort by a certain field. Default is Payroll Code (optional)
     * @param  bool|null $sortDescending Whether to sort in ascending or descending order (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?string $searchTerm = null,
        ?\SynergiTech\Staffology\Model\ZeroPaidFilter $zeroPaid = null,
        ?string $departmentCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeavers = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['getPayRunPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->getPayRunPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $searchTerm, $zeroPaid, $departmentCode, $startersLeavers, $sortBy, $sortDescending, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum Zero-based page number, used in conjunction with pageSize (optional)
     * @param  int|null $pageSize The number of items per page (optional)
     * @param  string|null $searchTerm The option to filter on a search term (optional)
     * @param  \SynergiTech\Staffology\Model\ZeroPaidFilter|null $zeroPaid The option to filter pay run entries by negative paid, zero paid and non-zero paid (optional)
     * @param  string|null $departmentCode The option to filter on department code (optional)
     * @param  \SynergiTech\Staffology\Model\StartersLeaversFilter|null $startersLeavers The option to filter on whether the employee is a starter or leaver (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunEntrySortBy|null $sortBy The option to sort by a certain field. Default is Payroll Code (optional)
     * @param  bool|null $sortDescending Whether to sort in ascending or descending order (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        ?string $searchTerm = null,
        ?\SynergiTech\Staffology\Model\ZeroPaidFilter $zeroPaid = null,
        ?string $departmentCode = null,
        ?\SynergiTech\Staffology\Model\StartersLeaversFilter $startersLeavers = null,
        ?\SynergiTech\Staffology\Model\PayRunEntrySortBy $sortBy = null,
        ?bool $sortDescending = false,
        string $contentType = self::contentTypes['getPayRunPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunPayRun'
            );
        }











        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageNum,
            'pageNum', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchTerm,
            'searchTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zeroPaid?->value,
            'zeroPaid', // param base name
            'ZeroPaidFilter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $departmentCode,
            'departmentCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startersLeavers?->value,
            'startersLeavers', // param base name
            'StartersLeaversFilter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortBy?->value,
            'sortBy', // param base name
            'PayRunEntrySortBy', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortDescending,
            'sortDescending', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunStateHistoryPayRun
     *
     * List PayRunStateHistory
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to get the Pay Run history (required)
     * @param  int $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to get the Pay Run history (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The Tax Year for which you want to get the Pay Run history (required)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunStateHistoryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]
     */
    public function getPayRunStateHistoryPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunStateHistoryPayRun'][0]
    ): array
    {
        list($response) = $this->getPayRunStateHistoryPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunStateHistoryPayRunWithHttpInfo
     *
     * List PayRunStateHistory
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to get the Pay Run history (required)
     * @param  int $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to get the Pay Run history (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The Tax Year for which you want to get the Pay Run history (required)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunStateHistoryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]|\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]|\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunStateHistoryPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunStateHistoryPayRun'][0]
    ): array
    {
        $request = $this->getPayRunStateHistoryPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunStateHistoryPayRunAsync
     *
     * List PayRunStateHistory
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to get the Pay Run history (required)
     * @param  int $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to get the Pay Run history (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The Tax Year for which you want to get the Pay Run history (required)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunStateHistoryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunStateHistoryPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunStateHistoryPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunStateHistoryPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunStateHistoryPayRunAsyncWithHttpInfo
     *
     * List PayRunStateHistory
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to get the Pay Run history (required)
     * @param  int $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to get the Pay Run history (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The Tax Year for which you want to get the Pay Run history (required)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunStateHistoryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunStateHistoryPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunStateHistoryPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractPayRunStateHistoryResponse[]';
        $request = $this->getPayRunStateHistoryPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunStateHistoryPayRun'
     *
     * @param  string $employerId The Id of the Employer (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The Pay Period (i.e, Monthly, Weekly) for which you want to get the Pay Run history (required)
     * @param  int $periodNumber The Period (i.e, Tax Month, Tax Week) for which you want to get the Pay Run history (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The Tax Year for which you want to get the Pay Run history (required)
     * @param  int|null $ordinal Indicates whether it uses first, second, third (etc.) PaySchedule for the PayPeriod (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunStateHistoryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunStateHistoryPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunStateHistoryPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunStateHistoryPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunStateHistoryPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunStateHistoryPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunStateHistoryPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/stateHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunWarningsPayRun
     *
     * Get PayRun Warnings
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  int|null $pageNum pageNum (optional)
     * @param  int|null $pageSize pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunWarningsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getPayRunWarningsPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        string $contentType = self::contentTypes['getPayRunWarningsPayRun'][0]
    ): array
    {
        list($response) = $this->getPayRunWarningsPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunWarningsPayRunWithHttpInfo
     *
     * Get PayRun Warnings
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunWarningsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunWarningsPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        string $contentType = self::contentTypes['getPayRunWarningsPayRun'][0]
    ): array
    {
        $request = $this->getPayRunWarningsPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunWarningsPayRunAsync
     *
     * Get PayRun Warnings
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunWarningsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunWarningsPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        string $contentType = self::contentTypes['getPayRunWarningsPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunWarningsPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunWarningsPayRunAsyncWithHttpInfo
     *
     * Get PayRun Warnings
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunWarningsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunWarningsPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        string $contentType = self::contentTypes['getPayRunWarningsPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getPayRunWarningsPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $pageNum, $pageSize, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunWarningsPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  int|null $pageNum (optional)
     * @param  int|null $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunWarningsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunWarningsPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?int $pageNum = null,
        ?int $pageSize = null,
        string $contentType = self::contentTypes['getPayRunWarningsPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunWarningsPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunWarningsPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling getPayRunWarningsPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunWarningsPayRun'
            );
        }





        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/warnings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageNum,
            'pageNum', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayRunsPayRun
     *
     * List PayRuns
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getPayRunsPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunsPayRun'][0]
    ): array
    {
        list($response) = $this->getPayRunsPayRunWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getPayRunsPayRunWithHttpInfo
     *
     * List PayRuns
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayRunsPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunsPayRun'][0]
    ): array
    {
        $request = $this->getPayRunsPayRunRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayRunsPayRunAsync
     *
     * List PayRuns
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunsPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunsPayRun'][0]
    ): PromiseInterface
    {
        return $this->getPayRunsPayRunAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayRunsPayRunAsyncWithHttpInfo
     *
     * List PayRuns
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayRunsPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunsPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getPayRunsPayRunRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayRunsPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayRunsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayRunsPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['getPayRunsPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPayRunsPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPayRunsPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPayRunsPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importPayPayRun
     *
     * Import Pay
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $linesOnly If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false. (optional, default to false)
     * @param  bool|null $append If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false. (optional, default to false)
     * @param  bool|null $updateExisting If set to true then any submitted lines that match the pay code of one (and only one) existing line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines. (optional, default to false)
     * @param  bool|null $validateOnly If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayOptionsImport[]|null $payOptionsImport payOptionsImport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function importPayPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        ?bool $linesOnly = false,
        ?bool $append = false,
        ?bool $updateExisting = false,
        ?bool $validateOnly = false,
        array $payOptionsImport = null,
        string $contentType = self::contentTypes['importPayPayRun'][0]
    ): void
    {
        $this->importPayPayRunWithHttpInfo($employerId, $payPeriod, $ordinal, $linesOnly, $append, $updateExisting, $validateOnly, $payOptionsImport, $contentType);
    }

    /**
     * Operation importPayPayRunWithHttpInfo
     *
     * Import Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $linesOnly If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false. (optional, default to false)
     * @param  bool|null $append If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false. (optional, default to false)
     * @param  bool|null $updateExisting If set to true then any submitted lines that match the pay code of one (and only one) existing line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines. (optional, default to false)
     * @param  bool|null $validateOnly If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayOptionsImport[]|null $payOptionsImport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importPayPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        ?bool $linesOnly = false,
        ?bool $append = false,
        ?bool $updateExisting = false,
        ?bool $validateOnly = false,
        array $payOptionsImport = null,
        string $contentType = self::contentTypes['importPayPayRun'][0]
    ): array
    {
        $request = $this->importPayPayRunRequest($employerId, $payPeriod, $ordinal, $linesOnly, $append, $updateExisting, $validateOnly, $payOptionsImport, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation importPayPayRunAsync
     *
     * Import Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $linesOnly If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false. (optional, default to false)
     * @param  bool|null $append If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false. (optional, default to false)
     * @param  bool|null $updateExisting If set to true then any submitted lines that match the pay code of one (and only one) existing line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines. (optional, default to false)
     * @param  bool|null $validateOnly If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayOptionsImport[]|null $payOptionsImport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importPayPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        ?bool $linesOnly = false,
        ?bool $append = false,
        ?bool $updateExisting = false,
        ?bool $validateOnly = false,
        array $payOptionsImport = null,
        string $contentType = self::contentTypes['importPayPayRun'][0]
    ): PromiseInterface
    {
        return $this->importPayPayRunAsyncWithHttpInfo($employerId, $payPeriod, $ordinal, $linesOnly, $append, $updateExisting, $validateOnly, $payOptionsImport, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importPayPayRunAsyncWithHttpInfo
     *
     * Import Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $linesOnly If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false. (optional, default to false)
     * @param  bool|null $append If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false. (optional, default to false)
     * @param  bool|null $updateExisting If set to true then any submitted lines that match the pay code of one (and only one) existing line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines. (optional, default to false)
     * @param  bool|null $validateOnly If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayOptionsImport[]|null $payOptionsImport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importPayPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        ?bool $linesOnly = false,
        ?bool $append = false,
        ?bool $updateExisting = false,
        ?bool $validateOnly = false,
        array $payOptionsImport = null,
        string $contentType = self::contentTypes['importPayPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->importPayPayRunRequest($employerId, $payPeriod, $ordinal, $linesOnly, $append, $updateExisting, $validateOnly, $payOptionsImport, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importPayPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $linesOnly If set to true then only lines will be imported. Changes to regular pay will be ignored. Defaults to false. (optional, default to false)
     * @param  bool|null $append If set to true then the lines submitted will be appended to existing lines rather than replace them. Defaults to false. (optional, default to false)
     * @param  bool|null $updateExisting If set to true then any submitted lines that match the pay code of one (and only one) existing line will be used to update the value of that lines. Any unmatched lines will be appended to existing lines. (optional, default to false)
     * @param  bool|null $validateOnly If set to true, the import will only be validated for data correctness. If false, the import is validated and then imported. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayOptionsImport[]|null $payOptionsImport (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importPayPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        ?bool $linesOnly = false,
        ?bool $append = false,
        ?bool $updateExisting = false,
        ?bool $validateOnly = false,
        array $payOptionsImport = null,
        string $contentType = self::contentTypes['importPayPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importPayPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling importPayPayRun'
            );
        }








        $resourcePath = '/employers/{employerId}/payrun/{payPeriod}/importpay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $linesOnly,
            'linesOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $append,
            'append', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateExisting,
            'updateExisting', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validateOnly,
            'validateOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payOptionsImport)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payOptionsImport));
            } else {
                $httpBody = $payOptionsImport;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importTimeAndAttendancePayRun
     *
     * Import Time And Attendance
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId|null $providerId providerId (optional)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importTimeAndAttendancePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayOptionsImport[]
     */
    public function importTimeAndAttendancePayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\SynergiTech\Staffology\Model\ExternalDataProviderId $providerId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['importTimeAndAttendancePayRun'][0]
    ): array
    {
        list($response) = $this->importTimeAndAttendancePayRunWithHttpInfo($employerId, $payPeriod, $providerId, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation importTimeAndAttendancePayRunWithHttpInfo
     *
     * Import Time And Attendance
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId|null $providerId (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importTimeAndAttendancePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayOptionsImport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importTimeAndAttendancePayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\SynergiTech\Staffology\Model\ExternalDataProviderId $providerId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['importTimeAndAttendancePayRun'][0]
    ): array
    {
        $request = $this->importTimeAndAttendancePayRunRequest($employerId, $payPeriod, $providerId, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayOptionsImport[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayOptionsImport[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayOptionsImport[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayOptionsImport[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayOptionsImport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importTimeAndAttendancePayRunAsync
     *
     * Import Time And Attendance
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId|null $providerId (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importTimeAndAttendancePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importTimeAndAttendancePayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\SynergiTech\Staffology\Model\ExternalDataProviderId $providerId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['importTimeAndAttendancePayRun'][0]
    ): PromiseInterface
    {
        return $this->importTimeAndAttendancePayRunAsyncWithHttpInfo($employerId, $payPeriod, $providerId, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importTimeAndAttendancePayRunAsyncWithHttpInfo
     *
     * Import Time And Attendance
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId|null $providerId (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importTimeAndAttendancePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importTimeAndAttendancePayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\SynergiTech\Staffology\Model\ExternalDataProviderId $providerId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['importTimeAndAttendancePayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayOptionsImport[]';
        $request = $this->importTimeAndAttendancePayRunRequest($employerId, $payPeriod, $providerId, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importTimeAndAttendancePayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\ExternalDataProviderId|null $providerId (optional)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importTimeAndAttendancePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importTimeAndAttendancePayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\SynergiTech\Staffology\Model\ExternalDataProviderId $providerId = null,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['importTimeAndAttendancePayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importTimeAndAttendancePayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling importTimeAndAttendancePayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{payPeriod}/importtimeandattendance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $providerId?->value,
            'providerId', // param base name
            'ExternalDataProviderId', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importUmbrellaPayPayRun
     *
     * Import Umbrella Pay
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment[]|null $umbrellaPayment umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importUmbrellaPayPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function importUmbrellaPayPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        array $umbrellaPayment = null,
        string $contentType = self::contentTypes['importUmbrellaPayPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->importUmbrellaPayPayRunWithHttpInfo($employerId, $payPeriod, $ordinal, $umbrellaPayment, $contentType);
        return $response;
    }

    /**
     * Operation importUmbrellaPayPayRunWithHttpInfo
     *
     * Import Umbrella Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment[]|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importUmbrellaPayPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function importUmbrellaPayPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        array $umbrellaPayment = null,
        string $contentType = self::contentTypes['importUmbrellaPayPayRun'][0]
    ): array
    {
        $request = $this->importUmbrellaPayPayRunRequest($employerId, $payPeriod, $ordinal, $umbrellaPayment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importUmbrellaPayPayRunAsync
     *
     * Import Umbrella Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment[]|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importUmbrellaPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importUmbrellaPayPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        array $umbrellaPayment = null,
        string $contentType = self::contentTypes['importUmbrellaPayPayRun'][0]
    ): PromiseInterface
    {
        return $this->importUmbrellaPayPayRunAsyncWithHttpInfo($employerId, $payPeriod, $ordinal, $umbrellaPayment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importUmbrellaPayPayRunAsyncWithHttpInfo
     *
     * Import Umbrella Pay
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment[]|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importUmbrellaPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function importUmbrellaPayPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        array $umbrellaPayment = null,
        string $contentType = self::contentTypes['importUmbrellaPayPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->importUmbrellaPayPayRunRequest($employerId, $payPeriod, $ordinal, $umbrellaPayment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importUmbrellaPayPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment[]|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importUmbrellaPayPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importUmbrellaPayPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?int $ordinal = 1,
        array $umbrellaPayment = null,
        string $contentType = self::contentTypes['importUmbrellaPayPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling importUmbrellaPayPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling importUmbrellaPayPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{payPeriod}/importumbrellapay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($umbrellaPayment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($umbrellaPayment));
            } else {
                $httpBody = $umbrellaPayment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lastPayRunEntryForEmployeePayRun
     *
     * Gets the last closed pay run entry for an employee.
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get last pay run entry for. (required)
     * @param  bool|null $isClosed isClosed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunEntry
     */
    public function lastPayRunEntryForEmployeePayRun(
        string $employerId,
        string $employeeId,
        ?bool $isClosed = null,
        string $contentType = self::contentTypes['lastPayRunEntryForEmployeePayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunEntry
    {
        list($response) = $this->lastPayRunEntryForEmployeePayRunWithHttpInfo($employerId, $employeeId, $isClosed, $contentType);
        return $response;
    }

    /**
     * Operation lastPayRunEntryForEmployeePayRunWithHttpInfo
     *
     * Gets the last closed pay run entry for an employee.
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get last pay run entry for. (required)
     * @param  bool|null $isClosed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function lastPayRunEntryForEmployeePayRunWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?bool $isClosed = null,
        string $contentType = self::contentTypes['lastPayRunEntryForEmployeePayRun'][0]
    ): array
    {
        $request = $this->lastPayRunEntryForEmployeePayRunRequest($employerId, $employeeId, $isClosed, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunEntry', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunEntry' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation lastPayRunEntryForEmployeePayRunAsync
     *
     * Gets the last closed pay run entry for an employee.
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get last pay run entry for. (required)
     * @param  bool|null $isClosed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lastPayRunEntryForEmployeePayRunAsync(
        string $employerId,
        string $employeeId,
        ?bool $isClosed = null,
        string $contentType = self::contentTypes['lastPayRunEntryForEmployeePayRun'][0]
    ): PromiseInterface
    {
        return $this->lastPayRunEntryForEmployeePayRunAsyncWithHttpInfo($employerId, $employeeId, $isClosed, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lastPayRunEntryForEmployeePayRunAsyncWithHttpInfo
     *
     * Gets the last closed pay run entry for an employee.
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get last pay run entry for. (required)
     * @param  bool|null $isClosed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lastPayRunEntryForEmployeePayRunAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?bool $isClosed = null,
        string $contentType = self::contentTypes['lastPayRunEntryForEmployeePayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
        $request = $this->lastPayRunEntryForEmployeePayRunRequest($employerId, $employeeId, $isClosed, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lastPayRunEntryForEmployeePayRun'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get last pay run entry for. (required)
     * @param  bool|null $isClosed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function lastPayRunEntryForEmployeePayRunRequest(
        string $employerId,
        string $employeeId,
        ?bool $isClosed = null,
        string $contentType = self::contentTypes['lastPayRunEntryForEmployeePayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling lastPayRunEntryForEmployeePayRun'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling lastPayRunEntryForEmployeePayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/employees/{employeeId}/Last';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isClosed,
            'isClosed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lastPayRunEntryWithPensionYtdValuesForEmployeePayRun
     *
     * Gets last PayRunEntry for a Pension
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get pay run entry for. (required)
     * @param  string $pensionUniqueId pensionUniqueId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunEntry
     */
    public function lastPayRunEntryWithPensionYtdValuesForEmployeePayRun(
        string $employerId,
        string $employeeId,
        string $pensionUniqueId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunEntry
    {
        list($response) = $this->lastPayRunEntryWithPensionYtdValuesForEmployeePayRunWithHttpInfo($employerId, $employeeId, $pensionUniqueId, $taxYear, $contentType);
        return $response;
    }

    /**
     * Operation lastPayRunEntryWithPensionYtdValuesForEmployeePayRunWithHttpInfo
     *
     * Gets last PayRunEntry for a Pension
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get pay run entry for. (required)
     * @param  string $pensionUniqueId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function lastPayRunEntryWithPensionYtdValuesForEmployeePayRunWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $pensionUniqueId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'][0]
    ): array
    {
        $request = $this->lastPayRunEntryWithPensionYtdValuesForEmployeePayRunRequest($employerId, $employeeId, $pensionUniqueId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunEntry', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunEntry' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation lastPayRunEntryWithPensionYtdValuesForEmployeePayRunAsync
     *
     * Gets last PayRunEntry for a Pension
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get pay run entry for. (required)
     * @param  string $pensionUniqueId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lastPayRunEntryWithPensionYtdValuesForEmployeePayRunAsync(
        string $employerId,
        string $employeeId,
        string $pensionUniqueId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'][0]
    ): PromiseInterface
    {
        return $this->lastPayRunEntryWithPensionYtdValuesForEmployeePayRunAsyncWithHttpInfo($employerId, $employeeId, $pensionUniqueId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lastPayRunEntryWithPensionYtdValuesForEmployeePayRunAsyncWithHttpInfo
     *
     * Gets last PayRunEntry for a Pension
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get pay run entry for. (required)
     * @param  string $pensionUniqueId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function lastPayRunEntryWithPensionYtdValuesForEmployeePayRunAsyncWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $pensionUniqueId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
        $request = $this->lastPayRunEntryWithPensionYtdValuesForEmployeePayRunRequest($employerId, $employeeId, $pensionUniqueId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to get pay run entry for. (required)
     * @param  string $pensionUniqueId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function lastPayRunEntryWithPensionYtdValuesForEmployeePayRunRequest(
        string $employerId,
        string $employeeId,
        string $pensionUniqueId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'
            );
        }

        // verify the required parameter 'pensionUniqueId' is set
        if ($pensionUniqueId === null || (is_array($pensionUniqueId) && count($pensionUniqueId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pensionUniqueId when calling lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling lastPayRunEntryWithPensionYtdValuesForEmployeePayRun'
            );
        }


        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/employees/{employeeId}/pension/{pensionUniqueId}/pensionytd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($pensionUniqueId !== null) {
            $resourcePath = str_replace(
                '{' . 'pensionUniqueId' . '}',
                ObjectSerializer::toPathValue($pensionUniqueId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leavePayRun
     *
     * List Leave related to a PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leavePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function leavePayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['leavePayRun'][0]
    ): array
    {
        list($response) = $this->leavePayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation leavePayRunWithHttpInfo
     *
     * List Leave related to a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leavePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function leavePayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['leavePayRun'][0]
    ): array
    {
        $request = $this->leavePayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leavePayRunAsync
     *
     * List Leave related to a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leavePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function leavePayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['leavePayRun'][0]
    ): PromiseInterface
    {
        return $this->leavePayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation leavePayRunAsyncWithHttpInfo
     *
     * List Leave related to a PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leavePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function leavePayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['leavePayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->leavePayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leavePayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leavePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leavePayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['leavePayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling leavePayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling leavePayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling leavePayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling leavePayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEntryUmbrellaPaymentPayRun
     *
     * PayRunEntry Umbrella Payment
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id id (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntryUmbrellaPaymentPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunEntry
     */
    public function payRunEntryUmbrellaPaymentPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment = null,
        string $contentType = self::contentTypes['payRunEntryUmbrellaPaymentPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunEntry
    {
        list($response) = $this->payRunEntryUmbrellaPaymentPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $umbrellaPayment, $contentType);
        return $response;
    }

    /**
     * Operation payRunEntryUmbrellaPaymentPayRunWithHttpInfo
     *
     * PayRunEntry Umbrella Payment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntryUmbrellaPaymentPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEntryUmbrellaPaymentPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment = null,
        string $contentType = self::contentTypes['payRunEntryUmbrellaPaymentPayRun'][0]
    ): array
    {
        $request = $this->payRunEntryUmbrellaPaymentPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $umbrellaPayment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunEntry', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunEntry' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEntryUmbrellaPaymentPayRunAsync
     *
     * PayRunEntry Umbrella Payment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntryUmbrellaPaymentPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunEntryUmbrellaPaymentPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment = null,
        string $contentType = self::contentTypes['payRunEntryUmbrellaPaymentPayRun'][0]
    ): PromiseInterface
    {
        return $this->payRunEntryUmbrellaPaymentPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $umbrellaPayment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEntryUmbrellaPaymentPayRunAsyncWithHttpInfo
     *
     * PayRunEntry Umbrella Payment
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntryUmbrellaPaymentPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function payRunEntryUmbrellaPaymentPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment = null,
        string $contentType = self::contentTypes['payRunEntryUmbrellaPaymentPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
        $request = $this->payRunEntryUmbrellaPaymentPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $umbrellaPayment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEntryUmbrellaPaymentPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \SynergiTech\Staffology\Model\UmbrellaPayment|null $umbrellaPayment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEntryUmbrellaPaymentPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEntryUmbrellaPaymentPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?\SynergiTech\Staffology\Model\UmbrellaPayment $umbrellaPayment = null,
        string $contentType = self::contentTypes['payRunEntryUmbrellaPaymentPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling payRunEntryUmbrellaPaymentPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling payRunEntryUmbrellaPaymentPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling payRunEntryUmbrellaPaymentPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling payRunEntryUmbrellaPaymentPayRun'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling payRunEntryUmbrellaPaymentPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}/umbrella';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($umbrellaPayment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($umbrellaPayment));
            } else {
                $httpBody = $umbrellaPayment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reOpenPayRunPayRun
     *
     * Re-open a PayRun (deprecated)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reOpenPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function reOpenPayRunPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['reOpenPayRunPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->reOpenPayRunPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation reOpenPayRunPayRunWithHttpInfo
     *
     * Re-open a PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reOpenPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function reOpenPayRunPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['reOpenPayRunPayRun'][0]
    ): array
    {
        $request = $this->reOpenPayRunPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reOpenPayRunPayRunAsync
     *
     * Re-open a PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reOpenPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function reOpenPayRunPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['reOpenPayRunPayRun'][0]
    ): PromiseInterface
    {
        return $this->reOpenPayRunPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reOpenPayRunPayRunAsyncWithHttpInfo
     *
     * Re-open a PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reOpenPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function reOpenPayRunPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['reOpenPayRunPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->reOpenPayRunPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reOpenPayRunPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reOpenPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reOpenPayRunPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['reOpenPayRunPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling reOpenPayRunPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling reOpenPayRunPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling reOpenPayRunPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling reOpenPayRunPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/reopen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removePayRunEntriesPayRun
     *
     * Remove PayRunEntries (deprecated)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string[]|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function removePayRunEntriesPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['removePayRunEntriesPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->removePayRunEntriesPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);
        return $response;
    }

    /**
     * Operation removePayRunEntriesPayRunWithHttpInfo
     *
     * Remove PayRunEntries (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function removePayRunEntriesPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['removePayRunEntriesPayRun'][0]
    ): array
    {
        $request = $this->removePayRunEntriesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removePayRunEntriesPayRunAsync
     *
     * Remove PayRunEntries (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function removePayRunEntriesPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['removePayRunEntriesPayRun'][0]
    ): PromiseInterface
    {
        return $this->removePayRunEntriesPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removePayRunEntriesPayRunAsyncWithHttpInfo
     *
     * Remove PayRunEntries (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function removePayRunEntriesPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['removePayRunEntriesPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->removePayRunEntriesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removePayRunEntriesPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removePayRunEntriesPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['removePayRunEntriesPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling removePayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling removePayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling removePayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling removePayRunEntriesPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/removepayrunentries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPayslipEmailsPayRun
     *
     * (Re)send Payslip Emails
     *
     * @param  string $employerId The ID of the employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The pay period of the pay run. (required)
     * @param  int $periodNumber The period number of the pay run. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year of the pay run. (required)
     * @param  int|null $ordinal The ordinal number of the pay run. (optional, default to 1)
     * @param  string|null $id The UniqueId of the pay run entry (optional). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayslipEmailsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function sendPayslipEmailsPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?string $id = null,
        string $contentType = self::contentTypes['sendPayslipEmailsPayRun'][0]
    ): void
    {
        $this->sendPayslipEmailsPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $id, $contentType);
    }

    /**
     * Operation sendPayslipEmailsPayRunWithHttpInfo
     *
     * (Re)send Payslip Emails
     *
     * @param  string $employerId The ID of the employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The pay period of the pay run. (required)
     * @param  int $periodNumber The period number of the pay run. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year of the pay run. (required)
     * @param  int|null $ordinal The ordinal number of the pay run. (optional, default to 1)
     * @param  string|null $id The UniqueId of the pay run entry (optional). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayslipEmailsPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPayslipEmailsPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?string $id = null,
        string $contentType = self::contentTypes['sendPayslipEmailsPayRun'][0]
    ): array
    {
        $request = $this->sendPayslipEmailsPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendPayslipEmailsPayRunAsync
     *
     * (Re)send Payslip Emails
     *
     * @param  string $employerId The ID of the employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The pay period of the pay run. (required)
     * @param  int $periodNumber The period number of the pay run. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year of the pay run. (required)
     * @param  int|null $ordinal The ordinal number of the pay run. (optional, default to 1)
     * @param  string|null $id The UniqueId of the pay run entry (optional). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayslipEmailsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendPayslipEmailsPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?string $id = null,
        string $contentType = self::contentTypes['sendPayslipEmailsPayRun'][0]
    ): PromiseInterface
    {
        return $this->sendPayslipEmailsPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPayslipEmailsPayRunAsyncWithHttpInfo
     *
     * (Re)send Payslip Emails
     *
     * @param  string $employerId The ID of the employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The pay period of the pay run. (required)
     * @param  int $periodNumber The period number of the pay run. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year of the pay run. (required)
     * @param  int|null $ordinal The ordinal number of the pay run. (optional, default to 1)
     * @param  string|null $id The UniqueId of the pay run entry (optional). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayslipEmailsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendPayslipEmailsPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?string $id = null,
        string $contentType = self::contentTypes['sendPayslipEmailsPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->sendPayslipEmailsPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPayslipEmailsPayRun'
     *
     * @param  string $employerId The ID of the employer. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The pay period of the pay run. (required)
     * @param  int $periodNumber The period number of the pay run. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The tax year of the pay run. (required)
     * @param  int|null $ordinal The ordinal number of the pay run. (optional, default to 1)
     * @param  string|null $id The UniqueId of the pay run entry (optional). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPayslipEmailsPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPayslipEmailsPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?string $id = null,
        string $contentType = self::contentTypes['sendPayslipEmailsPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling sendPayslipEmailsPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling sendPayslipEmailsPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling sendPayslipEmailsPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling sendPayslipEmailsPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startNextPayRunPayRun
     *
     * Starts the next PayRun (deprecated)
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function startNextPayRunPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['startNextPayRunPayRun'][0]
    ): void
    {
        $this->startNextPayRunPayRunWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation startNextPayRunPayRunWithHttpInfo
     *
     * Starts the next PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function startNextPayRunPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['startNextPayRunPayRun'][0]
    ): array
    {
        $request = $this->startNextPayRunPayRunRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation startNextPayRunPayRunAsync
     *
     * Starts the next PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startNextPayRunPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['startNextPayRunPayRun'][0]
    ): PromiseInterface
    {
        return $this->startNextPayRunPayRunAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startNextPayRunPayRunAsyncWithHttpInfo
     *
     * Starts the next PayRun (deprecated)
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startNextPayRunPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['startNextPayRunPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->startNextPayRunPayRunRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startNextPayRunPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startNextPayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startNextPayRunPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        string $contentType = self::contentTypes['startNextPayRunPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling startNextPayRunPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling startNextPayRunPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling startNextPayRunPayRun'
            );
        }



        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayRunEntryPayRun
     *
     * Update a PayRunEntry
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  string $id id (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $forceSyncEmployeePayOptions If set to true then changes made to employee pay options will be reflected into the pay run entry. Defaults to false. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayRunEntry|null $payRunEntry payRunEntry (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRunEntry
     */
    public function updatePayRunEntryPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?bool $forceSyncEmployeePayOptions = false,
        ?\SynergiTech\Staffology\Model\PayRunEntry $payRunEntry = null,
        string $contentType = self::contentTypes['updatePayRunEntryPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRunEntry
    {
        list($response) = $this->updatePayRunEntryPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $forceSyncEmployeePayOptions, $payRunEntry, $contentType);
        return $response;
    }

    /**
     * Operation updatePayRunEntryPayRunWithHttpInfo
     *
     * Update a PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forceSyncEmployeePayOptions If set to true then changes made to employee pay options will be reflected into the pay run entry. Defaults to false. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayRunEntry|null $payRunEntry (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRunEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayRunEntryPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?bool $forceSyncEmployeePayOptions = false,
        ?\SynergiTech\Staffology\Model\PayRunEntry $payRunEntry = null,
        string $contentType = self::contentTypes['updatePayRunEntryPayRun'][0]
    ): array
    {
        $request = $this->updatePayRunEntryPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $forceSyncEmployeePayOptions, $payRunEntry, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRunEntry', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRunEntry' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRunEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRunEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePayRunEntryPayRunAsync
     *
     * Update a PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forceSyncEmployeePayOptions If set to true then changes made to employee pay options will be reflected into the pay run entry. Defaults to false. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayRunEntry|null $payRunEntry (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePayRunEntryPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?bool $forceSyncEmployeePayOptions = false,
        ?\SynergiTech\Staffology\Model\PayRunEntry $payRunEntry = null,
        string $contentType = self::contentTypes['updatePayRunEntryPayRun'][0]
    ): PromiseInterface
    {
        return $this->updatePayRunEntryPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $forceSyncEmployeePayOptions, $payRunEntry, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePayRunEntryPayRunAsyncWithHttpInfo
     *
     * Update a PayRunEntry
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forceSyncEmployeePayOptions If set to true then changes made to employee pay options will be reflected into the pay run entry. Defaults to false. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayRunEntry|null $payRunEntry (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePayRunEntryPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?bool $forceSyncEmployeePayOptions = false,
        ?\SynergiTech\Staffology\Model\PayRunEntry $payRunEntry = null,
        string $contentType = self::contentTypes['updatePayRunEntryPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRunEntry';
        $request = $this->updatePayRunEntryPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $id, $ordinal, $forceSyncEmployeePayOptions, $payRunEntry, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayRunEntryPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  string $id (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $forceSyncEmployeePayOptions If set to true then changes made to employee pay options will be reflected into the pay run entry. Defaults to false. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayRunEntry|null $payRunEntry (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunEntryPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePayRunEntryPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $id,
        ?int $ordinal = 1,
        ?bool $forceSyncEmployeePayOptions = false,
        ?\SynergiTech\Staffology\Model\PayRunEntry $payRunEntry = null,
        string $contentType = self::contentTypes['updatePayRunEntryPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePayRunEntryPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling updatePayRunEntryPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling updatePayRunEntryPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling updatePayRunEntryPayRun'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updatePayRunEntryPayRun'
            );
        }





        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $forceSyncEmployeePayOptions,
            'forceSyncEmployeePayOptions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payRunEntry)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payRunEntry));
            } else {
                $httpBody = $payRunEntry;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayRunPayRun
     *
     * Update PayRun
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  bool|null $sendPayslipEmails Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayslipReleaseType|null $payslipReleaseType payslipReleaseType (optional)
     * @param  \DateTime|null $payslipScheduledDateTime payslipScheduledDateTime (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunStateChange|null $payRunStateChange Specify the PayRun state you want to change to and the reason for the change.  Only Open and Finalised states are available at the moment.  Other states are used with Bureau functionality which isn&#39;t currently generally available. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function updatePayRunPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?bool $sendPayslipEmails = false,
        ?\SynergiTech\Staffology\Model\PayslipReleaseType $payslipReleaseType = null,
        ?\DateTime $payslipScheduledDateTime = null,
        ?\SynergiTech\Staffology\Model\PayRunStateChange $payRunStateChange = null,
        string $contentType = self::contentTypes['updatePayRunPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->updatePayRunPayRunWithHttpInfo($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $sendPayslipEmails, $payslipReleaseType, $payslipScheduledDateTime, $payRunStateChange, $contentType);
        return $response;
    }

    /**
     * Operation updatePayRunPayRunWithHttpInfo
     *
     * Update PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $sendPayslipEmails Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayslipReleaseType|null $payslipReleaseType (optional)
     * @param  \DateTime|null $payslipScheduledDateTime (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunStateChange|null $payRunStateChange Specify the PayRun state you want to change to and the reason for the change.  Only Open and Finalised states are available at the moment.  Other states are used with Bureau functionality which isn&#39;t currently generally available. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePayRunPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?bool $sendPayslipEmails = false,
        ?\SynergiTech\Staffology\Model\PayslipReleaseType $payslipReleaseType = null,
        ?\DateTime $payslipScheduledDateTime = null,
        ?\SynergiTech\Staffology\Model\PayRunStateChange $payRunStateChange = null,
        string $contentType = self::contentTypes['updatePayRunPayRun'][0]
    ): array
    {
        $request = $this->updatePayRunPayRunRequest($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $sendPayslipEmails, $payslipReleaseType, $payslipScheduledDateTime, $payRunStateChange, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePayRunPayRunAsync
     *
     * Update PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $sendPayslipEmails Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayslipReleaseType|null $payslipReleaseType (optional)
     * @param  \DateTime|null $payslipScheduledDateTime (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunStateChange|null $payRunStateChange Specify the PayRun state you want to change to and the reason for the change.  Only Open and Finalised states are available at the moment.  Other states are used with Bureau functionality which isn&#39;t currently generally available. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePayRunPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?bool $sendPayslipEmails = false,
        ?\SynergiTech\Staffology\Model\PayslipReleaseType $payslipReleaseType = null,
        ?\DateTime $payslipScheduledDateTime = null,
        ?\SynergiTech\Staffology\Model\PayRunStateChange $payRunStateChange = null,
        string $contentType = self::contentTypes['updatePayRunPayRun'][0]
    ): PromiseInterface
    {
        return $this->updatePayRunPayRunAsyncWithHttpInfo($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $sendPayslipEmails, $payslipReleaseType, $payslipScheduledDateTime, $payRunStateChange, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePayRunPayRunAsyncWithHttpInfo
     *
     * Update PayRun
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $sendPayslipEmails Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayslipReleaseType|null $payslipReleaseType (optional)
     * @param  \DateTime|null $payslipScheduledDateTime (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunStateChange|null $payRunStateChange Specify the PayRun state you want to change to and the reason for the change.  Only Open and Finalised states are available at the moment.  Other states are used with Bureau functionality which isn&#39;t currently generally available. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePayRunPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?bool $sendPayslipEmails = false,
        ?\SynergiTech\Staffology\Model\PayslipReleaseType $payslipReleaseType = null,
        ?\DateTime $payslipScheduledDateTime = null,
        ?\SynergiTech\Staffology\Model\PayRunStateChange $payRunStateChange = null,
        string $contentType = self::contentTypes['updatePayRunPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->updatePayRunPayRunRequest($employerId, $taxYear, $payPeriod, $periodNumber, $ordinal, $sendPayslipEmails, $payslipReleaseType, $payslipScheduledDateTime, $payRunStateChange, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayRunPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  bool|null $sendPayslipEmails Only relevant if setting the State to Finalised. Set to true if you want to have payslips emailed to employees. (optional, default to false)
     * @param  \SynergiTech\Staffology\Model\PayslipReleaseType|null $payslipReleaseType (optional)
     * @param  \DateTime|null $payslipScheduledDateTime (optional)
     * @param  \SynergiTech\Staffology\Model\PayRunStateChange|null $payRunStateChange Specify the PayRun state you want to change to and the reason for the change.  Only Open and Finalised states are available at the moment.  Other states are used with Bureau functionality which isn&#39;t currently generally available. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayRunPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePayRunPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        ?int $ordinal = 1,
        ?bool $sendPayslipEmails = false,
        ?\SynergiTech\Staffology\Model\PayslipReleaseType $payslipReleaseType = null,
        ?\DateTime $payslipScheduledDateTime = null,
        ?\SynergiTech\Staffology\Model\PayRunStateChange $payRunStateChange = null,
        string $contentType = self::contentTypes['updatePayRunPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePayRunPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling updatePayRunPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling updatePayRunPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling updatePayRunPayRun'
            );
        }







        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sendPayslipEmails,
            'sendPayslipEmails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payslipReleaseType?->value,
            'payslipReleaseType', // param base name
            'PayslipReleaseType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payslipScheduledDateTime,
            'payslipScheduledDateTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payRunStateChange)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payRunStateChange));
            } else {
                $httpBody = $payRunStateChange;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentDatePayRun
     *
     * Set PaymentDate
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  \DateTime|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentDatePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function updatePaymentDatePayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?\DateTime $body = null,
        string $contentType = self::contentTypes['updatePaymentDatePayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->updatePaymentDatePayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $body, $contentType);
        return $response;
    }

    /**
     * Operation updatePaymentDatePayRunWithHttpInfo
     *
     * Set PaymentDate
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentDatePayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentDatePayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?\DateTime $body = null,
        string $contentType = self::contentTypes['updatePaymentDatePayRun'][0]
    ): array
    {
        $request = $this->updatePaymentDatePayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentDatePayRunAsync
     *
     * Set PaymentDate
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentDatePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaymentDatePayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?\DateTime $body = null,
        string $contentType = self::contentTypes['updatePaymentDatePayRun'][0]
    ): PromiseInterface
    {
        return $this->updatePaymentDatePayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentDatePayRunAsyncWithHttpInfo
     *
     * Set PaymentDate
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentDatePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaymentDatePayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?\DateTime $body = null,
        string $contentType = self::contentTypes['updatePaymentDatePayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->updatePaymentDatePayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentDatePayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  \DateTime|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentDatePayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentDatePayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        ?\DateTime $body = null,
        string $contentType = self::contentTypes['updatePaymentDatePayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePaymentDatePayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling updatePaymentDatePayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling updatePaymentDatePayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling updatePaymentDatePayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/paymentdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ytdPayRun
     *
     * Update YTD
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  \SplFileObject|null $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeYtdValues[]
     */
    public function ytdPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['ytdPayRun'][0]
    ): array
    {
        list($response) = $this->ytdPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $file, $contentType);
        return $response;
    }

    /**
     * Operation ytdPayRunWithHttpInfo
     *
     * Update YTD
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeYtdValues[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ytdPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['ytdPayRun'][0]
    ): array
    {
        $request = $this->ytdPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeYtdValues[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeYtdValues[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeYtdValues[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeYtdValues[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeYtdValues[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ytdPayRunAsync
     *
     * Update YTD
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function ytdPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['ytdPayRun'][0]
    ): PromiseInterface
    {
        return $this->ytdPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ytdPayRunAsyncWithHttpInfo
     *
     * Update YTD
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function ytdPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['ytdPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeYtdValues[]';
        $request = $this->ytdPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ytdPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional)
     * @param  \SplFileObject|null $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ytdPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ytdPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SplFileObject $file = null,
        string $contentType = self::contentTypes['ytdPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling ytdPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling ytdPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling ytdPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling ytdPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/ytd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = $paramFile instanceof \Psr\Http\Message\StreamInterface
                    ? $paramFile
                    : \GuzzleHttp\Psr7\Utils::tryFopen(
                        ObjectSerializer::toFormValue($paramFile),
                        'rb'
                    );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zeroisePayRunEntriesPayRun
     *
     * Zeroise PayRunEntries
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod payPeriod (required)
     * @param  int $periodNumber periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear taxYear (required)
     * @param  int|null $ordinal ordinal (optional, default to 1)
     * @param  string[]|null $requestBody requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zeroisePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PayRun
     */
    public function zeroisePayRunEntriesPayRun(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['zeroisePayRunEntriesPayRun'][0]
    ): \SynergiTech\Staffology\Model\PayRun
    {
        list($response) = $this->zeroisePayRunEntriesPayRunWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);
        return $response;
    }

    /**
     * Operation zeroisePayRunEntriesPayRunWithHttpInfo
     *
     * Zeroise PayRunEntries
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zeroisePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PayRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function zeroisePayRunEntriesPayRunWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['zeroisePayRunEntriesPayRun'][0]
    ): array
    {
        $request = $this->zeroisePayRunEntriesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PayRun', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PayRun' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PayRun', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PayRun';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PayRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zeroisePayRunEntriesPayRunAsync
     *
     * Zeroise PayRunEntries
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zeroisePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function zeroisePayRunEntriesPayRunAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['zeroisePayRunEntriesPayRun'][0]
    ): PromiseInterface
    {
        return $this->zeroisePayRunEntriesPayRunAsyncWithHttpInfo($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zeroisePayRunEntriesPayRunAsyncWithHttpInfo
     *
     * Zeroise PayRunEntries
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zeroisePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function zeroisePayRunEntriesPayRunAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['zeroisePayRunEntriesPayRun'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PayRun';
        $request = $this->zeroisePayRunEntriesPayRunRequest($employerId, $payPeriod, $periodNumber, $taxYear, $ordinal, $requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zeroisePayRunEntriesPayRun'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod (required)
     * @param  int $periodNumber (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear (required)
     * @param  int|null $ordinal (optional, default to 1)
     * @param  string[]|null $requestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['zeroisePayRunEntriesPayRun'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function zeroisePayRunEntriesPayRunRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        int $periodNumber,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = 1,
        array $requestBody = null,
        string $contentType = self::contentTypes['zeroisePayRunEntriesPayRun'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling zeroisePayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling zeroisePayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling zeroisePayRunEntriesPayRun'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling zeroisePayRunEntriesPayRun'
            );
        }




        $resourcePath = '/employers/{employerId}/payrun/{taxYear}/{payPeriod}/{periodNumber}/zeroise';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
