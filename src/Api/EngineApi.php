<?php
/**
 * EngineApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EngineApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EngineApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'calculateNiEngine' => [
            'application/json',
        ],
        'calculateTaxEngine' => [
            'application/json',
        ],
        'configEngine' => [
            'application/json',
        ],
        'getNationalInsuranceThresholdsEngine' => [
            'application/json',
        ],
        'getTenantBrandingEngine' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation calculateNiEngine
     *
     * Calculate NI due.
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  string|null $niCategory The letter from the NI table (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateNiEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NationalInsuranceCalculation
     */
    public function calculateNiEngine(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?float $gross = null,
        ?string $niCategory = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['calculateNiEngine'][0]
    ): \SynergiTech\Staffology\Model\NationalInsuranceCalculation
    {
        list($response) = $this->calculateNiEngineWithHttpInfo($taxYear, $gross, $niCategory, $payPeriod, $contentType);
        return $response;
    }

    /**
     * Operation calculateNiEngineWithHttpInfo
     *
     * Calculate NI due.
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  string|null $niCategory The letter from the NI table (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateNiEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NationalInsuranceCalculation, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculateNiEngineWithHttpInfo(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?float $gross = null,
        ?string $niCategory = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['calculateNiEngine'][0]
    ): array
    {
        $request = $this->calculateNiEngineRequest($taxYear, $gross, $niCategory, $payPeriod, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NationalInsuranceCalculation', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NationalInsuranceCalculation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NationalInsuranceCalculation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NationalInsuranceCalculation';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NationalInsuranceCalculation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation calculateNiEngineAsync
     *
     * Calculate NI due.
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  string|null $niCategory The letter from the NI table (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateNiEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function calculateNiEngineAsync(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?float $gross = null,
        ?string $niCategory = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['calculateNiEngine'][0]
    ): PromiseInterface
    {
        return $this->calculateNiEngineAsyncWithHttpInfo($taxYear, $gross, $niCategory, $payPeriod, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation calculateNiEngineAsyncWithHttpInfo
     *
     * Calculate NI due.
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  string|null $niCategory The letter from the NI table (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateNiEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function calculateNiEngineAsyncWithHttpInfo(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?float $gross = null,
        ?string $niCategory = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['calculateNiEngine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NationalInsuranceCalculation';
        $request = $this->calculateNiEngineRequest($taxYear, $gross, $niCategory, $payPeriod, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'calculateNiEngine'
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  string|null $niCategory The letter from the NI table (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateNiEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function calculateNiEngineRequest(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?float $gross = null,
        ?string $niCategory = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        string $contentType = self::contentTypes['calculateNiEngine'][0]
    ): Request
    {






        $resourcePath = '/engine/ni';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gross,
            'gross', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $niCategory,
            'niCategory', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation calculateTaxEngine
     *
     * Calculate Tax due
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  string|null $taxCode If not provided then the default code for the tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  \DateTime|null $periodStart periodStart (optional)
     * @param  \DateTime|null $periodEnd periodEnd (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  int|null $period The period that this payment is being made for (optional, default to 1)
     * @param  bool|null $week1 If set to true then tax will be calculated in a Week1/Month1 basis (optional, default to false)
     * @param  float|null $grossToDate Gross pay to date (optional, default to 0)
     * @param  float|null $taxToDate Tax paid to date (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateTaxEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function calculateTaxEngine(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $taxCode = null,
        ?float $gross = null,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $period = 1,
        ?bool $week1 = false,
        ?float $grossToDate = 0,
        ?float $taxToDate = 0,
        string $contentType = self::contentTypes['calculateTaxEngine'][0]
    ): float
    {
        list($response) = $this->calculateTaxEngineWithHttpInfo($taxYear, $taxCode, $gross, $periodStart, $periodEnd, $payPeriod, $period, $week1, $grossToDate, $taxToDate, $contentType);
        return $response;
    }

    /**
     * Operation calculateTaxEngineWithHttpInfo
     *
     * Calculate Tax due
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  string|null $taxCode If not provided then the default code for the tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  int|null $period The period that this payment is being made for (optional, default to 1)
     * @param  bool|null $week1 If set to true then tax will be calculated in a Week1/Month1 basis (optional, default to false)
     * @param  float|null $grossToDate Gross pay to date (optional, default to 0)
     * @param  float|null $taxToDate Tax paid to date (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateTaxEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculateTaxEngineWithHttpInfo(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $taxCode = null,
        ?float $gross = null,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $period = 1,
        ?bool $week1 = false,
        ?float $grossToDate = 0,
        ?float $taxToDate = 0,
        string $contentType = self::contentTypes['calculateTaxEngine'][0]
    ): array
    {
        $request = $this->calculateTaxEngineRequest($taxYear, $taxCode, $gross, $periodStart, $periodEnd, $payPeriod, $period, $week1, $grossToDate, $taxToDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation calculateTaxEngineAsync
     *
     * Calculate Tax due
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  string|null $taxCode If not provided then the default code for the tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  int|null $period The period that this payment is being made for (optional, default to 1)
     * @param  bool|null $week1 If set to true then tax will be calculated in a Week1/Month1 basis (optional, default to false)
     * @param  float|null $grossToDate Gross pay to date (optional, default to 0)
     * @param  float|null $taxToDate Tax paid to date (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateTaxEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function calculateTaxEngineAsync(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $taxCode = null,
        ?float $gross = null,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $period = 1,
        ?bool $week1 = false,
        ?float $grossToDate = 0,
        ?float $taxToDate = 0,
        string $contentType = self::contentTypes['calculateTaxEngine'][0]
    ): PromiseInterface
    {
        return $this->calculateTaxEngineAsyncWithHttpInfo($taxYear, $taxCode, $gross, $periodStart, $periodEnd, $payPeriod, $period, $week1, $grossToDate, $taxToDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation calculateTaxEngineAsyncWithHttpInfo
     *
     * Calculate Tax due
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  string|null $taxCode If not provided then the default code for the tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  int|null $period The period that this payment is being made for (optional, default to 1)
     * @param  bool|null $week1 If set to true then tax will be calculated in a Week1/Month1 basis (optional, default to false)
     * @param  float|null $grossToDate Gross pay to date (optional, default to 0)
     * @param  float|null $taxToDate Tax paid to date (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateTaxEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function calculateTaxEngineAsyncWithHttpInfo(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $taxCode = null,
        ?float $gross = null,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $period = 1,
        ?bool $week1 = false,
        ?float $grossToDate = 0,
        ?float $taxToDate = 0,
        string $contentType = self::contentTypes['calculateTaxEngine'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->calculateTaxEngineRequest($taxYear, $taxCode, $gross, $periodStart, $periodEnd, $payPeriod, $period, $week1, $grossToDate, $taxToDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'calculateTaxEngine'
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear If not provided then current tax year will be used. (optional)
     * @param  string|null $taxCode If not provided then the default code for the tax year will be used. (optional)
     * @param  float|null $gross The gross amount for which tax should be calculated. (optional)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The PayPeriod (Weekly, Monthly, etc) (optional)
     * @param  int|null $period The period that this payment is being made for (optional, default to 1)
     * @param  bool|null $week1 If set to true then tax will be calculated in a Week1/Month1 basis (optional, default to false)
     * @param  float|null $grossToDate Gross pay to date (optional, default to 0)
     * @param  float|null $taxToDate Tax paid to date (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['calculateTaxEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function calculateTaxEngineRequest(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        ?string $taxCode = null,
        ?float $gross = null,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?int $period = 1,
        ?bool $week1 = false,
        ?float $grossToDate = 0,
        ?float $taxToDate = 0,
        string $contentType = self::contentTypes['calculateTaxEngine'][0]
    ): Request
    {












        $resourcePath = '/engine/tax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxCode,
            'taxCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gross,
            'gross', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodStart,
            'periodStart', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodEnd,
            'periodEnd', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod?->value,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $week1,
            'week1', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $grossToDate,
            'grossToDate', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxToDate,
            'taxToDate', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation configEngine
     *
     * Get Configuration
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The year that you want to retrieve details for. If not provided then current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\TaxYearConfig
     */
    public function configEngine(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['configEngine'][0]
    ): \SynergiTech\Staffology\Model\TaxYearConfig
    {
        list($response) = $this->configEngineWithHttpInfo($taxYear, $contentType);
        return $response;
    }

    /**
     * Operation configEngineWithHttpInfo
     *
     * Get Configuration
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The year that you want to retrieve details for. If not provided then current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\TaxYearConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function configEngineWithHttpInfo(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['configEngine'][0]
    ): array
    {
        $request = $this->configEngineRequest($taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\TaxYearConfig', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\TaxYearConfig' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\TaxYearConfig', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\TaxYearConfig';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\TaxYearConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation configEngineAsync
     *
     * Get Configuration
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The year that you want to retrieve details for. If not provided then current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function configEngineAsync(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['configEngine'][0]
    ): PromiseInterface
    {
        return $this->configEngineAsyncWithHttpInfo($taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation configEngineAsyncWithHttpInfo
     *
     * Get Configuration
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The year that you want to retrieve details for. If not provided then current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function configEngineAsyncWithHttpInfo(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['configEngine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\TaxYearConfig';
        $request = $this->configEngineRequest($taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'configEngine'
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear|null $taxYear The year that you want to retrieve details for. If not provided then current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function configEngineRequest(
        ?\SynergiTech\Staffology\Model\TaxYear $taxYear = null,
        string $contentType = self::contentTypes['configEngine'][0]
    ): Request
    {



        $resourcePath = '/engine/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxYear?->value,
            'taxYear', // param base name
            'TaxYear', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNationalInsuranceThresholdsEngine
     *
     * Get National Insurance Thresholds
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, monthly) that you want to retrieve details for. (required)
     * @param  \DateTime|null $periodStart periodStart (optional)
     * @param  \DateTime|null $periodEnd periodEnd (optional)
     * @param  \DateTime|null $effectiveDate The date as of which you want to retrieve details for. If not provided then latest available details for the current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNationalInsuranceThresholdsEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues
     */
    public function getNationalInsuranceThresholdsEngine(
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\DateTime $effectiveDate = null,
        string $contentType = self::contentTypes['getNationalInsuranceThresholdsEngine'][0]
    ): \SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues
    {
        list($response) = $this->getNationalInsuranceThresholdsEngineWithHttpInfo($taxYear, $payPeriod, $periodStart, $periodEnd, $effectiveDate, $contentType);
        return $response;
    }

    /**
     * Operation getNationalInsuranceThresholdsEngineWithHttpInfo
     *
     * Get National Insurance Thresholds
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, monthly) that you want to retrieve details for. (required)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \DateTime|null $effectiveDate The date as of which you want to retrieve details for. If not provided then latest available details for the current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNationalInsuranceThresholdsEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNationalInsuranceThresholdsEngineWithHttpInfo(
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\DateTime $effectiveDate = null,
        string $contentType = self::contentTypes['getNationalInsuranceThresholdsEngine'][0]
    ): array
    {
        $request = $this->getNationalInsuranceThresholdsEngineRequest($taxYear, $payPeriod, $periodStart, $periodEnd, $effectiveDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNationalInsuranceThresholdsEngineAsync
     *
     * Get National Insurance Thresholds
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, monthly) that you want to retrieve details for. (required)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \DateTime|null $effectiveDate The date as of which you want to retrieve details for. If not provided then latest available details for the current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNationalInsuranceThresholdsEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getNationalInsuranceThresholdsEngineAsync(
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\DateTime $effectiveDate = null,
        string $contentType = self::contentTypes['getNationalInsuranceThresholdsEngine'][0]
    ): PromiseInterface
    {
        return $this->getNationalInsuranceThresholdsEngineAsyncWithHttpInfo($taxYear, $payPeriod, $periodStart, $periodEnd, $effectiveDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNationalInsuranceThresholdsEngineAsyncWithHttpInfo
     *
     * Get National Insurance Thresholds
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, monthly) that you want to retrieve details for. (required)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \DateTime|null $effectiveDate The date as of which you want to retrieve details for. If not provided then latest available details for the current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNationalInsuranceThresholdsEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getNationalInsuranceThresholdsEngineAsyncWithHttpInfo(
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\DateTime $effectiveDate = null,
        string $contentType = self::contentTypes['getNationalInsuranceThresholdsEngine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\NationalInsuranceCalculationPeriodValues';
        $request = $this->getNationalInsuranceThresholdsEngineRequest($taxYear, $payPeriod, $periodStart, $periodEnd, $effectiveDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNationalInsuranceThresholdsEngine'
     *
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, monthly) that you want to retrieve details for. (required)
     * @param  \DateTime|null $periodStart (optional)
     * @param  \DateTime|null $periodEnd (optional)
     * @param  \DateTime|null $effectiveDate The date as of which you want to retrieve details for. If not provided then latest available details for the current tax year will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNationalInsuranceThresholdsEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNationalInsuranceThresholdsEngineRequest(
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        ?\DateTime $periodStart = null,
        ?\DateTime $periodEnd = null,
        ?\DateTime $effectiveDate = null,
        string $contentType = self::contentTypes['getNationalInsuranceThresholdsEngine'][0]
    ): Request
    {

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getNationalInsuranceThresholdsEngine'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getNationalInsuranceThresholdsEngine'
            );
        }





        $resourcePath = '/engine/config/{taxYear}/ni/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodStart,
            'periodStart', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodEnd,
            'periodEnd', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effectiveDate,
            'effectiveDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTenantBrandingEngine
     *
     * Tenant Branding
     *
     * @param  string $brandCode The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenantBrandingEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Tenant
     */
    public function getTenantBrandingEngine(
        string $brandCode,
        string $contentType = self::contentTypes['getTenantBrandingEngine'][0]
    ): \SynergiTech\Staffology\Model\Tenant
    {
        list($response) = $this->getTenantBrandingEngineWithHttpInfo($brandCode, $contentType);
        return $response;
    }

    /**
     * Operation getTenantBrandingEngineWithHttpInfo
     *
     * Tenant Branding
     *
     * @param  string $brandCode The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenantBrandingEngine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Tenant, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTenantBrandingEngineWithHttpInfo(
        string $brandCode,
        string $contentType = self::contentTypes['getTenantBrandingEngine'][0]
    ): array
    {
        $request = $this->getTenantBrandingEngineRequest($brandCode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Tenant', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Tenant' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Tenant', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Tenant';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Tenant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTenantBrandingEngineAsync
     *
     * Tenant Branding
     *
     * @param  string $brandCode The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenantBrandingEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTenantBrandingEngineAsync(
        string $brandCode,
        string $contentType = self::contentTypes['getTenantBrandingEngine'][0]
    ): PromiseInterface
    {
        return $this->getTenantBrandingEngineAsyncWithHttpInfo($brandCode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTenantBrandingEngineAsyncWithHttpInfo
     *
     * Tenant Branding
     *
     * @param  string $brandCode The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenantBrandingEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getTenantBrandingEngineAsyncWithHttpInfo(
        string $brandCode,
        string $contentType = self::contentTypes['getTenantBrandingEngine'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Tenant';
        $request = $this->getTenantBrandingEngineRequest($brandCode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTenantBrandingEngine'
     *
     * @param  string $brandCode The Id of the Tenant you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTenantBrandingEngine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTenantBrandingEngineRequest(
        string $brandCode,
        string $contentType = self::contentTypes['getTenantBrandingEngine'][0]
    ): Request
    {

        // verify the required parameter 'brandCode' is set
        if ($brandCode === null || (is_array($brandCode) && count($brandCode) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $brandCode when calling getTenantBrandingEngine'
            );
        }


        $resourcePath = '/engine/branding/{brandCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brandCode !== null) {
            $resourcePath = str_replace(
                '{' . 'brandCode' . '}',
                ObjectSerializer::toPathValue($brandCode),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
