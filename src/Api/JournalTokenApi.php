<?php
/**
 * JournalTokenApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * JournalTokenApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JournalTokenApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createCostCentreJournalOverridesJournalToken' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createDepartmentJournalOverridesJournalToken' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createJournalToken' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteJournalToken' => [
            'application/json',
        ],
        'getCostCentreJournalOverridesListJournalToken' => [
            'application/json',
        ],
        'getDepartmentJournalOverridesListJournalToken' => [
            'application/json',
        ],
        'getJournalToken' => [
            'application/json',
        ],
        'indexJournalToken' => [
            'application/json',
        ],
        'updateCostCentreJournalOverridesJournalToken' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateDepartmentJournalOverridesJournalToken' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateJournalToken' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createCostCentreJournalOverridesJournalToken
     *
     * Create CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesRequest[]|null $contractCostCentreJournalOverridesRequest contractCostCentreJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]
     */
    public function createCostCentreJournalOverridesJournalToken(
        string $employerId,
        string $costCentreId,
        ?array $contractCostCentreJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createCostCentreJournalOverridesJournalToken'][0]
    ): array
    {
        list($response) = $this->createCostCentreJournalOverridesJournalTokenWithHttpInfo($employerId, $costCentreId, $contractCostCentreJournalOverridesRequest, $contentType);
        return $response;
    }

    /**
     * Operation createCostCentreJournalOverridesJournalTokenWithHttpInfo
     *
     * Create CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesRequest[]|null $contractCostCentreJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createCostCentreJournalOverridesJournalTokenWithHttpInfo(
        string $employerId,
        string $costCentreId,
        ?array $contractCostCentreJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createCostCentreJournalOverridesJournalToken'][0]
    ): array
    {
        $request = $this->createCostCentreJournalOverridesJournalTokenRequest($employerId, $costCentreId, $contractCostCentreJournalOverridesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCostCentreJournalOverridesJournalTokenAsync
     *
     * Create CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesRequest[]|null $contractCostCentreJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createCostCentreJournalOverridesJournalTokenAsync(
        string $employerId,
        string $costCentreId,
        ?array $contractCostCentreJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createCostCentreJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        return $this->createCostCentreJournalOverridesJournalTokenAsyncWithHttpInfo($employerId, $costCentreId, $contractCostCentreJournalOverridesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCostCentreJournalOverridesJournalTokenAsyncWithHttpInfo
     *
     * Create CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesRequest[]|null $contractCostCentreJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createCostCentreJournalOverridesJournalTokenAsyncWithHttpInfo(
        $employerId,
        $costCentreId,
        $contractCostCentreJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createCostCentreJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]';
        $request = $this->createCostCentreJournalOverridesJournalTokenRequest($employerId, $costCentreId, $contractCostCentreJournalOverridesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCostCentreJournalOverridesJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesRequest[]|null $contractCostCentreJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCostCentreJournalOverridesJournalTokenRequest(
        $employerId,
        $costCentreId,
        $contractCostCentreJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createCostCentreJournalOverridesJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createCostCentreJournalOverridesJournalToken'
            );
        }

        // verify the required parameter 'costCentreId' is set
        if ($costCentreId === null || (is_array($costCentreId) && count($costCentreId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $costCentreId when calling createCostCentreJournalOverridesJournalToken'
            );
        }



        $resourcePath = '/employers/{employerId}/journaltokens/{costCentreId}/costcentrejournaloverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($costCentreId !== null) {
            $resourcePath = str_replace(
                '{' . 'costCentreId' . '}',
                ObjectSerializer::toPathValue($costCentreId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractCostCentreJournalOverridesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractCostCentreJournalOverridesRequest));
            } else {
                $httpBody = $contractCostCentreJournalOverridesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDepartmentJournalOverridesJournalToken
     *
     * Create Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesRequest[]|null $contractDepartmentJournalOverridesRequest contractDepartmentJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]
     */
    public function createDepartmentJournalOverridesJournalToken(
        string $employerId,
        string $departmentId,
        ?array $contractDepartmentJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createDepartmentJournalOverridesJournalToken'][0]
    ): array
    {
        list($response) = $this->createDepartmentJournalOverridesJournalTokenWithHttpInfo($employerId, $departmentId, $contractDepartmentJournalOverridesRequest, $contentType);
        return $response;
    }

    /**
     * Operation createDepartmentJournalOverridesJournalTokenWithHttpInfo
     *
     * Create Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesRequest[]|null $contractDepartmentJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createDepartmentJournalOverridesJournalTokenWithHttpInfo(
        string $employerId,
        string $departmentId,
        ?array $contractDepartmentJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createDepartmentJournalOverridesJournalToken'][0]
    ): array
    {
        $request = $this->createDepartmentJournalOverridesJournalTokenRequest($employerId, $departmentId, $contractDepartmentJournalOverridesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDepartmentJournalOverridesJournalTokenAsync
     *
     * Create Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesRequest[]|null $contractDepartmentJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDepartmentJournalOverridesJournalTokenAsync(
        string $employerId,
        string $departmentId,
        ?array $contractDepartmentJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createDepartmentJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        return $this->createDepartmentJournalOverridesJournalTokenAsyncWithHttpInfo($employerId, $departmentId, $contractDepartmentJournalOverridesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDepartmentJournalOverridesJournalTokenAsyncWithHttpInfo
     *
     * Create Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesRequest[]|null $contractDepartmentJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDepartmentJournalOverridesJournalTokenAsyncWithHttpInfo(
        $employerId,
        $departmentId,
        $contractDepartmentJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createDepartmentJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]';
        $request = $this->createDepartmentJournalOverridesJournalTokenRequest($employerId, $departmentId, $contractDepartmentJournalOverridesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDepartmentJournalOverridesJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to create Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesRequest[]|null $contractDepartmentJournalOverridesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDepartmentJournalOverridesJournalTokenRequest(
        $employerId,
        $departmentId,
        $contractDepartmentJournalOverridesRequest = null,
        string $contentType = self::contentTypes['createDepartmentJournalOverridesJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createDepartmentJournalOverridesJournalToken'
            );
        }

        // verify the required parameter 'departmentId' is set
        if ($departmentId === null || (is_array($departmentId) && count($departmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $departmentId when calling createDepartmentJournalOverridesJournalToken'
            );
        }



        $resourcePath = '/employers/{employerId}/journaltokens/{departmentId}/departmentjournaloverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($departmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentId' . '}',
                ObjectSerializer::toPathValue($departmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractDepartmentJournalOverridesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractDepartmentJournalOverridesRequest));
            } else {
                $httpBody = $contractDepartmentJournalOverridesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createJournalToken
     *
     * Create Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Token (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractJournalTokenResponse
     */
    public function createJournalToken(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractJournalTokenRequest $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['createJournalToken'][0]
    ): \SynergiTech\Staffology\Model\ContractJournalTokenResponse
    {
        list($response) = $this->createJournalTokenWithHttpInfo($employerId, $contractJournalTokenRequest, $contentType);
        return $response;
    }

    /**
     * Operation createJournalTokenWithHttpInfo
     *
     * Create Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Token (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractJournalTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJournalTokenWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractJournalTokenRequest $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['createJournalToken'][0]
    ): array
    {
        $request = $this->createJournalTokenRequest($employerId, $contractJournalTokenRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractJournalTokenResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractJournalTokenResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractJournalTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractJournalTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJournalTokenAsync
     *
     * Create Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Token (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createJournalTokenAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractJournalTokenRequest $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['createJournalToken'][0]
    ): PromiseInterface
    {
        return $this->createJournalTokenAsyncWithHttpInfo($employerId, $contractJournalTokenRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJournalTokenAsyncWithHttpInfo
     *
     * Create Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Token (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createJournalTokenAsyncWithHttpInfo(
        $employerId,
        $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['createJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponse';
        $request = $this->createJournalTokenRequest($employerId, $contractJournalTokenRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want to create Journal Token (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createJournalTokenRequest(
        $employerId,
        $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['createJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createJournalToken'
            );
        }



        $resourcePath = '/employers/{employerId}/journaltokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractJournalTokenRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractJournalTokenRequest));
            } else {
                $httpBody = $contractJournalTokenRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJournalToken
     *
     * Delete Journal Token
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteJournalToken(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteJournalToken'][0]
    ): void
    {
        $this->deleteJournalTokenWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation deleteJournalTokenWithHttpInfo
     *
     * Delete Journal Token
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJournalTokenWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteJournalToken'][0]
    ): array
    {
        $request = $this->deleteJournalTokenRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJournalTokenAsync
     *
     * Delete Journal Token
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteJournalTokenAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteJournalToken'][0]
    ): PromiseInterface
    {
        return $this->deleteJournalTokenAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteJournalTokenAsyncWithHttpInfo
     *
     * Delete Journal Token
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteJournalTokenAsyncWithHttpInfo(
        $employerId,
        $id,
        string $contentType = self::contentTypes['deleteJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteJournalTokenRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteJournalToken'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteJournalTokenRequest(
        $employerId,
        $id,
        string $contentType = self::contentTypes['deleteJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteJournalToken'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteJournalToken'
            );
        }


        $resourcePath = '/employers/{employerId}/journaltokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCostCentreJournalOverridesListJournalToken
     *
     * List CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]
     */
    public function getCostCentreJournalOverridesListJournalToken(
        string $employerId,
        string $costCentreId,
        string $contentType = self::contentTypes['getCostCentreJournalOverridesListJournalToken'][0]
    ): array
    {
        list($response) = $this->getCostCentreJournalOverridesListJournalTokenWithHttpInfo($employerId, $costCentreId, $contentType);
        return $response;
    }

    /**
     * Operation getCostCentreJournalOverridesListJournalTokenWithHttpInfo
     *
     * List CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCostCentreJournalOverridesListJournalTokenWithHttpInfo(
        string $employerId,
        string $costCentreId,
        string $contentType = self::contentTypes['getCostCentreJournalOverridesListJournalToken'][0]
    ): array
    {
        $request = $this->getCostCentreJournalOverridesListJournalTokenRequest($employerId, $costCentreId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCostCentreJournalOverridesListJournalTokenAsync
     *
     * List CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCostCentreJournalOverridesListJournalTokenAsync(
        string $employerId,
        string $costCentreId,
        string $contentType = self::contentTypes['getCostCentreJournalOverridesListJournalToken'][0]
    ): PromiseInterface
    {
        return $this->getCostCentreJournalOverridesListJournalTokenAsyncWithHttpInfo($employerId, $costCentreId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCostCentreJournalOverridesListJournalTokenAsyncWithHttpInfo
     *
     * List CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCostCentreJournalOverridesListJournalTokenAsyncWithHttpInfo(
        $employerId,
        $costCentreId,
        string $contentType = self::contentTypes['getCostCentreJournalOverridesListJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponseItem[]';
        $request = $this->getCostCentreJournalOverridesListJournalTokenRequest($employerId, $costCentreId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCostCentreJournalOverridesListJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCostCentreJournalOverridesListJournalTokenRequest(
        $employerId,
        $costCentreId,
        string $contentType = self::contentTypes['getCostCentreJournalOverridesListJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getCostCentreJournalOverridesListJournalToken'
            );
        }

        // verify the required parameter 'costCentreId' is set
        if ($costCentreId === null || (is_array($costCentreId) && count($costCentreId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $costCentreId when calling getCostCentreJournalOverridesListJournalToken'
            );
        }


        $resourcePath = '/employers/{employerId}/journaltokens/{costCentreId}/costcentrejournaloverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($costCentreId !== null) {
            $resourcePath = str_replace(
                '{' . 'costCentreId' . '}',
                ObjectSerializer::toPathValue($costCentreId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDepartmentJournalOverridesListJournalToken
     *
     * List Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]
     */
    public function getDepartmentJournalOverridesListJournalToken(
        string $employerId,
        string $departmentId,
        string $contentType = self::contentTypes['getDepartmentJournalOverridesListJournalToken'][0]
    ): array
    {
        list($response) = $this->getDepartmentJournalOverridesListJournalTokenWithHttpInfo($employerId, $departmentId, $contentType);
        return $response;
    }

    /**
     * Operation getDepartmentJournalOverridesListJournalTokenWithHttpInfo
     *
     * List Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDepartmentJournalOverridesListJournalTokenWithHttpInfo(
        string $employerId,
        string $departmentId,
        string $contentType = self::contentTypes['getDepartmentJournalOverridesListJournalToken'][0]
    ): array
    {
        $request = $this->getDepartmentJournalOverridesListJournalTokenRequest($employerId, $departmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDepartmentJournalOverridesListJournalTokenAsync
     *
     * List Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDepartmentJournalOverridesListJournalTokenAsync(
        string $employerId,
        string $departmentId,
        string $contentType = self::contentTypes['getDepartmentJournalOverridesListJournalToken'][0]
    ): PromiseInterface
    {
        return $this->getDepartmentJournalOverridesListJournalTokenAsyncWithHttpInfo($employerId, $departmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDepartmentJournalOverridesListJournalTokenAsyncWithHttpInfo
     *
     * List Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDepartmentJournalOverridesListJournalTokenAsyncWithHttpInfo(
        $employerId,
        $departmentId,
        string $contentType = self::contentTypes['getDepartmentJournalOverridesListJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponseItem[]';
        $request = $this->getDepartmentJournalOverridesListJournalTokenRequest($employerId, $departmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDepartmentJournalOverridesListJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want list of Journal Overrides (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentJournalOverridesListJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDepartmentJournalOverridesListJournalTokenRequest(
        $employerId,
        $departmentId,
        string $contentType = self::contentTypes['getDepartmentJournalOverridesListJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getDepartmentJournalOverridesListJournalToken'
            );
        }

        // verify the required parameter 'departmentId' is set
        if ($departmentId === null || (is_array($departmentId) && count($departmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $departmentId when calling getDepartmentJournalOverridesListJournalToken'
            );
        }


        $resourcePath = '/employers/{employerId}/journaltokens/{departmentId}/departmentjournaloverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($departmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentId' . '}',
                ObjectSerializer::toPathValue($departmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJournalToken
     *
     * Get Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to get Journal Token (required)
     * @param  string $id The Id of the Journal Tokens for which you want to get Journal Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractJournalTokenResponse
     */
    public function getJournalToken(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getJournalToken'][0]
    ): \SynergiTech\Staffology\Model\ContractJournalTokenResponse
    {
        list($response) = $this->getJournalTokenWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getJournalTokenWithHttpInfo
     *
     * Get Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to get Journal Token (required)
     * @param  string $id The Id of the Journal Tokens for which you want to get Journal Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractJournalTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJournalTokenWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getJournalToken'][0]
    ): array
    {
        $request = $this->getJournalTokenRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractJournalTokenResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractJournalTokenResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractJournalTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractJournalTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJournalTokenAsync
     *
     * Get Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to get Journal Token (required)
     * @param  string $id The Id of the Journal Tokens for which you want to get Journal Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getJournalTokenAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getJournalToken'][0]
    ): PromiseInterface
    {
        return $this->getJournalTokenAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJournalTokenAsyncWithHttpInfo
     *
     * Get Journal Token
     *
     * @param  string $employerId The Id of the Employer for which you want to get Journal Token (required)
     * @param  string $id The Id of the Journal Tokens for which you want to get Journal Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getJournalTokenAsyncWithHttpInfo(
        $employerId,
        $id,
        string $contentType = self::contentTypes['getJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponse';
        $request = $this->getJournalTokenRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want to get Journal Token (required)
     * @param  string $id The Id of the Journal Tokens for which you want to get Journal Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJournalTokenRequest(
        $employerId,
        $id,
        string $contentType = self::contentTypes['getJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getJournalToken'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getJournalToken'
            );
        }


        $resourcePath = '/employers/{employerId}/journaltokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexJournalToken
     *
     * List Journal Tokens
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Tokens (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]
     */
    public function indexJournalToken(
        string $employerId,
        string $contentType = self::contentTypes['indexJournalToken'][0]
    ): array
    {
        list($response) = $this->indexJournalTokenWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation indexJournalTokenWithHttpInfo
     *
     * List Journal Tokens
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Tokens (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function indexJournalTokenWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['indexJournalToken'][0]
    ): array
    {
        $request = $this->indexJournalTokenRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexJournalTokenAsync
     *
     * List Journal Tokens
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Tokens (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexJournalTokenAsync(
        string $employerId,
        string $contentType = self::contentTypes['indexJournalToken'][0]
    ): PromiseInterface
    {
        return $this->indexJournalTokenAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexJournalTokenAsyncWithHttpInfo
     *
     * List Journal Tokens
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Tokens (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexJournalTokenAsyncWithHttpInfo(
        $employerId,
        string $contentType = self::contentTypes['indexJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponseItem[]';
        $request = $this->indexJournalTokenRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want list of Journal Tokens (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function indexJournalTokenRequest(
        $employerId,
        string $contentType = self::contentTypes['indexJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling indexJournalToken'
            );
        }


        $resourcePath = '/employers/{employerId}/journaltokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCostCentreJournalOverridesJournalToken
     *
     * Update CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesUpdateRequest[]|null $contractCostCentreJournalOverridesUpdateRequest contractCostCentreJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]
     */
    public function updateCostCentreJournalOverridesJournalToken(
        string $employerId,
        string $costCentreId,
        ?array $contractCostCentreJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateCostCentreJournalOverridesJournalToken'][0]
    ): array
    {
        list($response) = $this->updateCostCentreJournalOverridesJournalTokenWithHttpInfo($employerId, $costCentreId, $contractCostCentreJournalOverridesUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateCostCentreJournalOverridesJournalTokenWithHttpInfo
     *
     * Update CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesUpdateRequest[]|null $contractCostCentreJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCostCentreJournalOverridesJournalTokenWithHttpInfo(
        string $employerId,
        string $costCentreId,
        ?array $contractCostCentreJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateCostCentreJournalOverridesJournalToken'][0]
    ): array
    {
        $request = $this->updateCostCentreJournalOverridesJournalTokenRequest($employerId, $costCentreId, $contractCostCentreJournalOverridesUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCostCentreJournalOverridesJournalTokenAsync
     *
     * Update CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesUpdateRequest[]|null $contractCostCentreJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCostCentreJournalOverridesJournalTokenAsync(
        string $employerId,
        string $costCentreId,
        ?array $contractCostCentreJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateCostCentreJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        return $this->updateCostCentreJournalOverridesJournalTokenAsyncWithHttpInfo($employerId, $costCentreId, $contractCostCentreJournalOverridesUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCostCentreJournalOverridesJournalTokenAsyncWithHttpInfo
     *
     * Update CostCentre Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesUpdateRequest[]|null $contractCostCentreJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCostCentreJournalOverridesJournalTokenAsyncWithHttpInfo(
        $employerId,
        $costCentreId,
        $contractCostCentreJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateCostCentreJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesResponse[]';
        $request = $this->updateCostCentreJournalOverridesJournalTokenRequest($employerId, $costCentreId, $contractCostCentreJournalOverridesUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCostCentreJournalOverridesJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $costCentreId The Id of the CostCentre for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractCostCentreJournalOverridesUpdateRequest[]|null $contractCostCentreJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCostCentreJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCostCentreJournalOverridesJournalTokenRequest(
        $employerId,
        $costCentreId,
        $contractCostCentreJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateCostCentreJournalOverridesJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateCostCentreJournalOverridesJournalToken'
            );
        }

        // verify the required parameter 'costCentreId' is set
        if ($costCentreId === null || (is_array($costCentreId) && count($costCentreId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $costCentreId when calling updateCostCentreJournalOverridesJournalToken'
            );
        }



        $resourcePath = '/employers/{employerId}/journaltokens/{costCentreId}/costcentrejournaloverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($costCentreId !== null) {
            $resourcePath = str_replace(
                '{' . 'costCentreId' . '}',
                ObjectSerializer::toPathValue($costCentreId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractCostCentreJournalOverridesUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractCostCentreJournalOverridesUpdateRequest));
            } else {
                $httpBody = $contractCostCentreJournalOverridesUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDepartmentJournalOverridesJournalToken
     *
     * Update Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesUpdateRequest[]|null $contractDepartmentJournalOverridesUpdateRequest contractDepartmentJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]
     */
    public function updateDepartmentJournalOverridesJournalToken(
        string $employerId,
        string $departmentId,
        ?array $contractDepartmentJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateDepartmentJournalOverridesJournalToken'][0]
    ): array
    {
        list($response) = $this->updateDepartmentJournalOverridesJournalTokenWithHttpInfo($employerId, $departmentId, $contractDepartmentJournalOverridesUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateDepartmentJournalOverridesJournalTokenWithHttpInfo
     *
     * Update Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesUpdateRequest[]|null $contractDepartmentJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDepartmentJournalOverridesJournalTokenWithHttpInfo(
        string $employerId,
        string $departmentId,
        ?array $contractDepartmentJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateDepartmentJournalOverridesJournalToken'][0]
    ): array
    {
        $request = $this->updateDepartmentJournalOverridesJournalTokenRequest($employerId, $departmentId, $contractDepartmentJournalOverridesUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDepartmentJournalOverridesJournalTokenAsync
     *
     * Update Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesUpdateRequest[]|null $contractDepartmentJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateDepartmentJournalOverridesJournalTokenAsync(
        string $employerId,
        string $departmentId,
        ?array $contractDepartmentJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateDepartmentJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        return $this->updateDepartmentJournalOverridesJournalTokenAsyncWithHttpInfo($employerId, $departmentId, $contractDepartmentJournalOverridesUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDepartmentJournalOverridesJournalTokenAsyncWithHttpInfo
     *
     * Update Department Journal Overrides
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesUpdateRequest[]|null $contractDepartmentJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateDepartmentJournalOverridesJournalTokenAsyncWithHttpInfo(
        $employerId,
        $departmentId,
        $contractDepartmentJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateDepartmentJournalOverridesJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesResponse[]';
        $request = $this->updateDepartmentJournalOverridesJournalTokenRequest($employerId, $departmentId, $contractDepartmentJournalOverridesUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDepartmentJournalOverridesJournalToken'
     *
     * @param  string $employerId The Id of the Employer for which you want to update Journal Overrides (required)
     * @param  string $departmentId The Id of the Department for which you want to update Journal Overrides (required)
     * @param  \SynergiTech\Staffology\Model\ContractDepartmentJournalOverridesUpdateRequest[]|null $contractDepartmentJournalOverridesUpdateRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDepartmentJournalOverridesJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDepartmentJournalOverridesJournalTokenRequest(
        $employerId,
        $departmentId,
        $contractDepartmentJournalOverridesUpdateRequest = null,
        string $contentType = self::contentTypes['updateDepartmentJournalOverridesJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateDepartmentJournalOverridesJournalToken'
            );
        }

        // verify the required parameter 'departmentId' is set
        if ($departmentId === null || (is_array($departmentId) && count($departmentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $departmentId when calling updateDepartmentJournalOverridesJournalToken'
            );
        }



        $resourcePath = '/employers/{employerId}/journaltokens/{departmentId}/departmentjournaloverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($departmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentId' . '}',
                ObjectSerializer::toPathValue($departmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractDepartmentJournalOverridesUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractDepartmentJournalOverridesUpdateRequest));
            } else {
                $httpBody = $contractDepartmentJournalOverridesUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJournalToken
     *
     * Update Journal Token
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractJournalTokenResponse
     */
    public function updateJournalToken(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractJournalTokenRequest $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['updateJournalToken'][0]
    ): \SynergiTech\Staffology\Model\ContractJournalTokenResponse
    {
        list($response) = $this->updateJournalTokenWithHttpInfo($employerId, $id, $contractJournalTokenRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateJournalTokenWithHttpInfo
     *
     * Update Journal Token
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateJournalToken'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractJournalTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJournalTokenWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractJournalTokenRequest $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['updateJournalToken'][0]
    ): array
    {
        $request = $this->updateJournalTokenRequest($employerId, $id, $contractJournalTokenRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractJournalTokenResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractJournalTokenResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractJournalTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractJournalTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJournalTokenAsync
     *
     * Update Journal Token
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateJournalTokenAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractJournalTokenRequest $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['updateJournalToken'][0]
    ): PromiseInterface
    {
        return $this->updateJournalTokenAsyncWithHttpInfo($employerId, $id, $contractJournalTokenRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateJournalTokenAsyncWithHttpInfo
     *
     * Update Journal Token
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateJournalTokenAsyncWithHttpInfo(
        $employerId,
        $id,
        $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['updateJournalToken'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractJournalTokenResponse';
        $request = $this->updateJournalTokenRequest($employerId, $id, $contractJournalTokenRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateJournalToken'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractJournalTokenRequest|null $contractJournalTokenRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateJournalToken'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateJournalTokenRequest(
        $employerId,
        $id,
        $contractJournalTokenRequest = null,
        string $contentType = self::contentTypes['updateJournalToken'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateJournalToken'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateJournalToken'
            );
        }



        $resourcePath = '/employers/{employerId}/journaltokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractJournalTokenRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractJournalTokenRequest));
            } else {
                $httpBody = $contractJournalTokenRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
