<?php
/**
 * EmployeeRoleApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * EmployeeRoleApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmployeeRoleApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createRoleWorkingPatternEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteEmployeeRole' => [
            'application/json',
        ],
        'deleteRoleWorkingPatternEmployeeRole' => [
            'application/json',
        ],
        'getBaseDailyRateEmployeeRole' => [
            'application/json',
        ],
        'getBaseHourlyRateEmployeeRole' => [
            'application/json',
        ],
        'getCostCentreMembershipsEmployeeRole' => [
            'application/json',
        ],
        'getDepartmentMembershipsEmployeeRole' => [
            'application/json',
        ],
        'getEmployeeRole' => [
            'application/json',
        ],
        'getEmployeeRoleAnalysisCategoryCodesEmployeeRole' => [
            'application/json',
        ],
        'getRoleAssumedPensionablePayEmployeeRole' => [
            'application/json',
        ],
        'getRoleWorkingPatternEmployeeRole' => [
            'application/json',
        ],
        'indexEmployeeRole' => [
            'application/json',
        ],
        'listRoleWorkingPatternsEmployeeRole' => [
            'application/json',
        ],
        'setCostCentreMembershipsEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setDepartmentMembershipsEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'setEmployeeRoleAnalysisCategoryCodesEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateRoleWorkingPatternEmployeeRole' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createEmployeeRole
     *
     * Create Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\EmployeeRole
     */
    public function createEmployeeRole(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\EmployeeRole $employeeRole = null,
        string $contentType = self::contentTypes['createEmployeeRole'][0]
    ): \SynergiTech\Staffology\Model\EmployeeRole
    {
        list($response) = $this->createEmployeeRoleWithHttpInfo($employerId, $employeeId, $employeeRole, $contentType);
        return $response;
    }

    /**
     * Operation createEmployeeRoleWithHttpInfo
     *
     * Create Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\EmployeeRole, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\EmployeeRole $employeeRole = null,
        string $contentType = self::contentTypes['createEmployeeRole'][0]
    ): array
    {
        $request = $this->createEmployeeRoleRequest($employerId, $employeeId, $employeeRole, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeRole', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeRole' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeRole', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeRole';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeRole',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmployeeRoleAsync
     *
     * Create Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        ?\SynergiTech\Staffology\Model\EmployeeRole $employeeRole = null,
        string $contentType = self::contentTypes['createEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->createEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $employeeRole, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmployeeRoleAsyncWithHttpInfo
     *
     * Create Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $employeeRole = null,
        string $contentType = self::contentTypes['createEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeRole';
        $request = $this->createEmployeeRoleRequest($employerId, $employeeId, $employeeRole, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $employeeRole = null,
        string $contentType = self::contentTypes['createEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling createEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employeeRole)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employeeRole));
            } else {
                $httpBody = $employeeRole;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRoleWorkingPatternEmployeeRole
     *
     * Create Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to create a Role Working Pattern for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return |\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse
     */
    public function createRoleWorkingPatternEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['createRoleWorkingPatternEmployeeRole'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse
    {
        list($response) = $this->createRoleWorkingPatternEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contractEmployeeRoleWorkingPatternRequest, $contentType);
        return $response;
    }

    /**
     * Operation createRoleWorkingPatternEmployeeRoleWithHttpInfo
     *
     * Create Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to create a Role Working Pattern for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRoleWorkingPatternEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['createRoleWorkingPatternEmployeeRole'][0]
    ): array
    {
        $request = $this->createRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $contractEmployeeRoleWorkingPatternRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRoleWorkingPatternEmployeeRoleAsync
     *
     * Create Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to create a Role Working Pattern for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createRoleWorkingPatternEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['createRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->createRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contractEmployeeRoleWorkingPatternRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo
     *
     * Create Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to create a Role Working Pattern for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['createRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse';
        $request = $this->createRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $contractEmployeeRoleWorkingPatternRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRoleWorkingPatternEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to create a Role Working Pattern for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRoleWorkingPatternEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['createRoleWorkingPatternEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling createRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createRoleWorkingPatternEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/workingpatterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractEmployeeRoleWorkingPatternRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractEmployeeRoleWorkingPatternRequest));
            } else {
                $httpBody = $contractEmployeeRoleWorkingPatternRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmployeeRole
     *
     * Delete Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployeeRole'][0]
    ): void
    {
        $this->deleteEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contentType);
    }

    /**
     * Operation deleteEmployeeRoleWithHttpInfo
     *
     * Delete Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployeeRole'][0]
    ): array
    {
        $request = $this->deleteEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmployeeRoleAsync
     *
     * Delete Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['deleteEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->deleteEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmployeeRoleAsyncWithHttpInfo
     *
     * Delete Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['deleteEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['deleteEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling deleteEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRoleWorkingPatternEmployeeRole
     *
     * Delete Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role to which the Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteRoleWorkingPatternEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        string $contentType = self::contentTypes['deleteRoleWorkingPatternEmployeeRole'][0]
    ): void
    {
        $this->deleteRoleWorkingPatternEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType);
    }

    /**
     * Operation deleteRoleWorkingPatternEmployeeRoleWithHttpInfo
     *
     * Delete Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role to which the Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRoleWorkingPatternEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        string $contentType = self::contentTypes['deleteRoleWorkingPatternEmployeeRole'][0]
    ): array
    {
        $request = $this->deleteRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRoleWorkingPatternEmployeeRoleAsync
     *
     * Delete Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role to which the Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteRoleWorkingPatternEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        string $contentType = self::contentTypes['deleteRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->deleteRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo
     *
     * Delete Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role to which the Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $roleWorkingPatternId,
        string $contentType = self::contentTypes['deleteRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRoleWorkingPatternEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role to which the Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRoleWorkingPatternEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $roleWorkingPatternId,
        string $contentType = self::contentTypes['deleteRoleWorkingPatternEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling deleteRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'roleWorkingPatternId' is set
        if ($roleWorkingPatternId === null || (is_array($roleWorkingPatternId) && count($roleWorkingPatternId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $roleWorkingPatternId when calling deleteRoleWorkingPatternEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/workingpatterns/{roleWorkingPatternId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($roleWorkingPatternId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleWorkingPatternId' . '}',
                ObjectSerializer::toPathValue($roleWorkingPatternId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBaseDailyRateEmployeeRole
     *
     * Calculate Base Daily Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseDailyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function getBaseDailyRateEmployeeRole(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseDailyRateEmployeeRole'][0]
    ): float
    {
        list($response) = $this->getBaseDailyRateEmployeeRoleWithHttpInfo($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType);
        return $response;
    }

    /**
     * Operation getBaseDailyRateEmployeeRoleWithHttpInfo
     *
     * Calculate Base Daily Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseDailyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBaseDailyRateEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseDailyRateEmployeeRole'][0]
    ): array
    {
        $request = $this->getBaseDailyRateEmployeeRoleRequest($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBaseDailyRateEmployeeRoleAsync
     *
     * Calculate Base Daily Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseDailyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBaseDailyRateEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseDailyRateEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getBaseDailyRateEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBaseDailyRateEmployeeRoleAsyncWithHttpInfo
     *
     * Calculate Base Daily Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseDailyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBaseDailyRateEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $roleId,
        $payPeriod = null,
        $payBasis = null,
        $payAmount = null,
        $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseDailyRateEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->getBaseDailyRateEmployeeRoleRequest($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBaseDailyRateEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseDailyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBaseDailyRateEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $roleId,
        $payPeriod = null,
        $payBasis = null,
        $payAmount = null,
        $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseDailyRateEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getBaseDailyRateEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getBaseDailyRateEmployeeRole'
            );
        }

        // verify the required parameter 'roleId' is set
        if ($roleId === null || (is_array($roleId) && count($roleId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $roleId when calling getBaseDailyRateEmployeeRole'
            );
        }






        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{roleId}/basedailyrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payBasis,
            'payBasis', // param base name
            'PayBasis', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payAmount,
            'payAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workingPatternId,
            'workingPatternId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($roleId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleId' . '}',
                ObjectSerializer::toPathValue($roleId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBaseHourlyRateEmployeeRole
     *
     * Calculate Base Hourly Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseHourlyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function getBaseHourlyRateEmployeeRole(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseHourlyRateEmployeeRole'][0]
    ): float
    {
        list($response) = $this->getBaseHourlyRateEmployeeRoleWithHttpInfo($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType);
        return $response;
    }

    /**
     * Operation getBaseHourlyRateEmployeeRoleWithHttpInfo
     *
     * Calculate Base Hourly Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseHourlyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBaseHourlyRateEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseHourlyRateEmployeeRole'][0]
    ): array
    {
        $request = $this->getBaseHourlyRateEmployeeRoleRequest($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBaseHourlyRateEmployeeRoleAsync
     *
     * Calculate Base Hourly Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseHourlyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBaseHourlyRateEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\PayBasis $payBasis = null,
        ?float $payAmount = null,
        ?string $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseHourlyRateEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getBaseHourlyRateEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBaseHourlyRateEmployeeRoleAsyncWithHttpInfo
     *
     * Calculate Base Hourly Rate
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseHourlyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBaseHourlyRateEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $roleId,
        $payPeriod = null,
        $payBasis = null,
        $payAmount = null,
        $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseHourlyRateEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->getBaseHourlyRateEmployeeRoleRequest($employerId, $employeeId, $roleId, $payPeriod, $payBasis, $payAmount, $workingPatternId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBaseHourlyRateEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\PayBasis|null $payBasis  (optional)
     * @param  float|null $payAmount The amount the Employee Role is regularly paid each period. (optional)
     * @param  string|null $workingPatternId The Id of the Working Pattern that we want the calculations against. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBaseHourlyRateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBaseHourlyRateEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $roleId,
        $payPeriod = null,
        $payBasis = null,
        $payAmount = null,
        $workingPatternId = null,
        string $contentType = self::contentTypes['getBaseHourlyRateEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getBaseHourlyRateEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getBaseHourlyRateEmployeeRole'
            );
        }

        // verify the required parameter 'roleId' is set
        if ($roleId === null || (is_array($roleId) && count($roleId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $roleId when calling getBaseHourlyRateEmployeeRole'
            );
        }






        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{roleId}/basehourlyrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payBasis,
            'payBasis', // param base name
            'PayBasis', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payAmount,
            'payAmount', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workingPatternId,
            'workingPatternId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($roleId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleId' . '}',
                ObjectSerializer::toPathValue($roleId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCostCentreMembershipsEmployeeRole
     *
     * Get Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Cost Centres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeCostCentre[]
     */
    public function getCostCentreMembershipsEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getCostCentreMembershipsEmployeeRole'][0]
    ): array
    {
        list($response) = $this->getCostCentreMembershipsEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getCostCentreMembershipsEmployeeRoleWithHttpInfo
     *
     * Get Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Cost Centres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeCostCentre[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCostCentreMembershipsEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getCostCentreMembershipsEmployeeRole'][0]
    ): array
    {
        $request = $this->getCostCentreMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeCostCentre[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeCostCentre[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeCostCentre[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeCostCentre[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCostCentreMembershipsEmployeeRoleAsync
     *
     * Get Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Cost Centres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCostCentreMembershipsEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getCostCentreMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getCostCentreMembershipsEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCostCentreMembershipsEmployeeRoleAsyncWithHttpInfo
     *
     * Get Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Cost Centres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCostCentreMembershipsEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getCostCentreMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
        $request = $this->getCostCentreMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCostCentreMembershipsEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Cost Centres for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCostCentreMembershipsEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getCostCentreMembershipsEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getCostCentreMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getCostCentreMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getCostCentreMembershipsEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/costcentres';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDepartmentMembershipsEmployeeRole
     *
     * Get Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\DepartmentMembership[]
     */
    public function getDepartmentMembershipsEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployeeRole'][0]
    ): array
    {
        list($response) = $this->getDepartmentMembershipsEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getDepartmentMembershipsEmployeeRoleWithHttpInfo
     *
     * Get Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\DepartmentMembership[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDepartmentMembershipsEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployeeRole'][0]
    ): array
    {
        $request = $this->getDepartmentMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\DepartmentMembership[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\DepartmentMembership[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\DepartmentMembership[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\DepartmentMembership[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDepartmentMembershipsEmployeeRoleAsync
     *
     * Get Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDepartmentMembershipsEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getDepartmentMembershipsEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDepartmentMembershipsEmployeeRoleAsyncWithHttpInfo
     *
     * Get Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDepartmentMembershipsEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
        $request = $this->getDepartmentMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDepartmentMembershipsEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Departments for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDepartmentMembershipsEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getDepartmentMembershipsEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getDepartmentMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getDepartmentMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getDepartmentMembershipsEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/departments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeRole
     *
     * Get Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The id of the Role you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleResponse
     */
    public function getEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeRole'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeRoleResponse
    {
        list($response) = $this->getEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getEmployeeRoleWithHttpInfo
     *
     * Get Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The id of the Role you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeRole'][0]
    ): array
    {
        $request = $this->getEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmployeeRoleAsync
     *
     * Get Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The id of the Role you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeRoleAsyncWithHttpInfo
     *
     * Get Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The id of the Role you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleResponse';
        $request = $this->getEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The id of the Role you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeRoleAnalysisCategoryCodesEmployeeRole
     *
     * Get Employee Role AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]
     */
    public function getEmployeeRoleAnalysisCategoryCodesEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): array
    {
        list($response) = $this->getEmployeeRoleAnalysisCategoryCodesEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getEmployeeRoleAnalysisCategoryCodesEmployeeRoleWithHttpInfo
     *
     * Get Employee Role AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeRoleAnalysisCategoryCodesEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): array
    {
        $request = $this->getEmployeeRoleAnalysisCategoryCodesEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsync
     *
     * Get Employee Role AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsyncWithHttpInfo
     *
     * Get Employee Role AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]';
        $request = $this->getEmployeeRoleAnalysisCategoryCodesEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeRoleAnalysisCategoryCodesEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve AnalysisCategoryCode for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeRoleAnalysisCategoryCodesEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['getEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/analysiscategorycodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoleAssumedPensionablePayEmployeeRole
     *
     * Calculate Assumed Pensionable Pay
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of the Leave. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The pay type of the Leave. (optional)
     * @param  \DateTime|null $from The date from which the Assumed Pensionable Pay is calculated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return float
     */
    public function getRoleAssumedPensionablePayEmployeeRole(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\DateTime $from = null,
        string $contentType = self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'][0]
    ): float
    {
        list($response) = $this->getRoleAssumedPensionablePayEmployeeRoleWithHttpInfo($employerId, $employeeId, $roleId, $payPeriod, $leaveType, $leavePayType, $from, $contentType);
        return $response;
    }

    /**
     * Operation getRoleAssumedPensionablePayEmployeeRoleWithHttpInfo
     *
     * Calculate Assumed Pensionable Pay
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of the Leave. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The pay type of the Leave. (optional)
     * @param  \DateTime|null $from The date from which the Assumed Pensionable Pay is calculated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoleAssumedPensionablePayEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\DateTime $from = null,
        string $contentType = self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'][0]
    ): array
    {
        $request = $this->getRoleAssumedPensionablePayEmployeeRoleRequest($employerId, $employeeId, $roleId, $payPeriod, $leaveType, $leavePayType, $from, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('float', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'float';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoleAssumedPensionablePayEmployeeRoleAsync
     *
     * Calculate Assumed Pensionable Pay
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of the Leave. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The pay type of the Leave. (optional)
     * @param  \DateTime|null $from The date from which the Assumed Pensionable Pay is calculated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRoleAssumedPensionablePayEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $roleId,
        ?\SynergiTech\Staffology\Model\PayPeriods $payPeriod = null,
        ?\SynergiTech\Staffology\Model\LeaveType $leaveType = null,
        ?\SynergiTech\Staffology\Model\LeavePayType $leavePayType = null,
        ?\DateTime $from = null,
        string $contentType = self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getRoleAssumedPensionablePayEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $roleId, $payPeriod, $leaveType, $leavePayType, $from, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoleAssumedPensionablePayEmployeeRoleAsyncWithHttpInfo
     *
     * Calculate Assumed Pensionable Pay
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of the Leave. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The pay type of the Leave. (optional)
     * @param  \DateTime|null $from The date from which the Assumed Pensionable Pay is calculated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRoleAssumedPensionablePayEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $roleId,
        $payPeriod = null,
        $leaveType = null,
        $leavePayType = null,
        $from = null,
        string $contentType = self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = 'float';
        $request = $this->getRoleAssumedPensionablePayEmployeeRoleRequest($employerId, $employeeId, $roleId, $payPeriod, $leaveType, $leavePayType, $from, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoleAssumedPensionablePayEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer. (required)
     * @param  string $employeeId The Id of the Employee. (required)
     * @param  string $roleId The Employee Role Id. (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods|null $payPeriod The frequency that this Employee Role is paid. (optional)
     * @param  \SynergiTech\Staffology\Model\LeaveType|null $leaveType The type of the Leave. (optional)
     * @param  \SynergiTech\Staffology\Model\LeavePayType|null $leavePayType The pay type of the Leave. (optional)
     * @param  \DateTime|null $from The date from which the Assumed Pensionable Pay is calculated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRoleAssumedPensionablePayEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $roleId,
        $payPeriod = null,
        $leaveType = null,
        $leavePayType = null,
        $from = null,
        string $contentType = self::contentTypes['getRoleAssumedPensionablePayEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getRoleAssumedPensionablePayEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getRoleAssumedPensionablePayEmployeeRole'
            );
        }

        // verify the required parameter 'roleId' is set
        if ($roleId === null || (is_array($roleId) && count($roleId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $roleId when calling getRoleAssumedPensionablePayEmployeeRole'
            );
        }






        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{roleId}/assumedpensionablepay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payPeriod,
            'payPeriod', // param base name
            'PayPeriods', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leaveType,
            'leaveType', // param base name
            'LeaveType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leavePayType,
            'leavePayType', // param base name
            'LeavePayType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($roleId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleId' . '}',
                ObjectSerializer::toPathValue($roleId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoleWorkingPatternEmployeeRole
     *
     * Get Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve a Role Working Pattern for. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse
     */
    public function getRoleWorkingPatternEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        string $contentType = self::contentTypes['getRoleWorkingPatternEmployeeRole'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse
    {
        list($response) = $this->getRoleWorkingPatternEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType);
        return $response;
    }

    /**
     * Operation getRoleWorkingPatternEmployeeRoleWithHttpInfo
     *
     * Get Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve a Role Working Pattern for. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoleWorkingPatternEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        string $contentType = self::contentTypes['getRoleWorkingPatternEmployeeRole'][0]
    ): array
    {
        $request = $this->getRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoleWorkingPatternEmployeeRoleAsync
     *
     * Get Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve a Role Working Pattern for. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRoleWorkingPatternEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        string $contentType = self::contentTypes['getRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->getRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo
     *
     * Get Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve a Role Working Pattern for. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $roleWorkingPatternId,
        string $contentType = self::contentTypes['getRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse';
        $request = $this->getRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $roleWorkingPatternId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoleWorkingPatternEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve a Role Working Pattern for. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRoleWorkingPatternEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $roleWorkingPatternId,
        string $contentType = self::contentTypes['getRoleWorkingPatternEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling getRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'roleWorkingPatternId' is set
        if ($roleWorkingPatternId === null || (is_array($roleWorkingPatternId) && count($roleWorkingPatternId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $roleWorkingPatternId when calling getRoleWorkingPatternEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/workingpatterns/{roleWorkingPatternId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($roleWorkingPatternId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleWorkingPatternId' . '}',
                ObjectSerializer::toPathValue($roleWorkingPatternId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexEmployeeRole
     *
     * List Employee Roles
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee which you want to list Roles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function indexEmployeeRole(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['indexEmployeeRole'][0]
    ): array
    {
        list($response) = $this->indexEmployeeRoleWithHttpInfo($employerId, $employeeId, $contentType);
        return $response;
    }

    /**
     * Operation indexEmployeeRoleWithHttpInfo
     *
     * List Employee Roles
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee which you want to list Roles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function indexEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['indexEmployeeRole'][0]
    ): array
    {
        $request = $this->indexEmployeeRoleRequest($employerId, $employeeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexEmployeeRoleAsync
     *
     * List Employee Roles
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee which you want to list Roles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $contentType = self::contentTypes['indexEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->indexEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexEmployeeRoleAsyncWithHttpInfo
     *
     * List Employee Roles
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee which you want to list Roles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['indexEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->indexEmployeeRoleRequest($employerId, $employeeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee which you want to list Roles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function indexEmployeeRoleRequest(
        $employerId,
        $employeeId,
        string $contentType = self::contentTypes['indexEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling indexEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling indexEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRoleWorkingPatternsEmployeeRole
     *
     * List Working Patterns for an Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Employee Role Working Patterns for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRoleWorkingPatternsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]
     */
    public function listRoleWorkingPatternsEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['listRoleWorkingPatternsEmployeeRole'][0]
    ): array
    {
        list($response) = $this->listRoleWorkingPatternsEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $contentType);
        return $response;
    }

    /**
     * Operation listRoleWorkingPatternsEmployeeRoleWithHttpInfo
     *
     * List Working Patterns for an Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Employee Role Working Patterns for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRoleWorkingPatternsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listRoleWorkingPatternsEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['listRoleWorkingPatternsEmployeeRole'][0]
    ): array
    {
        $request = $this->listRoleWorkingPatternsEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRoleWorkingPatternsEmployeeRoleAsync
     *
     * List Working Patterns for an Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Employee Role Working Patterns for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRoleWorkingPatternsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listRoleWorkingPatternsEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $contentType = self::contentTypes['listRoleWorkingPatternsEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->listRoleWorkingPatternsEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRoleWorkingPatternsEmployeeRoleAsyncWithHttpInfo
     *
     * List Working Patterns for an Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Employee Role Working Patterns for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRoleWorkingPatternsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listRoleWorkingPatternsEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['listRoleWorkingPatternsEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponseItem[]';
        $request = $this->listRoleWorkingPatternsEmployeeRoleRequest($employerId, $employeeId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRoleWorkingPatternsEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Employee Role you want to retrieve Employee Role Working Patterns for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRoleWorkingPatternsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRoleWorkingPatternsEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        string $contentType = self::contentTypes['listRoleWorkingPatternsEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling listRoleWorkingPatternsEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling listRoleWorkingPatternsEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling listRoleWorkingPatternsEmployeeRole'
            );
        }


        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/workingpatterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCostCentreMembershipsEmployeeRole
     *
     * Set Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to set Cost Centres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeCostCentre[]
     */
    public function setCostCentreMembershipsEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        ?array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setCostCentreMembershipsEmployeeRole'][0]
    ): array
    {
        list($response) = $this->setCostCentreMembershipsEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $employeeCostCentre, $contentType);
        return $response;
    }

    /**
     * Operation setCostCentreMembershipsEmployeeRoleWithHttpInfo
     *
     * Set Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to set Cost Centres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeCostCentre[], HTTP status code, HTTP response headers (array of strings)
     */
    public function setCostCentreMembershipsEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setCostCentreMembershipsEmployeeRole'][0]
    ): array
    {
        $request = $this->setCostCentreMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $employeeCostCentre, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeCostCentre[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeCostCentre[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeCostCentre[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeCostCentre[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setCostCentreMembershipsEmployeeRoleAsync
     *
     * Set Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to set Cost Centres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setCostCentreMembershipsEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?array $employeeCostCentre = null,
        string $contentType = self::contentTypes['setCostCentreMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->setCostCentreMembershipsEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $employeeCostCentre, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCostCentreMembershipsEmployeeRoleAsyncWithHttpInfo
     *
     * Set Employee Role Cost Centres
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to set Cost Centres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setCostCentreMembershipsEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $employeeCostCentre = null,
        string $contentType = self::contentTypes['setCostCentreMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeCostCentre[]';
        $request = $this->setCostCentreMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $employeeCostCentre, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCostCentreMembershipsEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Cost Centres for. (required)
     * @param  string $id The Id of the Employee Role you want to set Cost Centres for. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeCostCentre[]|null $employeeCostCentre (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCostCentreMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCostCentreMembershipsEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $employeeCostCentre = null,
        string $contentType = self::contentTypes['setCostCentreMembershipsEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setCostCentreMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling setCostCentreMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setCostCentreMembershipsEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/costcentres';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employeeCostCentre)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employeeCostCentre));
            } else {
                $httpBody = $employeeCostCentre;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDepartmentMembershipsEmployeeRole
     *
     * Set Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\DepartmentMembership[]
     */
    public function setDepartmentMembershipsEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        ?array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployeeRole'][0]
    ): array
    {
        list($response) = $this->setDepartmentMembershipsEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $departmentMembership, $contentType);
        return $response;
    }

    /**
     * Operation setDepartmentMembershipsEmployeeRoleWithHttpInfo
     *
     * Set Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\DepartmentMembership[], HTTP status code, HTTP response headers (array of strings)
     */
    public function setDepartmentMembershipsEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployeeRole'][0]
    ): array
    {
        $request = $this->setDepartmentMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $departmentMembership, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\DepartmentMembership[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\DepartmentMembership[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\DepartmentMembership[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\DepartmentMembership[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setDepartmentMembershipsEmployeeRoleAsync
     *
     * Set Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setDepartmentMembershipsEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?array $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->setDepartmentMembershipsEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $departmentMembership, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDepartmentMembershipsEmployeeRoleAsyncWithHttpInfo
     *
     * Set Employee Role Departments
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setDepartmentMembershipsEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\DepartmentMembership[]';
        $request = $this->setDepartmentMembershipsEmployeeRoleRequest($employerId, $employeeId, $id, $departmentMembership, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDepartmentMembershipsEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set Departments for. (required)
     * @param  string $id The Id of the Employee Role you want to set Departments for. (required)
     * @param  \SynergiTech\Staffology\Model\DepartmentMembership[]|null $departmentMembership (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDepartmentMembershipsEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDepartmentMembershipsEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $departmentMembership = null,
        string $contentType = self::contentTypes['setDepartmentMembershipsEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setDepartmentMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling setDepartmentMembershipsEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setDepartmentMembershipsEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/departments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($departmentMembership)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($departmentMembership));
            } else {
                $httpBody = $departmentMembership;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setEmployeeRoleAnalysisCategoryCodesEmployeeRole
     *
     * Set  Employee Role AnalysisCategorycode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to set AnalysisCategoryCode for. (required)
     * @param  string $analysisCategoryId The Id of the Analysis Category you want to set AnalysisCategoryCode for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeRequest[]|null $contractEmployeeRoleAnalysisCategoryCodeRequest contractEmployeeRoleAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]
     */
    public function setEmployeeRoleAnalysisCategoryCodesEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $analysisCategoryId,
        ?array $contractEmployeeRoleAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): array
    {
        list($response) = $this->setEmployeeRoleAnalysisCategoryCodesEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $analysisCategoryId, $contractEmployeeRoleAnalysisCategoryCodeRequest, $contentType);
        return $response;
    }

    /**
     * Operation setEmployeeRoleAnalysisCategoryCodesEmployeeRoleWithHttpInfo
     *
     * Set  Employee Role AnalysisCategorycode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to set AnalysisCategoryCode for. (required)
     * @param  string $analysisCategoryId The Id of the Analysis Category you want to set AnalysisCategoryCode for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeRequest[]|null $contractEmployeeRoleAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function setEmployeeRoleAnalysisCategoryCodesEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $analysisCategoryId,
        ?array $contractEmployeeRoleAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): array
    {
        $request = $this->setEmployeeRoleAnalysisCategoryCodesEmployeeRoleRequest($employerId, $employeeId, $id, $analysisCategoryId, $contractEmployeeRoleAnalysisCategoryCodeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsync
     *
     * Set  Employee Role AnalysisCategorycode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to set AnalysisCategoryCode for. (required)
     * @param  string $analysisCategoryId The Id of the Analysis Category you want to set AnalysisCategoryCode for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeRequest[]|null $contractEmployeeRoleAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $analysisCategoryId,
        ?array $contractEmployeeRoleAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->setEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $analysisCategoryId, $contractEmployeeRoleAnalysisCategoryCodeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsyncWithHttpInfo
     *
     * Set  Employee Role AnalysisCategorycode
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to set AnalysisCategoryCode for. (required)
     * @param  string $analysisCategoryId The Id of the Analysis Category you want to set AnalysisCategoryCode for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeRequest[]|null $contractEmployeeRoleAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function setEmployeeRoleAnalysisCategoryCodesEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $analysisCategoryId,
        $contractEmployeeRoleAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeResponse[]';
        $request = $this->setEmployeeRoleAnalysisCategoryCodesEmployeeRoleRequest($employerId, $employeeId, $id, $analysisCategoryId, $contractEmployeeRoleAnalysisCategoryCodeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setEmployeeRoleAnalysisCategoryCodesEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer to which the Employee belongs. (required)
     * @param  string $employeeId The Id of the Employee you want to set AnalysisCategoryCode for. (required)
     * @param  string $id The Id of the Employee Role you want to set AnalysisCategoryCode for. (required)
     * @param  string $analysisCategoryId The Id of the Analysis Category you want to set AnalysisCategoryCode for. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleAnalysisCategoryCodeRequest[]|null $contractEmployeeRoleAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setEmployeeRoleAnalysisCategoryCodesEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $analysisCategoryId,
        $contractEmployeeRoleAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['setEmployeeRoleAnalysisCategoryCodesEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling setEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling setEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling setEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }

        // verify the required parameter 'analysisCategoryId' is set
        if ($analysisCategoryId === null || (is_array($analysisCategoryId) && count($analysisCategoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $analysisCategoryId when calling setEmployeeRoleAnalysisCategoryCodesEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/analysiscategories/{analysisCategoryId}/analysiscategorycodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($analysisCategoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'analysisCategoryId' . '}',
                ObjectSerializer::toPathValue($analysisCategoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractEmployeeRoleAnalysisCategoryCodeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractEmployeeRoleAnalysisCategoryCodeRequest));
            } else {
                $httpBody = $contractEmployeeRoleAnalysisCategoryCodeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeRole
     *
     * Update Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to update. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\EmployeeRole
     */
    public function updateEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\EmployeeRole $employeeRole = null,
        string $contentType = self::contentTypes['updateEmployeeRole'][0]
    ): \SynergiTech\Staffology\Model\EmployeeRole
    {
        list($response) = $this->updateEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $employeeRole, $contentType);
        return $response;
    }

    /**
     * Operation updateEmployeeRoleWithHttpInfo
     *
     * Update Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to update. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\EmployeeRole, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\EmployeeRole $employeeRole = null,
        string $contentType = self::contentTypes['updateEmployeeRole'][0]
    ): array
    {
        $request = $this->updateEmployeeRoleRequest($employerId, $employeeId, $id, $employeeRole, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\EmployeeRole', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\EmployeeRole' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\EmployeeRole', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\EmployeeRole';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\EmployeeRole',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmployeeRoleAsync
     *
     * Update Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to update. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        ?\SynergiTech\Staffology\Model\EmployeeRole $employeeRole = null,
        string $contentType = self::contentTypes['updateEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->updateEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $employeeRole, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeRoleAsyncWithHttpInfo
     *
     * Update Employee Role
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to update. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $employeeRole = null,
        string $contentType = self::contentTypes['updateEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\EmployeeRole';
        $request = $this->updateEmployeeRoleRequest($employerId, $employeeId, $id, $employeeRole, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to update. (required)
     * @param  \SynergiTech\Staffology\Model\EmployeeRole|null $employeeRole (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $employeeRole = null,
        string $contentType = self::contentTypes['updateEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employeeRole)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employeeRole));
            } else {
                $httpBody = $employeeRole;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRoleWorkingPatternEmployeeRole
     *
     * Update Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to which the Employee Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse
     */
    public function updateRoleWorkingPatternEmployeeRole(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        ?\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['updateRoleWorkingPatternEmployeeRole'][0]
    ): \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse
    {
        list($response) = $this->updateRoleWorkingPatternEmployeeRoleWithHttpInfo($employerId, $employeeId, $id, $roleWorkingPatternId, $contractEmployeeRoleWorkingPatternRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateRoleWorkingPatternEmployeeRoleWithHttpInfo
     *
     * Update Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to which the Employee Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRoleWorkingPatternEmployeeRoleWithHttpInfo(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        ?\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['updateRoleWorkingPatternEmployeeRole'][0]
    ): array
    {
        $request = $this->updateRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $roleWorkingPatternId, $contractEmployeeRoleWorkingPatternRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRoleWorkingPatternEmployeeRoleAsync
     *
     * Update Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to which the Employee Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateRoleWorkingPatternEmployeeRoleAsync(
        string $employerId,
        string $employeeId,
        string $id,
        string $roleWorkingPatternId,
        ?\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['updateRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        return $this->updateRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo($employerId, $employeeId, $id, $roleWorkingPatternId, $contractEmployeeRoleWorkingPatternRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo
     *
     * Update Employee Role Working Pattern
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to which the Employee Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateRoleWorkingPatternEmployeeRoleAsyncWithHttpInfo(
        $employerId,
        $employeeId,
        $id,
        $roleWorkingPatternId,
        $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['updateRoleWorkingPatternEmployeeRole'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternResponse';
        $request = $this->updateRoleWorkingPatternEmployeeRoleRequest($employerId, $employeeId, $id, $roleWorkingPatternId, $contractEmployeeRoleWorkingPatternRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRoleWorkingPatternEmployeeRole'
     *
     * @param  string $employerId The Id of the Employer for the Employee. (required)
     * @param  string $employeeId The Id of the Employee to which the Role belongs. (required)
     * @param  string $id The Id of the Role to which the Employee Role Working Pattern belongs. (required)
     * @param  string $roleWorkingPatternId The Id of the Employee Role Working Pattern you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractEmployeeRoleWorkingPatternRequest|null $contractEmployeeRoleWorkingPatternRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRoleWorkingPatternEmployeeRole'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRoleWorkingPatternEmployeeRoleRequest(
        $employerId,
        $employeeId,
        $id,
        $roleWorkingPatternId,
        $contractEmployeeRoleWorkingPatternRequest = null,
        string $contentType = self::contentTypes['updateRoleWorkingPatternEmployeeRole'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'employeeId' is set
        if ($employeeId === null || (is_array($employeeId) && count($employeeId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employeeId when calling updateRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateRoleWorkingPatternEmployeeRole'
            );
        }

        // verify the required parameter 'roleWorkingPatternId' is set
        if ($roleWorkingPatternId === null || (is_array($roleWorkingPatternId) && count($roleWorkingPatternId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $roleWorkingPatternId when calling updateRoleWorkingPatternEmployeeRole'
            );
        }



        $resourcePath = '/employers/{employerId}/employees/{employeeId}/roles/{id}/workingPatterns/{roleWorkingPatternId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($employeeId !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employeeId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($roleWorkingPatternId !== null) {
            $resourcePath = str_replace(
                '{' . 'roleWorkingPatternId' . '}',
                ObjectSerializer::toPathValue($roleWorkingPatternId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractEmployeeRoleWorkingPatternRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractEmployeeRoleWorkingPatternRequest));
            } else {
                $httpBody = $contractEmployeeRoleWorkingPatternRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
