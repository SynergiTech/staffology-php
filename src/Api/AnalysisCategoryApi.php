<?php
/**
 * AnalysisCategoryApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * AnalysisCategoryApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalysisCategoryApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAnalysisCategory' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createAnalysisCategoryCodeAnalysisCategory' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteAnalysisCategory' => [
            'application/json',
        ],
        'deleteAnalysisCategoryCodeAnalysisCategory' => [
            'application/json',
        ],
        'getAnalysisCategory' => [
            'application/json',
        ],
        'getAnalysisCategoryCodeAnalysisCategory' => [
            'application/json',
        ],
        'getCodesAnalysisCategory' => [
            'application/json',
        ],
        'indexAnalysisCategory' => [
            'application/json',
        ],
        'updateAnalysisCategory' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updateAnalysisCategoryCodeAnalysisCategory' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createAnalysisCategory
     *
     * Create AnalysisCategory
     *
     * @param  string $employerId employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse
     */
    public function createAnalysisCategory(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategory'][0]
    ): \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse
    {
        list($response) = $this->createAnalysisCategoryWithHttpInfo($employerId, $contractAnalysisCategoryRequest, $contentType);
        return $response;
    }

    /**
     * Operation createAnalysisCategoryWithHttpInfo
     *
     * Create AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAnalysisCategoryWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategory'][0]
    ): array
    {
        $request = $this->createAnalysisCategoryRequest($employerId, $contractAnalysisCategoryRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAnalysisCategoryAsync
     *
     * Create AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAnalysisCategoryAsync(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->createAnalysisCategoryAsyncWithHttpInfo($employerId, $contractAnalysisCategoryRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAnalysisCategoryAsyncWithHttpInfo
     *
     * Create AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse';
        $request = $this->createAnalysisCategoryRequest($employerId, $contractAnalysisCategoryRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAnalysisCategory'
     *
     * @param  string $employerId (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAnalysisCategoryRequest(
        string $employerId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createAnalysisCategory'
            );
        }



        $resourcePath = '/employers/{employerId}/analysiscategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAnalysisCategoryRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAnalysisCategoryRequest));
            } else {
                $httpBody = $contractAnalysisCategoryRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAnalysisCategoryCodeAnalysisCategory
     *
     * Create AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to create code (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse
     */
    public function createAnalysisCategoryCodeAnalysisCategory(
        string $employerId,
        string $analysisCategoryId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'][0]
    ): \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse
    {
        list($response) = $this->createAnalysisCategoryCodeAnalysisCategoryWithHttpInfo($employerId, $analysisCategoryId, $contractAnalysisCategoryCodeRequest, $contentType);
        return $response;
    }

    /**
     * Operation createAnalysisCategoryCodeAnalysisCategoryWithHttpInfo
     *
     * Create AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to create code (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of |\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAnalysisCategoryCodeAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'][0]
    ): array
    {
        $request = $this->createAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $contractAnalysisCategoryCodeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAnalysisCategoryCodeAnalysisCategoryAsync
     *
     * Create AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to create code (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAnalysisCategoryCodeAnalysisCategoryAsync(
        string $employerId,
        string $analysisCategoryId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->createAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo($employerId, $analysisCategoryId, $contractAnalysisCategoryCodeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo
     *
     * Create AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to create code (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse';
        $request = $this->createAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $contractAnalysisCategoryCodeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAnalysisCategoryCodeAnalysisCategory'
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to create code (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAnalysisCategoryCodeAnalysisCategoryRequest(
        string $employerId,
        string $analysisCategoryId,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['createAnalysisCategoryCodeAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'analysisCategoryId' is set
        if ($analysisCategoryId === null || (is_array($analysisCategoryId) && count($analysisCategoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $analysisCategoryId when calling createAnalysisCategoryCodeAnalysisCategory'
            );
        }



        $resourcePath = '/employers/{employerId}/analysiscategories/{analysisCategoryId}/categorycodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($analysisCategoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'analysisCategoryId' . '}',
                ObjectSerializer::toPathValue($analysisCategoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAnalysisCategoryCodeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAnalysisCategoryCodeRequest));
            } else {
                $httpBody = $contractAnalysisCategoryCodeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAnalysisCategory
     *
     * Delete AnalysisCategory
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAnalysisCategory(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteAnalysisCategory'][0]
    ): void
    {
        $this->deleteAnalysisCategoryWithHttpInfo($employerId, $id, $contentType);
    }

    /**
     * Operation deleteAnalysisCategoryWithHttpInfo
     *
     * Delete AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteAnalysisCategory'][0]
    ): array
    {
        $request = $this->deleteAnalysisCategoryRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAnalysisCategoryAsync
     *
     * Delete AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAnalysisCategoryAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->deleteAnalysisCategoryAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAnalysisCategoryAsyncWithHttpInfo
     *
     * Delete AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAnalysisCategoryRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAnalysisCategory'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAnalysisCategoryRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['deleteAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAnalysisCategory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAnalysisCategory'
            );
        }


        $resourcePath = '/employers/{employerId}/analysiscategories/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAnalysisCategoryCodeAnalysisCategory
     *
     * Delete AnalysisCategoryCode
     *
     * @param  string $employerId employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteAnalysisCategoryCodeAnalysisCategory(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'][0]
    ): void
    {
        $this->deleteAnalysisCategoryCodeAnalysisCategoryWithHttpInfo($employerId, $analysisCategoryId, $code, $contentType);
    }

    /**
     * Operation deleteAnalysisCategoryCodeAnalysisCategoryWithHttpInfo
     *
     * Delete AnalysisCategoryCode
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAnalysisCategoryCodeAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'][0]
    ): array
    {
        $request = $this->deleteAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAnalysisCategoryCodeAnalysisCategoryAsync
     *
     * Delete AnalysisCategoryCode
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAnalysisCategoryCodeAnalysisCategoryAsync(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->deleteAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo($employerId, $analysisCategoryId, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo
     *
     * Delete AnalysisCategoryCode
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAnalysisCategoryCodeAnalysisCategory'
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAnalysisCategoryCodeAnalysisCategoryRequest(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['deleteAnalysisCategoryCodeAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'analysisCategoryId' is set
        if ($analysisCategoryId === null || (is_array($analysisCategoryId) && count($analysisCategoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $analysisCategoryId when calling deleteAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $code when calling deleteAnalysisCategoryCodeAnalysisCategory'
            );
        }


        $resourcePath = '/employers/{employerId}/analysiscategories/{analysisCategoryId}/categorycodes/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($analysisCategoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'analysisCategoryId' . '}',
                ObjectSerializer::toPathValue($analysisCategoryId),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalysisCategory
     *
     * Get AnalysisCategory
     *
     * @param  string $employerId The Id of the Employer to which the AnalysisCategory belongs. (required)
     * @param  string $id The Id of the AnalysisCategory which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse
     */
    public function getAnalysisCategory(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getAnalysisCategory'][0]
    ): \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse
    {
        list($response) = $this->getAnalysisCategoryWithHttpInfo($employerId, $id, $contentType);
        return $response;
    }

    /**
     * Operation getAnalysisCategoryWithHttpInfo
     *
     * Get AnalysisCategory
     *
     * @param  string $employerId The Id of the Employer to which the AnalysisCategory belongs. (required)
     * @param  string $id The Id of the AnalysisCategory which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getAnalysisCategory'][0]
    ): array
    {
        $request = $this->getAnalysisCategoryRequest($employerId, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalysisCategoryAsync
     *
     * Get AnalysisCategory
     *
     * @param  string $employerId The Id of the Employer to which the AnalysisCategory belongs. (required)
     * @param  string $id The Id of the AnalysisCategory which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAnalysisCategoryAsync(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->getAnalysisCategoryAsyncWithHttpInfo($employerId, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalysisCategoryAsyncWithHttpInfo
     *
     * Get AnalysisCategory
     *
     * @param  string $employerId The Id of the Employer to which the AnalysisCategory belongs. (required)
     * @param  string $id The Id of the AnalysisCategory which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse';
        $request = $this->getAnalysisCategoryRequest($employerId, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalysisCategory'
     *
     * @param  string $employerId The Id of the Employer to which the AnalysisCategory belongs. (required)
     * @param  string $id The Id of the AnalysisCategory which you want to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalysisCategoryRequest(
        string $employerId,
        string $id,
        string $contentType = self::contentTypes['getAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAnalysisCategory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getAnalysisCategory'
            );
        }


        $resourcePath = '/employers/{employerId}/analysiscategories/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnalysisCategoryCodeAnalysisCategory
     *
     * Get AnalysisCategoryCode
     *
     * @param  string $employerId employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse
     */
    public function getAnalysisCategoryCodeAnalysisCategory(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'][0]
    ): \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse
    {
        list($response) = $this->getAnalysisCategoryCodeAnalysisCategoryWithHttpInfo($employerId, $analysisCategoryId, $code, $contentType);
        return $response;
    }

    /**
     * Operation getAnalysisCategoryCodeAnalysisCategoryWithHttpInfo
     *
     * Get AnalysisCategoryCode
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAnalysisCategoryCodeAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'][0]
    ): array
    {
        $request = $this->getAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnalysisCategoryCodeAnalysisCategoryAsync
     *
     * Get AnalysisCategoryCode
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAnalysisCategoryCodeAnalysisCategoryAsync(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->getAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo($employerId, $analysisCategoryId, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo
     *
     * Get AnalysisCategoryCode
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse';
        $request = $this->getAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnalysisCategoryCodeAnalysisCategory'
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the AnalysisCategory to which the Code belongs. (required)
     * @param  string $code The code of the AnalysisCategoryCode you want to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAnalysisCategoryCodeAnalysisCategoryRequest(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        string $contentType = self::contentTypes['getAnalysisCategoryCodeAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'analysisCategoryId' is set
        if ($analysisCategoryId === null || (is_array($analysisCategoryId) && count($analysisCategoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $analysisCategoryId when calling getAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $code when calling getAnalysisCategoryCodeAnalysisCategory'
            );
        }


        $resourcePath = '/employers/{employerId}/analysiscategories/{analysisCategoryId}/categorycodes/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($analysisCategoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'analysisCategoryId' . '}',
                ObjectSerializer::toPathValue($analysisCategoryId),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCodesAnalysisCategory
     *
     * List AnalysisCategoryCodes
     *
     * @param  string $employerId employerId (required)
     * @param  string $analysisCategoryId The Id of the Category for which you want to list Codes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodesAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function getCodesAnalysisCategory(
        string $employerId,
        string $analysisCategoryId,
        string $contentType = self::contentTypes['getCodesAnalysisCategory'][0]
    ): array
    {
        list($response) = $this->getCodesAnalysisCategoryWithHttpInfo($employerId, $analysisCategoryId, $contentType);
        return $response;
    }

    /**
     * Operation getCodesAnalysisCategoryWithHttpInfo
     *
     * List AnalysisCategoryCodes
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the Category for which you want to list Codes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodesAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCodesAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $contentType = self::contentTypes['getCodesAnalysisCategory'][0]
    ): array
    {
        $request = $this->getCodesAnalysisCategoryRequest($employerId, $analysisCategoryId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCodesAnalysisCategoryAsync
     *
     * List AnalysisCategoryCodes
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the Category for which you want to list Codes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodesAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCodesAnalysisCategoryAsync(
        string $employerId,
        string $analysisCategoryId,
        string $contentType = self::contentTypes['getCodesAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->getCodesAnalysisCategoryAsyncWithHttpInfo($employerId, $analysisCategoryId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCodesAnalysisCategoryAsyncWithHttpInfo
     *
     * List AnalysisCategoryCodes
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the Category for which you want to list Codes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodesAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCodesAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $contentType = self::contentTypes['getCodesAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->getCodesAnalysisCategoryRequest($employerId, $analysisCategoryId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCodesAnalysisCategory'
     *
     * @param  string $employerId (required)
     * @param  string $analysisCategoryId The Id of the Category for which you want to list Codes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCodesAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCodesAnalysisCategoryRequest(
        string $employerId,
        string $analysisCategoryId,
        string $contentType = self::contentTypes['getCodesAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getCodesAnalysisCategory'
            );
        }

        // verify the required parameter 'analysisCategoryId' is set
        if ($analysisCategoryId === null || (is_array($analysisCategoryId) && count($analysisCategoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $analysisCategoryId when calling getCodesAnalysisCategory'
            );
        }


        $resourcePath = '/employers/{employerId}/analysiscategories/{analysisCategoryId}/categorycodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($analysisCategoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'analysisCategoryId' . '}',
                ObjectSerializer::toPathValue($analysisCategoryId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation indexAnalysisCategory
     *
     * List AnalysisCategories
     *
     * @param  string $employerId The Id of the Employer for which you want to list AnalysisCategories (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\Item[]
     */
    public function indexAnalysisCategory(
        string $employerId,
        string $contentType = self::contentTypes['indexAnalysisCategory'][0]
    ): array
    {
        list($response) = $this->indexAnalysisCategoryWithHttpInfo($employerId, $contentType);
        return $response;
    }

    /**
     * Operation indexAnalysisCategoryWithHttpInfo
     *
     * List AnalysisCategories
     *
     * @param  string $employerId The Id of the Employer for which you want to list AnalysisCategories (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function indexAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['indexAnalysisCategory'][0]
    ): array
    {
        $request = $this->indexAnalysisCategoryRequest($employerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\Item[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\Item[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\Item[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation indexAnalysisCategoryAsync
     *
     * List AnalysisCategories
     *
     * @param  string $employerId The Id of the Employer for which you want to list AnalysisCategories (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexAnalysisCategoryAsync(
        string $employerId,
        string $contentType = self::contentTypes['indexAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->indexAnalysisCategoryAsyncWithHttpInfo($employerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation indexAnalysisCategoryAsyncWithHttpInfo
     *
     * List AnalysisCategories
     *
     * @param  string $employerId The Id of the Employer for which you want to list AnalysisCategories (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function indexAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $contentType = self::contentTypes['indexAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\Item[]';
        $request = $this->indexAnalysisCategoryRequest($employerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'indexAnalysisCategory'
     *
     * @param  string $employerId The Id of the Employer for which you want to list AnalysisCategories (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['indexAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function indexAnalysisCategoryRequest(
        string $employerId,
        string $contentType = self::contentTypes['indexAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling indexAnalysisCategory'
            );
        }


        $resourcePath = '/employers/{employerId}/analysiscategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAnalysisCategory
     *
     * Update AnalysisCategory
     *
     * @param  string $employerId employerId (required)
     * @param  string $id id (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse
     */
    public function updateAnalysisCategory(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategory'][0]
    ): \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse
    {
        list($response) = $this->updateAnalysisCategoryWithHttpInfo($employerId, $id, $contractAnalysisCategoryRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAnalysisCategoryWithHttpInfo
     *
     * Update AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategory'][0]
    ): array
    {
        $request = $this->updateAnalysisCategoryRequest($employerId, $id, $contractAnalysisCategoryRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAnalysisCategoryAsync
     *
     * Update AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAnalysisCategoryAsync(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->updateAnalysisCategoryAsyncWithHttpInfo($employerId, $id, $contractAnalysisCategoryRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAnalysisCategoryAsyncWithHttpInfo
     *
     * Update AnalysisCategory
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryResponse';
        $request = $this->updateAnalysisCategoryRequest($employerId, $id, $contractAnalysisCategoryRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAnalysisCategory'
     *
     * @param  string $employerId (required)
     * @param  string $id (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest|null $contractAnalysisCategoryRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAnalysisCategoryRequest(
        string $employerId,
        string $id,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryRequest $contractAnalysisCategoryRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateAnalysisCategory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updateAnalysisCategory'
            );
        }



        $resourcePath = '/employers/{employerId}/analysiscategories/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAnalysisCategoryRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAnalysisCategoryRequest));
            } else {
                $httpBody = $contractAnalysisCategoryRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAnalysisCategoryCodeAnalysisCategory
     *
     * Update AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to update Analysis code (required)
     * @param  string $code The code of the Analysis category code you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse
     */
    public function updateAnalysisCategoryCodeAnalysisCategory(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'][0]
    ): \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse
    {
        list($response) = $this->updateAnalysisCategoryCodeAnalysisCategoryWithHttpInfo($employerId, $analysisCategoryId, $code, $contractAnalysisCategoryCodeRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAnalysisCategoryCodeAnalysisCategoryWithHttpInfo
     *
     * Update AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to update Analysis code (required)
     * @param  string $code The code of the Analysis category code you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAnalysisCategoryCodeAnalysisCategoryWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'][0]
    ): array
    {
        $request = $this->updateAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $code, $contractAnalysisCategoryCodeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAnalysisCategoryCodeAnalysisCategoryAsync
     *
     * Update AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to update Analysis code (required)
     * @param  string $code The code of the Analysis category code you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAnalysisCategoryCodeAnalysisCategoryAsync(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        return $this->updateAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo($employerId, $analysisCategoryId, $code, $contractAnalysisCategoryCodeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo
     *
     * Update AnalysisCategoryCode
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to update Analysis code (required)
     * @param  string $code The code of the Analysis category code you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateAnalysisCategoryCodeAnalysisCategoryAsyncWithHttpInfo(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeResponse';
        $request = $this->updateAnalysisCategoryCodeAnalysisCategoryRequest($employerId, $analysisCategoryId, $code, $contractAnalysisCategoryCodeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAnalysisCategoryCodeAnalysisCategory'
     *
     * @param  string $employerId The Id of the Employer to which the Analysis category belongs. (required)
     * @param  string $analysisCategoryId The Analysis category id for  which you want to update Analysis code (required)
     * @param  string $code The code of the Analysis category code you want to update. (required)
     * @param  \SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest|null $contractAnalysisCategoryCodeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAnalysisCategoryCodeAnalysisCategoryRequest(
        string $employerId,
        string $analysisCategoryId,
        string $code,
        ?\SynergiTech\Staffology\Model\ContractAnalysisCategoryCodeRequest $contractAnalysisCategoryCodeRequest = null,
        string $contentType = self::contentTypes['updateAnalysisCategoryCodeAnalysisCategory'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updateAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'analysisCategoryId' is set
        if ($analysisCategoryId === null || (is_array($analysisCategoryId) && count($analysisCategoryId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $analysisCategoryId when calling updateAnalysisCategoryCodeAnalysisCategory'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $code when calling updateAnalysisCategoryCodeAnalysisCategory'
            );
        }



        $resourcePath = '/employers/{employerId}/analysiscategories/{analysisCategoryId}/categorycodes/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($analysisCategoryId !== null) {
            $resourcePath = str_replace(
                '{' . 'analysisCategoryId' . '}',
                ObjectSerializer::toPathValue($analysisCategoryId),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contractAnalysisCategoryCodeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contractAnalysisCategoryCodeRequest));
            } else {
                $httpBody = $contractAnalysisCategoryCodeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
