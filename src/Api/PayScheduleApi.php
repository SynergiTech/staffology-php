<?php
/**
 * PayScheduleApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staffology Payroll API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: duane@staffology.co.uk
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Staffology\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Staffology\ApiException;
use SynergiTech\Staffology\Configuration;
use SynergiTech\Staffology\HeaderSelector;
use SynergiTech\Staffology\ObjectSerializer;

/**
 * PayScheduleApi Class Doc Comment
 *
 * @package  SynergiTech\Staffology
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayScheduleApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPaySchedule' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createWithOptionalOrdinalPaySchedule' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deletePaySchedule' => [
            'application/json',
        ],
        'deleteWithOptionalOrdinalPaySchedule' => [
            'application/json',
        ],
        'getAllPaySchedule' => [
            'application/json',
        ],
        'getPaySchedule' => [
            'application/json',
        ],
        'getPeriodsPaySchedule' => [
            'application/json',
        ],
        'getWithOptionalOrdinalPaySchedule' => [
            'application/json',
        ],
        'savePaySchedule' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'saveWithOptionalOrdinalPaySchedule' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'updatePaySchedulePeriodPaySchedule' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createPaySchedule
     *
     * Create a PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function createPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createPaySchedule'][0]
    ): void
    {
        $this->createPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);
    }

    /**
     * Operation createPayScheduleWithHttpInfo
     *
     * Create a PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createPaySchedule'][0]
    ): array
    {
        $request = $this->createPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPayScheduleAsync
     *
     * Create a PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->createPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPayScheduleAsyncWithHttpInfo
     *
     * Create a PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->createPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling createPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling createPaySchedule'
            );
        }

        // verify the required parameter 'ordinal' is set
        if ($ordinal === null || (is_array($ordinal) && count($ordinal) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ordinal when calling createPaySchedule'
            );
        }



        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($ordinal !== null) {
            $resourcePath = str_replace(
                '{' . 'ordinal' . '}',
                ObjectSerializer::toPathValue($ordinal),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paySchedule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paySchedule));
            } else {
                $httpBody = $paySchedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWithOptionalOrdinalPaySchedule
     *
     * Create a PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function createWithOptionalOrdinalPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createWithOptionalOrdinalPaySchedule'][0]
    ): void
    {
        $this->createWithOptionalOrdinalPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);
    }

    /**
     * Operation createWithOptionalOrdinalPayScheduleWithHttpInfo
     *
     * Create a PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithOptionalOrdinalPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createWithOptionalOrdinalPaySchedule'][0]
    ): array
    {
        $request = $this->createWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createWithOptionalOrdinalPayScheduleAsync
     *
     * Create a PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWithOptionalOrdinalPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->createWithOptionalOrdinalPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWithOptionalOrdinalPayScheduleAsyncWithHttpInfo
     *
     * Create a PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createWithOptionalOrdinalPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->createWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWithOptionalOrdinalPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWithOptionalOrdinalPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['createWithOptionalOrdinalPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling createWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling createWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling createWithOptionalOrdinalPaySchedule'
            );
        }




        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paySchedule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paySchedule));
            } else {
                $httpBody = $paySchedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaySchedule
     *
     * Delete PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deletePaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['deletePaySchedule'][0]
    ): void
    {
        $this->deletePayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation deletePayScheduleWithHttpInfo
     *
     * Delete PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['deletePaySchedule'][0]
    ): array
    {
        $request = $this->deletePayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePayScheduleAsync
     *
     * Delete PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['deletePaySchedule'][0]
    ): PromiseInterface
    {
        return $this->deletePayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePayScheduleAsyncWithHttpInfo
     *
     * Delete PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['deletePaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deletePayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['deletePaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deletePaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling deletePaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling deletePaySchedule'
            );
        }

        // verify the required parameter 'ordinal' is set
        if ($ordinal === null || (is_array($ordinal) && count($ordinal) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ordinal when calling deletePaySchedule'
            );
        }


        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($ordinal !== null) {
            $resourcePath = str_replace(
                '{' . 'ordinal' . '}',
                ObjectSerializer::toPathValue($ordinal),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWithOptionalOrdinalPaySchedule
     *
     * Delete PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteWithOptionalOrdinalPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['deleteWithOptionalOrdinalPaySchedule'][0]
    ): void
    {
        $this->deleteWithOptionalOrdinalPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
    }

    /**
     * Operation deleteWithOptionalOrdinalPayScheduleWithHttpInfo
     *
     * Delete PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWithOptionalOrdinalPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['deleteWithOptionalOrdinalPaySchedule'][0]
    ): array
    {
        $request = $this->deleteWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWithOptionalOrdinalPayScheduleAsync
     *
     * Delete PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWithOptionalOrdinalPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['deleteWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->deleteWithOptionalOrdinalPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWithOptionalOrdinalPayScheduleAsyncWithHttpInfo
     *
     * Delete PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteWithOptionalOrdinalPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['deleteWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWithOptionalOrdinalPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWithOptionalOrdinalPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['deleteWithOptionalOrdinalPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling deleteWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling deleteWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling deleteWithOptionalOrdinalPaySchedule'
            );
        }



        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllPaySchedule
     *
     * Get PaySchedules
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedule[]
     */
    public function getAllPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getAllPaySchedule'][0]
    ): array
    {
        list($response) = $this->getAllPayScheduleWithHttpInfo($employerId, $taxYear, $contentType);
        return $response;
    }

    /**
     * Operation getAllPayScheduleWithHttpInfo
     *
     * Get PaySchedules
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getAllPaySchedule'][0]
    ): array
    {
        $request = $this->getAllPayScheduleRequest($employerId, $taxYear, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedule[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedule[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedule[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedule[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllPayScheduleAsync
     *
     * Get PaySchedules
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getAllPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->getAllPayScheduleAsyncWithHttpInfo($employerId, $taxYear, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllPayScheduleAsyncWithHttpInfo
     *
     * Get PaySchedules
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAllPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getAllPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedule[]';
        $request = $this->getAllPayScheduleRequest($employerId, $taxYear, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        string $contentType = self::contentTypes['getAllPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getAllPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getAllPaySchedule'
            );
        }


        $resourcePath = '/employers/{employerId}/schedules/{taxYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaySchedule
     *
     * Get PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedule
     */
    public function getPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['getPaySchedule'][0]
    ): \SynergiTech\Staffology\Model\PaySchedule
    {
        list($response) = $this->getPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getPayScheduleWithHttpInfo
     *
     * Get PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['getPaySchedule'][0]
    ): array
    {
        $request = $this->getPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedule', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedule' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayScheduleAsync
     *
     * Get PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['getPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->getPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayScheduleAsyncWithHttpInfo
     *
     * Get PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['getPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
        $request = $this->getPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        string $contentType = self::contentTypes['getPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPaySchedule'
            );
        }

        // verify the required parameter 'ordinal' is set
        if ($ordinal === null || (is_array($ordinal) && count($ordinal) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ordinal when calling getPaySchedule'
            );
        }


        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($ordinal !== null) {
            $resourcePath = str_replace(
                '{' . 'ordinal' . '}',
                ObjectSerializer::toPathValue($ordinal),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPeriodsPaySchedule
     *
     * Get PaySchedulePeriods
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule periods (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for (required)
     * @param  int $ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (required)
     * @param  int|null $periodNumber Optionally specify a period number to get a result just for that period (optional)
     * @param  bool|null $includeEvents includeEvents (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPeriodsPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedulePeriod[]
     */
    public function getPeriodsPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?int $periodNumber = null,
        ?bool $includeEvents = false,
        string $contentType = self::contentTypes['getPeriodsPaySchedule'][0]
    ): array
    {
        list($response) = $this->getPeriodsPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $includeEvents, $contentType);
        return $response;
    }

    /**
     * Operation getPeriodsPayScheduleWithHttpInfo
     *
     * Get PaySchedulePeriods
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule periods (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for (required)
     * @param  int $ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (required)
     * @param  int|null $periodNumber Optionally specify a period number to get a result just for that period (optional)
     * @param  bool|null $includeEvents (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPeriodsPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedulePeriod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPeriodsPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?int $periodNumber = null,
        ?bool $includeEvents = false,
        string $contentType = self::contentTypes['getPeriodsPaySchedule'][0]
    ): array
    {
        $request = $this->getPeriodsPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $includeEvents, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedulePeriod[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedulePeriod[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedulePeriod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedulePeriod[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedulePeriod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPeriodsPayScheduleAsync
     *
     * Get PaySchedulePeriods
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule periods (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for (required)
     * @param  int $ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (required)
     * @param  int|null $periodNumber Optionally specify a period number to get a result just for that period (optional)
     * @param  bool|null $includeEvents (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPeriodsPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPeriodsPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?int $periodNumber = null,
        ?bool $includeEvents = false,
        string $contentType = self::contentTypes['getPeriodsPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->getPeriodsPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $includeEvents, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPeriodsPayScheduleAsyncWithHttpInfo
     *
     * Get PaySchedulePeriods
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule periods (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for (required)
     * @param  int $ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (required)
     * @param  int|null $periodNumber Optionally specify a period number to get a result just for that period (optional)
     * @param  bool|null $includeEvents (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPeriodsPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPeriodsPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?int $periodNumber = null,
        ?bool $includeEvents = false,
        string $contentType = self::contentTypes['getPeriodsPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedulePeriod[]';
        $request = $this->getPeriodsPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $includeEvents, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPeriodsPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule periods (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for (required)
     * @param  int $ordinal Optionally specify the second, third, fourth (etc) PaySchedule for this PayPeriod. Defaults to 1 (first) (required)
     * @param  int|null $periodNumber Optionally specify a period number to get a result just for that period (optional)
     * @param  bool|null $includeEvents (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPeriodsPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPeriodsPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?int $periodNumber = null,
        ?bool $includeEvents = false,
        string $contentType = self::contentTypes['getPeriodsPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getPeriodsPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getPeriodsPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getPeriodsPaySchedule'
            );
        }

        // verify the required parameter 'ordinal' is set
        if ($ordinal === null || (is_array($ordinal) && count($ordinal) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ordinal when calling getPeriodsPaySchedule'
            );
        }




        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}/periods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $periodNumber,
            'periodNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeEvents,
            'includeEvents', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($ordinal !== null) {
            $resourcePath = str_replace(
                '{' . 'ordinal' . '}',
                ObjectSerializer::toPathValue($ordinal),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWithOptionalOrdinalPaySchedule
     *
     * Get PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedule
     */
    public function getWithOptionalOrdinalPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['getWithOptionalOrdinalPaySchedule'][0]
    ): \SynergiTech\Staffology\Model\PaySchedule
    {
        list($response) = $this->getWithOptionalOrdinalPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType);
        return $response;
    }

    /**
     * Operation getWithOptionalOrdinalPayScheduleWithHttpInfo
     *
     * Get PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWithOptionalOrdinalPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['getWithOptionalOrdinalPaySchedule'][0]
    ): array
    {
        $request = $this->getWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedule', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedule' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWithOptionalOrdinalPayScheduleAsync
     *
     * Get PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getWithOptionalOrdinalPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['getWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->getWithOptionalOrdinalPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWithOptionalOrdinalPayScheduleAsyncWithHttpInfo
     *
     * Get PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getWithOptionalOrdinalPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['getWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
        $request = $this->getWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWithOptionalOrdinalPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to get the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to retrieve details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that you want to retrieve details for. (required)
     * @param  int|null $ordinal (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWithOptionalOrdinalPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        string $contentType = self::contentTypes['getWithOptionalOrdinalPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling getWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling getWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling getWithOptionalOrdinalPaySchedule'
            );
        }



        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation savePaySchedule
     *
     * Update PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['savePaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedule
     */
    public function savePaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['savePaySchedule'][0]
    ): \SynergiTech\Staffology\Model\PaySchedule
    {
        list($response) = $this->savePayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);
        return $response;
    }

    /**
     * Operation savePayScheduleWithHttpInfo
     *
     * Update PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['savePaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function savePayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['savePaySchedule'][0]
    ): array
    {
        $request = $this->savePayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedule', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedule' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation savePayScheduleAsync
     *
     * Update PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['savePaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function savePayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['savePaySchedule'][0]
    ): PromiseInterface
    {
        return $this->savePayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation savePayScheduleAsyncWithHttpInfo
     *
     * Update PaySchedule
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['savePaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function savePayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['savePaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
        $request = $this->savePayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'savePaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int $ordinal Specify if this is the first, second, third (etc) PaySchedule for this PayPeriod. Use 1 for the first, 2 for the second, etc. (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['savePaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function savePayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['savePaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling savePaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling savePaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling savePaySchedule'
            );
        }

        // verify the required parameter 'ordinal' is set
        if ($ordinal === null || (is_array($ordinal) && count($ordinal) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ordinal when calling savePaySchedule'
            );
        }



        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($ordinal !== null) {
            $resourcePath = str_replace(
                '{' . 'ordinal' . '}',
                ObjectSerializer::toPathValue($ordinal),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paySchedule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paySchedule));
            } else {
                $httpBody = $paySchedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveWithOptionalOrdinalPaySchedule
     *
     * Update PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedule
     */
    public function saveWithOptionalOrdinalPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['saveWithOptionalOrdinalPaySchedule'][0]
    ): \SynergiTech\Staffology\Model\PaySchedule
    {
        list($response) = $this->saveWithOptionalOrdinalPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);
        return $response;
    }

    /**
     * Operation saveWithOptionalOrdinalPayScheduleWithHttpInfo
     *
     * Update PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveWithOptionalOrdinalPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['saveWithOptionalOrdinalPaySchedule'][0]
    ): array
    {
        $request = $this->saveWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedule', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedule' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveWithOptionalOrdinalPayScheduleAsync
     *
     * Update PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function saveWithOptionalOrdinalPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['saveWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->saveWithOptionalOrdinalPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveWithOptionalOrdinalPayScheduleAsyncWithHttpInfo
     *
     * Update PaySchedule (deprecated)
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function saveWithOptionalOrdinalPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['saveWithOptionalOrdinalPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedule';
        $request = $this->saveWithOptionalOrdinalPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $paySchedule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveWithOptionalOrdinalPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedule (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for. (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for. (required)
     * @param  int|null $ordinal (optional)
     * @param  \SynergiTech\Staffology\Model\PaySchedule|null $paySchedule (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveWithOptionalOrdinalPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveWithOptionalOrdinalPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        ?int $ordinal = null,
        ?\SynergiTech\Staffology\Model\PaySchedule $paySchedule = null,
        string $contentType = self::contentTypes['saveWithOptionalOrdinalPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling saveWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling saveWithOptionalOrdinalPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling saveWithOptionalOrdinalPaySchedule'
            );
        }




        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordinal,
            'ordinal', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paySchedule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paySchedule));
            } else {
                $httpBody = $paySchedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaySchedulePeriodPaySchedule
     *
     * Update PaySchedulePeriod
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedulePeriod (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for (required)
     * @param  int $ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod. (required)
     * @param  int $periodNumber Specify the number of the period that you want to update the PaymentDate for (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedulePeriod|null $paySchedulePeriod paySchedulePeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySchedulePeriodPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Staffology\Model\PaySchedulePeriod
     */
    public function updatePaySchedulePeriodPaySchedule(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        int $periodNumber,
        ?\SynergiTech\Staffology\Model\PaySchedulePeriod $paySchedulePeriod = null,
        string $contentType = self::contentTypes['updatePaySchedulePeriodPaySchedule'][0]
    ): \SynergiTech\Staffology\Model\PaySchedulePeriod
    {
        list($response) = $this->updatePaySchedulePeriodPayScheduleWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $paySchedulePeriod, $contentType);
        return $response;
    }

    /**
     * Operation updatePaySchedulePeriodPayScheduleWithHttpInfo
     *
     * Update PaySchedulePeriod
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedulePeriod (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for (required)
     * @param  int $ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod. (required)
     * @param  int $periodNumber Specify the number of the period that you want to update the PaymentDate for (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedulePeriod|null $paySchedulePeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySchedulePeriodPaySchedule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Staffology\Model\PaySchedulePeriod, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaySchedulePeriodPayScheduleWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        int $periodNumber,
        ?\SynergiTech\Staffology\Model\PaySchedulePeriod $paySchedulePeriod = null,
        string $contentType = self::contentTypes['updatePaySchedulePeriodPaySchedule'][0]
    ): array
    {
        $request = $this->updatePaySchedulePeriodPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $paySchedulePeriod, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Staffology\Model\PaySchedulePeriod', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Staffology\Model\PaySchedulePeriod' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Staffology\Model\PaySchedulePeriod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Staffology\Model\PaySchedulePeriod';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Staffology\Model\PaySchedulePeriod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaySchedulePeriodPayScheduleAsync
     *
     * Update PaySchedulePeriod
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedulePeriod (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for (required)
     * @param  int $ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod. (required)
     * @param  int $periodNumber Specify the number of the period that you want to update the PaymentDate for (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedulePeriod|null $paySchedulePeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySchedulePeriodPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaySchedulePeriodPayScheduleAsync(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        int $periodNumber,
        ?\SynergiTech\Staffology\Model\PaySchedulePeriod $paySchedulePeriod = null,
        string $contentType = self::contentTypes['updatePaySchedulePeriodPaySchedule'][0]
    ): PromiseInterface
    {
        return $this->updatePaySchedulePeriodPayScheduleAsyncWithHttpInfo($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $paySchedulePeriod, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaySchedulePeriodPayScheduleAsyncWithHttpInfo
     *
     * Update PaySchedulePeriod
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedulePeriod (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for (required)
     * @param  int $ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod. (required)
     * @param  int $periodNumber Specify the number of the period that you want to update the PaymentDate for (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedulePeriod|null $paySchedulePeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySchedulePeriodPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaySchedulePeriodPayScheduleAsyncWithHttpInfo(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        int $periodNumber,
        ?\SynergiTech\Staffology\Model\PaySchedulePeriod $paySchedulePeriod = null,
        string $contentType = self::contentTypes['updatePaySchedulePeriodPaySchedule'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Staffology\Model\PaySchedulePeriod';
        $request = $this->updatePaySchedulePeriodPayScheduleRequest($employerId, $payPeriod, $taxYear, $ordinal, $periodNumber, $paySchedulePeriod, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaySchedulePeriodPaySchedule'
     *
     * @param  string $employerId The Id of the Employer for which you want to update the PaySchedulePeriod (required)
     * @param  \SynergiTech\Staffology\Model\PayPeriods $payPeriod The PayPeriod (ie, Monthly) that you want to update details for (required)
     * @param  \SynergiTech\Staffology\Model\TaxYear $taxYear The year that the PaySchedule is for (required)
     * @param  int $ordinal Specify the first, second, third (etc) PaySchedule for this PayPeriod. (required)
     * @param  int $periodNumber Specify the number of the period that you want to update the PaymentDate for (required)
     * @param  \SynergiTech\Staffology\Model\PaySchedulePeriod|null $paySchedulePeriod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaySchedulePeriodPaySchedule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaySchedulePeriodPayScheduleRequest(
        string $employerId,
        \SynergiTech\Staffology\Model\PayPeriods $payPeriod,
        \SynergiTech\Staffology\Model\TaxYear $taxYear,
        int $ordinal,
        int $periodNumber,
        ?\SynergiTech\Staffology\Model\PaySchedulePeriod $paySchedulePeriod = null,
        string $contentType = self::contentTypes['updatePaySchedulePeriodPaySchedule'][0]
    ): Request
    {

        // verify the required parameter 'employerId' is set
        if ($employerId === null || (is_array($employerId) && count($employerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $employerId when calling updatePaySchedulePeriodPaySchedule'
            );
        }

        // verify the required parameter 'payPeriod' is set
        if ($payPeriod === null || (is_array($payPeriod) && count($payPeriod) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payPeriod when calling updatePaySchedulePeriodPaySchedule'
            );
        }

        // verify the required parameter 'taxYear' is set
        if ($taxYear === null || (is_array($taxYear) && count($taxYear) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $taxYear when calling updatePaySchedulePeriodPaySchedule'
            );
        }

        // verify the required parameter 'ordinal' is set
        if ($ordinal === null || (is_array($ordinal) && count($ordinal) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ordinal when calling updatePaySchedulePeriodPaySchedule'
            );
        }

        // verify the required parameter 'periodNumber' is set
        if ($periodNumber === null || (is_array($periodNumber) && count($periodNumber) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $periodNumber when calling updatePaySchedulePeriodPaySchedule'
            );
        }



        $resourcePath = '/employers/{employerId}/schedules/{taxYear}/{payPeriod}/{ordinal}/periods/{periodNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employerId !== null) {
            $resourcePath = str_replace(
                '{' . 'employerId' . '}',
                ObjectSerializer::toPathValue($employerId),
                $resourcePath
            );
        }
        // path params
        if ($payPeriod !== null) {
            $resourcePath = str_replace(
                '{' . 'payPeriod' . '}',
                ObjectSerializer::toPathValue($payPeriod->value),
                $resourcePath
            );
        }
        // path params
        if ($taxYear !== null) {
            $resourcePath = str_replace(
                '{' . 'taxYear' . '}',
                ObjectSerializer::toPathValue($taxYear->value),
                $resourcePath
            );
        }
        // path params
        if ($ordinal !== null) {
            $resourcePath = str_replace(
                '{' . 'ordinal' . '}',
                ObjectSerializer::toPathValue($ordinal),
                $resourcePath
            );
        }
        // path params
        if ($periodNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'periodNumber' . '}',
                ObjectSerializer::toPathValue($periodNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paySchedulePeriod)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paySchedulePeriod));
            } else {
                $httpBody = $paySchedulePeriod;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
